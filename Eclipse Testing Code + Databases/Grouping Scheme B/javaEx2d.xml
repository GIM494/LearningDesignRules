<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="0.9.5" language="Java" filename="javaEx2d.java"><comment type="line">// Import</comment>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Date</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>*</name></name>;</import>

<class>class <name>F</name> <block>{
  <decl_stmt><decl><type><name>string</name></type> <name>firstName</name></decl>;</decl_stmt>
  <constructor><name>F</name><parameter_list>(<parameter><decl><type><name>string</name></type> <name>_firstName</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><name>firstName</name> <operator>=</operator> <name>_firstName</name></expr>;</expr_stmt>
  }</block></constructor>

  <function><type><name>void</name></type> <name>printName</name><parameter_list>()</parameter_list><block>{
    <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"First Name: "</literal> <operator>+</operator> <name>firstName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><type><name>void</name></type> <name>extraTest</name><parameter_list>()</parameter_list><block>{
    <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"Test"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><type><name>void</name></type> <name>notPresentInChildren</name><parameter_list>()</parameter_list><block>{
    <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"This one is not in the others!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

}</block></class>

<class>class <name>C</name> <super><extends>extends <name>F</name></extends></super> <block>{
  <decl_stmt><decl><type><name>string</name></type> <name>lastName</name></decl>;</decl_stmt>

  <constructor><name>C</name><parameter_list>(<parameter><decl><type><name>string</name></type> <name>_firstName</name></decl></parameter>, <parameter><decl><type><name>string</name></type> <name>_lastName</name></decl></parameter>)</parameter_list><block>{
    <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>_firstName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>lastName</name> <operator>=</operator> <name>_lastName</name></expr>;</expr_stmt>
  }</block></constructor>

  <function><type><name>void</name></type> <name>printFullName</name><parameter_list>()</parameter_list><block>{
    <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"Last Name: "</literal> <operator>+</operator> <name>lastName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><type><name>void</name></type> <name>printName</name><parameter_list>()</parameter_list><block>{
    <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"First Name: "</literal> <operator>+</operator> <name>firstName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

}</block></class>

<class>class <name>B</name> <super><extends>extends <name>F</name></extends></super><block>{

  <constructor><name>B</name><parameter_list>()</parameter_list><block>{
    <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"Object C created"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></constructor>

  <function><type><name>void</name></type> <name>printName</name><parameter_list>()</parameter_list><block>{
    <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"First Name: "</literal> <operator>+</operator> <name>firstName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><type><name>void</name></type> <name>extraTest</name><parameter_list>()</parameter_list><block>{
    <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"Test"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

}</block></class>


<class>class <name>G</name> <super><extends>extends <name>F</name></extends></super><block>{

  <constructor><name>G</name><parameter_list>()</parameter_list><block>{
    <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"Object C created"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></constructor>

  <function><type><name>void</name></type> <name>printName</name><parameter_list>()</parameter_list><block>{
    <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"First Name: "</literal> <operator>+</operator> <name>firstName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><type><name>void</name></type> <name>extraTest</name><parameter_list>()</parameter_list><block>{
    <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"Test"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><type><name>void</name></type> <name>sayMessage</name><parameter_list>(<parameter><decl><type><name>string</name></type> <name>m</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>)</parameter_list><block>{

    <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>i</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block>{
      <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>()</argument_list></call></expr></expr_stmt>
    }</block></for>

  }</block></function>


}</block></class>



<class>class <name>E</name> <super><extends>extends <name>B</name></extends></super><block>{

  <constructor><name>E</name><parameter_list>()</parameter_list><block>{
    <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"Object C created"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></constructor>

  <function><type><name>void</name></type> <name>printName</name><parameter_list>()</parameter_list><block>{
    <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>printlin</name></name><argument_list>(<argument><expr><literal type="string">"First Name: "</literal> <operator>+</operator> <name>firstName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><type><name>void</name></type> <name>extraTest</name><parameter_list>()</parameter_list><block>{
    <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>printlin</name></name><argument_list>(<argument><expr><literal type="string">"Test"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

}</block></class>


<class>class <name>A</name> <super><extends>extends <name>C</name></extends></super><block>{

  <constructor><name>A</name><parameter_list>()</parameter_list><block>{
    <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"Object C created"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></constructor>

  <function><type><name>void</name></type> <name>printName</name><parameter_list>()</parameter_list><block>{
    <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>printlin</name></name><argument_list>(<argument><expr><literal type="string">"First Name: "</literal> <operator>+</operator> <name>firstName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><type><name>void</name></type> <name>extraTest</name><parameter_list>()</parameter_list><block>{
    <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>printlin</name></name><argument_list>(<argument><expr><literal type="string">"Test"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

}</block></class>


<class>class <name>D</name> <super><extends>extends <name>A</name></extends></super><block>{

  <constructor><name>D</name><parameter_list>()</parameter_list><block>{
    <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"Object C created"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></constructor>

  <function><type><name>void</name></type> <name>printName</name><parameter_list>()</parameter_list><block>{
    <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>printlin</name></name><argument_list>(<argument><expr><literal type="string">"First Name: "</literal> <operator>+</operator> <name>firstName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><type><name>void</name></type> <name>extraTest</name><parameter_list>()</parameter_list><block>{
    <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>printlin</name></name><argument_list>(<argument><expr><literal type="string">"Test"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

}</block></class>
</unit>
