<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="0.9.5">

<unit revision="0.9.5" language="Java" filename="Command Peripheral Classes/ADTCommand.java" hash="fc8dae16c87edffda64d9c2b1343636b49b2f995"><package>package <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>commands</name></name>;</package>


<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashMap</name></name>;</import>


<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>entities</name><operator>.</operator><name>artifacts</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>servlets</name><operator>.</operator><name>ThreadContext</name></name>;</import>

<class><specifier>public</specifier> <specifier>abstract</specifier> class <name>ADTCommand</name> <super><extends>extends <name>Command</name></extends></super> <block>{
	<decl_stmt><decl><specifier>protected</specifier> <type><name>long</name></type> <name>ADTId</name></decl>;</decl_stmt>

	<function><specifier>public</specifier> <specifier>static</specifier> <type><name>ADTCommand</name></type> <name>create</name> <parameter_list>(<parameter><decl><type><name>String</name></type> <name>description</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>structure</name></decl></parameter>, <parameter><decl><type><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>examples</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>isApiArtifact</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>isReadOnly</name></decl></parameter>)</parameter_list> <block>{
		<return>return <expr><operator>new</operator> <call><name>Create</name><argument_list>( <argument><expr><name>description</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>structure</name></expr></argument>, <argument><expr><name>examples</name></expr></argument>, <argument><expr><name>isApiArtifact</name></expr></argument>, <argument><expr><name>isReadOnly</name></expr></argument> )</argument_list></call></expr>;</return>
	}</block></function>

	<function><specifier>public</specifier> <specifier>static</specifier> <type><name>ADTCommand</name></type> <name>update</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>ADTId</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>description</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>structure</name></decl></parameter>)</parameter_list> <block>{
		<return>return <expr><operator>new</operator> <call><name>Update</name><argument_list>(<argument><expr><name>ADTId</name></expr></argument>, <argument><expr><name>description</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>structure</name></expr></argument> )</argument_list></call></expr>;</return>
	}</block></function>

	<function><specifier>public</specifier> <specifier>static</specifier> <type><name>ADTCommand</name></type> <name>delete</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>ADTId</name></decl></parameter>)</parameter_list> <block>{
		<return>return <expr><operator>new</operator> <call><name>Delete</name><argument_list>(<argument><expr><name>ADTId</name></expr></argument>)</argument_list></call></expr>;</return>
	}</block></function>

	<constructor><specifier>private</specifier> <name>ADTCommand</name><parameter_list>(<parameter><decl><type><name>Long</name></type> <name>ADTId</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>ADTId</name></name> <operator>=</operator> <name>ADTId</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>queueCommand</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></constructor>

	<comment type="line">// All constructors for ADTCommand MUST call queueCommand and the end of</comment>
	<comment type="line">// the constructor to add the</comment>
	<comment type="line">// command to the queue.</comment>
	<function><specifier>private</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>queueCommand</name><parameter_list>(<parameter><decl><type><name>Command</name></type> <name>command</name></decl></parameter>)</parameter_list> <block>{
		<decl_stmt><decl><type><name>ThreadContext</name></type> <name>threadContext</name> <init>= <expr><call><name><name>ThreadContext</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>threadContext</name><operator>.</operator><name>addCommand</name></name><argument_list>(<argument><expr><name>command</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<function><specifier>public</specifier> <type><name>void</name></type> <name>execute</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>String</name></type> <name>projectId</name></decl></parameter>)</parameter_list> <block>{
    	<if>if <condition>(<expr><name>ADTId</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
			<decl_stmt><decl><type><name>ADT</name></type> <name>adt</name> <init>= <expr><call><name><name>ADT</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><name>ADTId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

			<if>if <condition>(<expr><name>adt</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then>
				<block type="pseudo"><expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name>
						<operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"errore Cannot execute ADTCommand. Could not find ADT for ADTID "</literal>
								<operator>+</operator> <name>ADTId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
			<else>else <block>{
				<expr_stmt><expr><call><name>execute</name><argument_list>(<argument><expr><name>adt</name></expr></argument>, <argument><expr><name>projectId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></else></if>
		}</block></then> <else>else
			<block type="pseudo"><expr_stmt><expr><call><name>execute</name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>projectId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>

	}</block></function>

	<function_decl><specifier>public</specifier> <specifier>abstract</specifier> <type><name>void</name></type> <name>execute</name><parameter_list>(<parameter><decl><type><name>ADT</name></type> <name>ADT</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>projectId</name></decl></parameter>)</parameter_list>;</function_decl>

	<class><specifier>protected</specifier> <specifier>static</specifier> class <name>Create</name> <super><extends>extends <name>ADTCommand</name></extends></super> <block>{
		<decl_stmt><decl><specifier>private</specifier> <type><name>String</name></type> <name>description</name></decl>;</decl_stmt>
		<decl_stmt><decl><specifier>private</specifier> <type><name>String</name></type> <name>name</name></decl>;</decl_stmt>
		<decl_stmt><decl><specifier>private</specifier> <type><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>structure</name></decl>;</decl_stmt>
		<decl_stmt><decl><specifier>private</specifier> <type><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>examples</name></decl>;</decl_stmt>
		<decl_stmt><decl><specifier>private</specifier> <type><name>boolean</name></type> <name>isApiArtifact</name></decl>;</decl_stmt>
		<decl_stmt><decl><specifier>private</specifier> <type><name>boolean</name></type> <name>isReadOnly</name></decl>;</decl_stmt>


		<constructor><specifier>public</specifier> <name>Create</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>description</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>structure</name></decl></parameter>,<parameter><decl><type><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>examples</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>isApiArtifact</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>isReadOnly</name></decl></parameter>)</parameter_list> <block>{
			<expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><literal type="number">0L</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>this</name><operator>.</operator><name>description</name></name>   <operator>=</operator> <name>description</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>this</name><operator>.</operator><name>name</name></name>		   <operator>=</operator> <name>name</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>this</name><operator>.</operator><name>structure</name></name>	   <operator>=</operator> <name>structure</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>this</name><operator>.</operator><name>examples</name></name>	   <operator>=</operator> <name>examples</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>this</name><operator>.</operator><name>isApiArtifact</name></name> <operator>=</operator> <name>isApiArtifact</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>this</name><operator>.</operator><name>isReadOnly</name></name>    <operator>=</operator> <name>isReadOnly</name></expr>;</expr_stmt>

		}</block></constructor>

		<function><specifier>public</specifier> <type><name>void</name></type> <name>execute</name><parameter_list>(<parameter><decl><type><name>ADT</name></type> <name>ADT</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>projectId</name></decl></parameter>)</parameter_list> <block>{
			<expr_stmt><expr><operator>new</operator> <call><name>ADT</name><argument_list>( <argument><expr><name>description</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>structure</name></expr></argument>, <argument><expr><name>examples</name></expr></argument>, <argument><expr><name>isApiArtifact</name></expr></argument>, <argument><expr><name>isReadOnly</name></expr></argument> , <argument><expr><name>projectId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></function>
	}</block></class>

	<class><specifier>protected</specifier> <specifier>static</specifier> class <name>Update</name> <super><extends>extends <name>ADTCommand</name></extends></super> <block>{

		<decl_stmt><decl><specifier>private</specifier> <type><name>String</name></type> <name>description</name></decl>;</decl_stmt>
		<decl_stmt><decl><specifier>private</specifier> <type><name>String</name></type> <name>name</name></decl>;</decl_stmt>
		<decl_stmt><decl><specifier>private</specifier> <type><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>structure</name></decl>;</decl_stmt>

		<constructor><specifier>public</specifier> <name>Update</name><parameter_list>( <parameter><decl><type><name>long</name></type> <name>ADTId</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>description</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>structure</name></decl></parameter> )</parameter_list> <block>{
			<expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>ADTId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>this</name><operator>.</operator><name>description</name></name>  <operator>=</operator> <name>description</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>this</name><operator>.</operator><name>name</name></name>		  <operator>=</operator> <name>name</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>this</name><operator>.</operator><name>structure</name></name>    <operator>=</operator> <name>structure</name></expr>;</expr_stmt>
		}</block></constructor>

		<function><specifier>public</specifier> <type><name>void</name></type> <name>execute</name><parameter_list>(<parameter><decl><type><name>ADT</name></type> <name>adt</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>projectId</name></decl></parameter>)</parameter_list> <block>{
			<expr_stmt><expr><call><name><name>adt</name><operator>.</operator><name>update</name></name><argument_list>( <argument><expr><name>description</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>structure</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
		}</block></function>
	}</block></class>

	<class><specifier>protected</specifier> <specifier>static</specifier> class <name>Delete</name> <super><extends>extends <name>ADTCommand</name></extends></super> <block>{
		<constructor><specifier>public</specifier> <name>Delete</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>ADTId</name></decl></parameter>)</parameter_list> <block>{
			<expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>ADTId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></constructor>

		<function><specifier>public</specifier> <type><name>void</name></type> <name>execute</name><parameter_list>(<parameter><decl><type><name>ADT</name></type> <name>adt</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>projectId</name></decl></parameter>)</parameter_list> <block>{
			<expr_stmt><expr><call><name><name>adt</name><operator>.</operator><name>delete</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		}</block></function>
	}</block></class>

}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="Command Peripheral Classes/FunctionCommand.java" hash="df0f1eb462e67ff490bb8c30d10505b0f174511e"><package>package <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>commands</name></name>;</package>


<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>dto</name><operator>.</operator><name>ajax</name><operator>.</operator><name>microtask</name><operator>.</operator><name>submission</name><operator>.</operator><name>FunctionDTO</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>dto</name><operator>.</operator><name>ajax</name><operator>.</operator><name>microtask</name><operator>.</operator><name>submission</name><operator>.</operator><name>FunctionParameterDTO</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>dto</name><operator>.</operator><name>ajax</name><operator>.</operator><name>microtask</name><operator>.</operator><name>submission</name><operator>.</operator><name>TestDTO</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>entities</name><operator>.</operator><name>artifacts</name><operator>.</operator><name>Function</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>servlets</name><operator>.</operator><name>ThreadContext</name></name>;</import>

<class><specifier>public</specifier> <specifier>abstract</specifier> class <name>FunctionCommand</name> <super><extends>extends <name>Command</name></extends></super> <block>{
	<decl_stmt><decl><specifier>protected</specifier> <type><name>long</name></type> <name>functionId</name></decl>;</decl_stmt>

	<function><specifier>public</specifier> <specifier>static</specifier> <type><name>FunctionCommand</name></type> <name>addClientRequestsArtifacts</name><parameter_list>(<parameter><decl><type><name>FunctionDTO</name></type> <name>functionDTO</name></decl></parameter>)</parameter_list> <block>{
		<return>return <expr><operator>new</operator> <call><name>AddClientRequestsArtifacts</name><argument_list>(<argument><expr><name>functionDTO</name></expr></argument>)</argument_list></call></expr>;</return>
	}</block></function>

	<function><specifier>public</specifier> <specifier>static</specifier> <type><name>FunctionCommand</name></type> <name>create</name><parameter_list>(<parameter><decl><type><name>FunctionDTO</name></type> <name>functionDTO</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>isApiArtifact</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>isReadOnly</name></decl></parameter>)</parameter_list> <block>{
		<return>return <expr><operator>new</operator> <call><name>Create</name><argument_list>(<argument><expr><name>functionDTO</name></expr></argument>, <argument><expr><name>isApiArtifact</name></expr></argument>, <argument><expr><name>isReadOnly</name></expr></argument>)</argument_list></call></expr>;</return>
	}</block></function>

	<function><specifier>public</specifier> <specifier>static</specifier> <type><name>FunctionCommand</name></type> <name>createRequestedFunction</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>requestingFunctionId</name></decl></parameter>, <parameter><decl><type><name>FunctionDTO</name></type> <name>requestedFunction</name></decl></parameter>)</parameter_list> <block>{
		<return>return <expr><operator>new</operator> <call><name>CreateRequestedFunction</name><argument_list>( <argument><expr><name>requestingFunctionId</name></expr></argument>, <argument><expr><name>requestedFunction</name></expr></argument>)</argument_list></call></expr>;</return>
	}</block></function>

	<function><specifier>public</specifier> <specifier>static</specifier> <type><name>FunctionCommand</name></type> <name>removeCaller</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>functionId</name></decl></parameter>,	<parameter><decl><type><name>long</name></type> <name>callerFunctionID</name></decl></parameter>)</parameter_list> <block>{
		<return>return <expr><operator>new</operator> <call><name>RemoveCaller</name><argument_list>(<argument><expr><name>functionId</name></expr></argument>, <argument><expr><name>callerFunctionID</name></expr></argument>)</argument_list></call></expr>;</return>
	}</block></function>

	<function><specifier>public</specifier> <specifier>static</specifier> <type><name>FunctionCommand</name></type> <name>addCaller</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>functionId</name></decl></parameter>,
			<parameter><decl><type><name>long</name></type> <name>callerFunctionID</name></decl></parameter>)</parameter_list> <block>{
		<return>return <expr><operator>new</operator> <call><name>AddCaller</name><argument_list>(<argument><expr><name>functionId</name></expr></argument>, <argument><expr><name>callerFunctionID</name></expr></argument>)</argument_list></call></expr>;</return>
	}</block></function>

	<function><specifier>public</specifier> <specifier>static</specifier> <type><name>FunctionCommand</name></type> <name>addCallee</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>functionId</name></decl></parameter>,
			<parameter><decl><type><name>long</name></type> <name>calleeFunctionId</name></decl></parameter>)</parameter_list> <block>{
		<return>return <expr><operator>new</operator> <call><name>AddCaller</name><argument_list>(<argument><expr><name>functionId</name></expr></argument>, <argument><expr><name>calleeFunctionId</name></expr></argument>)</argument_list></call></expr>;</return>
	}</block></function>

	<function><specifier>public</specifier> <specifier>static</specifier> <type><name>FunctionCommand</name></type> <name>runTests</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>functionId</name></decl></parameter>)</parameter_list> <block>{
		<return>return <expr><operator>new</operator> <call><name>RunTests</name><argument_list>(<argument><expr><name>functionId</name></expr></argument>)</argument_list></call></expr>;</return>
	}</block></function>

	<function><specifier>public</specifier> <specifier>static</specifier> <type><name>FunctionCommand</name></type> <name>submittedTestResult</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>functionId</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>jsonDTO</name></decl></parameter>)</parameter_list><block>{
		<return>return <expr><operator>new</operator> <call><name>SubmittedTestResult</name><argument_list>(<argument><expr><name>functionId</name></expr></argument>, <argument><expr><name>jsonDTO</name></expr></argument>)</argument_list></call></expr>;</return>
	}</block></function>


	<function><specifier>public</specifier> <specifier>static</specifier> <type><name>FunctionCommand</name></type> <name>calleeChangedInterface</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>functionId</name></decl></parameter>,
			<parameter><decl><type><name>long</name></type> <name>calleeId</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>oldCalleeVersion</name></decl></parameter>)</parameter_list> <block>{
		<return>return <expr><operator>new</operator> <call><name>CalleeChangedInterface</name><argument_list>(<argument><expr><name>functionId</name></expr></argument>, <argument><expr><name>calleeId</name></expr></argument>,
				<argument><expr><name>oldCalleeVersion</name></expr></argument>)</argument_list></call></expr>;</return>
	}</block></function>

	<function><specifier>public</specifier> <specifier>static</specifier> <type><name>FunctionCommand</name></type> <name>calleeBecomeDeactivated</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>functionId</name></decl></parameter>,
			<parameter><decl><type><name>long</name></type> <name>calleeId</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>disputeText</name></decl></parameter>)</parameter_list> <block>{
		<return>return <expr><operator>new</operator> <call><name>CalleeBecomeDeactivated</name><argument_list>(<argument><expr><name>functionId</name></expr></argument>, <argument><expr><name>calleeId</name></expr></argument>, <argument><expr><name>disputeText</name></expr></argument>)</argument_list></call></expr>;</return>
	}</block></function>

	<function><specifier>public</specifier> <specifier>static</specifier> <type><name>FunctionCommand</name></type> <name>addTest</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>functionId</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>testId</name></decl></parameter>)</parameter_list> <block>{
		<return>return <expr><operator>new</operator> <call><name>AddTest</name><argument_list>(<argument><expr><name>functionId</name></expr></argument>, <argument><expr><name>testId</name></expr></argument>)</argument_list></call></expr>;</return>
	}</block></function>

	<function><specifier>public</specifier> <specifier>static</specifier> <type><name>FunctionCommand</name></type> <name>incrementTestSuite</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>functionId</name></decl></parameter>)</parameter_list> <block>{
		<return>return <expr><operator>new</operator> <call><name>IncrementTestSuite</name><argument_list>(<argument><expr><name>functionId</name></expr></argument>)</argument_list></call></expr>;</return>
	}</block></function>


	<function><specifier>public</specifier> <specifier>static</specifier> <type><name>FunctionCommand</name></type> <name>lookForWork</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>functionId</name></decl></parameter>)</parameter_list> <block>{
		<return>return <expr><operator>new</operator> <call><name>LookForWork</name><argument_list>(<argument><expr><name>functionId</name></expr></argument>)</argument_list></call></expr>;</return>
	}</block></function>

	<constructor><specifier>private</specifier> <name>FunctionCommand</name><parameter_list>(<parameter><decl><type><name>Long</name></type> <name>functionId</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>functionId</name></name> <operator>=</operator> <name>functionId</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>queueCommand</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></constructor>

	<comment type="line">// All constructors for FunctionCommand MUST call queueCommand by calling</comment>
	<comment type="line">// the super constructor</comment>
	<function><specifier>private</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>queueCommand</name><parameter_list>(<parameter><decl><type><name>Command</name></type> <name>command</name></decl></parameter>)</parameter_list> <block>{
		<decl_stmt><decl><type><name>ThreadContext</name></type> <name>threadContext</name> <init>= <expr><call><name><name>ThreadContext</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>threadContext</name><operator>.</operator><name>addCommand</name></name><argument_list>(<argument><expr><name>command</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>


	<function><specifier>public</specifier> <type><name>void</name></type> <name>execute</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>String</name></type> <name>projectId</name></decl></parameter>)</parameter_list> <block>{
    	<if>if <condition>(<expr><name>functionId</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
			<decl_stmt><decl><type><name>Function</name></type> <name>function</name> <init>= <expr><call><name><name>Function</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><name>functionId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<if>if <condition>(<expr><name>function</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then>
				<block type="pseudo"><expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name>
						<operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"Error Cannot execute FunctionCommand. Could not find the function for FunctionID "</literal>
								<operator>+</operator> <name>functionId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
			<else>else <block>{
				<expr_stmt><expr><call><name>execute</name><argument_list>(<argument><expr><name>function</name></expr></argument>, <argument><expr><name>projectId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></else></if>
		}</block></then> <else>else
			<block type="pseudo"><expr_stmt><expr><call><name>execute</name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>projectId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>
	}</block></function>

	<function_decl><specifier>public</specifier> <specifier>abstract</specifier> <type><name>void</name></type> <name>execute</name><parameter_list>(<parameter><decl><type><name>Function</name></type> <name>function</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>projectId</name></decl></parameter>)</parameter_list>;</function_decl>

	<class><specifier>protected</specifier> <specifier>static</specifier> class <name>AddClientRequestsArtifacts</name> <super><extends>extends <name>FunctionCommand</name></extends></super> <block>{
		<decl_stmt><decl><specifier>private</specifier> <type><name>FunctionDTO</name></type> <name>functionDTO</name></decl>;</decl_stmt>

		<constructor><specifier>public</specifier> <name>AddClientRequestsArtifacts</name><parameter_list>(<parameter><decl><type><name>FunctionDTO</name></type> <name>functionDTO</name></decl></parameter>)</parameter_list> <block>{
			<expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><literal type="number">0L</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>this</name><operator>.</operator><name>functionDTO</name></name> <operator>=</operator> <name>functionDTO</name></expr>;</expr_stmt>
		}</block></constructor>

		<function><specifier>public</specifier> <type><name>void</name></type> <name>execute</name><parameter_list>(<parameter><decl><type><name>Function</name></type> <name>function</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>projectId</name></decl></parameter>)</parameter_list> <block>{

			<decl_stmt><decl><type><name>Function</name></type> <name>funct</name> <init>= <expr><operator>new</operator> <call><name>Function</name><argument_list>(
										<argument><expr><name>functionDTO</name></expr></argument>,
										<argument><expr><literal type="boolean">true</literal></expr></argument>,
										<argument><expr><literal type="boolean">true</literal></expr></argument>,
										<argument><expr><name>projectId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

			<for>for<control>( <init><decl><type><name>TestDTO</name></type> <name>test</name> <range>: <expr><name><name>functionDTO</name><operator>.</operator><name>tests</name></name></expr></range></decl></init> )</control><block>{
				<expr_stmt><expr><call><name><name>TestCommand</name><operator>.</operator><name>create</name></name><argument_list>(<argument><expr><name>test</name></expr></argument>, <argument><expr><call><name><name>funct</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></for>
		}</block></function>
	}</block></class>

	<class><specifier>protected</specifier> <specifier>static</specifier> class <name>Create</name> <super><extends>extends <name>FunctionCommand</name></extends></super> <block>{
		<decl_stmt><decl><specifier>private</specifier> <type><name>FunctionDTO</name></type> <name>functionDTO</name></decl>;</decl_stmt>
		<decl_stmt><decl><specifier>private</specifier> <type><name>boolean</name></type> <name>isReadOnly</name></decl>;</decl_stmt>
		<decl_stmt><decl><specifier>private</specifier> <type><name>boolean</name></type> <name>isApiArtifact</name></decl>;</decl_stmt>

		<constructor><specifier>public</specifier> <name>Create</name><parameter_list>(<parameter><decl><type><name>FunctionDTO</name></type> <name>functionDTO</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>isApiArtifact</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>isReadOnly</name></decl></parameter>)</parameter_list> <block>{
			<expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><literal type="number">0L</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			
			<expr_stmt><expr><name><name>this</name><operator>.</operator><name>functionDTO</name></name>   <operator>=</operator> <name>functionDTO</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>this</name><operator>.</operator><name>isApiArtifact</name></name> <operator>=</operator> <name>isApiArtifact</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>this</name><operator>.</operator><name>isReadOnly</name></name>	   <operator>=</operator> <name>isReadOnly</name></expr>;</expr_stmt>
		}</block></constructor>

		<function><specifier>public</specifier> <type><name>void</name></type> <name>execute</name><parameter_list>(<parameter><decl><type><name>Function</name></type> <name>function</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>projectId</name></decl></parameter>)</parameter_list> <block>{
			<expr_stmt><expr><operator>new</operator> <call><name>Function</name><argument_list>(<argument><expr><name>functionDTO</name></expr></argument>, <argument><expr><name>isApiArtifact</name></expr></argument>, <argument><expr><name>isReadOnly</name></expr></argument>, <argument><expr><name>projectId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></function>
	}</block></class>

	<class><specifier>protected</specifier> <specifier>static</specifier> class <name>CreateRequestedFunction</name> <super><extends>extends <name>FunctionCommand</name></extends></super> <block>{

		<decl_stmt><decl><specifier>private</specifier> <type><name>FunctionDTO</name></type> <name>requestedFunctionDTO</name></decl>;</decl_stmt>
		<decl_stmt><decl><specifier>private</specifier> <type><name>long</name></type> <name>requestingFunctionId</name></decl>;</decl_stmt>

		<constructor><specifier>public</specifier> <name>CreateRequestedFunction</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>requestingFunctionId</name></decl></parameter>, <parameter><decl><type><name>FunctionDTO</name></type> <name>requestedFunctionDTO</name></decl></parameter>)</parameter_list> <block>{
			<expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><literal type="number">0L</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><name><name>this</name><operator>.</operator><name>requestedFunctionDTO</name></name> <operator>=</operator> <name>requestedFunctionDTO</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>this</name><operator>.</operator><name>requestingFunctionId</name></name> <operator>=</operator> <name>requestingFunctionId</name></expr>;</expr_stmt>
		}</block></constructor>

		<function><specifier>public</specifier> <type><name>void</name></type> <name>execute</name><parameter_list>(<parameter><decl><type><name>Function</name></type> <name>funct</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>projectId</name></decl></parameter>)</parameter_list> <block>{

			<expr_stmt><expr><name><name>requestedFunctionDTO</name><operator>.</operator><name>code</name></name> <operator>=</operator> <literal type="string">"{\n //#Mark this function as implemented by removing this line. \n return {};\n}"</literal></expr>;</expr_stmt>
			<decl_stmt><decl><type><name>Function</name></type> <name>function</name> <init>= <expr><operator>new</operator> <call><name>Function</name><argument_list>(<argument><expr><name>requestedFunctionDTO</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><name>projectId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

			<expr_stmt><expr><call><name><name>function</name><operator>.</operator><name>addCaller</name></name><argument_list>(<argument><expr><name>requestingFunctionId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><call><name><name>FunctionCommand</name><operator>.</operator><name>addCallee</name></name><argument_list>(<argument><expr><name>requestingFunctionId</name></expr></argument>, <argument><expr><call><name><name>function</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			
			<for>for<control>( <init><decl><type><name>TestDTO</name></type> <name>test</name> <range>: <expr><name><name>requestedFunctionDTO</name><operator>.</operator><name>tests</name></name></expr></range></decl></init>)</control><block>{
				<expr_stmt><expr><call><name><name>TestCommand</name><operator>.</operator><name>create</name></name><argument_list>(<argument><expr><name>test</name></expr></argument>, <argument><expr><call><name><name>function</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></for>
		}</block></function>
	}</block></class>


	<class><specifier>protected</specifier> <specifier>static</specifier> class <name>RemoveCaller</name> <super><extends>extends <name>FunctionCommand</name></extends></super> <block>{
		<decl_stmt><decl><specifier>private</specifier> <type><name>long</name></type> <name>callerFunctionID</name></decl>;</decl_stmt>

		<constructor><specifier>public</specifier> <name>RemoveCaller</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>functionId</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>callerFunctionID</name></decl></parameter>)</parameter_list> <block>{
			<expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>functionId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>this</name><operator>.</operator><name>callerFunctionID</name></name> <operator>=</operator> <name>callerFunctionID</name></expr>;</expr_stmt>
		}</block></constructor>

		<function><specifier>public</specifier> <type><name>void</name></type> <name>execute</name><parameter_list>(<parameter><decl><type><name>Function</name></type> <name>function</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>projectId</name></decl></parameter>)</parameter_list> <block>{
				<expr_stmt><expr><call><name><name>function</name><operator>.</operator><name>removeCaller</name></name><argument_list>(<argument><expr><name>callerFunctionID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></function>
	}</block></class>

	<class><specifier>protected</specifier> <specifier>static</specifier> class <name>AddCaller</name> <super><extends>extends <name>FunctionCommand</name></extends></super> <block>{
		<decl_stmt><decl><specifier>private</specifier> <type><name>long</name></type> <name>callerFunctionID</name></decl>;</decl_stmt>

		<constructor><specifier>public</specifier> <name>AddCaller</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>functionId</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>callerFunctionID</name></decl></parameter>)</parameter_list> <block>{
			<expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>functionId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>this</name><operator>.</operator><name>callerFunctionID</name></name> <operator>=</operator> <name>callerFunctionID</name></expr>;</expr_stmt>
		}</block></constructor>

		<function><specifier>public</specifier> <type><name>void</name></type> <name>execute</name><parameter_list>(<parameter><decl><type><name>Function</name></type> <name>function</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>projectId</name></decl></parameter>)</parameter_list>
		<block>{
				<expr_stmt><expr><call><name><name>function</name><operator>.</operator><name>addCaller</name></name><argument_list>(<argument><expr><name>callerFunctionID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></function>
	}</block></class>

	<class><specifier>protected</specifier> <specifier>static</specifier> class <name>AddCallee</name> <super><extends>extends <name>FunctionCommand</name></extends></super> <block>{
		<decl_stmt><decl><specifier>private</specifier> <type><name>long</name></type> <name>calleeFunctionId</name></decl>;</decl_stmt>

		<constructor><specifier>public</specifier> <name>AddCallee</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>functionId</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>calleeFunctionId</name></decl></parameter>)</parameter_list> <block>{
			<expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>functionId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>this</name><operator>.</operator><name>calleeFunctionId</name></name> <operator>=</operator> <name>calleeFunctionId</name></expr>;</expr_stmt>
		}</block></constructor>

		<function><specifier>public</specifier> <type><name>void</name></type> <name>execute</name><parameter_list>(<parameter><decl><type><name>Function</name></type> <name>function</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>projectId</name></decl></parameter>)</parameter_list>
		<block>{
				<expr_stmt><expr><call><name><name>function</name><operator>.</operator><name>addCallee</name></name><argument_list>(<argument><expr><name>calleeFunctionId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></function>
	}</block></class>

	<class><specifier>protected</specifier> <specifier>static</specifier> class <name>CalleeChangedInterface</name> <super><extends>extends <name>FunctionCommand</name></extends></super> <block>{
		<decl_stmt><decl><specifier>private</specifier> <type><name>long</name></type> <name>calleeId</name></decl>;</decl_stmt>
		<decl_stmt><decl><specifier>private</specifier> <type><name>int</name></type> <name>oldCalleeVersion</name></decl>;</decl_stmt>

		<constructor><specifier>public</specifier> <name>CalleeChangedInterface</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>functionId</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>calleeId</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>oldCalleeVersion</name></decl></parameter>)</parameter_list> <block>{
			<expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>functionId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>this</name><operator>.</operator><name>calleeId</name></name> <operator>=</operator> <name>calleeId</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>this</name><operator>.</operator><name>oldCalleeVersion</name></name> <operator>=</operator> <name>oldCalleeVersion</name></expr>;</expr_stmt>
		}</block></constructor>

		<function><specifier>public</specifier> <type><name>void</name></type> <name>execute</name><parameter_list>(<parameter><decl><type><name>Function</name></type> <name>function</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>projectId</name></decl></parameter>)</parameter_list> <block>{
			<expr_stmt><expr><call><name><name>function</name><operator>.</operator><name>calleeChangedInterface</name></name><argument_list>(<argument><expr><name>calleeId</name></expr></argument>, <argument><expr><name>oldCalleeVersion</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></function>
	}</block></class>

	<class><specifier>protected</specifier> <specifier>static</specifier> class <name>RunTests</name> <super><extends>extends <name>FunctionCommand</name></extends></super> <block>{

		<constructor><specifier>public</specifier> <name>RunTests</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>functionId</name></decl></parameter>)</parameter_list> <block>{
			<expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>functionId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></constructor>

		<function><specifier>public</specifier> <type><name>void</name></type> <name>execute</name><parameter_list>(<parameter><decl><type><name>Function</name></type> <name>function</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>projectId</name></decl></parameter>)</parameter_list> <block>{
			<expr_stmt><expr><call><name><name>function</name><operator>.</operator><name>runTests</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		}</block></function>
	}</block></class>

	<class><specifier>protected</specifier> <specifier>static</specifier> class <name>CalleeBecomeDeactivated</name> <super><extends>extends <name>FunctionCommand</name></extends></super> <block>{
		<decl_stmt><decl><specifier>private</specifier> <type><name>long</name></type> <name>calleeId</name></decl>;</decl_stmt>
		<decl_stmt><decl><specifier>private</specifier> <type><name>String</name></type> <name>disputeText</name></decl>;</decl_stmt>

		<constructor><specifier>public</specifier> <name>CalleeBecomeDeactivated</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>functionId</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>calleeId</name></decl></parameter>,
				<parameter><decl><type><name>String</name></type> <name>disputeText</name></decl></parameter>)</parameter_list> <block>{
			<expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>functionId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>this</name><operator>.</operator><name>calleeId</name></name> <operator>=</operator> <name>calleeId</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>this</name><operator>.</operator><name>disputeText</name></name> <operator>=</operator> <name>disputeText</name></expr>;</expr_stmt>
		}</block></constructor>

		<function><specifier>public</specifier> <type><name>void</name></type> <name>execute</name><parameter_list>(<parameter><decl><type><name>Function</name></type> <name>function</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>projectId</name></decl></parameter>)</parameter_list> <block>{
			<expr_stmt><expr><call><name><name>function</name><operator>.</operator><name>calleeBecomeDeactivated</name></name><argument_list>(<argument><expr><name>calleeId</name></expr></argument>, <argument><expr><name>disputeText</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
		}</block></function>
	}</block></class>

	<class><specifier>protected</specifier> <specifier>static</specifier> class <name>SubmittedTestResult</name> <super><extends>extends <name>FunctionCommand</name></extends></super> <block>{
		<decl_stmt><decl><specifier>private</specifier> <type><name>String</name></type> <name>jsonDto</name></decl>;</decl_stmt>

		<constructor><specifier>public</specifier> <name>SubmittedTestResult</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>functionId</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>jsonDto</name></decl></parameter>)</parameter_list> <block>{
			<expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>functionId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><name><name>this</name><operator>.</operator><name>jsonDto</name></name> <operator>=</operator> <name>jsonDto</name></expr>;</expr_stmt>
		}</block></constructor>

		<function><specifier>public</specifier> <type><name>void</name></type> <name>execute</name><parameter_list>(<parameter><decl><type><name>Function</name></type> <name>function</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>projectId</name></decl></parameter>)</parameter_list> <block>{
			<expr_stmt><expr><call><name><name>function</name><operator>.</operator><name>submittedTestResult</name></name><argument_list>(<argument><expr><name>jsonDto</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></function>
	}</block></class>

	<class><specifier>protected</specifier> <specifier>static</specifier> class <name>AddTest</name> <super><extends>extends <name>FunctionCommand</name></extends></super> <block>{
		<decl_stmt><decl><specifier>private</specifier> <type><name>long</name></type> <name>testId</name></decl>;</decl_stmt>

		<constructor><specifier>public</specifier> <name>AddTest</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>functionId</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>testId</name></decl></parameter>)</parameter_list> <block>{
			<expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>functionId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>this</name><operator>.</operator><name>testId</name></name>	<operator>=</operator> <name>testId</name></expr>;</expr_stmt>

		}</block></constructor>

		<function><specifier>public</specifier> <type><name>void</name></type> <name>execute</name><parameter_list>(<parameter><decl><type><name>Function</name></type> <name>function</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>projectId</name></decl></parameter>)</parameter_list> <block>{
			<expr_stmt><expr><call><name><name>function</name><operator>.</operator><name>addTest</name></name><argument_list>(<argument><expr><name>testId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></function>
	}</block></class>

	<class><specifier>protected</specifier> <specifier>static</specifier> class <name>IncrementTestSuite</name> <super><extends>extends <name>FunctionCommand</name></extends></super> <block>{

		<constructor><specifier>public</specifier> <name>IncrementTestSuite</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>functionId</name></decl></parameter>)</parameter_list> <block>{
			<expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>functionId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		}</block></constructor>

		<function><specifier>public</specifier> <type><name>void</name></type> <name>execute</name><parameter_list>(<parameter><decl><type><name>Function</name></type> <name>function</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>projectId</name></decl></parameter>)</parameter_list> <block>{
			<expr_stmt><expr><call><name><name>function</name><operator>.</operator><name>incrementTestSuiteVersion</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		}</block></function>
	}</block></class>


	<class><specifier>protected</specifier> <specifier>static</specifier> class <name>LookForWork</name> <super><extends>extends <name>FunctionCommand</name></extends></super> <block>{

		<constructor><specifier>public</specifier> <name>LookForWork</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>functionId</name></decl></parameter>)</parameter_list> <block>{
			<expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>functionId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		}</block></constructor>

		<function><specifier>public</specifier> <type><name>void</name></type> <name>execute</name><parameter_list>(<parameter><decl><type><name>Function</name></type> <name>function</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>projectId</name></decl></parameter>)</parameter_list> <block>{
			<expr_stmt><expr><call><name><name>function</name><operator>.</operator><name>lookForWork</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		}</block></function>
	}</block></class>

}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="Command Peripheral Classes/MicrotaskCommand.java" hash="3a10aa54dc76231650388aa8c67d55f1fd1cae69"><package>package <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>commands</name></name>;</package>

<import>import static <name><name>com</name><operator>.</operator><name>googlecode</name><operator>.</operator><name>objectify</name><operator>.</operator><name>ObjectifyService</name><operator>.</operator><name>ofy</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>dto</name><operator>.</operator><name>ChallengeDTO</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>dto</name><operator>.</operator><name>DTO</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>entities</name><operator>.</operator><name>microtasks</name><operator>.</operator><name>ChallengeReview</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>entities</name><operator>.</operator><name>microtasks</name><operator>.</operator><name>Microtask</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>entities</name><operator>.</operator><name>microtasks</name><operator>.</operator><name>Review</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>servlets</name><operator>.</operator><name>ThreadContext</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>fasterxml</name><operator>.</operator><name>jackson</name><operator>.</operator><name>core</name><operator>.</operator><name>JsonParseException</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>fasterxml</name><operator>.</operator><name>jackson</name><operator>.</operator><name>databind</name><operator>.</operator><name>JsonMappingException</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>googlecode</name><operator>.</operator><name>objectify</name><operator>.</operator><name>Key</name></name>;</import>

<class><specifier>public</specifier> <specifier>abstract</specifier> class <name>MicrotaskCommand</name> <super><extends>extends <name>Command</name></extends></super>
<block>{
	<decl_stmt><decl><specifier>private</specifier> <type><name><name>Key</name><argument_list type="generic">&lt;<argument><name>Microtask</name></argument>&gt;</argument_list></name></type> <name>microtaskKey</name></decl>;</decl_stmt>

	<function><specifier>public</specifier> <specifier>static</specifier> <type><name>MicrotaskCommand</name></type> <name>submit</name><parameter_list>(<parameter><decl><type><name><name>Key</name><argument_list type="generic">&lt;<argument><name>Microtask</name></argument>&gt;</argument_list></name></type> <name>microtaskKey</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>jsonDTOData</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>workerID</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>awardedPoint</name></decl></parameter>)</parameter_list>
		<block>{ <return>return <expr><operator>new</operator> <call><name>Submit</name><argument_list>(<argument><expr><name>microtaskKey</name></expr></argument>, <argument><expr><name>jsonDTOData</name></expr></argument>, <argument><expr><name>workerID</name></expr></argument>, <argument><expr><name>awardedPoint</name></expr></argument>)</argument_list></call></expr>;</return> }</block></function>

	<function><specifier>public</specifier> <specifier>static</specifier> <type><name>MicrotaskCommand</name></type> <name>skip</name><parameter_list>(<parameter><decl><type><name><name>Key</name><argument_list type="generic">&lt;<argument><name>Microtask</name></argument>&gt;</argument_list></name></type> <name>microtaskKey</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>workerID</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>disablePoint</name></decl></parameter>)</parameter_list>
		<block>{ <return>return <expr><operator>new</operator> <call><name>Skip</name><argument_list>(<argument><expr><name>microtaskKey</name></expr></argument>, <argument><expr><name>workerID</name></expr></argument>, <argument><expr><name>disablePoint</name></expr></argument>)</argument_list></call></expr>;</return> }</block></function>

	<function><specifier>public</specifier> <specifier>static</specifier> <type><name>MicrotaskCommand</name></type> <name>createReview</name><parameter_list>(<parameter><decl><type><name><name>Key</name><argument_list type="generic">&lt;<argument><name>Microtask</name></argument>&gt;</argument_list></name></type> <name>microtaskKeyToReview</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>excludedWorkerID</name></decl></parameter>,
			<parameter><decl><type><name>String</name></type> <name>initiallySubmittedDTO</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>workerOfReviewedWork</name></decl></parameter>)</parameter_list>
		<block>{ <return>return <expr><operator>new</operator> <call><name>CreateReview</name><argument_list>(<argument><expr><name>microtaskKeyToReview</name></expr></argument>, <argument><expr><name>excludedWorkerID</name></expr></argument>, <argument><expr><name>initiallySubmittedDTO</name></expr></argument>, <argument><expr><name>workerOfReviewedWork</name></expr></argument>)</argument_list></call></expr>;</return> }</block></function>

	<function><specifier>public</specifier> <specifier>static</specifier> <type><name>MicrotaskCommand</name></type> <name>createChallengeReview</name><parameter_list>(<parameter><decl><type><name><name>Key</name><argument_list type="generic">&lt;<argument><name>Microtask</name></argument>&gt;</argument_list></name></type> <name>reviewKey</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>challengeTextDTO</name></decl></parameter>)</parameter_list>
		<block>{ <return>return <expr><operator>new</operator> <call><name>CreateChallengeReview</name><argument_list>(<argument><expr><name>reviewKey</name></expr></argument>, <argument><expr><name>challengeTextDTO</name></expr></argument>)</argument_list></call></expr>;</return> }</block></function>

	<comment type="line">// Creates a new copy of the specified microtask, reissuing the new microtask with specified</comment>
	<comment type="line">// worker excluded from performing it and save the reference to the reissued microtask.</comment>
	<function><specifier>public</specifier> <specifier>static</specifier> <type><name>MicrotaskCommand</name></type> <name>reviseMicrotask</name><parameter_list>(<parameter><decl><type><name><name>Key</name><argument_list type="generic">&lt;<argument><name>Microtask</name></argument>&gt;</argument_list></name></type> <name>microtaskKey</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>jsonDTOData</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>reissueMotivation</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>excludedWorkerID</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>awardedPoint</name></decl></parameter>)</parameter_list>
		<block>{ <return>return <expr><operator>new</operator> <call><name>ReviseMicrotask</name><argument_list>(<argument><expr><name>microtaskKey</name></expr></argument>, <argument><expr><name>jsonDTOData</name></expr></argument>, <argument><expr><name>reissueMotivation</name></expr></argument>, <argument><expr><name>excludedWorkerID</name></expr></argument>, <argument><expr><name>awardedPoint</name></expr></argument>)</argument_list></call></expr>;</return> }</block></function>

	<comment type="line">// Creates a new copy of the specified microtask, reissuing the new microtask with specified</comment>
	<comment type="line">// worker excluded from performing it.</comment>
	<function><specifier>public</specifier> <specifier>static</specifier> <type><name>MicrotaskCommand</name></type> <name>rejectMicrotask</name><parameter_list>(<parameter><decl><type><name><name>Key</name><argument_list type="generic">&lt;<argument><name>Microtask</name></argument>&gt;</argument_list></name></type> <name>microtaskKey</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>excludedWorkerID</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>awardedPoint</name></decl></parameter>)</parameter_list>
		<block>{ <return>return <expr><operator>new</operator> <call><name>RejectMicrotask</name><argument_list>(<argument><expr><name>microtaskKey</name></expr></argument>, <argument><expr><name>excludedWorkerID</name></expr></argument>, <argument><expr><name>awardedPoint</name></expr></argument>)</argument_list></call></expr>;</return> }</block></function>


	<constructor><specifier>private</specifier> <name>MicrotaskCommand</name><parameter_list>( <parameter><decl><type><name><name>Key</name><argument_list type="generic">&lt;<argument><name>Microtask</name></argument>&gt;</argument_list></name></type> <name>microtaskKey</name></decl></parameter> )</parameter_list>
	<block>{
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>microtaskKey</name></name> <operator>=</operator> <name>microtaskKey</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>queueCommand</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></constructor>

	<comment type="line">// All constructors for WorkerCommand MUST call queueCommand by calling the super constructor</comment>
	<function><specifier>private</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>queueCommand</name><parameter_list>(<parameter><decl><type><name>Command</name></type> <name>command</name></decl></parameter>)</parameter_list>
	<block>{
		<decl_stmt><decl><type><name>ThreadContext</name></type> <name>threadContext</name> <init>= <expr><call><name><name>ThreadContext</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>threadContext</name><operator>.</operator><name>addCommand</name></name><argument_list>(<argument><expr><name>command</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<function><specifier>public</specifier> <type><name>void</name></type> <name>execute</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>String</name></type> <name>projectId</name></decl></parameter>)</parameter_list>
	<block>{

		<decl_stmt><decl><type><specifier>final</specifier> <name>Microtask</name></type> <name>microtask</name> <init>= <expr><call><name>find</name><argument_list>(<argument><expr><name>microtaskKey</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	        	<if>if <condition>(<expr><name>microtask</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then>
	    			<block type="pseudo"><expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"ERROR erroreCannot execute MicrotaskCommand. Could not find the microtask for microtaskID "</literal>
	    						<operator>+</operator> <name>microtaskKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
	    		<else>else
	    		<block>{
	    			<expr_stmt><expr><call><name>execute</name><argument_list>(<argument><expr><name>microtask</name></expr></argument>, <argument><expr><name>projectId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    		}</block></else></if>
	}</block></function>

	<function_decl><specifier>public</specifier> <specifier>abstract</specifier> <type><name>void</name></type> <name>execute</name><parameter_list>(<parameter><decl><type><name>Microtask</name></type> <name>microtask</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>projectId</name></decl></parameter>)</parameter_list>;</function_decl>

	<comment type="line">// Finds the specified microtask. Returns null if no such microtask exists.</comment>
	<function><specifier>protected</specifier> <type><name>Microtask</name></type> <name>find</name><parameter_list>(<parameter><decl><type><name><name>Key</name><argument_list type="generic">&lt;<argument><name>Microtask</name></argument>&gt;</argument_list></name></type> <name>microtaskKey</name></decl></parameter>)</parameter_list>
	<block>{
		<return>return <expr><call><name>ofy</name><argument_list>()</argument_list></call><operator>.</operator><call><name>load</name><argument_list>()</argument_list></call><operator>.</operator><call><name>key</name><argument_list>(<argument><expr><name>microtaskKey</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>now</name><argument_list>()</argument_list></call></expr>;</return>
	}</block></function>


	<class><specifier>protected</specifier> <specifier>static</specifier> class <name>Submit</name> <super><extends>extends <name>MicrotaskCommand</name></extends></super>
	<block>{
		<decl_stmt><decl><specifier>private</specifier> <type><name>String</name></type> <name>jsonDTOData</name></decl>;</decl_stmt>
		<decl_stmt><decl><specifier>private</specifier> <type><name>String</name></type> <name>workerID</name></decl>;</decl_stmt>
		<decl_stmt><decl><specifier>private</specifier> <type><name>int</name></type> <name>awardedPoint</name></decl>;</decl_stmt>


		<constructor><specifier>public</specifier> <name>Submit</name><parameter_list>(<parameter><decl><type><name><name>Key</name><argument_list type="generic">&lt;<argument><name>Microtask</name></argument>&gt;</argument_list></name></type> <name>microtaskKey</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>jsonDTOData</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>workerID</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>awardedPoint</name></decl></parameter>)</parameter_list>
		<block>{
			<expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>microtaskKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>this</name><operator>.</operator><name>jsonDTOData</name></name> <operator>=</operator> <name>jsonDTOData</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>this</name><operator>.</operator><name>workerID</name></name> <operator>=</operator> <name>workerID</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>this</name><operator>.</operator><name>awardedPoint</name></name><operator>=</operator> <name>awardedPoint</name></expr>;</expr_stmt>
		}</block></constructor>

		<function><specifier>public</specifier> <type><name>void</name></type> <name>execute</name><parameter_list>(<parameter><decl><type><name>Microtask</name></type> <name>microtask</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>projectId</name></decl></parameter>)</parameter_list>
		<block>{
			<expr_stmt><expr><call><name><name>microtask</name><operator>.</operator><name>submit</name></name><argument_list>(<argument><expr><name>jsonDTOData</name></expr></argument>, <argument><expr><name>workerID</name></expr></argument>, <argument><expr><name>awardedPoint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></function>
	}</block></class>

	<class><specifier>protected</specifier> <specifier>static</specifier> class <name>Skip</name> <super><extends>extends <name>MicrotaskCommand</name></extends></super>
	<block>{
		<decl_stmt><decl><specifier>private</specifier> <type><name>String</name></type> <name>workerID</name></decl>;</decl_stmt>
		<decl_stmt><decl><specifier>private</specifier> <type><name>boolean</name></type> <name>disablePoint</name></decl>;</decl_stmt>

		<constructor><specifier>public</specifier> <name>Skip</name><parameter_list>(<parameter><decl><type><name><name>Key</name><argument_list type="generic">&lt;<argument><name>Microtask</name></argument>&gt;</argument_list></name></type> <name>microtaskKey</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>workerID</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>disablePoint</name></decl></parameter>)</parameter_list>
		<block>{
			<expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>microtaskKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>this</name><operator>.</operator><name>workerID</name></name> <operator>=</operator> <name>workerID</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>this</name><operator>.</operator><name>disablePoint</name></name><operator>=</operator><name>disablePoint</name></expr>;</expr_stmt>

		}</block></constructor>

		<function><specifier>public</specifier> <type><name>void</name></type> <name>execute</name><parameter_list>(<parameter><decl><type><name>Microtask</name></type> <name>microtask</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>projectId</name></decl></parameter>)</parameter_list>
		<block>{
			<expr_stmt><expr><call><name><name>microtask</name><operator>.</operator><name>skip</name></name><argument_list>(<argument><expr><name>workerID</name></expr></argument>, <argument><expr><name>disablePoint</name></expr></argument>, <argument><expr><name>projectId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></function>
	}</block></class>

	<class><specifier>protected</specifier> <specifier>static</specifier> class <name>CreateReview</name> <super><extends>extends <name>MicrotaskCommand</name></extends></super>
	<block>{
		<decl_stmt><decl><specifier>private</specifier> <type><name><name>Key</name><argument_list type="generic">&lt;<argument><name>Microtask</name></argument>&gt;</argument_list></name></type> <name>microtaskKeyToReview</name></decl>;</decl_stmt>
		<decl_stmt><decl><specifier>private</specifier> <type><name>String</name></type> <name>excludedWorkerID</name></decl>;</decl_stmt>
		<decl_stmt><decl><specifier>private</specifier> <type><name>String</name></type> <name>initiallySubmittedDTO</name></decl>;</decl_stmt>
		<decl_stmt><decl><specifier>private</specifier> <type><name>String</name></type> <name>workerOfReviewedWork</name></decl>;</decl_stmt>

		<constructor><specifier>public</specifier> <name>CreateReview</name><parameter_list>(<parameter><decl><type><name><name>Key</name><argument_list type="generic">&lt;<argument><name>Microtask</name></argument>&gt;</argument_list></name></type> <name>microtaskKeyToReview</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>excludedWorkerID</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>initiallySubmittedDTO</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>workerOfReviewedWork</name></decl></parameter>)</parameter_list>
		<block>{
			<expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>microtaskKeyToReview</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>this</name><operator>.</operator><name>microtaskKeyToReview</name></name> <operator>=</operator> <name>microtaskKeyToReview</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>this</name><operator>.</operator><name>excludedWorkerID</name></name> <operator>=</operator> <name>excludedWorkerID</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>this</name><operator>.</operator><name>initiallySubmittedDTO</name></name> <operator>=</operator> <name>initiallySubmittedDTO</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>this</name><operator>.</operator><name>workerOfReviewedWork</name></name> <operator>=</operator> <name>workerOfReviewedWork</name></expr>;</expr_stmt>
		}</block></constructor>

		<function><specifier>public</specifier> <type><name>void</name></type> <name>execute</name><parameter_list>(<parameter><decl><type><name>Microtask</name></type> <name>toReview</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>projectId</name></decl></parameter>)</parameter_list>
		<block>{
				<decl_stmt><decl><type><name>Review</name></type> <name>review</name> <init>= <expr><operator>new</operator> <call><name>Review</name><argument_list>(<argument><expr><name>microtaskKeyToReview</name></expr></argument>, <argument><expr><name>initiallySubmittedDTO</name></expr></argument>, <argument><expr><name>workerOfReviewedWork</name></expr></argument>, <argument><expr><call><name><name>toReview</name><operator>.</operator><name>getFunctionId</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>projectId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><call><name><name>ProjectCommand</name><operator>.</operator><name>queueReviewMicrotask</name></name><argument_list>(<argument><expr><call><name><name>review</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>excludedWorkerID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></function>
	}</block></class>


	<class><specifier>protected</specifier> <specifier>static</specifier> class <name>CreateChallengeReview</name> <super><extends>extends <name>MicrotaskCommand</name></extends></super>
	<block>{
		<decl_stmt><decl><specifier>private</specifier> <type><name>String</name></type> <name>challengeTextDTO</name></decl>;</decl_stmt>
		<constructor><specifier>public</specifier> <name>CreateChallengeReview</name><parameter_list>(<parameter><decl><type><name><name>Key</name><argument_list type="generic">&lt;<argument><name>Microtask</name></argument>&gt;</argument_list></name></type> <name>reviewKey</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>challengeTextDTO</name></decl></parameter>)</parameter_list>
		<block>{
			<expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>reviewKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>this</name><operator>.</operator><name>challengeTextDTO</name></name><operator>=</operator><name>challengeTextDTO</name></expr>;</expr_stmt>
		}</block></constructor>
		<function><specifier>public</specifier> <type><name>void</name></type> <name>execute</name><parameter_list>(<parameter><decl><type><name>Microtask</name></type> <name>review</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>projectId</name></decl></parameter>)</parameter_list>
		<block>{
			<decl_stmt><decl><type><name>ChallengeDTO</name></type> <name>dto</name><init>=<expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
			<try>try <block>{
				<expr_stmt><expr><name>dto</name> <operator>=</operator> <call>(<name>ChallengeDTO</name>)<argument_list>(<argument><expr><call><name><name>DTO</name><operator>.</operator><name>read</name></name><argument_list>(<argument><expr><name>challengeTextDTO</name></expr></argument>, <argument><expr><name><name>ChallengeDTO</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			}</block> <catch>catch<parameter_list>( <parameter><decl><type><name>JsonParseException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
				<expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			}</block></catch> <catch>catch<parameter_list>( <parameter><decl><type><name>JsonMappingException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
				<expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			}</block></catch> <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
				<expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			}</block></catch></try>
			<decl_stmt><decl><type><name>String</name></type> <name>reviewerWorkerId</name> <init>= <expr><call><name><name>review</name><operator>.</operator><name>getWorkerId</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>String</name></type> <name>challengerWorkerId</name> <init>= <expr><operator>(</operator><operator>(</operator><name>Review</name><operator>)</operator><name>review</name><operator>)</operator><operator>.</operator><call><name>getWorkerOfReviewedWork</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name><name>Key</name><argument_list type="generic">&lt;<argument><name>Microtask</name></argument>&gt;</argument_list></name></type> <name>microtaskUnderChallengeKey</name><init>= <expr><operator>(</operator><operator>(</operator><name>Review</name><operator>)</operator><name>review</name><operator>)</operator><operator>.</operator><call><name>getMicrotaskKeyUnderReview</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>long</name></type> <name>functionId</name> <init>= <expr><call><name><name>review</name><operator>.</operator><name>getFunctionId</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>ChallengeReview</name></type> <name>challengeReview</name> <init>= <expr><operator>new</operator> <call><name>ChallengeReview</name><argument_list>(<argument><expr><name><name>dto</name><operator>.</operator><name>challengeText</name></name></expr></argument>, <argument><expr><name>challengerWorkerId</name></expr></argument>, <argument><expr><name>reviewerWorkerId</name></expr></argument>, <argument><expr><name>microtaskUnderChallengeKey</name></expr></argument>, <argument><expr><call><name><name>review</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>functionId</name></expr></argument>, <argument><expr><name>projectId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name><name>ProjectCommand</name><operator>.</operator><name>queueChallengeReviewMicrotask</name></name><argument_list>(<argument><expr><call><name><name>challengeReview</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>reviewerWorkerId</name></expr></argument>, <argument><expr><name>challengerWorkerId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		}</block></function>

	}</block></class>

	<class><specifier>protected</specifier> <specifier>static</specifier> class <name>RejectMicrotask</name> <super><extends>extends <name>MicrotaskCommand</name></extends></super>
	<block>{
		<decl_stmt><decl><specifier>private</specifier> <type><name>String</name></type> <name>excludedWorkerID</name></decl>;</decl_stmt>
		<decl_stmt><decl><specifier>private</specifier> <type><name>int</name></type> <name>awardedPoint</name></decl>;</decl_stmt>

		<constructor><specifier>public</specifier> <name>RejectMicrotask</name><parameter_list>(<parameter><decl><type><name><name>Key</name><argument_list type="generic">&lt;<argument><name>Microtask</name></argument>&gt;</argument_list></name></type> <name>microtaskKey</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>excludedWorkerID</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>awardedPoint</name></decl></parameter>)</parameter_list>
		<block>{
			<expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>microtaskKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>this</name><operator>.</operator><name>excludedWorkerID</name></name> <operator>=</operator> <name>excludedWorkerID</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>this</name><operator>.</operator><name>awardedPoint</name></name> <operator>=</operator> <name>awardedPoint</name></expr>;</expr_stmt>

		}</block></constructor>

		<comment type="line">// Overrides the default execute as no microtask is to be loaded.</comment>
		<function><specifier>public</specifier> <type><name>void</name></type> <name>execute</name><parameter_list>(<parameter><decl><type><name>Microtask</name></type> <name>microtask</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>projectId</name></decl></parameter>)</parameter_list>
		<block>{
			<decl_stmt><decl><type><name>Microtask</name></type> <name>newMicrotask</name> <init>= <expr><call><name><name>microtask</name><operator>.</operator><name>copy</name></name><argument_list>(<argument><expr><name>projectId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

			<expr_stmt><expr><call><name><name>WorkerCommand</name><operator>.</operator><name>awardPoints</name></name><argument_list>( <argument><expr><name>excludedWorkerID</name></expr></argument> ,<argument><expr><name>awardedPoint</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><call><name><name>ProjectCommand</name><operator>.</operator><name>queueMicrotask</name></name><argument_list>(<argument><expr><call><name><name>newMicrotask</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>excludedWorkerID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></function>
	}</block></class>
	<class><specifier>protected</specifier> <specifier>static</specifier> class <name>ReviseMicrotask</name> <super><extends>extends <name>MicrotaskCommand</name></extends></super>
	<block>{
		<decl_stmt><decl><specifier>private</specifier> <type><name>String</name></type> <name>excludedWorkerID</name></decl>;</decl_stmt>
		<decl_stmt><decl><specifier>private</specifier> <type><name>int</name></type> <name>awardedPoint</name></decl>;</decl_stmt>
		<decl_stmt><decl><specifier>private</specifier> <type><name>String</name></type> <name>jsonDTOData</name></decl>;</decl_stmt>
		<decl_stmt><decl><specifier>private</specifier> <type><name>String</name></type> <name>reissueMotivation</name></decl>;</decl_stmt>

		<constructor><specifier>public</specifier> <name>ReviseMicrotask</name><parameter_list>(<parameter><decl><type><name><name>Key</name><argument_list type="generic">&lt;<argument><name>Microtask</name></argument>&gt;</argument_list></name></type> <name>microtaskKey</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>jsonDTOData</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>reissueMotivation</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>excludedWorkerID</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>awardedPoint</name></decl></parameter>)</parameter_list>
		<block>{
			<expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>microtaskKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>this</name><operator>.</operator><name>excludedWorkerID</name></name> <operator>=</operator> <name>excludedWorkerID</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>this</name><operator>.</operator><name>awardedPoint</name></name> <operator>=</operator> <name>awardedPoint</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>this</name><operator>.</operator><name>jsonDTOData</name></name> <operator>=</operator> <name>jsonDTOData</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>this</name><operator>.</operator><name>reissueMotivation</name></name> <operator>=</operator> <name>reissueMotivation</name></expr>;</expr_stmt>
		}</block></constructor>

		<comment type="line">// Overrides the default execute as no microtask is to be loaded.</comment>
		<function><specifier>public</specifier> <type><name>void</name></type> <name>execute</name><parameter_list>(<parameter><decl><type><name>Microtask</name></type> <name>microtask</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>projectId</name></decl></parameter>)</parameter_list>
		<block>{
			<expr_stmt><expr><call><name><name>microtask</name><operator>.</operator><name>revise</name></name><argument_list>(<argument><expr><name>jsonDTOData</name></expr></argument>, <argument><expr><name>excludedWorkerID</name></expr></argument> ,<argument><expr><name>awardedPoint</name></expr></argument>,<argument><expr><name>reissueMotivation</name></expr></argument>, <argument><expr><name>projectId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></function>
	}</block></class>

}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="Command Peripheral Classes/ProjectCommand.java" hash="a1c1cee51250b8de7b46145bbd2f426da726b050"><package>package <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>commands</name></name>;</package>


<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashSet</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>dto</name><operator>.</operator><name>firebase</name><operator>.</operator><name>notification</name><operator>.</operator><name>NotificationInFirebase</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>entities</name><operator>.</operator><name>Project</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>entities</name><operator>.</operator><name>microtasks</name><operator>.</operator><name>Microtask</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>servlets</name><operator>.</operator><name>ThreadContext</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>util</name><operator>.</operator><name>FirebaseService</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>googlecode</name><operator>.</operator><name>objectify</name><operator>.</operator><name>Key</name></name>;</import>

<class><specifier>public</specifier> <specifier>abstract</specifier> class <name>ProjectCommand</name> <super><extends>extends <name>Command</name></extends></super>
<block>{

	<comment type="block">/* PUBLIC METHODS */</comment>
	<function><specifier>public</specifier> <specifier>static</specifier> <type><name>ProjectCommand</name></type> <name>reset</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>projectId</name></decl></parameter>)</parameter_list><block>{
		<return>return <expr><operator>new</operator> <call><name>Reset</name><argument_list>(<argument><expr><name>projectId</name></expr></argument>)</argument_list></call></expr>;</return>
	}</block></function>
	<function><specifier>public</specifier> <specifier>static</specifier> <type><name>ProjectCommand</name></type> <name>clear</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>projectId</name></decl></parameter>)</parameter_list><block>{
		<return>return <expr><operator>new</operator> <call><name>Clear</name><argument_list>(<argument><expr><name>projectId</name></expr></argument>)</argument_list></call></expr>;</return>
	}</block></function>
	<function><specifier>public</specifier> <specifier>static</specifier> <type><name>ProjectCommand</name></type> <name>construct</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>projectId</name></decl></parameter>)</parameter_list><block>{
		<return>return <expr><operator>new</operator> <call><name>Construct</name><argument_list>(<argument><expr><name>projectId</name></expr></argument>)</argument_list></call></expr>;</return>
	}</block></function>

	<function><specifier>public</specifier> <specifier>static</specifier> <type><name>ProjectCommand</name></type> <name>enableReviews</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>reviewsEnabled</name></decl></parameter>)</parameter_list><block>{
		<return>return <expr><operator>new</operator> <call><name>EnableReviews</name><argument_list>(<argument><expr><name>reviewsEnabled</name></expr></argument>)</argument_list></call></expr>;</return>
	}</block></function>

	<function><specifier>public</specifier> <specifier>static</specifier> <type><name>ProjectCommand</name></type> <name>enableTutorials</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>tutorialsEnabled</name></decl></parameter>)</parameter_list><block>{
		<return>return <expr><operator>new</operator> <call><name>EnableTutorials</name><argument_list>(<argument><expr><name>tutorialsEnabled</name></expr></argument>)</argument_list></call></expr>;</return>
	}</block></function>

	<function><specifier>public</specifier> <specifier>static</specifier> <type><name>ProjectCommand</name></type> <name>queueMicrotask</name><parameter_list>(<parameter><decl><type><name><name>Key</name><argument_list type="generic">&lt;<argument><name>Microtask</name></argument>&gt;</argument_list></name></type> <name>microtaskKey</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>excludedWorkerID</name></decl></parameter>)</parameter_list> <block>{
		<return>return <expr><operator>new</operator> <call><name>QueueMicrotask</name><argument_list>(<argument><expr><name>microtaskKey</name></expr></argument>, <argument><expr><name>excludedWorkerID</name></expr></argument>)</argument_list></call></expr>;</return>
	}</block></function>

	<function><specifier>public</specifier> <specifier>static</specifier> <type><name>ProjectCommand</name></type> <name>queueReviewMicrotask</name><parameter_list>(<parameter><decl><type><name><name>Key</name><argument_list type="generic">&lt;<argument><name>Microtask</name></argument>&gt;</argument_list></name></type> <name>microtaskKey</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>excludedWorkerID</name></decl></parameter>)</parameter_list> <block>{
		<return>return <expr><operator>new</operator> <call><name>QueueReviewMicrotask</name><argument_list>(<argument><expr><name>microtaskKey</name></expr></argument>, <argument><expr><name>excludedWorkerID</name></expr></argument>)</argument_list></call></expr>;</return>
	}</block></function>
	<function><specifier>public</specifier> <specifier>static</specifier> <type><name>ProjectCommand</name></type> <name>queueChallengeReviewMicrotask</name><parameter_list>(<parameter><decl><type><name><name>Key</name><argument_list type="generic">&lt;<argument><name>Microtask</name></argument>&gt;</argument_list></name></type> <name>microtaskKey</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>firstExcludedWorkerID</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>secondExcludedWorkerID</name></decl></parameter>)</parameter_list> <block>{
		<return>return <expr><operator>new</operator> <call><name>QueueChallengeReviewMicrotask</name><argument_list>(<argument><expr><name>microtaskKey</name></expr></argument>, <argument><expr><name>firstExcludedWorkerID</name></expr></argument>, <argument><expr><name>secondExcludedWorkerID</name></expr></argument>)</argument_list></call></expr>;</return>
	}</block></function>

	<function><specifier>public</specifier> <specifier>static</specifier> <type><name>ProjectCommand</name></type> <name>skipMicrotask</name><parameter_list>( <parameter><decl><type><name>String</name></type> <name>microtaskKey</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>workerID</name></decl></parameter> , <parameter><decl><type><name>Boolean</name></type> <name>disablePoint</name></decl></parameter>)</parameter_list> <block>{
		<return>return <expr><operator>new</operator> <call><name>SkipMicrotask</name><argument_list>(<argument><expr><name>microtaskKey</name></expr></argument>, <argument><expr><name>workerID</name></expr></argument>, <argument><expr><name>disablePoint</name></expr></argument>)</argument_list></call></expr>;</return>
	}</block></function>


	<function><specifier>public</specifier> <specifier>static</specifier> <type><name>ProjectCommand</name></type> <name>submitMicrotask</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>microtaskKey</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>jsonDTOData</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>workerID</name></decl></parameter>)</parameter_list><block>{
		<return>return <expr><operator>new</operator> <call><name>SubmitMicrotask</name><argument_list>(<argument><expr><name>microtaskKey</name></expr></argument>, <argument><expr><name>jsonDTOData</name></expr></argument>, <argument><expr><name>workerID</name></expr></argument>)</argument_list></call></expr>;</return>
	}</block></function>

	<function><specifier>public</specifier> <specifier>static</specifier> <type><name>ProjectCommand</name></type> <name>logoutWorker</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>workerID</name></decl></parameter>)</parameter_list><block>{
		<return>return <expr><operator>new</operator> <call><name>LogoutWorker</name><argument_list>(<argument><expr><name>workerID</name></expr></argument>)</argument_list></call></expr>;</return>
	}</block></function>

	<function><specifier>public</specifier> <specifier>static</specifier> <type><name>ProjectCommand</name></type> <name>logoutInactiveWorkers</name><parameter_list>()</parameter_list><block>{
		<return>return <expr><operator>new</operator> <call><name>LogoutInactiveWorkers</name><argument_list>()</argument_list></call></expr>;</return>
	}</block></function>


	<function><specifier>public</specifier> <specifier>static</specifier> <type><name>ProjectCommand</name></type> <name>notifyLoggedInWorkers</name><parameter_list>( <parameter><decl><type><name>NotificationInFirebase</name></type> <name>notification</name></decl></parameter> )</parameter_list> <block>{
		<return>return <expr><operator>new</operator> <call><name>NotifyLoggedInWorkers</name><argument_list>( <argument><expr><name>notification</name></expr></argument> )</argument_list></call></expr>;</return>
	}</block></function>


	<comment type="block">/* PROTECTED METHODS */</comment>

	<comment type="line">// create and queue the command</comment>
	<constructor><specifier>private</specifier> <name>ProjectCommand</name><parameter_list>()</parameter_list><block>{
		<expr_stmt><expr><call><name>queueCommand</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></constructor>

	<function><specifier>public</specifier> <type><name>void</name></type> <name>execute</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>String</name></type>  <name>projectId</name></decl></parameter>)</parameter_list>
	<block>{
		<decl_stmt><decl><type><name>Project</name></type> <name>project</name> <init>= <expr><call><name><name>Project</name><operator>.</operator><name>Create</name></name><argument_list>(<argument><expr><name>projectId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	    <expr_stmt><expr><call><name>execute</name><argument_list>(<argument><expr><name>project</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<function_decl><specifier>public</specifier> <specifier>abstract</specifier> <type><name>void</name></type> <name>execute</name><parameter_list>(<parameter><decl><type><name>Project</name></type> <name>project</name></decl></parameter>)</parameter_list>;</function_decl>

	<comment type="line">// all commands MUST call queueCommand</comment>
	<function><specifier>private</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>queueCommand</name><parameter_list>(<parameter><decl><type><name>Command</name></type> <name>command</name></decl></parameter>)</parameter_list><block>{
		<comment type="line">//ThreadContext threadContext = ThreadContext.get();</comment>

       <comment type="line">// System.out.println("----&gt;"+threadContext.getUserId());</comment>
		<decl_stmt><decl><type><name>ThreadContext</name></type> <name>threadContext</name> <init>= <expr><call><name><name>ThreadContext</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>threadContext</name><operator>.</operator><name>addCommand</name></name><argument_list>(<argument><expr><name>command</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="line">//CommandContext.ctx.addCommand(command);</comment>
	}</block></function>
	<comment type="line">//reset the project</comment>
	<class><specifier>protected</specifier> <specifier>static</specifier> class <name>Reset</name> <super><extends>extends <name>ProjectCommand</name></extends></super>
	<block>{
		<decl_stmt><decl><specifier>private</specifier> <type><name>String</name></type> <name>projectID</name></decl>;</decl_stmt>
		<constructor><specifier>public</specifier> <name>Reset</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>projectID</name></decl></parameter>)</parameter_list>
		<block>{
			<expr_stmt><expr><call><name>super</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>this</name><operator>.</operator><name>projectID</name></name> <operator>=</operator> <name>projectID</name></expr>;</expr_stmt>
		}</block></constructor>

		<function><specifier>public</specifier> <type><name>void</name></type> <name>execute</name><parameter_list>(<parameter><decl><type><name>Project</name></type> <name>project</name></decl></parameter>)</parameter_list>
		<block>{
			<expr_stmt><expr><call><name><name>ProjectCommand</name><operator>.</operator><name>clear</name></name><argument_list>(<argument><expr><name>projectID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>ProjectCommand</name><operator>.</operator><name>construct</name></name><argument_list>(<argument><expr><name>projectID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		}</block></function>
	}</block></class>
	<comment type="line">//reset the project</comment>
	<class><specifier>protected</specifier> <specifier>static</specifier> class <name>Clear</name> <super><extends>extends <name>ProjectCommand</name></extends></super>
	<block>{
		<decl_stmt><decl><specifier>private</specifier> <type><name>String</name></type> <name>projectID</name></decl>;</decl_stmt>
		<constructor><specifier>public</specifier> <name>Clear</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>projectID</name></decl></parameter>)</parameter_list>
		<block>{
			<expr_stmt><expr><call><name>super</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>this</name><operator>.</operator><name>projectID</name></name> <operator>=</operator> <name>projectID</name></expr>;</expr_stmt>
		}</block></constructor>

		<function><specifier>public</specifier> <type><name>void</name></type> <name>execute</name><parameter_list>(<parameter><decl><type><name>Project</name></type> <name>project</name></decl></parameter>)</parameter_list>
		<block>{
			<expr_stmt><expr><call><name><name>Project</name><operator>.</operator><name>Clear</name></name><argument_list>(<argument><expr><name>projectID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></function>
	}</block></class>
	<comment type="line">//reset the project</comment>
	<class><specifier>protected</specifier> <specifier>static</specifier> class <name>Construct</name> <super><extends>extends <name>ProjectCommand</name></extends></super>
	<block>{
		<decl_stmt><decl><specifier>private</specifier> <type><name>String</name></type> <name>projectID</name></decl>;</decl_stmt>
		<constructor><specifier>public</specifier> <name>Construct</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>projectID</name></decl></parameter>)</parameter_list>
		<block>{
			<expr_stmt><expr><call><name>super</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>this</name><operator>.</operator><name>projectID</name></name> <operator>=</operator> <name>projectID</name></expr>;</expr_stmt>
		}</block></constructor>

		<function><specifier>public</specifier> <type><name>void</name></type> <name>execute</name><parameter_list>(<parameter><decl><type><name>Project</name></type> <name>project</name></decl></parameter>)</parameter_list>
		<block>{
			<expr_stmt><expr><call><name><name>Project</name><operator>.</operator><name>Construct</name></name><argument_list>(<argument><expr><name>projectID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></function>
	}</block></class>

	<comment type="line">// enable the reviews</comment>
	<class><specifier>protected</specifier> <specifier>static</specifier> class <name>EnableReviews</name> <super><extends>extends <name>ProjectCommand</name></extends></super>
	<block>{
		<decl_stmt><decl><specifier>private</specifier> <type><name>boolean</name></type> <name>reviewsEnabled</name></decl>;</decl_stmt>

		<constructor><specifier>public</specifier> <name>EnableReviews</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>reviewsEnabled</name></decl></parameter>)</parameter_list>
		<block>{
			<expr_stmt><expr><call><name>super</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>this</name><operator>.</operator><name>reviewsEnabled</name></name> <operator>=</operator> <name>reviewsEnabled</name></expr>;</expr_stmt>
		}</block></constructor>

		<function><specifier>public</specifier> <type><name>void</name></type> <name>execute</name><parameter_list>(<parameter><decl><type><name>Project</name></type> <name>project</name></decl></parameter>)</parameter_list>
		<block>{
			<expr_stmt><expr><call><name><name>project</name><operator>.</operator><name>enableReviews</name></name><argument_list>(<argument><expr><name>reviewsEnabled</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></function>
	}</block></class>

	<comment type="line">// enable the reviews</comment>
	<class><specifier>protected</specifier> <specifier>static</specifier> class <name>EnableTutorials</name> <super><extends>extends <name>ProjectCommand</name></extends></super>
	<block>{
		<decl_stmt><decl><specifier>private</specifier> <type><name>boolean</name></type> <name>tutorialsEnabled</name></decl>;</decl_stmt>

		<constructor><specifier>public</specifier> <name>EnableTutorials</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>tutorialsEnabled</name></decl></parameter>)</parameter_list>
		<block>{
			<expr_stmt><expr><call><name>super</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>this</name><operator>.</operator><name>tutorialsEnabled</name></name> <operator>=</operator> <name>tutorialsEnabled</name></expr>;</expr_stmt>
		}</block></constructor>

		<function><specifier>public</specifier> <type><name>void</name></type> <name>execute</name><parameter_list>(<parameter><decl><type><name>Project</name></type> <name>project</name></decl></parameter>)</parameter_list>
		<block>{
			<expr_stmt><expr><call><name><name>project</name><operator>.</operator><name>enableTutorials</name></name><argument_list>(<argument><expr><name>tutorialsEnabled</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></function>
	}</block></class>

	<comment type="line">// queue a microtask in the project</comment>
	<class><specifier>protected</specifier> <specifier>static</specifier> class <name>QueueMicrotask</name> <super><extends>extends <name>ProjectCommand</name></extends></super>
	<block>{
		<decl_stmt><decl><specifier>private</specifier> <type><name><name>Key</name><argument_list type="generic">&lt;<argument><name>Microtask</name></argument>&gt;</argument_list></name></type> <name>microtaskKey</name></decl>;</decl_stmt>
		<decl_stmt><decl><specifier>private</specifier> <type><name>String</name></type> <name>excludedWorkerID</name></decl>;</decl_stmt>

		<constructor><specifier>public</specifier> <name>QueueMicrotask</name><parameter_list>(<parameter><decl><type><name><name>Key</name><argument_list type="generic">&lt;<argument><name>Microtask</name></argument>&gt;</argument_list></name></type> <name>microtaskKey</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>excludedWorkerID</name></decl></parameter>)</parameter_list>
		<block>{
			<expr_stmt><expr><call><name>super</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>this</name><operator>.</operator><name>microtaskKey</name></name> <operator>=</operator> <name>microtaskKey</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>this</name><operator>.</operator><name>excludedWorkerID</name></name> <operator>=</operator> <name>excludedWorkerID</name></expr>;</expr_stmt>
		}</block></constructor>

		<function><specifier>public</specifier> <type><name>void</name></type> <name>execute</name><parameter_list>(<parameter><decl><type><name>Project</name></type> <name>project</name></decl></parameter>)</parameter_list>
		<block>{
			<expr_stmt><expr><call><name><name>project</name><operator>.</operator><name>queueMicrotask</name></name><argument_list>(<argument><expr><name>microtaskKey</name></expr></argument>, <argument><expr><name>excludedWorkerID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></function>
	}</block></class>
	<comment type="line">// queue a review microtask in the project</comment>
	<class><specifier>protected</specifier> <specifier>static</specifier> class <name>QueueReviewMicrotask</name> <super><extends>extends <name>ProjectCommand</name></extends></super>
	<block>{
		<decl_stmt><decl><specifier>private</specifier> <type><name><name>Key</name><argument_list type="generic">&lt;<argument><name>Microtask</name></argument>&gt;</argument_list></name></type> <name>microtaskKey</name></decl>;</decl_stmt>
		<decl_stmt><decl><specifier>private</specifier> <type><name>String</name></type> <name>excludedWorkerID</name></decl>;</decl_stmt>

		<constructor><specifier>public</specifier> <name>QueueReviewMicrotask</name><parameter_list>( <parameter><decl><type><name><name>Key</name><argument_list type="generic">&lt;<argument><name>Microtask</name></argument>&gt;</argument_list></name></type> <name>microtaskKey</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>excludedWorkerID</name></decl></parameter>)</parameter_list>
		<block>{
			<expr_stmt><expr><call><name>super</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>this</name><operator>.</operator><name>microtaskKey</name></name> <operator>=</operator> <name>microtaskKey</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>this</name><operator>.</operator><name>excludedWorkerID</name></name> <operator>=</operator> <name>excludedWorkerID</name></expr>;</expr_stmt>
		}</block></constructor>

		<function><specifier>public</specifier> <type><name>void</name></type> <name>execute</name><parameter_list>(<parameter><decl><type><name>Project</name></type> <name>project</name></decl></parameter>)</parameter_list>
		<block>{
			<expr_stmt><expr><call><name><name>project</name><operator>.</operator><name>queueReviewMicrotask</name></name><argument_list>(<argument><expr><name>microtaskKey</name></expr></argument>, <argument><expr><name>excludedWorkerID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></function>
	}</block></class>

	<comment type="line">// queue a challenge review microtask in the project</comment>
	<class><specifier>protected</specifier> <specifier>static</specifier> class <name>QueueChallengeReviewMicrotask</name> <super><extends>extends <name>ProjectCommand</name></extends></super>
	<block>{
		<decl_stmt><decl><specifier>private</specifier> <type><name><name>Key</name><argument_list type="generic">&lt;<argument><name>Microtask</name></argument>&gt;</argument_list></name></type> <name>microtaskKey</name></decl>;</decl_stmt>
		<decl_stmt><decl><specifier>private</specifier> <type><name>String</name></type> <name>firstExcludedWorkerID</name></decl>;</decl_stmt>
		<decl_stmt><decl><specifier>private</specifier> <type><name>String</name></type> <name>secondExcludedWorkerID</name></decl>;</decl_stmt>


		<constructor><specifier>public</specifier> <name>QueueChallengeReviewMicrotask</name><parameter_list>( <parameter><decl><type><name><name>Key</name><argument_list type="generic">&lt;<argument><name>Microtask</name></argument>&gt;</argument_list></name></type> <name>microtaskKey</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>firstExcludedWorkerID</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>secondExcludedWorkerID</name></decl></parameter>)</parameter_list>
		<block>{
			<expr_stmt><expr><call><name>super</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>this</name><operator>.</operator><name>microtaskKey</name></name> <operator>=</operator> <name>microtaskKey</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>this</name><operator>.</operator><name>firstExcludedWorkerID</name></name> <operator>=</operator> <name>firstExcludedWorkerID</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>this</name><operator>.</operator><name>secondExcludedWorkerID</name></name> <operator>=</operator> <name>secondExcludedWorkerID</name></expr>;</expr_stmt>

		}</block></constructor>

		<function><specifier>public</specifier> <type><name>void</name></type> <name>execute</name><parameter_list>(<parameter><decl><type><name>Project</name></type> <name>project</name></decl></parameter>)</parameter_list>
		<block>{
			<expr_stmt><expr><call><name><name>project</name><operator>.</operator><name>queueChellengeReviewMicrotask</name></name><argument_list>(<argument><expr><name>microtaskKey</name></expr></argument>, <argument><expr><name>firstExcludedWorkerID</name></expr></argument>, <argument><expr><name>secondExcludedWorkerID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></function>
	}</block></class>

	<comment type="line">// skip a microtask</comment>
	<class><specifier>protected</specifier> <specifier>static</specifier> class <name>SkipMicrotask</name> <super><extends>extends <name>ProjectCommand</name></extends></super>
	<block>{
		<decl_stmt><decl><specifier>private</specifier> <type><name><name>Key</name><argument_list type="generic">&lt;<argument><name>Microtask</name></argument>&gt;</argument_list></name></type> <name>microtaskKey</name></decl>;</decl_stmt>
		<decl_stmt><decl><specifier>private</specifier> <type><name>String</name></type> <name>workerID</name></decl>;</decl_stmt>
		<decl_stmt><decl><specifier>private</specifier> <type><name>Boolean</name></type> <name>disablePoint</name></decl>;</decl_stmt>

		<constructor><specifier>public</specifier> <name>SkipMicrotask</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>microtaskKey</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>workerID</name></decl></parameter>, <parameter><decl><type><name>Boolean</name></type> <name>disablePoint</name></decl></parameter>)</parameter_list>
		<block>{
			<expr_stmt><expr><call><name>super</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>this</name><operator>.</operator><name>microtaskKey</name></name> <operator>=</operator> <call><name><name>Microtask</name><operator>.</operator><name>stringToKey</name></name><argument_list>(<argument><expr><name>microtaskKey</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
			<expr_stmt><expr><name><name>this</name><operator>.</operator><name>workerID</name></name> <operator>=</operator> <name>workerID</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>this</name><operator>.</operator><name>disablePoint</name></name> <operator>=</operator> <name>disablePoint</name></expr>;</expr_stmt>
		}</block></constructor>

		<function><specifier>public</specifier> <type><name>void</name></type> <name>execute</name><parameter_list>(<parameter><decl><type><name>Project</name></type> <name>project</name></decl></parameter>)</parameter_list>
		<block>{
			<expr_stmt><expr><call><name><name>project</name><operator>.</operator><name>skipMicrotask</name></name><argument_list>(<argument><expr><name>microtaskKey</name></expr></argument>, <argument><expr><name>workerID</name></expr></argument>, <argument><expr><name>disablePoint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></function>
	}</block></class>

	<comment type="line">// submit a microtask</comment>
	<class><specifier>protected</specifier> <specifier>static</specifier> class <name>SubmitMicrotask</name> <super><extends>extends <name>ProjectCommand</name></extends></super>
	<block>{
		<decl_stmt><decl><specifier>private</specifier> <type><name><name>Key</name><argument_list type="generic">&lt;<argument><name>Microtask</name></argument>&gt;</argument_list></name></type> <name>microtaskKey</name></decl>;</decl_stmt>
		<decl_stmt><decl><specifier>private</specifier> <type><name>String</name></type> <name>jsonDTOData</name></decl>;</decl_stmt>
		<decl_stmt><decl><specifier>private</specifier> <type><name>String</name></type> <name>workerID</name></decl>;</decl_stmt>

		<constructor><specifier>public</specifier> <name>SubmitMicrotask</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>microtaskKey</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>jsonDTOData</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>workerID</name></decl></parameter>)</parameter_list>
		<block>{
			<expr_stmt><expr><call><name>super</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>this</name><operator>.</operator><name>microtaskKey</name></name> <operator>=</operator> <call><name><name>Microtask</name><operator>.</operator><name>stringToKey</name></name><argument_list>( <argument><expr><name>microtaskKey</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>this</name><operator>.</operator><name>jsonDTOData</name></name> <operator>=</operator> <name>jsonDTOData</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>this</name><operator>.</operator><name>workerID</name></name> <operator>=</operator> <name>workerID</name></expr>;</expr_stmt>
		}</block></constructor>

		<function><specifier>public</specifier> <type><name>void</name></type> <name>execute</name><parameter_list>(<parameter><decl><type><name>Project</name></type> <name>project</name></decl></parameter>)</parameter_list>
		<block>{
			<expr_stmt><expr><call><name><name>project</name><operator>.</operator><name>submitMicrotask</name></name><argument_list>(<argument><expr><name>microtaskKey</name></expr></argument>, <argument><expr><name>jsonDTOData</name></expr></argument>, <argument><expr><name>workerID</name></expr></argument>, <argument><expr><name>project</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></function>
	}</block></class>

	<comment type="line">// logout a worker</comment>
	<class><specifier>protected</specifier> <specifier>static</specifier> class <name>LogoutWorker</name> <super><extends>extends <name>ProjectCommand</name></extends></super>
	<block>{
		<decl_stmt><decl><specifier>private</specifier> <type><name>String</name></type> <name>workerID</name></decl>;</decl_stmt>

		<constructor><specifier>public</specifier> <name>LogoutWorker</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>workerID</name></decl></parameter>)</parameter_list>
		<block>{
			<expr_stmt><expr><call><name>super</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>this</name><operator>.</operator><name>workerID</name></name> <operator>=</operator> <name>workerID</name></expr>;</expr_stmt>
		}</block></constructor>

		<function><specifier>public</specifier> <type><name>void</name></type> <name>execute</name><parameter_list>(<parameter><decl><type><name>Project</name></type> <name>project</name></decl></parameter>)</parameter_list>
		<block>{
			<expr_stmt><expr><call><name><name>project</name><operator>.</operator><name>logoutWorker</name></name><argument_list>(<argument><expr><name>workerID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></function>
	}</block></class>

	<comment type="line">// logout all inactive workers</comment>
	<class><specifier>protected</specifier> <specifier>static</specifier> class <name>LogoutInactiveWorkers</name> <super><extends>extends <name>ProjectCommand</name></extends></super>
	<block>{
		<constructor><specifier>public</specifier> <name>LogoutInactiveWorkers</name><parameter_list>()</parameter_list>
		<block>{
			<expr_stmt><expr><call><name>super</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		}</block></constructor>

		<function><specifier>public</specifier> <type><name>void</name></type> <name>execute</name><parameter_list>(<parameter><decl><type><name>Project</name></type> <name>project</name></decl></parameter>)</parameter_list>
		<block>{
			<expr_stmt><expr><call><name><name>project</name><operator>.</operator><name>logoutInactiveWorkers</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		}</block></function>
	}</block></class>

	<comment type="line">// logout all inactive workers</comment>
	<class><specifier>protected</specifier> <specifier>static</specifier> class <name>NotifyLoggedInWorkers</name> <super><extends>extends <name>ProjectCommand</name></extends></super>
	<block>{
		<decl_stmt><decl><type><name>NotificationInFirebase</name></type> <name>notification</name></decl>;</decl_stmt>
		<constructor><specifier>public</specifier> <name>NotifyLoggedInWorkers</name><parameter_list>(<parameter><decl><type><name>NotificationInFirebase</name></type> <name>notification</name></decl></parameter>)</parameter_list>
		<block>{
			<expr_stmt><expr><call><name>super</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>this</name><operator>.</operator><name>notification</name></name> <operator>=</operator> <name>notification</name></expr>;</expr_stmt>
		}</block></constructor>

		<function><specifier>public</specifier> <type><name>void</name></type> <name>execute</name><parameter_list>(<parameter><decl><type><name>Project</name></type> <name>project</name></decl></parameter>)</parameter_list>
		<block>{
			<decl_stmt><decl><type><name><name>HashSet</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>workersId</name> <init>= <expr><call><name><name>project</name><operator>.</operator><name>getLoggedInWorkers</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
			<for>for<control>( <init><decl><type><name>String</name></type> <name>workerId</name><range>:<expr><name>workersId</name></expr></range></decl></init> )</control><block>{
				<expr_stmt><expr><call><name><name>FirebaseService</name><operator>.</operator><name>writeWorkerNotification</name></name><argument_list>(<argument><expr><name>notification</name></expr></argument>, <argument><expr><name>workerId</name></expr></argument>, <argument><expr><call><name><name>project</name><operator>.</operator><name>getID</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></for>
		}</block></function>
	}</block></class>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="Command Peripheral Classes/TestCommand.java" hash="2b1c339f5fe074b0e713c3bfa2ddf47f1f4e03b1"><package>package <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>commands</name></name>;</package>

<import>import static <name><name>com</name><operator>.</operator><name>googlecode</name><operator>.</operator><name>objectify</name><operator>.</operator><name>ObjectifyService</name><operator>.</operator><name>ofy</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>dto</name><operator>.</operator><name>ajax</name><operator>.</operator><name>microtask</name><operator>.</operator><name>submission</name><operator>.</operator><name>TestDTO</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>entities</name><operator>.</operator><name>artifacts</name><operator>.</operator><name>Test</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>servlets</name><operator>.</operator><name>ThreadContext</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>googlecode</name><operator>.</operator><name>objectify</name><operator>.</operator><name>LoadResult</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>googlecode</name><operator>.</operator><name>objectify</name><operator>.</operator><name>VoidWork</name></name>;</import>

<class><specifier>public</specifier> <specifier>abstract</specifier> class <name>TestCommand</name> <super><extends>extends <name>Command</name></extends></super> <block>{
	<decl_stmt><decl><specifier>protected</specifier> <type><name>long</name></type> <name>testId</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>protected</specifier> <type><name>boolean</name></type> <name>isSimple</name></decl>;</decl_stmt>

	<function><specifier>public</specifier> <specifier>static</specifier> <type><name>TestCommand</name></type> <name>create</name><parameter_list>(<parameter><decl><type><name>TestDTO</name></type> <name>test</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>functionId</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>isApiArtifact</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>isReadOnly</name></decl></parameter> )</parameter_list> <block>{
		<return>return <expr><operator>new</operator> <call><name>Create</name><argument_list>(<argument><expr><name>test</name></expr></argument>, <argument><expr><name>functionId</name></expr></argument>, <argument><expr><name>isApiArtifact</name></expr></argument>, <argument><expr><name>isReadOnly</name></expr></argument>)</argument_list></call></expr>;</return>
	}</block></function>

	<function><specifier>public</specifier> <specifier>static</specifier> <type><name>TestCommand</name></type> <name>update</name><parameter_list>(<parameter><decl><type><name>TestDTO</name></type> <name>test</name></decl></parameter>)</parameter_list> <block>{
		<return>return <expr><operator>new</operator> <call><name>Update</name><argument_list>(<argument><expr><name>test</name></expr></argument>)</argument_list></call></expr>;</return>
	}</block></function>

	<function><specifier>public</specifier> <specifier>static</specifier> <type><name>TestCommand</name></type> <name>delete</name><parameter_list>(<parameter><decl><type><name>TestDTO</name></type> <name>test</name></decl></parameter>)</parameter_list> <block>{
		<return>return <expr><operator>new</operator> <call><name>Delete</name><argument_list>(<argument><expr><name>test</name></expr></argument>)</argument_list></call></expr>;</return>
	}</block></function>

	<constructor><specifier>private</specifier> <name>TestCommand</name><parameter_list>(<parameter><decl><type><name>Long</name></type> <name>testId</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>isSimple</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>testId</name></name> <operator>=</operator> <name>testId</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>isSimple</name></name> <operator>=</operator> <name>isSimple</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>queueCommand</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></constructor>

	<comment type="line">// All constructors for simpleTestCommand MUST call queueCommand and the end of</comment>
	<comment type="line">// the constructor to add the</comment>
	<comment type="line">// command to the queue.</comment>
	<function><specifier>private</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>queueCommand</name><parameter_list>(<parameter><decl><type><name>Command</name></type> <name>command</name></decl></parameter>)</parameter_list> <block>{
		<decl_stmt><decl><type><name>ThreadContext</name></type> <name>threadContext</name> <init>= <expr><call><name><name>ThreadContext</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>threadContext</name><operator>.</operator><name>addCommand</name></name><argument_list>(<argument><expr><name>command</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<function><specifier>public</specifier> <type><name>void</name></type> <name>execute</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>String</name></type> <name>projectId</name></decl></parameter>)</parameter_list> <block>{
    	<if>if <condition>(<expr><name>testId</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
    		
    		<decl_stmt><decl><type><name>Test</name></type> <name>test</name> <init>= <expr><call><name><name>Test</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><name>testId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    		
			<if>if <condition>(<expr><name>test</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then>
				<block type="pseudo"><expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name>
						<operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"errore Cannot execute test command. Could not find test for id "</literal><operator>+</operator><name>testId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
			<else>else <block>{
				<expr_stmt><expr><call><name>execute</name><argument_list>(<argument><expr><name>test</name></expr></argument>, <argument><expr><name>projectId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></else></if>
		}</block></then> <else>else
			<block type="pseudo"><expr_stmt><expr><call><name>execute</name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>projectId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>

	}</block></function>

	<function_decl><specifier>public</specifier> <specifier>abstract</specifier> <type><name>void</name></type> <name>execute</name><parameter_list>(<parameter><decl><type><name>Test</name></type> <name>simpleTest</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>projectId</name></decl></parameter>)</parameter_list>;</function_decl>

	<class><specifier>protected</specifier> <specifier>static</specifier> class <name>Create</name> <super><extends>extends <name>TestCommand</name></extends></super> <block>{
		<decl_stmt><decl><specifier>private</specifier> <type><name>TestDTO</name></type> <name>testDto</name></decl>;</decl_stmt>
		<decl_stmt><decl><specifier>private</specifier> <type><name>long</name></type> <name>functionId</name></decl>;</decl_stmt>
		<decl_stmt><decl><specifier>private</specifier> <type><name>boolean</name></type> <name>isApiArtifact</name></decl>;</decl_stmt>
		<decl_stmt><decl><specifier>private</specifier> <type><name>boolean</name></type> <name>isReadOnly</name></decl>;</decl_stmt>

		<constructor><specifier>public</specifier> <name>Create</name><parameter_list>( <parameter><decl><type><name>TestDTO</name></type> <name>testDto</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>functionId</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>isApiArtifact</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>isReadOnly</name></decl></parameter>)</parameter_list> <block>{
			<expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><literal type="number">0L</literal></expr></argument>,<argument><expr><name><name>testDto</name><operator>.</operator><name>isSimple</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>this</name><operator>.</operator><name>testDto</name></name>	   <operator>=</operator> <name>testDto</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>this</name><operator>.</operator><name>functionId</name></name>	   <operator>=</operator> <name>functionId</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>this</name><operator>.</operator><name>isApiArtifact</name></name> <operator>=</operator> <name>isApiArtifact</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>this</name><operator>.</operator><name>isReadOnly</name></name>    <operator>=</operator> <name>isReadOnly</name></expr>;</expr_stmt>
		}</block></constructor>

		<function><specifier>public</specifier> <type><name>void</name></type> <name>execute</name><parameter_list>(<parameter><decl><type><name>Test</name></type> <name>test</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>projectId</name></decl></parameter>)</parameter_list> <block>{
			<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"CREATING "</literal><operator>+</operator><name><name>testDto</name><operator>.</operator><name>description</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><operator>new</operator> <call><name>Test</name><argument_list>(<argument><expr><name>testDto</name></expr></argument>, <argument><expr><name>functionId</name></expr></argument>, <argument><expr><name>isApiArtifact</name></expr></argument>, <argument><expr><name>isReadOnly</name></expr></argument>, <argument><expr><name>projectId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></function>
	}</block></class>

	<class><specifier>protected</specifier> <specifier>static</specifier> class <name>Update</name> <super><extends>extends <name>TestCommand</name></extends></super> <block>{

		<decl_stmt><decl><specifier>private</specifier> <type><name>TestDTO</name></type> <name>testDto</name></decl>;</decl_stmt>

		<constructor><specifier>public</specifier> <name>Update</name><parameter_list>( <parameter><decl><type><name>TestDTO</name></type> <name>testDto</name></decl></parameter> )</parameter_list> <block>{
			<expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name><name>testDto</name><operator>.</operator><name>id</name></name></expr></argument>,<argument><expr><name><name>testDto</name><operator>.</operator><name>isSimple</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>this</name><operator>.</operator><name>testDto</name></name> <operator>=</operator> <name>testDto</name></expr>;</expr_stmt>
		}</block></constructor>

		<function><specifier>public</specifier> <type><name>void</name></type> <name>execute</name><parameter_list>(<parameter><decl><type><name>Test</name></type> <name>test</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>projectId</name></decl></parameter>)</parameter_list> <block>{
			<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"UPDATING "</literal><operator>+</operator><call><name><name>test</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>test</name><operator>.</operator><name>update</name></name><argument_list>( <argument><expr><name>testDto</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
		}</block></function>
	}</block></class>

	<class><specifier>protected</specifier> <specifier>static</specifier> class <name>Delete</name> <super><extends>extends <name>TestCommand</name></extends></super> <block>{

		<constructor><specifier>public</specifier> <name>Delete</name><parameter_list>(<parameter><decl><type><name>TestDTO</name></type> <name>testDto</name></decl></parameter>)</parameter_list> <block>{
			<expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name><name>testDto</name><operator>.</operator><name>id</name></name></expr></argument>,<argument><expr><name><name>testDto</name><operator>.</operator><name>isSimple</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		}</block></constructor>

		<function><annotation>@<name>Override</name></annotation>
		<specifier>public</specifier> <type><name>void</name></type> <name>execute</name><parameter_list>(<parameter><decl><type><name>Test</name></type> <name>test</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>projectId</name></decl></parameter>)</parameter_list> <block>{
			<expr_stmt><expr><call><name><name>test</name><operator>.</operator><name>delete</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		}</block></function>
	}</block></class>

}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="Command Peripheral Classes/WorkerCommand.java" hash="6931a5ca787c7169b4d384ff2b6c81423ebbba14"><package>package <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>commands</name></name>;</package>

<import>import static <name><name>com</name><operator>.</operator><name>googlecode</name><operator>.</operator><name>objectify</name><operator>.</operator><name>ObjectifyService</name><operator>.</operator><name>ofy</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>entities</name><operator>.</operator><name>Achievement</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>entities</name><operator>.</operator><name>Project</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>entities</name><operator>.</operator><name>Worker</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>servlets</name><operator>.</operator><name>ThreadContext</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>googlecode</name><operator>.</operator><name>objectify</name><operator>.</operator><name>VoidWork</name></name>;</import>

<class><specifier>public</specifier> <specifier>abstract</specifier> class <name>WorkerCommand</name> <super><extends>extends <name>Command</name></extends></super>
<block>{
	<decl_stmt><decl><specifier>protected</specifier> <type><name>String</name></type> <name>workerID</name></decl>;</decl_stmt>

	
	<function><specifier>public</specifier> <specifier>static</specifier> <type><name>WorkerCommand</name></type> <name>awardPoints</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>workerID</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>points</name></decl></parameter>)</parameter_list>
	<block>{ <return>return <expr><operator>new</operator> <call><name>AwardPoints</name><argument_list>(<argument><expr><name>workerID</name></expr></argument>, <argument><expr><name>points</name></expr></argument>)</argument_list></call></expr>;</return> }</block></function>
	
	<function><specifier>public</specifier> <specifier>static</specifier> <type><name>WorkerCommand</name></type> <name>addAchievement</name><parameter_list>(<parameter><decl><type><name>Achievement</name></type> <name>achievement</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>workerID</name></decl></parameter>)</parameter_list>
	<block>{ <return>return <expr><operator>new</operator> <call><name>AddAchievement</name><argument_list>(<argument><expr><name>achievement</name></expr></argument>, <argument><expr><name>workerID</name></expr></argument>)</argument_list></call></expr>;</return> }</block></function>
	

	<function><specifier>public</specifier> <specifier>static</specifier> <type><name>WorkerCommand</name></type> <name>increaseStat</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>workerID</name></decl></parameter>,<parameter><decl><type><name>String</name></type> <name>label</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>increaseAmount</name></decl></parameter>)</parameter_list>
	<block>{ <return>return <expr><operator>new</operator> <call><name>IncreaseStat</name><argument_list>(<argument><expr><name>workerID</name></expr></argument>, <argument><expr><name>label</name></expr></argument>, <argument><expr><name>increaseAmount</name></expr></argument>)</argument_list></call></expr>;</return> }</block></function>


	<constructor><specifier>private</specifier> <name>WorkerCommand</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>workerID</name></decl></parameter>)</parameter_list>
	<block>{
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>workerID</name></name> <operator>=</operator> <name>workerID</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>queueCommand</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></constructor>

	<comment type="line">// All constructors for WorkerCommand MUST call queueCommand by calling the super constructor</comment>
	<function><specifier>private</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>queueCommand</name><parameter_list>(<parameter><decl><type><name>Command</name></type> <name>command</name></decl></parameter>)</parameter_list>
	<block>{
		<decl_stmt><decl><type><name>ThreadContext</name></type> <name>threadContext</name> <init>= <expr><call><name><name>ThreadContext</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>threadContext</name><operator>.</operator><name>addCommand</name></name><argument_list>(<argument><expr><name>command</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="line">// CommandContext.ctx.addCommand(command);</comment>
	}</block></function>
	<function><specifier>public</specifier> <type><name>void</name></type> <name>execute</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>projectId</name></decl></parameter>)</parameter_list>
	<block>{
		<decl_stmt><decl><type><specifier>final</specifier> <name>Project</name></type> <name>project</name> <init>= <expr><call><name><name>Project</name><operator>.</operator><name>Create</name></name><argument_list>(<argument><expr><name>projectId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier>final</specifier> <name>Worker</name></type> <name>worker</name> <init>= <expr><call><name>find</name><argument_list>(<argument><expr><name>workerID</name></expr></argument>, <argument><expr><name>project</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	       	<if>if <condition>(<expr><name>worker</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then>
	    			<block type="pseudo"><expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"errore Cannot execute WorkerCommand. Could not find the worker for WorkerID "</literal>
	    						<operator>+</operator> <name>workerID</name><operator>+</operator><literal type="string">" ("</literal><operator>+</operator><call><name><name>this</name><operator>.</operator><name>getClass</name></name><argument_list>()</argument_list></call><operator>+</operator><literal type="string">")"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
	    		<else>else
	    		<block>{
	    			<expr_stmt><expr><call><name>execute</name><argument_list>(<argument><expr><name>worker</name></expr></argument>, <argument><expr><name>project</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    		}</block></else></if>
	}</block></function>

	<function_decl><specifier>public</specifier> <specifier>abstract</specifier> <type><name>void</name></type> <name>execute</name><parameter_list>(<parameter><decl><type><name>Worker</name></type> <name>worker</name></decl></parameter>, <parameter><decl><type><name>Project</name></type> <name>project</name></decl></parameter>)</parameter_list>;</function_decl>

	<comment type="line">// Finds the specified worker. Returns null if no such worker exists.</comment>
	<comment type="line">// Preconditions:</comment>
	<comment type="line">//                userid != null</comment>
	<function><specifier>protected</specifier> <type><name>Worker</name></type> <name>find</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>userid</name></decl></parameter>, <parameter><decl><type><name>Project</name></type> <name>project</name></decl></parameter>)</parameter_list>
	<block>{
		<return>return <expr><call><name>ofy</name><argument_list>()</argument_list></call><operator>.</operator><call><name>load</name><argument_list>()</argument_list></call><operator>.</operator><call><name>key</name><argument_list>(<argument><expr><call><name><name>Worker</name><operator>.</operator><name>getKey</name></name><argument_list>(<argument><expr><call><name><name>project</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>userid</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>now</name><argument_list>()</argument_list></call></expr>;</return>
	}</block></function>

	<class><specifier>protected</specifier> <specifier>static</specifier> class <name>AwardPoints</name> <super><extends>extends <name>WorkerCommand</name></extends></super>
	<block>{
		<decl_stmt><decl><specifier>private</specifier> <type><name>int</name></type> <name>points</name></decl>;</decl_stmt>

		<constructor><specifier>public</specifier> <name>AwardPoints</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>workerID</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>points</name></decl></parameter>)</parameter_list>
		<block>{
			<expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>workerID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>this</name><operator>.</operator><name>points</name></name> <operator>=</operator> <name>points</name></expr>;</expr_stmt>
		}</block></constructor>

		<function><specifier>public</specifier> <type><name>void</name></type> <name>execute</name><parameter_list>(<parameter><decl><type><name>Worker</name></type> <name>worker</name></decl></parameter>, <parameter><decl><type><name>Project</name></type> <name>project</name></decl></parameter>)</parameter_list>
		<block>{

			<expr_stmt><expr><call><name><name>worker</name><operator>.</operator><name>awardPoints</name></name><argument_list>(<argument><expr><name>points</name></expr></argument>, <argument><expr><call><name><name>project</name><operator>.</operator><name>getID</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></function>

	}</block></class>

	<class><specifier>protected</specifier> <specifier>static</specifier> class <name>IncreaseStat</name> <super><extends>extends <name>WorkerCommand</name></extends></super>
	<block>{
		<decl_stmt><decl><specifier>private</specifier> <type><name>String</name></type> <name>label</name></decl>;</decl_stmt>
		<decl_stmt><decl><specifier>private</specifier> <type><name>int</name></type> <name>increaseAmount</name></decl>;</decl_stmt>

		<constructor><specifier>public</specifier> <name>IncreaseStat</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>workerID</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>label</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>increaseAmount</name></decl></parameter>)</parameter_list>
		<block>{
			<expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>workerID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>this</name><operator>.</operator><name>label</name></name> <operator>=</operator> <name>label</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>this</name><operator>.</operator><name>increaseAmount</name></name> <operator>=</operator> <name>increaseAmount</name></expr>;</expr_stmt>
		}</block></constructor>

		<function><specifier>public</specifier> <type><name>void</name></type> <name>execute</name><parameter_list>(<parameter><decl><type><name>Worker</name></type> <name>worker</name></decl></parameter>, <parameter><decl><type><name>Project</name></type> <name>project</name></decl></parameter>)</parameter_list>
		<block>{

			<expr_stmt><expr><call><name><name>worker</name><operator>.</operator><name>increaseStat</name></name><argument_list>(<argument><expr><name>label</name></expr></argument>,<argument><expr><name>increaseAmount</name></expr></argument>, <argument><expr><call><name><name>project</name><operator>.</operator><name>getID</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<comment type="line">//AchievementManager.getInstance().checkNewAchievement(worker.getUserid(), project.getID(), worker.getHistory());</comment>
		}</block></function>

	}</block></class>
	
	<class><specifier>protected</specifier> <specifier>static</specifier> class <name>AddAchievement</name> <super><extends>extends <name>WorkerCommand</name></extends></super>
	<block>{
		<decl_stmt><decl><specifier>private</specifier> <type><name>Achievement</name></type> <name>_achievement</name></decl>;</decl_stmt>

		<constructor><specifier>public</specifier> <name>AddAchievement</name><parameter_list>(<parameter><decl><type><name>Achievement</name></type> <name>achievement</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>workerID</name></decl></parameter>)</parameter_list>
		<block>{
			<expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>workerID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>this</name><operator>.</operator><name>_achievement</name></name> <operator>=</operator> <name>achievement</name></expr>;</expr_stmt>
		}</block></constructor>

		<function><specifier>public</specifier> <type><name>void</name></type> <name>execute</name><parameter_list>(<parameter><decl><type><name>Worker</name></type> <name>worker</name></decl></parameter>, <parameter><decl><type><name>Project</name></type> <name>project</name></decl></parameter>)</parameter_list>
		<block>{

			<expr_stmt><expr><call><name><name>worker</name><operator>.</operator><name>addAchievement</name></name><argument_list>(<argument><expr><name>_achievement</name></expr></argument>, <argument><expr><call><name><name>project</name><operator>.</operator><name>getID</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></function>

	}</block></class>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="Command Peripheral Classes/QuestioningCommand.java" hash="4c6bd961fa306502cb016b49124d8ac83a7233ed"><package>package <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>commands</name></name>;</package>

<import>import static <name><name>com</name><operator>.</operator><name>googlecode</name><operator>.</operator><name>objectify</name><operator>.</operator><name>ObjectifyService</name><operator>.</operator><name>ofy</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>dto</name><operator>.</operator><name>DTO</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>entities</name><operator>.</operator><name>Project</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>entities</name><operator>.</operator><name>Worker</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>dto</name><operator>.</operator><name>ajax</name><operator>.</operator><name>questions</name><operator>.</operator><name>AnswerDTO</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>dto</name><operator>.</operator><name>ajax</name><operator>.</operator><name>questions</name><operator>.</operator><name>CommentDTO</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>dto</name><operator>.</operator><name>ajax</name><operator>.</operator><name>questions</name><operator>.</operator><name>QuestionDTO</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>dto</name><operator>.</operator><name>firebase</name><operator>.</operator><name>notification</name><operator>.</operator><name>NotificationInFirebase</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>entities</name><operator>.</operator><name>artifacts</name><operator>.</operator><name>Artifact</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>entities</name><operator>.</operator><name>artifacts</name><operator>.</operator><name>Function</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>entities</name><operator>.</operator><name>artifacts</name><operator>.</operator><name>Test</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>entities</name><operator>.</operator><name>microtasks</name><operator>.</operator><name>Microtask</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>entities</name><operator>.</operator><name>questions</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>history</name><operator>.</operator><name>HistoryLog</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>history</name><operator>.</operator><name>PropertyChange</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>history</name><operator>.</operator><name>QuestionViewed</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>servlets</name><operator>.</operator><name>ThreadContext</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>util</name><operator>.</operator><name>FirebaseService</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>appengine</name><operator>.</operator><name>api</name><operator>.</operator><name>datastore</name><operator>.</operator><name>QueryResultIterator</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>googlecode</name><operator>.</operator><name>objectify</name><operator>.</operator><name>Key</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>googlecode</name><operator>.</operator><name>objectify</name><operator>.</operator><name>LoadResult</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>googlecode</name><operator>.</operator><name>objectify</name><operator>.</operator><name>VoidWork</name></name>;</import>

<class><specifier>public</specifier> <specifier>abstract</specifier> class <name>QuestioningCommand</name> <super><extends>extends <name>Command</name></extends></super>
<block>{
	<decl_stmt><decl><specifier>protected</specifier> <type><name>long</name></type> <name>questioningId</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>protected</specifier> <type><name>String</name></type> <name>workerId</name></decl>;</decl_stmt>

	<comment type="block">/* PUBLIC METHODS */</comment>
	<function><specifier>public</specifier> <specifier>static</specifier> <type><name>QuestioningCommand</name></type> <name>createQuestion</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>jsonDTOData</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>workerId</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>workerHandle</name></decl></parameter>)</parameter_list><block>{
		<return>return <expr><operator>new</operator> <call><name>CreateQuestion</name><argument_list>(<argument><expr><name>jsonDTOData</name></expr></argument>, <argument><expr><name>workerId</name></expr></argument>, <argument><expr><name>workerHandle</name></expr></argument>)</argument_list></call></expr>;</return>
	}</block></function>

	<function><specifier>public</specifier> <specifier>static</specifier> <type><name>QuestioningCommand</name></type> <name>createAnswer</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>jsonDTOData</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>workerId</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>workerHandle</name></decl></parameter>)</parameter_list><block>{
		<return>return <expr><operator>new</operator> <call><name>CreateAnswer</name><argument_list>(<argument><expr><name>jsonDTOData</name></expr></argument>, <argument><expr><name>workerId</name></expr></argument>, <argument><expr><name>workerHandle</name></expr></argument>)</argument_list></call></expr>;</return>
	}</block></function>

	<function><specifier>public</specifier> <specifier>static</specifier> <type><name>QuestioningCommand</name></type> <name>createComment</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>jsonDTOData</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>workerId</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>workerHandle</name></decl></parameter>)</parameter_list><block>{
		<return>return <expr><operator>new</operator> <call><name>CreateComment</name><argument_list>(<argument><expr><name>jsonDTOData</name></expr></argument>, <argument><expr><name>workerId</name></expr></argument>, <argument><expr><name>workerHandle</name></expr></argument>)</argument_list></call></expr>;</return>
	}</block></function>

	<function><specifier>public</specifier> <specifier>static</specifier> <type><name>QuestioningCommand</name></type> <name>incrementQuestionAnswers</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>questionId</name></decl></parameter>)</parameter_list><block>{
		<return>return <expr><operator>new</operator> <call><name>IncrementQuestionAnswers</name><argument_list>(<argument><expr><name>questionId</name></expr></argument>)</argument_list></call></expr>;</return>
	}</block></function>

	<function><specifier>public</specifier> <specifier>static</specifier> <type><name>QuestioningCommand</name></type> <name>incrementQuestionComments</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>questionId</name></decl></parameter>)</parameter_list><block>{
		<return>return <expr><operator>new</operator> <call><name>IncrementQuestionComments</name><argument_list>(<argument><expr><name>questionId</name></expr></argument>)</argument_list></call></expr>;</return>
	}</block></function>

	<function><specifier>public</specifier> <specifier>static</specifier> <type><name>QuestioningCommand</name></type> <name>addQuestionView</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>questionId</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>workerId</name></decl></parameter>)</parameter_list> <block>{
		<return>return <expr><operator>new</operator> <call><name>AddQuestionView</name><argument_list>(<argument><expr><name>questionId</name></expr></argument>,<argument><expr><name>workerId</name></expr></argument>)</argument_list></call></expr>;</return>
	}</block></function>

	<function><specifier>public</specifier> <specifier>static</specifier> <type><name>QuestioningCommand</name></type> <name>updateQuestion</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>questionId</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>jsonDTO</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>workerId</name></decl></parameter>)</parameter_list> <block>{
		<return>return <expr><operator>new</operator> <call><name>UpdateQuestion</name><argument_list>(<argument><expr><name>questionId</name></expr></argument>,<argument><expr><name>jsonDTO</name></expr></argument>,<argument><expr><name>workerId</name></expr></argument>)</argument_list></call></expr>;</return>
	}</block></function>

	<function><specifier>public</specifier> <specifier>static</specifier> <type><name>QuestioningCommand</name></type> <name>vote</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>questioningId</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>workerId</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>remove</name></decl></parameter>)</parameter_list><block>{
		<return>return <expr><operator>new</operator> <call><name>Vote</name><argument_list>(<argument><expr><name>questioningId</name></expr></argument>, <argument><expr><name>workerId</name></expr></argument>, <argument><expr><name>remove</name></expr></argument>)</argument_list></call></expr>;</return>
	}</block></function>

	<function><specifier>public</specifier> <specifier>static</specifier> <type><name>QuestioningCommand</name></type> <name>report</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>questioningId</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>workerId</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>remove</name></decl></parameter>)</parameter_list><block>{
		<return>return <expr><operator>new</operator> <call><name>Report</name><argument_list>(<argument><expr><name>questioningId</name></expr></argument>, <argument><expr><name>workerId</name></expr></argument>, <argument><expr><name>remove</name></expr></argument>)</argument_list></call></expr>;</return>
	}</block></function>

	<function><specifier>public</specifier> <specifier>static</specifier> <type><name>QuestioningCommand</name></type> <name>linkArtifact</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>questioningId</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>artifactId</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>remove</name></decl></parameter> )</parameter_list><block>{
		<return>return <expr><operator>new</operator> <call><name>LinkArtifact</name><argument_list>(<argument><expr><name>questioningId</name></expr></argument>, <argument><expr><name>artifactId</name></expr></argument>, <argument><expr><name>remove</name></expr></argument>)</argument_list></call></expr>;</return>
	}</block></function>

	<function><specifier>public</specifier> <specifier>static</specifier> <type><name>QuestioningCommand</name></type> <name>subscribeWorker</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>questioningId</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>workerId</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>remove</name></decl></parameter>)</parameter_list><block>{
		<return>return <expr><operator>new</operator> <call><name>SubscribeWorker</name><argument_list>(<argument><expr><name>questioningId</name></expr></argument>, <argument><expr><name>workerId</name></expr></argument>, <argument><expr><name>remove</name></expr></argument>)</argument_list></call></expr>;</return>
	}</block></function>

	<function><specifier>public</specifier> <specifier>static</specifier> <type><name>QuestioningCommand</name></type> <name>notifySubscribers</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>questioningId</name></decl></parameter>, <parameter><decl><type><name>NotificationInFirebase</name></type> <name>notification</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>excludedWorkerId</name></decl></parameter>)</parameter_list><block>{
		<return>return <expr><operator>new</operator> <call><name>NotifySubscribers</name><argument_list>(<argument><expr><name>questioningId</name></expr></argument>,<argument><expr><name>notification</name></expr></argument>,<argument><expr><name>excludedWorkerId</name></expr></argument>)</argument_list></call></expr>;</return>
	}</block></function>

	<function><specifier>public</specifier> <specifier>static</specifier> <type><name>QuestioningCommand</name></type> <name>setClosed</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>questioningId</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>closed</name></decl></parameter>)</parameter_list><block>{
		<return>return <expr><operator>new</operator> <call><name>SetClosed</name><argument_list>(<argument><expr><name>questioningId</name></expr></argument>,<argument><expr><name>closed</name></expr></argument>)</argument_list></call></expr>;</return>
	}</block></function>



	<constructor><specifier>private</specifier> <name>QuestioningCommand</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>questioningId</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>workerId</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>questioningId</name></name> <operator>=</operator> <name>questioningId</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>workerId</name></name> <operator>=</operator> <name>workerId</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>queueCommand</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></constructor>
	<comment type="line">// All constructors for TestCommand MUST call queueCommand and the end of</comment>
	<comment type="line">// the constructor to add the</comment>
	<comment type="line">// command to the queue.</comment>
	<function><specifier>private</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>queueCommand</name><parameter_list>(<parameter><decl><type><name>Command</name></type> <name>command</name></decl></parameter>)</parameter_list> <block>{
		<decl_stmt><decl><type><name>ThreadContext</name></type> <name>threadContext</name> <init>= <expr><call><name><name>ThreadContext</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>threadContext</name><operator>.</operator><name>addCommand</name></name><argument_list>(<argument><expr><name>command</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="line">//	CommandContext.ctx.addCommand(command);</comment>
	}</block></function>

	<function><specifier>public</specifier> <type><name>void</name></type> <name>execute</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>String</name></type> <name>projectId</name></decl></parameter>)</parameter_list> <block>{
	        	<if>if <condition>(<expr><name>questioningId</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
	    			<decl_stmt><decl><type><name><name>LoadResult</name><argument_list type="generic">&lt;<argument><name>Questioning</name></argument>&gt;</argument_list></name></type> <name>questioningRef</name> <init>= <expr><call><name>find</name><argument_list>(<argument><expr><name>questioningId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	    			<if>if <condition>(<expr><name>questioningRef</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then>
	    				<block type="pseudo"><expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name>
	    						<operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"errore Cannot execute QuestiongCommand. Could not Questioning test for questioningId "</literal>
	    								<operator>+</operator> <name>questioningId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
	    			<else>else <block>{
	    				<decl_stmt><decl><type><name>Questioning</name></type> <name>questioning</name> <init>= <expr><call><name><name>questioningRef</name><operator>.</operator><name>now</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	    				<expr_stmt><expr><call><name>execute</name><argument_list>(<argument><expr><name>questioning</name></expr></argument>, <argument><expr><name>projectId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    			}</block></else></if>
	    		}</block></then> <else>else
	    			<block type="pseudo"><expr_stmt><expr><call><name>execute</name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>projectId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>
	}</block></function>

	<function_decl><specifier>public</specifier> <specifier>abstract</specifier> <type><name>void</name></type> <name>execute</name><parameter_list>(<parameter><decl><type><name>Questioning</name></type> <name>questioning</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>projectId</name></decl></parameter>)</parameter_list>;</function_decl>

	<comment type="line">// Finds the specified microtask. Returns null if no such microtask exists.</comment>
	<function><specifier>protected</specifier> <type><name><name>LoadResult</name><argument_list type="generic">&lt;<argument><name>Questioning</name></argument>&gt;</argument_list></name></type> <name>find</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>questioningId</name></decl></parameter>)</parameter_list>
	<block>{

		<return>return <expr><operator>(</operator><name><name>LoadResult</name><argument_list type="generic">&lt;<argument><name>Questioning</name></argument>&gt;</argument_list></name><operator>)</operator> <call><name>ofy</name><argument_list>()</argument_list></call><operator>.</operator><call><name>load</name><argument_list>()</argument_list></call><operator>.</operator><call><name>key</name><argument_list>(<argument><expr><call><name><name>Questioning</name><operator>.</operator><name>getKey</name></name><argument_list>(<argument><expr><name>questioningId</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

	}</block></function>


	<class><specifier>protected</specifier> <specifier>static</specifier> class <name>CreateQuestion</name> <super><extends>extends <name>QuestioningCommand</name></extends></super> <block>{
		<decl_stmt><decl><specifier>private</specifier> <type><name>String</name></type> <name>jsonDTOData</name></decl>;</decl_stmt>
		<decl_stmt><decl><specifier>private</specifier> <type><name>String</name></type> <name>workerHandle</name></decl>;</decl_stmt>

		<constructor><specifier>public</specifier> <name>CreateQuestion</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>jsonDTOData</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>ownerId</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>ownerHandle</name></decl></parameter>)</parameter_list> <block>{
			<expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><literal type="number">0L</literal></expr></argument>, <argument><expr><name>ownerId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>this</name><operator>.</operator><name>jsonDTOData</name></name><operator>=</operator> <name>jsonDTOData</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>this</name><operator>.</operator><name>workerHandle</name></name> <operator>=</operator> <name>ownerHandle</name></expr>;</expr_stmt>
		}</block></constructor>

		<function><specifier>public</specifier> <type><name>void</name></type> <name>execute</name><parameter_list>(<parameter><decl><type><name>Questioning</name></type> <name>questioning</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>projectId</name></decl></parameter>)</parameter_list> <block>{

			<decl_stmt><decl><type><name>QuestionDTO</name></type> <name>dto</name><init>=<expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
			<try>try <block>{
				<expr_stmt><expr><name>dto</name> <operator>=</operator> <operator>(</operator><name>QuestionDTO</name><operator>)</operator> <call><name><name>DTO</name><operator>.</operator><name>read</name></name><argument_list>(<argument><expr><name>jsonDTOData</name></expr></argument>, <argument><expr><name><name>QuestionDTO</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
				<comment type="line">// TODO Auto-generated catch block</comment>
				<expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			}</block></catch></try>
			<expr_stmt><expr><operator>new</operator> <call><name>Question</name><argument_list>(<argument><expr><name><name>dto</name><operator>.</operator><name>title</name></name></expr></argument>, <argument><expr><name><name>dto</name><operator>.</operator><name>text</name></name></expr></argument>, <argument><expr><name><name>dto</name><operator>.</operator><name>tags</name></name></expr></argument>, <argument><expr><name><name>dto</name><operator>.</operator><name>artifactId</name></name></expr></argument>, <argument><expr><name>workerId</name></expr></argument>, <argument><expr><name>workerHandle</name></expr></argument>, <argument><expr><name>projectId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></function>
	}</block></class>

	<class><specifier>protected</specifier> <specifier>static</specifier> class <name>CreateAnswer</name> <super><extends>extends <name>QuestioningCommand</name></extends></super> <block>{
		<decl_stmt><decl><specifier>private</specifier> <type><name>String</name></type> <name>jsonDTOData</name></decl>;</decl_stmt>
		<decl_stmt><decl><specifier>private</specifier> <type><name>String</name></type> <name>workerHandle</name></decl>;</decl_stmt>

		<constructor><specifier>public</specifier> <name>CreateAnswer</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>jsonDTOData</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>ownerId</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>ownerHandle</name></decl></parameter>)</parameter_list> <block>{
			<expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><literal type="number">0L</literal></expr></argument>, <argument><expr><name>ownerId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>this</name><operator>.</operator><name>jsonDTOData</name></name><operator>=</operator><name>jsonDTOData</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>this</name><operator>.</operator><name>workerHandle</name></name> <operator>=</operator> <name>ownerHandle</name></expr>;</expr_stmt>
		}</block></constructor>

		<function><specifier>public</specifier> <type><name>void</name></type> <name>execute</name><parameter_list>(<parameter><decl><type><name>Questioning</name></type> <name>questioning</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>projectId</name></decl></parameter>)</parameter_list> <block>{

			<decl_stmt><decl><type><name>AnswerDTO</name></type> <name>dto</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
			<try>try <block>{
				<expr_stmt><expr><name>dto</name> <operator>=</operator> <operator>(</operator><name>AnswerDTO</name><operator>)</operator><call><name><name>DTO</name><operator>.</operator><name>read</name></name><argument_list>(<argument><expr><name>jsonDTOData</name></expr></argument>, <argument><expr><name><name>AnswerDTO</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><operator>new</operator> <call><name>Answer</name><argument_list>(<argument><expr><name><name>dto</name><operator>.</operator><name>text</name></name></expr></argument>, <argument><expr><name><name>dto</name><operator>.</operator><name>questionId</name></name></expr></argument>, <argument><expr><name>workerId</name></expr></argument>, <argument><expr><name>workerHandle</name></expr></argument>, <argument><expr><name>projectId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
				<comment type="line">// TODO Auto-generated catch block</comment>
				<expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			}</block></catch></try>
		}</block></function>
	}</block></class>

	<class><specifier>protected</specifier> <specifier>static</specifier> class <name>CreateComment</name> <super><extends>extends <name>QuestioningCommand</name></extends></super> <block>{
		<decl_stmt><decl><specifier>private</specifier> <type><name>String</name></type> <name>jsonDTOData</name></decl>;</decl_stmt>
		<decl_stmt><decl><specifier>private</specifier> <type><name>String</name></type> <name>workerHandle</name></decl>;</decl_stmt>

		<constructor><specifier>public</specifier> <name>CreateComment</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>jsonDTOData</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>ownerId</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>ownerHandle</name></decl></parameter>)</parameter_list> <block>{
			<expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><literal type="number">0L</literal></expr></argument>, <argument><expr><name>ownerId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>this</name><operator>.</operator><name>jsonDTOData</name></name><operator>=</operator><name>jsonDTOData</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>this</name><operator>.</operator><name>workerHandle</name></name> <operator>=</operator> <name>ownerHandle</name></expr>;</expr_stmt>

		}</block></constructor>

		<function><specifier>public</specifier> <type><name>void</name></type> <name>execute</name><parameter_list>(<parameter><decl><type><name>Questioning</name></type> <name>questioning</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>projectId</name></decl></parameter>)</parameter_list> <block>{

			<decl_stmt><decl><type><name>CommentDTO</name></type> <name>dto</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
			<try>try <block>{
				<expr_stmt><expr><name>dto</name> <operator>=</operator> <operator>(</operator><name>CommentDTO</name><operator>)</operator><call><name><name>DTO</name><operator>.</operator><name>read</name></name><argument_list>(<argument><expr><name>jsonDTOData</name></expr></argument>, <argument><expr><name><name>CommentDTO</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><operator>new</operator> <call><name>Comment</name><argument_list>(<argument><expr><name><name>dto</name><operator>.</operator><name>text</name></name></expr></argument>, <argument><expr><name><name>dto</name><operator>.</operator><name>questionId</name></name></expr></argument>, <argument><expr><name><name>dto</name><operator>.</operator><name>answerId</name></name></expr></argument>, <argument><expr><name>workerId</name></expr></argument>, <argument><expr><name>workerHandle</name></expr></argument>, <argument><expr><name>projectId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
				<comment type="line">// TODO Auto-generated catch block</comment>
				<expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			}</block></catch></try>
		}</block></function>
	}</block></class>

	<class><specifier>protected</specifier> <specifier>static</specifier> class <name>UpdateQuestion</name> <super><extends>extends <name>QuestioningCommand</name></extends></super> <block>{
		<decl_stmt><decl><specifier>private</specifier> <type><name>String</name></type> <name>jsonDTO</name></decl>;</decl_stmt>

		<constructor><specifier>public</specifier> <name>UpdateQuestion</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>questionId</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>dto</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>workerId</name></decl></parameter>)</parameter_list> <block>{
			<expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>questionId</name></expr></argument>, <argument><expr><name>workerId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>this</name><operator>.</operator><name>jsonDTO</name></name> <operator>=</operator> <name>dto</name></expr>;</expr_stmt>
		}</block></constructor>

		<function><specifier>public</specifier> <type><name>void</name></type> <name>execute</name><parameter_list>(<parameter><decl><type><name>Questioning</name></type> <name>questioning</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>projectId</name></decl></parameter>)</parameter_list> <block>{

			<decl_stmt><decl><type><name>Question</name></type> <name>question</name> <init>= <expr><operator>(</operator><name>Question</name><operator>)</operator> <name>questioning</name></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>QuestionDTO</name></type> <name>dto</name><init>=<expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
			<try>try <block>{
				<expr_stmt><expr><name>dto</name> <operator>=</operator> <operator>(</operator><name>QuestionDTO</name><operator>)</operator> <call><name><name>DTO</name><operator>.</operator><name>read</name></name><argument_list>(<argument><expr><name>jsonDTO</name></expr></argument>, <argument><expr><name><name>QuestionDTO</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>question</name><operator>.</operator><name>setTitle</name></name><argument_list>(<argument><expr><name><name>dto</name><operator>.</operator><name>title</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>question</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><name><name>dto</name><operator>.</operator><name>text</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>question</name><operator>.</operator><name>setTags</name></name><argument_list>(<argument><expr><name><name>dto</name><operator>.</operator><name>tags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>question</name><operator>.</operator><name>save</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>question</name><operator>.</operator><name>storeVersionToFirebase</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
				<comment type="line">// TODO Auto-generated catch block</comment>
				<expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			}</block></catch></try>

		}</block></function>
	}</block></class>


	<class><specifier>protected</specifier> <specifier>static</specifier> class <name>AddQuestionView</name> <super><extends>extends <name>QuestioningCommand</name></extends></super> <block>{

		<decl_stmt><decl><specifier>private</specifier> <type><name>long</name></type> <name>questionId</name></decl>;</decl_stmt>		
		<constructor><specifier>public</specifier> <name>AddQuestionView</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>questionId</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>workerId</name></decl></parameter>)</parameter_list> <block>{
			<expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><literal type="number">0L</literal></expr></argument>,<argument><expr><name>workerId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>this</name><operator>.</operator><name>questionId</name></name> <operator>=</operator> <name>questionId</name></expr>;</expr_stmt>
		}</block></constructor>

		<function><specifier>public</specifier> <type><name>void</name></type> <name>execute</name><parameter_list>(<parameter><decl><type><name>Questioning</name></type> <name>questioning</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>projectId</name></decl></parameter>)</parameter_list> <block>{
			<expr_stmt><expr><call><name><name>HistoryLog</name><operator>.</operator><name>Init</name></name><argument_list>(<argument><expr><name>projectId</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>addEvent</name><argument_list>(<argument><expr><operator>new</operator> <call><name>QuestionViewed</name><argument_list>(<argument><expr><name>questionId</name></expr></argument>,<argument><expr><name>workerId</name></expr></argument>,<argument><expr><name>projectId</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></function>
	}</block></class>

	<class><specifier>protected</specifier> <specifier>static</specifier> class <name>IncrementQuestionAnswers</name> <super><extends>extends <name>QuestioningCommand</name></extends></super> <block>{

		<constructor><specifier>public</specifier> <name>IncrementQuestionAnswers</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>questionId</name></decl></parameter>)</parameter_list> <block>{
			<expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>questionId</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></constructor>

		<function><specifier>public</specifier> <type><name>void</name></type> <name>execute</name><parameter_list>(<parameter><decl><type><name>Questioning</name></type> <name>questioning</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>projectId</name></decl></parameter>)</parameter_list> <block>{
			
			<decl_stmt><decl><type><name>Question</name></type> <name>question</name> <init>= <expr><operator>(</operator><name>Question</name><operator>)</operator> <name>questioning</name></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name><name>question</name><operator>.</operator><name>incrementAnswers</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>question</name><operator>.</operator><name>save</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		}</block></function>
	}</block></class>

	<class><specifier>protected</specifier> <specifier>static</specifier> class <name>IncrementQuestionComments</name> <super><extends>extends <name>QuestioningCommand</name></extends></super> <block>{

		<constructor><specifier>public</specifier> <name>IncrementQuestionComments</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>questionId</name></decl></parameter>)</parameter_list> <block>{
			<expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>questionId</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></constructor>

		<function><specifier>public</specifier> <type><name>void</name></type> <name>execute</name><parameter_list>(<parameter><decl><type><name>Questioning</name></type> <name>questioning</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>projectId</name></decl></parameter>)</parameter_list> <block>{

			<decl_stmt><decl><type><name>Question</name></type> <name>question</name> <init>= <expr><operator>(</operator><name>Question</name><operator>)</operator> <name>questioning</name></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name><name>question</name><operator>.</operator><name>incrementComments</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>question</name><operator>.</operator><name>save</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		}</block></function>
	}</block></class>


	<class><specifier>protected</specifier> <specifier>static</specifier> class <name>Vote</name> <super><extends>extends <name>QuestioningCommand</name></extends></super> <block>{

		<decl_stmt><decl><specifier>private</specifier> <type><name>boolean</name></type> <name>remove</name></decl>;</decl_stmt>

		<constructor><specifier>public</specifier> <name>Vote</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>questioningId</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>workerId</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>remove</name></decl></parameter>)</parameter_list> <block>{
			<expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>questioningId</name></expr></argument>, <argument><expr><name>workerId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>this</name><operator>.</operator><name>remove</name></name><operator>=</operator><name>remove</name></expr>;</expr_stmt>

		}</block></constructor>

		<function><specifier>public</specifier> <type><name>void</name></type> <name>execute</name><parameter_list>(<parameter><decl><type><name>Questioning</name></type> <name>questioning</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>projectId</name></decl></parameter>)</parameter_list> <block>{

			<if>if<condition>(<expr><name><name>this</name><operator>.</operator><name>remove</name></name></expr>)</condition><then>
				<block type="pseudo"><expr_stmt><expr><call><name><name>questioning</name><operator>.</operator><name>removeVote</name></name><argument_list>(<argument><expr><name>workerId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
			<else>else
				<block type="pseudo"><expr_stmt><expr><call><name><name>questioning</name><operator>.</operator><name>addVote</name></name><argument_list>(<argument><expr><name>workerId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>

		}</block></function>
	}</block></class>

	<class><specifier>protected</specifier> <specifier>static</specifier> class <name>Report</name> <super><extends>extends <name>QuestioningCommand</name></extends></super> <block>{

		<decl_stmt><decl><specifier>private</specifier> <type><name>boolean</name></type> <name>remove</name></decl>;</decl_stmt>

		<constructor><specifier>public</specifier> <name>Report</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>questioningId</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>workerId</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>remove</name></decl></parameter>)</parameter_list> <block>{
			<expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>questioningId</name></expr></argument>, <argument><expr><name>workerId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>this</name><operator>.</operator><name>remove</name></name><operator>=</operator><name>remove</name></expr>;</expr_stmt>

		}</block></constructor>

		<function><specifier>public</specifier> <type><name>void</name></type> <name>execute</name><parameter_list>(<parameter><decl><type><name>Questioning</name></type> <name>questioning</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>projectId</name></decl></parameter>)</parameter_list> <block>{

			<if>if<condition>(<expr><name><name>this</name><operator>.</operator><name>remove</name></name></expr>)</condition><then>
				<block type="pseudo"><expr_stmt><expr><call><name><name>questioning</name><operator>.</operator><name>removeReport</name></name><argument_list>(<argument><expr><name>workerId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
			<else>else
				<block type="pseudo"><expr_stmt><expr><call><name><name>questioning</name><operator>.</operator><name>addReport</name></name><argument_list>(<argument><expr><name>workerId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>

		}</block></function>
	}</block></class>


	<class><specifier>protected</specifier> <specifier>static</specifier> class <name>LinkArtifact</name> <super><extends>extends <name>QuestioningCommand</name></extends></super> <block>{

		<decl_stmt><decl><specifier>private</specifier> <type><name>boolean</name></type> <name>remove</name></decl>;</decl_stmt>
		<decl_stmt><decl><specifier>private</specifier> <type><name>String</name></type> <name>artifactId</name></decl>;</decl_stmt>

		<constructor><specifier>public</specifier> <name>LinkArtifact</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>questioningId</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>artifactId</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>remove</name></decl></parameter>)</parameter_list> <block>{
			<expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>questioningId</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>this</name><operator>.</operator><name>artifactId</name></name> <operator>=</operator> <name>artifactId</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>this</name><operator>.</operator><name>remove</name></name>     <operator>=</operator> <name>remove</name></expr>;</expr_stmt>
		}</block></constructor>

		<function><specifier>public</specifier> <type><name>void</name></type> <name>execute</name><parameter_list>(<parameter><decl><type><name>Questioning</name></type> <name>questioning</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>projectId</name></decl></parameter>)</parameter_list> <block>{
			<if>if<condition>(<expr><name><name>this</name><operator>.</operator><name>remove</name></name></expr>)</condition><then>
				<block type="pseudo"><expr_stmt><expr><operator>(</operator><operator>(</operator><name>Question</name><operator>)</operator><name>questioning</name><operator>)</operator><operator>.</operator><call><name>removeArtifactLink</name><argument_list>(<argument><expr><name>artifactId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
			<else>else
				<block type="pseudo"><expr_stmt><expr><operator>(</operator><operator>(</operator><name>Question</name><operator>)</operator><name>questioning</name><operator>)</operator><operator>.</operator><call><name>addArtifactLink</name><argument_list>(<argument><expr><name>artifactId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>

		}</block></function>
	}</block></class>

	<class><specifier>protected</specifier> <specifier>static</specifier> class <name>SubscribeWorker</name> <super><extends>extends <name>QuestioningCommand</name></extends></super> <block>{

		<decl_stmt><decl><specifier>private</specifier> <type><name>boolean</name></type> <name>remove</name></decl>;</decl_stmt>

		<constructor><specifier>public</specifier> <name>SubscribeWorker</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>questioningId</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>workerId</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>remove</name></decl></parameter>)</parameter_list> <block>{
			<expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>questioningId</name></expr></argument>, <argument><expr><name>workerId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>this</name><operator>.</operator><name>remove</name></name><operator>=</operator><name>remove</name></expr>;</expr_stmt>
		}</block></constructor>

		<function><specifier>public</specifier> <type><name>void</name></type> <name>execute</name><parameter_list>(<parameter><decl><type><name>Questioning</name></type> <name>questioning</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>projectId</name></decl></parameter>)</parameter_list> <block>{
			<if>if<condition>(<expr><name><name>this</name><operator>.</operator><name>remove</name></name></expr>)</condition><then>
				<block type="pseudo"><expr_stmt><expr><operator>(</operator><operator>(</operator><name>Question</name><operator>)</operator><name>questioning</name><operator>)</operator><operator>.</operator><call><name>unsubscribeWorker</name><argument_list>(<argument><expr><name>workerId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
			<else>else
				<block type="pseudo"><expr_stmt><expr><operator>(</operator><operator>(</operator><name>Question</name><operator>)</operator><name>questioning</name><operator>)</operator><operator>.</operator><call><name>subscribeWorker</name><argument_list>(<argument><expr><name>workerId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>

		}</block></function>
	}</block></class>



	<class><specifier>protected</specifier> <specifier>static</specifier> class <name>NotifySubscribers</name> <super><extends>extends <name>QuestioningCommand</name></extends></super> <block>{


		<decl_stmt><decl><specifier>private</specifier> <type><name>NotificationInFirebase</name></type> <name>notification</name></decl>;</decl_stmt>

		<constructor><specifier>public</specifier> <name>NotifySubscribers</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>questioningId</name></decl></parameter>, <parameter><decl><type><name>NotificationInFirebase</name></type> <name>notification</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>workerId</name></decl></parameter>)</parameter_list> <block>{
			<expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>questioningId</name></expr></argument>, <argument><expr><name>workerId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>this</name><operator>.</operator><name>notification</name></name> <operator>=</operator> <name>notification</name></expr>;</expr_stmt>
		}</block></constructor>

		<function><specifier>public</specifier> <type><name>void</name></type> <name>execute</name><parameter_list>(<parameter><decl><type><name>Questioning</name></type> <name>questioning</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>projectId</name></decl></parameter>)</parameter_list> <block>{
			<expr_stmt><expr><call><name><name>questioning</name><operator>.</operator><name>notifySubscribers</name></name><argument_list>(<argument><expr><name>notification</name></expr></argument>, <argument><expr><name>workerId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></function>
	}</block></class>

	<class><specifier>protected</specifier> <specifier>static</specifier> class <name>SetClosed</name> <super><extends>extends <name>QuestioningCommand</name></extends></super> <block>{

		<decl_stmt><decl><specifier>private</specifier> <type><name>boolean</name></type> <name>closed</name></decl>;</decl_stmt>

		<constructor><specifier>public</specifier> <name>SetClosed</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>questioningId</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>closed</name></decl></parameter>)</parameter_list> <block>{
			<expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>questioningId</name></expr></argument>,<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>this</name><operator>.</operator><name>closed</name></name> <operator>=</operator> <name>closed</name></expr>;</expr_stmt>
		}</block></constructor>

		<function><specifier>public</specifier> <type><name>void</name></type> <name>execute</name><parameter_list>(<parameter><decl><type><name>Questioning</name></type> <name>questioning</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>projectId</name></decl></parameter>)</parameter_list> <block>{
			<decl_stmt><decl><type><name>Question</name></type> <name>question</name> <init>= <expr><operator>(</operator><name>Question</name><operator>)</operator> <name>questioning</name></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name><name>question</name><operator>.</operator><name>setClosed</name></name><argument_list>(<argument><expr><name>closed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></function>

	}</block></class>

}</block></class>
</unit>

</unit>
