<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="0.9.5">

<unit revision="0.9.5" language="Java" filename="microtask base class/MicrotaskEvent.java" hash="b20a98e469a9cf8dd49159d4c76353f45e7cce6b"><package>package <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>history</name></name>;</package>

<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>entities</name><operator>.</operator><name>artifacts</name><operator>.</operator><name>Artifact</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>entities</name><operator>.</operator><name>microtasks</name><operator>.</operator><name>Microtask</name></name>;</import>

<class><specifier>public</specifier> class <name>MicrotaskEvent</name> <super><extends>extends <name>HistoryEvent</name></extends></super>
<block>{
	<decl_stmt><decl><specifier>public</specifier> <type><name>String</name></type> <name>eventType</name> <init>= <expr><literal type="string">"microtask"</literal></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><specifier>public</specifier> <type><name>String</name></type> <name>microtaskType</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <type><name>String</name></type> <name>microtaskKey</name></decl>;</decl_stmt>

	<constructor><specifier>public</specifier> <name>MicrotaskEvent</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>eventType</name></decl></parameter>, <parameter><decl><type><name>Microtask</name></type> <name>microtask</name></decl></parameter>)</parameter_list>
	<block>{
		<expr_stmt><expr><call><name>super</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<if>if<condition>(<expr><name>microtask</name><operator>!=</operator><literal type="null">null</literal></expr>)</condition><then>
		<block>{
			<expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>setArtifact</name></name><argument_list>(<argument><expr><call><name><name>microtask</name><operator>.</operator><name>getOwningArtifact</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>this</name><operator>.</operator><name>eventType</name></name>     <operator>+=</operator> <literal type="string">"."</literal> <operator>+</operator> <name>eventType</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>this</name><operator>.</operator><name>microtaskType</name></name> <operator>=</operator> <call><name><name>microtask</name><operator>.</operator><name>microtaskName</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>this</name><operator>.</operator><name>microtaskKey</name></name>  <operator>=</operator> <call><name><name>Microtask</name><operator>.</operator><name>keyToString</name></name><argument_list>(<argument><expr><call><name><name>microtask</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>
	}</block></constructor>

	<function><specifier>public</specifier> <type><name>String</name></type> <name>getEventType</name><parameter_list>()</parameter_list><block>{
		<return>return <expr><name>eventType</name></expr>;</return>
	}</block></function>
}</block></class>
</unit>

</unit>
