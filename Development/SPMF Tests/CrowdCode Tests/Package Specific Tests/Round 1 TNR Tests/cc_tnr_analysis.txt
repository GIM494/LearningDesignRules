The files for this analysis were grouped according to whatever package they were located in. For the util and service packages, running this algorithm to generate 25, 50, and 70 rules with minconf 80% and delta = 2, was not possible. The process was ended once greater than 10 minutes was required to get the output. However, the databased produced from the other packages seemed to run just fine.

HISTORY package
----------------

100 rules, minconf 80%, delta = 2:
->Produced 28 rules 

-> Attributes found in rules:
1 class has non-empty-body constructor
3 class has member field called eventType
4 class has member field of type String
5 class has member field eventType of type String
7 is public class
41 class defines constructor with parameter of type String
44 constructor sets member variables workerID
45 class defines constructor with parameter of type Microtask
46 class has member field called workerID
47 class has member field workerID of type String
45 class defines constructor with parameter of type Microtask
48 class extends class MicrotaskEvent

-> Most interesting rules:
48  ==> 1 7 45  #SUP: 11 #CONF: 1.0
41 48  ==> 1 4 7 45 46 47  #SUP: 7 #CONF: 1.0
41 48  ==> 1 4 7 44 45 46 47  #SUP: 6 #CONF: 0.8571428571428571
*Note: 46, 47 are slightly redundant and are basically always found together


25 rules, minconf 80%, delta = 2:
-> Produced 14 rules

-> Attributes found in rules:
1 class has non-empty-body constructor
4 class has member field of type String
7 is public class
41 class defines constructor with parameter of type String
45 class defines constructor with parameter of type Microtask
48 class extends class MicrotaskEvent

-> Most interesting rules:
45  ==> 1 7 48  #SUP: 11 #CONF: 0.9166666666666666
4 48  ==> 1 7 45  #SUP: 8 #CONF: 1.0
41 45  ==> 1 4 7  #SUP: 8 #CONF: 1.0 (Q: Why might a rule like this exists)

25 rules, minconf 70%, delta = 2:
-> Produced 15 rules 

-> Attributes found in rules:
1 class has non-empty-body constructor
4 class has member field of type String
7 is public class
41 class defines constructor with parameter of type String
45 class defines constructor with parameter of type Microtask
48 class extends class MicrotaskEvent

-> Most interesting rules:
48  ==> 1 7 45  #SUP: 11 #CONF: 1.0
4 48  ==> 1 7 45  #SUP: 8 #CONF: 1.0
48  ==> 1 4 7 45  #SUP: 8 #CONF: 0.7272727272727273
** Note changing the minimum confidence didn't drastically change our results





ENTITIES package
----------------
70 rules, minconf 80%, delta = 2:
-> Produced 15 rules

-> Attributes in rules
1 class has empty-body constructor
2 class defines constructor with no parameters
3 class has non-empty-body constructor
5 class defines constructor with parameter of type String
9 class has member field of type String
14 class has member field of type int
20 is public class
47 class with annotation @Subclass with 
index = true 
96 has public function getKey()
98 getKey() function returns type Key

-> Most interesting rules
47  ==> 1 2 3 5 20  #SUP: 10 #CONF: 1.0
* Interesting because it seems to contradict itself, not because
* this is necessarily a rule we would want to print out

50 rules, minconf 80%, delta = 2:
** This test produced basically the same results as the previous
* one except the rules were ordered differently; reviewing the
* algorithm more deeply might help in determining what a good value
* for the total number of rules generated is


25 rules, minconf 80%, delta = 2:
-> Produced 11 rules

-> Attributes in rules
1 class has empty-body constructor
2 class defines constructor with no parameters
3 class has non-empty-body constructor
5 class defines constructor with parameter of type String
9 class has member field of type String
20 is public class


-> Most interesting rules
None. All of these felt too general. It's interesting only these six attributes were in rules although 828 attributes were created for the entities package grouping


DTO package
----------------
70 rules, minconf 80%, delta = 2:
-> Produced 42 rules

-> Attributes in rules
1 class has empty-body constructor
2 class defines constructor with no parameters
4 class has member field of type String
6 class extends class DTO
7 is public class
11 class has member field of type List
28 class has non-empty-body constructor
31 class defines constructor with parameter of type String
32 constructor stores all parameters as member variables

-> Most interesting rules
28  ==> 1 2 7  #SUP: 34 #CONF: 1.0 (again, interesting because it seems to contradict
Itself not because this is a rule we would want to produce)
6  ==> 1 2 7  #SUP: 34 #CONF: 0.8947368421052632 (YES!! SUCESS)
32  ==> 1 2 6 7 28  #SUP: 20 #CONF: 1.0 (again, interesting because it seems to contradict
Itself not because this is a rule we would want to produce)


50 rules, minconf 80%, delta = 2:
-> Produced 28 rules

-> Attributes in rules
1 class has empty-body constructor
2 class defines constructor with no parameters
4 class has member field of type String
6 class extends class DTO
7 is public class
11 class has member field of type List
28 class has non-empty-body constructor
31 class defines constructor with parameter of type String

-> Most interesting rules:
6  ==> 4 7  #SUP: 31 #CONF: 0.8157894736842105
6  ==> 1 2 7  #SUP: 34 #CONF: 0.8947368421052632
6 28  ==> 1 2 7  #SUP: 24 #CONF: 1.0 (contradicting)


25 rules, minconf 80%, delta = 2:
-> Produced 19 rules

-> Attributes in rules

-> Most interesting rules:
6  ==> 1 2 7  #SUP: 34 #CONF: 0.8947368421052632
6  ==> 4 7  #SUP: 31 #CONF: 0.8157894736842105
28  ==> 1 2 4 7  #SUP: 29 #CONF: 0.8529411764705882 (contradicting)

* Note: the rule we really care about 6 ==> 1 2 7 appeared in all three levels even in the lowest level


COMMANDS package
----------------
70 rules, minconf 80%, delta = 2:
-> Produced 9 rules

-> Attributes in rules
2 is public class
3 class has non-empty-body constructor
10 class extends class Command
36 has private static function queueCommand()
37 queueCommand() function has parameter of type Command
38 class has void function queueCommand()
39 has public function execute()
40 execute() function has parameter of type String
41 class has void function execute()

-> Most interesting rules:
(These are all the rules that were produced)
3  ==> 2 10 36 37 38 39 40 41  #SUP: 7 #CONF: 1.0
38  ==> 2 3 10 36 37 39 40 41  #SUP: 7 #CONF: 1.0
39  ==> 2 3 10 36 37 38 40 41  #SUP: 7 #CONF: 1.0
41  ==> 2 3 10 36 37 38 39 40  #SUP: 7 #CONF: 1.0
40  ==> 2 3 10 36 37 38 39 41  #SUP: 7 #CONF: 1.0
2  ==> 3 10 36 37 38 39 40 41  #SUP: 7 #CONF: 0.875
37  ==> 2 3 10 36 38 39 40 41  #SUP: 7 #CONF: 1.0
36  ==> 2 3 10 37 38 39 40 41  #SUP: 7 #CONF: 1.0
*****10  ==> 2 3 36 37 38 39 40 41  #SUP: 7 #CONF: 1.0*****
This last rule is especially interesting; it goes from a moderately specific attribute to several specific attributes. Additionally, even though it is not one of the example rules, it could still be a rule that is useful/helpful and applicable in the situation.


* Note: all rules were variations of the same rule with one attribute as the antecedent and all the rest as consequents

25/50 rules, minconf 80%, delta = 2:
Exactly the same as k = 70 rules; rules produced exactly the same but in different orders; it seems that specifying a lower number of rules to be produced doesn't significantly reduce the total number of interesting rules that are produced.






