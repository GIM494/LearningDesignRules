<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="0.9.5" language="Java" filename="MemoryTree.java"><comment type="block" format="javadoc">/*******************************************************************************
 * Copyright (c) 2005 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * 
 * Contributors:
 *     IBM Corporation - initial API and implementation
 *******************************************************************************/</comment>
<package>package <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>core</name><operator>.</operator><name>internal</name><operator>.</operator><name>filesystem</name><operator>.</operator><name>memory</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>core</name><operator>.</operator><name>filesystem</name><operator>.</operator><name>EFS</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>core</name><operator>.</operator><name>filesystem</name><operator>.</operator><name>IFileInfo</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>core</name><operator>.</operator><name>filesystem</name><operator>.</operator><name>provider</name><operator>.</operator><name>FileInfo</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>core</name><operator>.</operator><name>runtime</name><operator>.</operator><name>*</name></name>;</import>

<comment type="block" format="javadoc">/**
 * An in-memory file system.
 */</comment>
<class><specifier>public</specifier> class <name>MemoryTree</name> <block>{
	<class><specifier>static</specifier> class <name>DirNode</name> <super><extends>extends <name>Node</name></extends></super> <block>{
		<decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>ArrayList</name></type> <name>children</name> <init>= <expr><operator>new</operator> <call><name>ArrayList</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

		<constructor><name>DirNode</name><parameter_list>(<parameter><decl><type><name>Node</name></type> <name>parent</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>)</parameter_list> <block>{
			<expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>parent</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></constructor>

		<function><type><name>void</name></type> <name>add</name><parameter_list>(<parameter><decl><type><name>Node</name></type> <name>child</name></decl></parameter>)</parameter_list> <block>{
			<expr_stmt><expr><call><name><name>children</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>child</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></function>

		<function><specifier>public</specifier> <type><name><name>String</name><index>[]</index></name></type> <name>childNames</name><parameter_list>()</parameter_list> <block>{
			<decl_stmt><decl><type><name><name>String</name><index>[]</index></name></type> <name>names</name> <init>= <expr><operator>new</operator> <name><name>String</name><index>[<expr><call><name><name>children</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>]</index></name></expr></init></decl>;</decl_stmt>
			<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>imax</name> <init>= <expr><call><name><name>children</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>imax</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
				<decl_stmt><decl><type><name>Node</name></type> <name>child</name> <init>= <expr><operator>(</operator><name>Node</name><operator>)</operator> <call><name><name>children</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><name><name>names</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name><name>child</name><operator>.</operator><name>getInfo</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>getName</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			}</block></for>
			<return>return <expr><name>names</name></expr>;</return>
		}</block></function>

		<comment type="block" format="javadoc">/**
		 * Returns the child with the given name, or null if not found.
		 * @param name
		 * @return
		 */</comment>
		<function><type><name>Node</name></type> <name>getChild</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>)</parameter_list> <block>{
			<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>imax</name> <init>= <expr><call><name><name>children</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>imax</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
				<decl_stmt><decl><type><name>Node</name></type> <name>child</name> <init>= <expr><operator>(</operator><name>Node</name><operator>)</operator> <call><name><name>children</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<if>if <condition>(<expr><call><name><name>child</name><operator>.</operator><name>getInfo</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>getName</name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>)</condition><then>
					<block type="pseudo"><return>return <expr><name>child</name></expr>;</return></block></then></if>
			}</block></for>
			<return>return <expr><literal type="null">null</literal></expr>;</return>
		}</block></function>

		<function><specifier>protected</specifier> <type><name>void</name></type> <name>initializeInfo</name><parameter_list>(<parameter><decl><type><name>FileInfo</name></type> <name>fileInfo</name></decl></parameter>)</parameter_list> <block>{
			<expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>initializeInfo</name></name><argument_list>(<argument><expr><name>fileInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>fileInfo</name><operator>.</operator><name>setDirectory</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></function>

		<function><type><name>boolean</name></type> <name>isFile</name><parameter_list>()</parameter_list> <block>{
			<return>return <expr><literal type="boolean">false</literal></expr>;</return>
		}</block></function>

		<function><type><name>void</name></type> <name>remove</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>)</parameter_list> <block>{
			<decl_stmt><decl><type><name>Node</name></type> <name>child</name> <init>= <expr><call><name>getChild</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<if>if <condition>(<expr><name>child</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then>
				<block type="pseudo"><expr_stmt><expr><call><name><name>children</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><name>child</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
		}</block></function>

		<function><specifier>public</specifier> <type><name>String</name></type> <name>toString</name><parameter_list>()</parameter_list> <block>{
			<return>return <expr><call><name><name>super</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="char">' '</literal> <operator>+</operator> <name>children</name></expr>;</return>
		}</block></function>
	}</block></class>

	<class><specifier>static</specifier> class <name>FileNode</name> <super><extends>extends <name>Node</name></extends></super> <block>{
		<decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>contents</name> <init>= <expr><name>EMPTY_CONTENTS</name></expr></init></decl>;</decl_stmt>

		<constructor><name>FileNode</name><parameter_list>(<parameter><decl><type><name>Node</name></type> <name>parent</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>)</parameter_list> <block>{
			<expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>parent</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></constructor>

		<function><type><name>boolean</name></type> <name>isFile</name><parameter_list>()</parameter_list> <block>{
			<return>return <expr><literal type="boolean">true</literal></expr>;</return>
		}</block></function>

		<function><specifier>public</specifier> <type><name>InputStream</name></type> <name>openInputStream</name><parameter_list>()</parameter_list> <block>{
			<return>return <expr><operator>new</operator> <call><name>ByteArrayInputStream</name><argument_list>(<argument><expr><name>contents</name></expr></argument>)</argument_list></call></expr>;</return>
		}</block></function>

		<function><specifier>public</specifier> <type><name>OutputStream</name></type> <name>openOutputStream</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>options</name></decl></parameter>)</parameter_list> <block>{
			<return>return <expr><operator>new</operator> <class><super><name>ByteArrayOutputStream</name></super><argument_list>()</argument_list> <block>{
				<function><specifier>public</specifier> <type><name>void</name></type> <name>close</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
					<expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>setContents</name><argument_list>(<argument><expr><call><name>toByteArray</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></function>
			}</block></class></expr>;</return>
		}</block></function>

		<function><specifier>protected</specifier> <type><name>void</name></type> <name>setContents</name><parameter_list>(<parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>bytes</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>options</name></decl></parameter>)</parameter_list> <block>{
			<if>if <condition>(<expr><operator>(</operator><name>options</name> <operator>&amp;</operator> <name><name>EFS</name><operator>.</operator><name>APPEND</name></name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
				<comment type="line">//create reference in case of concurrent modification</comment>
				<decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>oldContents</name> <init>= <expr><name><name>this</name><operator>.</operator><name>contents</name></name></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>newContents</name> <init>= <expr><operator>new</operator> <name><name>byte</name><index>[<expr><name><name>oldContents</name><operator>.</operator><name>length</name></name> <operator>+</operator> <name><name>bytes</name><operator>.</operator><name>length</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>arraycopy</name></name><argument_list>(<argument><expr><name>oldContents</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>newContents</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>oldContents</name><operator>.</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>arraycopy</name></name><argument_list>(<argument><expr><name>bytes</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>newContents</name></expr></argument>, <argument><expr><name><name>oldContents</name><operator>.</operator><name>length</name></name></expr></argument>, <argument><expr><name><name>bytes</name><operator>.</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>this</name><operator>.</operator><name>contents</name></name> <operator>=</operator> <name>newContents</name></expr>;</expr_stmt>
			}</block></then> <else>else
				<block type="pseudo"><expr_stmt><expr><name><name>this</name><operator>.</operator><name>contents</name></name> <operator>=</operator> <name>bytes</name></expr>;</expr_stmt></block></else></if>
			<expr_stmt><expr><call><name><name>info</name><operator>.</operator><name>setLastModified</name></name><argument_list>(<argument><expr><call><name><name>System</name><operator>.</operator><name>currentTimeMillis</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><operator>(</operator><operator>(</operator><name>FileInfo</name><operator>)</operator> <name>info</name><operator>)</operator><operator>.</operator><call><name>setLength</name><argument_list>(<argument><expr><name><name>bytes</name><operator>.</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></function>
	}</block></class>

	<class><specifier>static</specifier> <specifier>abstract</specifier> class <name>Node</name> <super><extends>extends <name>PlatformObject</name></extends></super> <block>{
		<decl_stmt><decl><specifier>protected</specifier> <type><name>IFileInfo</name></type> <name>info</name></decl>;</decl_stmt>

		<constructor><name>Node</name><parameter_list>(<parameter><decl><type><name>Node</name></type> <name>parent</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>)</parameter_list> <block>{
			<if>if <condition>(<expr><name>parent</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then>
				<block type="pseudo"><expr_stmt><expr><operator>(</operator><operator>(</operator><name>DirNode</name><operator>)</operator> <name>parent</name><operator>)</operator><operator>.</operator><call><name>add</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
			<decl_stmt><decl><type><name>FileInfo</name></type> <name>fileInfo</name> <init>= <expr><operator>new</operator> <call><name>FileInfo</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name>initializeInfo</name><argument_list>(<argument><expr><name>fileInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>this</name><operator>.</operator><name>info</name></name> <operator>=</operator> <name>fileInfo</name></expr>;</expr_stmt>
		}</block></constructor>

		<function><type><name>IFileInfo</name></type> <name>getInfo</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>copy</name></decl></parameter>)</parameter_list> <block>{
			<return>return <expr><call>(<name>IFileInfo</name>) <argument_list>(<argument><expr><ternary><condition><expr><name>copy</name></expr> ?</condition><then> <expr><operator>(</operator><operator>(</operator><name>FileInfo</name><operator>)</operator> <name>info</name><operator>)</operator><operator>.</operator><call><name>clone</name><argument_list>()</argument_list></call></expr> </then><else>: <expr><name>info</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</return>
		}</block></function>

		<function><specifier>protected</specifier> <type><name>void</name></type> <name>initializeInfo</name><parameter_list>(<parameter><decl><type><name>FileInfo</name></type> <name>fileInfo</name></decl></parameter>)</parameter_list> <block>{
			<expr_stmt><expr><call><name><name>fileInfo</name><operator>.</operator><name>setExists</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>fileInfo</name><operator>.</operator><name>setLastModified</name></name><argument_list>(<argument><expr><call><name><name>System</name><operator>.</operator><name>currentTimeMillis</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></function>

		<function_decl><specifier>abstract</specifier> <type><name>boolean</name></type> <name>isFile</name><parameter_list>()</parameter_list>;</function_decl>

		<function><type><name>void</name></type> <name>putInfo</name><parameter_list>(<parameter><decl><type><name>IFileInfo</name></type> <name>newInfo</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>options</name></decl></parameter>)</parameter_list> <block>{
			<if>if <condition>(<expr><operator>(</operator><name>options</name> <operator>&amp;</operator> <name><name>EFS</name><operator>.</operator><name>SET_ATTRIBUTES</name></name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
				<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ALL_ATTRIBUTES</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
					<block type="pseudo"><expr_stmt><expr><call><name><name>info</name><operator>.</operator><name>setAttribute</name></name><argument_list>(<argument><expr><name><name>ALL_ATTRIBUTES</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><call><name><name>newInfo</name><operator>.</operator><name>getAttribute</name></name><argument_list>(<argument><expr><name><name>ALL_ATTRIBUTES</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
			}</block></then></if>
			<if>if <condition>(<expr><operator>(</operator><name>options</name> <operator>&amp;</operator> <name><name>EFS</name><operator>.</operator><name>SET_LAST_MODIFIED</name></name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
				<expr_stmt><expr><call><name><name>info</name><operator>.</operator><name>setLastModified</name></name><argument_list>(<argument><expr><call><name><name>newInfo</name><operator>.</operator><name>getLastModified</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>
		}</block></function>

		<comment type="block" format="javadoc">/**
		 * For debugging purposes only.
		 */</comment>
		<function><specifier>public</specifier> <type><name>String</name></type> <name>toString</name><parameter_list>()</parameter_list> <block>{
			<return>return <expr><call><name><name>info</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr>;</return>
		}</block></function>
	}</block></class>

	<decl_stmt><decl><specifier>static</specifier> <type><specifier>final</specifier> <name><name>int</name><index>[]</index></name></type> <name>ALL_ATTRIBUTES</name> <init>= <expr><operator>new</operator> <name><name>int</name><index>[]</index></name> <block>{<expr><name><name>EFS</name><operator>.</operator><name>ATTRIBUTE_ARCHIVE</name></name></expr>, <expr><name><name>EFS</name><operator>.</operator><name>ATTRIBUTE_EXECUTABLE</name></name></expr>, <expr><name><name>EFS</name><operator>.</operator><name>ATTRIBUTE_HIDDEN</name></name></expr>, <expr><name><name>EFS</name><operator>.</operator><name>ATTRIBUTE_READ_ONLY</name></name></expr>,}</block></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>MemoryTree</name></type> <name>TREE</name> <init>= <expr><operator>new</operator> <call><name>MemoryTree</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><specifier>static</specifier> <type><specifier>final</specifier> <name><name>byte</name><index>[]</index></name></type> <name>EMPTY_CONTENTS</name> <init>= <expr><operator>new</operator> <name><name>byte</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>ROOT_NAME</name> <init>= <expr><literal type="string">"&lt;root&gt;"</literal></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><specifier>private</specifier> <type><name>Node</name></type> <name>root</name> <init>= <expr><operator>new</operator> <call><name>DirNode</name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>ROOT_NAME</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<constructor><specifier>private</specifier> <name>MemoryTree</name><parameter_list>()</parameter_list> <block>{
		<comment type="line">// TREE singleton should be used rather than direct instantiation</comment>
	}</block></constructor>

	<function><specifier>public</specifier> <type><name><name>String</name><index>[]</index></name></type> <name>childNames</name><parameter_list>(<parameter><decl><type><name>IPath</name></type> <name>path</name></decl></parameter>)</parameter_list> <block>{
		<decl_stmt><decl><type><name>Node</name></type> <name>node</name> <init>= <expr><call><name>findNode</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if>if <condition>(<expr><name>node</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <call><name><name>node</name><operator>.</operator><name>isFile</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
			<block type="pseudo"><return>return <expr><literal type="null">null</literal></expr>;</return></block></then></if>
		<return>return <expr><operator>(</operator><operator>(</operator><name>DirNode</name><operator>)</operator> <name>node</name><operator>)</operator><operator>.</operator><call><name>childNames</name><argument_list>()</argument_list></call></expr>;</return>
	}</block></function>

	<function><specifier>public</specifier> <type><name>void</name></type> <name>delete</name><parameter_list>(<parameter><decl><type><name>IPath</name></type> <name>path</name></decl></parameter>)</parameter_list> <block>{
		<comment type="line">//cannot delete the root</comment>
		<if>if <condition>(<expr><call><name><name>path</name><operator>.</operator><name>segmentCount</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then>
			<block type="pseudo"><return>return;</return></block></then></if>
		<decl_stmt><decl><type><name>Node</name></type> <name>parent</name> <init>= <expr><call><name>findNode</name><argument_list>(<argument><expr><call><name><name>path</name><operator>.</operator><name>removeLastSegments</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if>if <condition>(<expr><name>parent</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <call><name><name>parent</name><operator>.</operator><name>isFile</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
			<block type="pseudo"><return>return;</return></block></then></if>
		<expr_stmt><expr><operator>(</operator><operator>(</operator><name>DirNode</name><operator>)</operator> <name>parent</name><operator>)</operator><operator>.</operator><call><name>remove</name><argument_list>(<argument><expr><call><name><name>path</name><operator>.</operator><name>lastSegment</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Deletes the entire memory tree. Used during debugging and testing only.
	 */</comment>
	<function><specifier>public</specifier> <type><name>void</name></type> <name>deleteAll</name><parameter_list>()</parameter_list> <block>{
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>root</name></name> <operator>=</operator> <operator>new</operator> <call><name>DirNode</name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>ROOT_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Returns the file info for the given path. Never returns null.
	 * @param path
	 * @return
	 */</comment>
	<function><specifier>public</specifier> <specifier>synchronized</specifier> <type><name>IFileInfo</name></type> <name>fetchInfo</name><parameter_list>(<parameter><decl><type><name>IPath</name></type> <name>path</name></decl></parameter>)</parameter_list> <block>{
		<decl_stmt><decl><type><name>Node</name></type> <name>node</name> <init>= <expr><call><name>findNode</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if>if <condition>(<expr><name>node</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then>
			<block type="pseudo"><return>return <expr><operator>new</operator> <call><name>FileInfo</name><argument_list>(<argument><expr><call><name><name>path</name><operator>.</operator><name>lastSegment</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block></then></if>
		<return>return <expr><call><name><name>node</name><operator>.</operator><name>getInfo</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</return>
	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Returns the node at the given path, or null if not found.
	 * 
	 * @param path
	 * @return
	 */</comment>
	<function><specifier>private</specifier> <type><name>Node</name></type> <name>findNode</name><parameter_list>(<parameter><decl><type><name>IPath</name></type> <name>path</name></decl></parameter>)</parameter_list> <block>{
		<decl_stmt><decl><type><name>Node</name></type> <name>current</name> <init>= <expr><name>root</name></expr></init></decl>;</decl_stmt>
		<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>imax</name> <init>= <expr><call><name><name>path</name><operator>.</operator><name>segmentCount</name></name><argument_list>()</argument_list></call></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>imax</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
			<if>if <condition>(<expr><name>current</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <call><name><name>current</name><operator>.</operator><name>isFile</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
				<block type="pseudo"><return>return <expr><literal type="null">null</literal></expr>;</return></block></then></if>
			<expr_stmt><expr><name>current</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>DirNode</name><operator>)</operator> <name>current</name><operator>)</operator><operator>.</operator><call><name>getChild</name><argument_list>(<argument><expr><call><name><name>path</name><operator>.</operator><name>segment</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></for>
		<return>return <expr><name>current</name></expr>;</return>
	}</block></function>

	<function><specifier>public</specifier> <type><name>Node</name></type> <name>mkdir</name><parameter_list>(<parameter><decl><type><name>IPath</name></type> <name>path</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>deep</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>CoreException</name></expr></argument></throws> <block>{
		<decl_stmt><decl><type><name>Node</name></type> <name>dir</name> <init>= <expr><call><name>findNode</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if>if <condition>(<expr><name>dir</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
			<if>if <condition>(<expr><call><name><name>dir</name><operator>.</operator><name>isFile</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
				<block type="pseudo"><expr_stmt><expr><call><name><name>Policy</name><operator>.</operator><name>error</name></name><argument_list>(<argument><expr><literal type="string">"A file exists with this name: "</literal> <operator>+</operator> <name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
			<return>return <expr><name>dir</name></expr>;</return>
		}</block></then></if>
		<decl_stmt><decl><type><specifier>final</specifier> <name>IPath</name></type> <name>parentPath</name> <init>= <expr><call><name><name>path</name><operator>.</operator><name>removeLastSegments</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>Node</name></type> <name>parent</name> <init>= <expr><call><name>findNode</name><argument_list>(<argument><expr><name>parentPath</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if>if <condition>(<expr><name>parent</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
			<if>if <condition>(<expr><call><name><name>parent</name><operator>.</operator><name>isFile</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
				<block type="pseudo"><expr_stmt><expr><call><name><name>Policy</name><operator>.</operator><name>error</name></name><argument_list>(<argument><expr><literal type="string">"Parent is a file: "</literal> <operator>+</operator> <name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
		}</block></then> <else>else <block>{
			<if>if <condition>(<expr><operator>!</operator><name>deep</name></expr>)</condition><then>
				<block type="pseudo"><expr_stmt><expr><call><name><name>Policy</name><operator>.</operator><name>error</name></name><argument_list>(<argument><expr><literal type="string">"Parent does not exist: "</literal> <operator>+</operator> <name>parentPath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
			<expr_stmt><expr><name>parent</name> <operator>=</operator> <call><name>mkdir</name><argument_list>(<argument><expr><name>parentPath</name></expr></argument>, <argument><expr><name>deep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></else></if>
		<comment type="line">//create the child directory</comment>
		<return>return <expr><operator>new</operator> <call><name>DirNode</name><argument_list>(<argument><expr><name>parent</name></expr></argument>, <argument><expr><call><name><name>path</name><operator>.</operator><name>lastSegment</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
	}</block></function>

	<function><specifier>public</specifier> <type><name>InputStream</name></type> <name>openInputStream</name><parameter_list>(<parameter><decl><type><name>IPath</name></type> <name>path</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>CoreException</name></expr></argument></throws> <block>{
		<decl_stmt><decl><type><name>Node</name></type> <name>node</name> <init>= <expr><call><name>findNode</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if>if <condition>(<expr><name>node</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then>
			<block type="pseudo"><expr_stmt><expr><call><name><name>Policy</name><operator>.</operator><name>error</name></name><argument_list>(<argument><expr><literal type="string">"File not found: "</literal> <operator>+</operator> <name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
		<if>if <condition>(<expr><operator>!</operator><call><name><name>node</name><operator>.</operator><name>isFile</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
			<block type="pseudo"><expr_stmt><expr><call><name><name>Policy</name><operator>.</operator><name>error</name></name><argument_list>(<argument><expr><literal type="string">"Cannot open stream on directory: "</literal> <operator>+</operator> <name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
		<return>return <expr><operator>(</operator><operator>(</operator><name>FileNode</name><operator>)</operator> <name>node</name><operator>)</operator><operator>.</operator><call><name>openInputStream</name><argument_list>()</argument_list></call></expr>;</return>
	}</block></function>

	<function><specifier>public</specifier> <type><name>OutputStream</name></type> <name>openOutputStream</name><parameter_list>(<parameter><decl><type><name>IPath</name></type> <name>path</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>options</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>CoreException</name></expr></argument></throws> <block>{
		<decl_stmt><decl><type><name>Node</name></type> <name>node</name> <init>= <expr><call><name>findNode</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<comment type="line">//if we already have such a file, just open a stream on it</comment>
		<if>if <condition>(<expr><name>node</name> <operator>instanceof</operator> <name>DirNode</name></expr>)</condition><then>
			<block type="pseudo"><expr_stmt><expr><call><name><name>Policy</name><operator>.</operator><name>error</name></name><argument_list>(<argument><expr><literal type="string">"Could not create file: "</literal> <operator>+</operator> <name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
		<if>if <condition>(<expr><name>node</name> <operator>instanceof</operator> <name>FileNode</name></expr>)</condition><then>
			<block type="pseudo"><return>return <expr><operator>(</operator><operator>(</operator><name>FileNode</name><operator>)</operator> <name>node</name><operator>)</operator><operator>.</operator><call><name>openOutputStream</name><argument_list>(<argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>;</return></block></then></if>
		<comment type="line">//if the parent exists we can create the file</comment>
		<decl_stmt><decl><type><name>Node</name></type> <name>parent</name> <init>= <expr><call><name>findNode</name><argument_list>(<argument><expr><call><name><name>path</name><operator>.</operator><name>removeLastSegments</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>parent</name> <operator>instanceof</operator> <name>DirNode</name><operator>)</operator></expr>)</condition><then>
			<block type="pseudo"><expr_stmt><expr><call><name><name>Policy</name><operator>.</operator><name>error</name></name><argument_list>(<argument><expr><literal type="string">"Could not create file: "</literal> <operator>+</operator> <name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
		<expr_stmt><expr><name>node</name> <operator>=</operator> <operator>new</operator> <call><name>FileNode</name><argument_list>(<argument><expr><name>parent</name></expr></argument>, <argument><expr><call><name><name>path</name><operator>.</operator><name>lastSegment</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>(</operator><operator>(</operator><name>FileNode</name><operator>)</operator> <name>node</name><operator>)</operator><operator>.</operator><call><name>openOutputStream</name><argument_list>(<argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>;</return>
	}</block></function>

	<function><specifier>public</specifier> <type><name>void</name></type> <name>putInfo</name><parameter_list>(<parameter><decl><type><name>IPath</name></type> <name>path</name></decl></parameter>, <parameter><decl><type><name>IFileInfo</name></type> <name>info</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>options</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>CoreException</name></expr></argument></throws> <block>{
		<decl_stmt><decl><type><name>Node</name></type> <name>node</name> <init>= <expr><call><name>findNode</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if>if <condition>(<expr><name>node</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then>
			<block type="pseudo"><expr_stmt><expr><call><name><name>Policy</name><operator>.</operator><name>error</name></name><argument_list>(<argument><expr><literal type="string">"File not found: "</literal> <operator>+</operator> <name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
		<expr_stmt><expr><call><name><name>node</name><operator>.</operator><name>putInfo</name></name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>
}</block></class>
</unit>
