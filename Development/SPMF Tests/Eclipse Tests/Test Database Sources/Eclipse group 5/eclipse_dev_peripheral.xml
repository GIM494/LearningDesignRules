<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="0.9.5">

<unit revision="0.9.5" language="Java" filename="org.eclipse.ui.examples.statushandlers.testtool/src/org/eclipse/ui/examples/statushandlers/testtool/TestToolPlugin.java" hash="c8f6ddc2b13a6d17420ce9c6eb33b0c53cb094e8"><package>package <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>examples</name><operator>.</operator><name>statushandlers</name><operator>.</operator><name>testtool</name></name>;</package>

<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>plugin</name><operator>.</operator><name>AbstractUIPlugin</name></name>;</import>

<comment type="block" format="javadoc">/**
 * This is Test tool activator.
 */</comment>
<class><specifier>public</specifier> class <name>TestToolPlugin</name> <super><extends>extends <name>AbstractUIPlugin</name></extends></super> <block>{

	<comment type="block" format="javadoc">/**
	 * The plugin ID.
	 */</comment>
	<decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>PLUGIN_ID</name> <init>= <expr><literal type="string">"org.eclipse.ui.examples.statushandlers.testtool"</literal></expr></init></decl>;</decl_stmt> <comment type="line">//$NON-NLS-1$</comment>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="org.eclipse.ui.examples.statushandlers.testtool/src/org/eclipse/ui/examples/statushandlers/testtool/wizards/FaultyExportWizard.java" hash="f2675974e8eee2d71f2136a812b58b1f60e7ed9e"><comment type="block" format="javadoc">/*******************************************************************************
 * Copyright (c) 2007 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     IBM Corporation - initial API and implementation
 ******************************************************************************/</comment>

<package>package <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>examples</name><operator>.</operator><name>statushandlers</name><operator>.</operator><name>testtool</name><operator>.</operator><name>wizards</name></name>;</package>

<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>jface</name><operator>.</operator><name>viewers</name><operator>.</operator><name>IStructuredSelection</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>jface</name><operator>.</operator><name>wizard</name><operator>.</operator><name>Wizard</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>jface</name><operator>.</operator><name>wizard</name><operator>.</operator><name>WizardPage</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>swt</name><operator>.</operator><name>SWT</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>swt</name><operator>.</operator><name>layout</name><operator>.</operator><name>GridData</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>swt</name><operator>.</operator><name>layout</name><operator>.</operator><name>GridLayout</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>swt</name><operator>.</operator><name>widgets</name><operator>.</operator><name>Composite</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>swt</name><operator>.</operator><name>widgets</name><operator>.</operator><name>Label</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>IExportWizard</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>IWorkbench</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>examples</name><operator>.</operator><name>statushandlers</name><operator>.</operator><name>testtool</name><operator>.</operator><name>Messages</name></name>;</import>

<comment type="block" format="javadoc">/**
 * This wizard with no default constructor. Used during the status handling
 * facility tests.
 */</comment>
<class><specifier>public</specifier> class <name>FaultyExportWizard</name> <super><extends>extends <name>Wizard</name></extends> <implements>implements <name>IExportWizard</name></implements></super> <block>{

	<comment type="block" format="javadoc">/**
	 * Intentional constructor that hides default one
	 * 
	 * @param name
	 *            does nothing
	 */</comment>
	<constructor><specifier>public</specifier> <name>FaultyExportWizard</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><call><name>super</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	}</block></constructor>

	<comment type="block">/*
	 * (non-Javadoc)
	 * 
	 * @see org.eclipse.jface.wizard.Wizard#performFinish()
	 */</comment>
	<function><specifier>public</specifier> <type><name>boolean</name></type> <name>performFinish</name><parameter_list>()</parameter_list> <block>{
		<return>return <expr><literal type="boolean">false</literal></expr>;</return>
	}</block></function>

	<comment type="block">/*
	 * (non-Javadoc)
	 * 
	 * @see org.eclipse.ui.IWorkbenchWizard#init(org.eclipse.ui.IWorkbench,
	 *      org.eclipse.jface.viewers.IStructuredSelection)
	 */</comment>
	<function><specifier>public</specifier> <type><name>void</name></type> <name>init</name><parameter_list>(<parameter><decl><type><name>IWorkbench</name></type> <name>workbench</name></decl></parameter>, <parameter><decl><type><name>IStructuredSelection</name></type> <name>selection</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><call><name>setWindowTitle</name><argument_list>(<argument><expr><name><name>Messages</name><operator>.</operator><name>FaultyExportWizard_WindowTitle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<function><specifier>public</specifier> <type><name>void</name></type> <name>addPages</name><parameter_list>()</parameter_list> <block>{
		<expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>addPages</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>addPage</name><argument_list>(<argument><expr><operator>new</operator> <call><name>MyWizardPage</name><argument_list>(<argument><expr><name><name>Messages</name><operator>.</operator><name>FaultyExportWizard_Page</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<class><specifier>public</specifier> class <name>MyWizardPage</name> <super><extends>extends <name>WizardPage</name></extends></super> <block>{
		<comment type="block" format="javadoc">/**
		 * Creates some wizard page
		 * 
		 * @param pageName
		 */</comment>
		<constructor><specifier>protected</specifier> <name>MyWizardPage</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>pageName</name></decl></parameter>)</parameter_list> <block>{
			<expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>pageName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></constructor>

		<comment type="block">/*
		 * (non-Javadoc)
		 * 
		 * @see org.eclipse.jface.dialogs.IDialogPage#createControl(org.eclipse.swt.widgets.Composite)
		 */</comment>
		<function><specifier>public</specifier> <type><name>void</name></type> <name>createControl</name><parameter_list>(<parameter><decl><type><name>Composite</name></type> <name>parent</name></decl></parameter>)</parameter_list> <block>{
			<decl_stmt><decl><type><name>Composite</name></type> <name>page</name> <init>= <expr><operator>new</operator> <call><name>Composite</name><argument_list>(<argument><expr><name>parent</name></expr></argument>, <argument><expr><name><name>SWT</name><operator>.</operator><name>NONE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>GridLayout</name></type> <name>pageLayout</name> <init>= <expr><operator>new</operator> <call><name>GridLayout</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name><name>page</name><operator>.</operator><name>setLayout</name></name><argument_list>(<argument><expr><name>pageLayout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>page</name><operator>.</operator><name>setLayoutData</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>GridData</name><argument_list>(<argument><expr><name><name>GridData</name><operator>.</operator><name>FILL_BOTH</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<decl_stmt><decl><type><name>Label</name></type> <name>nameLabel</name> <init>= <expr><operator>new</operator> <call><name>Label</name><argument_list>(<argument><expr><name>page</name></expr></argument>, <argument><expr><name><name>SWT</name><operator>.</operator><name>NONE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name><name>nameLabel</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><name><name>Messages</name><operator>.</operator><name>FaultyExportWizard_Label</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>setControl</name><argument_list>(<argument><expr><name>page</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></function>
	}</block></class>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="org.eclipse.ui.examples.statushandlers.testtool/src/org/eclipse/ui/examples/statushandlers/testtool/Messages.java" hash="2d0bf5cdeca0c94edd53435536fdb23a826b69b5"><comment type="block" format="javadoc">/*******************************************************************************
 * Copyright (c) 2007, 2008 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     IBM Corporation - initial API and implementation
 ******************************************************************************/</comment>

<package>package <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>examples</name><operator>.</operator><name>statushandlers</name><operator>.</operator><name>testtool</name></name>;</package>

<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>osgi</name><operator>.</operator><name>util</name><operator>.</operator><name>NLS</name></name>;</import>

<class><specifier>public</specifier> class <name>Messages</name> <super><extends>extends <name>NLS</name></extends></super> <block>{
	<decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>BUNDLE_NAME</name> <init>= <expr><literal type="string">"org.eclipse.ui.examples.statushandlers.testtool.messages"</literal></expr></init></decl>;</decl_stmt> <comment type="line">//$NON-NLS-1$</comment>
	<decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>OpenInfoDialogAction_OpenInformation</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>ShowViewPropertySource_GUIElementLabel</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>ShowViewPropertySource_ThrownExceptionLabel</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>OpenErrorDialogAction_1</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>RuntimeExceptionEditor_Message</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>RuntimeExceptionView_Message</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>ShowViewComponent_Name</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>ShowViewComponent_ShowLabel</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>ShowViewRunnable_ShowView</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>ShowViewComponent_ThrowingLabel</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>StatusHandlingComponent_LogStatusLabel</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>StatusHandlingComponent_ExemplaryMessage</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>StatusHandlingComponent_LogStatusTooltip</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>StatusHandlingComponent_SeverityCancel</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>JobsAndRunnablesRunnable_IndexOutOfBoundsMessage</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>JobsAndRunnablesRunnable_ProcessingTick</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>JobsAndRunnablesComponent_10s</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>JobsAndRunnablesComponent_10minutes</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>JobsAndRunnablesComponent_Exception</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>JobsAndRunnablesComponent_NoOptions</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>JobsAndRunnablesComponent_ExceptionFromTheJob</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>JobAndRunnablesPropertySource_DurationProperty</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>JobAndRunnablesPropertySource_InWindowProperty</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>JobAndRunnablesPropertySource_QunatityProperty</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>JobAndRunnablesPropertySource_UIThreadProperty</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>JobAndRunnablesPropertySource_ExceptionProperty</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>JobAndRunnablesPropertySource_JobUIThreadProperty</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>JobAndRunnablesPropertySource_JobWorkspaceLockProperty</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>JobAndRunnablesPropertySource_StartDelayProperty</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>JobAndRunnablesPropertySource_SystemJobProperty</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>JobAndRunnablesPropertySource_AsJobProperty</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>JobAndRunnablesPropertySource_LockProperty</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>JobAndRunnablesPropertySource_PercentProperty</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>JobAndRunnablesPropertySource_UserJobProperty</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>JobAndRunnablesPropertySource_WrappedProperty</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>JobAndRunnablesPropertySource_GroupsProperty</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>JobAndRunnablesPropertySource_ResheduleDelay</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>JobAndRunnablesPropertySource_ResheduleProperty</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>JobAndRunnablesPropertySource_DeferredProperty</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>JobsAndRunnablesComponent_ExceptionThrownAfter</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>JobsAndRunnablesComponent_ResheduleDelayLabel</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>JobsAndRunnablesComponent_ResheduleValueTooltip</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>JobsAndRunnablesComponent_RunInUIThreadLabel</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>JobsAndRunnablesComponent_RunInUIThreadTooltip</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>JobsAndRunnablesComponent_DelayLabel</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>JobsAndRunnablesComponent_DelayTooltip</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>JobsAndRunnablesComponent_UIJobTooltip</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>JobsAndRunnablesComponent_UIThreadLabel</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>JobsAndRunnablesComponent_ThrowAfter</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>JobsAndRunnablesComponent_wrapTooltip</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>JobsAndRunnablesComponent_1minute</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>JobsAndRunnablesComponent_UserJob</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>JobsAndRunnablesComponent_Quantity</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>JobsAndRunnablesComponent_1ms</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>JobsAndRunnablesComponent_1s</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>JobsAndRunnablesComponent_23</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>JobsAndRunnablesComponent_Jobs</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>JobsAndRunnablesComponent_Name</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>JobsAndRunnablesRunnable_Name</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>JobsAndRunnablesRunnable_GroupTaskName</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>JobsAndRunnablesRunnable_SpiningInside</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>JobsAndRunnablesComponent_CreateJobWithParameters</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>JobsAndRunnablesComponent_DefaultResheduleValue</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>JobsAndRunnablesComponent_DefaultThrowAfterTooltip</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>JobsAndRunnablesComponent_DurationTooltip</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>JobsAndRunnablesComponent_LockedWorkspace</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>JobsAndRunnablesComponent_LockedWorkspaceTooltip</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>JobsAndRunnablesComponent_QunatityTooltip</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>JobsAndRunnablesComponent_resheduleLabel</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>JobsAndRunnablesComponent_resheduleTooltip</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>JobsAndRunnablesComponent_SystemJobLabel</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>JobsAndRunnablesComponent_UserJobTooltip</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>JobsAndRunnablesComponent_SingleGroupLabel</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>JobsAndRunnablesComponent_SingleGroupTooltip</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>JobsAndRunnablesComponent_SystemJobTooltip</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>JobsAndRunnablesComponent_WindowRunnable</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>JobsAndRunnablesComponent_progressNoForkTooltip</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>JobsAndRunnablesComponent_WindowRunnableTooltip</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>JobsAndRunnablesRunnable_SpinningTaskName</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>JobsAndRunnablesRunnable_NullPointerExceptionMessage</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>JobsAndRunnablesRunnable_OutOfMemoryExceptionMessage</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>StatusHandlingComponent_GeneratedStatusSeverity</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>StatusHandlingComponent_SeverityWarning</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>StatusHandlingComponent_ShowStatusLabel</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>StatusHandlingComponent_ActionTooltip</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>StatusHandlingComponent_AddStatusLabel</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>StatusHandlingComponent_SeverityError</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>StatusHandlingComponent_SeverityLevel</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>StatusHandlingComponent_Explanation</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>StatusHandlingComponent_ExplanationTooltip</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>StatusHandlingView_AddToTheExecutionList</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>StatusHandlingView_ExecutingTestBedSequence</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>StatusHandlingComponent_TitleLabel</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>StatusHandlingComponent_TitleTooltip</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>StatusHandlingComponent_blockTooltip</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>StatusHandlingComponent_SeverityInfo</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>StatusHandlingComponent_Severity</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>StatusHandlingComponent_BlockLabel</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>StatusHandlingComponent_SeverityOK</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>StatusHandlingComponent_Hint</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>StatusHandlingComponent_Name</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>StatusHandlingRunnable_Hint</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>StatusHandlingRunnable_Action</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>StatusHandlingView_ExecuteAll</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>StatusHandlingView_ExecuteTab</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>StatusHandlingView_ExecuteTabTooltip</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>StatusHandlingView_Down</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>StatusHandlingView_Delete</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>StatusHandlingView_Export</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>StatusHandlingView_Import</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>StatusHandlingView_Remove</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>StatusHandlingView_Up</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>StatusHandlingRunnable_Wrapped</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>StatusHandlingComponent_Action</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>StatusHandlingComponent_FastExecute</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>StatusHandlingComponent_HintLog</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>StatusHandlingComponent_HintBlock</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>StatusHandlingComponent_HintNone</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>StatusHandlingComponent_HintShow</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>StatusHandlingComponent_MessageLabel</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>StatusHandlingComponent_MessageTooltip</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>StatusHandlingComponent_MultiStatus</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>StatusHandlingComponent_MultiStatusTooltip</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>StatusHandlingComponent_PluginId</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>StatusHandlingComponent_PluginIdLabel</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>StatusHandlingRunnable_Explanation</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>StatusHandlingView_LoadDialogTitle</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>StatusHandlingView_SaveDialogTitle</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>StatusHandlingView_TestBedSequence</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>StatusHandlingRunnable_StatusHandling</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>StatusHandlingRunnable_StatusHandlinNo</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>StatusHandlingRunnable_StatusProperty</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>StatusHandlingComponent_PluginIdTooltip</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>StatusHandlingComponent_Unknown</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>StatusHandlingComponent_Wrapped</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>StatusHandlingComponent_WrappedLabel</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>StatusHandlingComponent_WrappedTooltip</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>TestJob_MultiStatusException</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>TestJob_ChildStatusMessage</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>TestJob_MultiStatusMessage</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>TestJob_TestJob</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>TestJob_UITask</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>FaultyExportWizard_Label</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>FaultyExportWizard_Page</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>FaultyExportWizard_WindowTitle</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>OpenErrorDialogAction_OpenError</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>PartInitExceptionEditor_Message</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>PartInitExceptionView_Message</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>SleepingComponent_BlockFor</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>SleepingComponent_Name</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>SleepingComponent_Miliseconds</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>SleepingComponent_SleepingFor</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>OpenWarningDialogAction_OpenWarning</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>ThrowNullPointerAction_NPEMessage</name></decl>;</decl_stmt>
	
	<static>static <block>{
		<comment type="line">// initialize resource bundle</comment>
		<expr_stmt><expr><call><name><name>NLS</name><operator>.</operator><name>initializeMessages</name></name><argument_list>(<argument><expr><name>BUNDLE_NAME</name></expr></argument>, <argument><expr><name><name>Messages</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></static>

	<constructor><specifier>private</specifier> <name>Messages</name><parameter_list>()</parameter_list> <block>{
	}</block></constructor>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="org.eclipse.ui.examples.statushandlers.testtool/src/org/eclipse/ui/examples/statushandlers/testtool/views/JobAndRunnablesPropertySource.java" hash="5597f229184b40ed00468fb26d7eccc3d1c004cb"><comment type="block" format="javadoc">/*******************************************************************************
 * Copyright (c) 2007, 2008 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     IBM Corporation - initial API and implementation
 ******************************************************************************/</comment>

<package>package <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>examples</name><operator>.</operator><name>statushandlers</name><operator>.</operator><name>testtool</name><operator>.</operator><name>views</name></name>;</package>

<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>examples</name><operator>.</operator><name>statushandlers</name><operator>.</operator><name>testtool</name><operator>.</operator><name>Messages</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>views</name><operator>.</operator><name>properties</name><operator>.</operator><name>IPropertyDescriptor</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>views</name><operator>.</operator><name>properties</name><operator>.</operator><name>IPropertySource</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>views</name><operator>.</operator><name>properties</name><operator>.</operator><name>PropertyDescriptor</name></name>;</import>

<comment type="block" format="javadoc">/**
 * A PropertySource for {@link JobsAndRunnablesRunnable}
 */</comment>
<comment type="block">/* package */</comment><class>class <name>JobAndRunnablesPropertySource</name> <super><implements>implements <name>IPropertySource</name></implements></super> <block>{

	<decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>JOBSANDRUNNABLES_WRAPPED</name> <init>= <expr><literal type="string">"jobsandrunnables.wrapped"</literal></expr></init></decl>;</decl_stmt> <comment type="line">//$NON-NLS-1$</comment>
	<decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>JOBSANDRUNNABLES_RESCHEDULE</name> <init>= <expr><literal type="string">"jobsandrunnables.reschedule"</literal></expr></init></decl>;</decl_stmt> <comment type="line">//$NON-NLS-1$</comment>
	<decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>JOBSANDRUNNABLES_INGROUP</name> <init>= <expr><literal type="string">"jobsandrunnables.ingroup"</literal></expr></init></decl>;</decl_stmt> <comment type="line">//$NON-NLS-1$</comment>
	<decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>JOBSANDRUNNABLES_USERJOB</name> <init>= <expr><literal type="string">"jobsandrunnables.userjob"</literal></expr></init></decl>;</decl_stmt> <comment type="line">//$NON-NLS-1$</comment>
	<decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>JOBSANDRUNNABLES_SYSTEMJOB</name> <init>= <expr><literal type="string">"jobsandrunnables.systemjob"</literal></expr></init></decl>;</decl_stmt> <comment type="line">//$NON-NLS-1$</comment>
	<decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>JOBSANDRUNNABLES_JOB_WORSKPACE_LOCK</name> <init>= <expr><literal type="string">"jobsandrunnables.jobWorskpaceLock"</literal></expr></init></decl>;</decl_stmt> <comment type="line">//$NON-NLS-1$</comment>
	<decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>JOBSANDRUNNABLES_JOB_UI_THREAD</name> <init>= <expr><literal type="string">"jobsandrunnables.jobUIThread"</literal></expr></init></decl>;</decl_stmt> <comment type="line">//$NON-NLS-1$</comment>
	<decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>JOBSANDRUNNABLES_RESCHEDULEDELAY</name> <init>= <expr><literal type="string">"jobsandrunnables.rescheduledelay"</literal></expr></init></decl>;</decl_stmt> <comment type="line">//$NON-NLS-1$</comment>
	<decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>JOBSANDRUNNABLES_QUANTITY</name> <init>= <expr><literal type="string">"jobsandrunnables.quantity"</literal></expr></init></decl>;</decl_stmt> <comment type="line">//$NON-NLS-1$</comment>
	<decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>JOBSANDRUNNABLES_STARTDELAY</name> <init>= <expr><literal type="string">"jobsandrunnables.startdelay"</literal></expr></init></decl>;</decl_stmt> <comment type="line">//$NON-NLS-1$</comment>
	<decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>JOBSANDRUNNABLES_LOCKTHEWORKSPACE</name> <init>= <expr><literal type="string">"jobsandrunnables.locktheworkspace"</literal></expr></init></decl>;</decl_stmt> <comment type="line">//$NON-NLS-1$</comment>
	<decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>JOBSANDRUNNABLES_JOBS</name> <init>= <expr><literal type="string">"jobsandrunnables.jobs"</literal></expr></init></decl>;</decl_stmt> <comment type="line">//$NON-NLS-1$</comment>
	<decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>JOBSANDRUNNABLES_IN_WINDOW</name> <init>= <expr><literal type="string">"jobsandrunnables.inWindow"</literal></expr></init></decl>;</decl_stmt> <comment type="line">//$NON-NLS-1$</comment>
	<decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>JOBSANDRUNNABLES_UI_THREAD</name> <init>= <expr><literal type="string">"jobsandrunnables.uiThread"</literal></expr></init></decl>;</decl_stmt> <comment type="line">//$NON-NLS-1$</comment>
	<decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>JOBSANDRUNNABLES_EXCEPTION</name> <init>= <expr><literal type="string">"jobsandrunnables.exception"</literal></expr></init></decl>;</decl_stmt> <comment type="line">//$NON-NLS-1$</comment>
	<decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>JOBSANDRUNNABLES_PERCENT</name> <init>= <expr><literal type="string">"jobsandrunnables.percent"</literal></expr></init></decl>;</decl_stmt> <comment type="line">//$NON-NLS-1$</comment>
	<decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>JOBSANDRUNNABLES_DURATION</name> <init>= <expr><literal type="string">"jobsandrunnables.duration"</literal></expr></init></decl>;</decl_stmt> <comment type="line">//$NON-NLS-1$</comment>
	<decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>JOBSANDRUNNABLES_DEFFERED</name> <init>= <expr><literal type="string">"jobsandrunnables.deffered"</literal></expr></init></decl>;</decl_stmt> <comment type="line">//$NON-NLS-1$</comment>

	<decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name><name>PropertyDescriptor</name><index>[]</index></name></type> <name>descriptors</name> <init>= <expr><operator>new</operator> <name><name>PropertyDescriptor</name><index>[]</index></name> <block>{
			<expr><operator>new</operator> <call><name>PropertyDescriptor</name><argument_list>(<argument><expr><name>JOBSANDRUNNABLES_DURATION</name></expr></argument>,
					<argument><expr><name><name>Messages</name><operator>.</operator><name>JobAndRunnablesPropertySource_DurationProperty</name></name></expr></argument>)</argument_list></call></expr>,
			<expr><operator>new</operator> <call><name>PropertyDescriptor</name><argument_list>(<argument><expr><name>JOBSANDRUNNABLES_PERCENT</name></expr></argument>,
					<argument><expr><name><name>Messages</name><operator>.</operator><name>JobAndRunnablesPropertySource_PercentProperty</name></name></expr></argument>)</argument_list></call></expr>,
			<expr><operator>new</operator> <call><name>PropertyDescriptor</name><argument_list>(<argument><expr><name>JOBSANDRUNNABLES_EXCEPTION</name></expr></argument>,
					<argument><expr><name><name>Messages</name><operator>.</operator><name>JobAndRunnablesPropertySource_ExceptionProperty</name></name></expr></argument>)</argument_list></call></expr>,
			<expr><operator>new</operator> <call><name>PropertyDescriptor</name><argument_list>(<argument><expr><name>JOBSANDRUNNABLES_UI_THREAD</name></expr></argument>,
					<argument><expr><name><name>Messages</name><operator>.</operator><name>JobAndRunnablesPropertySource_UIThreadProperty</name></name></expr></argument>)</argument_list></call></expr>,
			<expr><operator>new</operator> <call><name>PropertyDescriptor</name><argument_list>(<argument><expr><name>JOBSANDRUNNABLES_IN_WINDOW</name></expr></argument>,
					<argument><expr><name><name>Messages</name><operator>.</operator><name>JobAndRunnablesPropertySource_InWindowProperty</name></name></expr></argument>)</argument_list></call></expr>,
			<expr><operator>new</operator> <call><name>PropertyDescriptor</name><argument_list>(<argument><expr><name>JOBSANDRUNNABLES_JOBS</name></expr></argument>,
					<argument><expr><name><name>Messages</name><operator>.</operator><name>JobAndRunnablesPropertySource_AsJobProperty</name></name></expr></argument>)</argument_list></call></expr>,
			<expr><operator>new</operator> <call><name>PropertyDescriptor</name><argument_list>(<argument><expr><name>JOBSANDRUNNABLES_LOCKTHEWORKSPACE</name></expr></argument>,
					<argument><expr><name><name>Messages</name><operator>.</operator><name>JobAndRunnablesPropertySource_LockProperty</name></name></expr></argument>)</argument_list></call></expr>,
			<expr><operator>new</operator> <call><name>PropertyDescriptor</name><argument_list>(<argument><expr><name>JOBSANDRUNNABLES_STARTDELAY</name></expr></argument>,
					<argument><expr><name><name>Messages</name><operator>.</operator><name>JobAndRunnablesPropertySource_StartDelayProperty</name></name></expr></argument>)</argument_list></call></expr>,
			<expr><operator>new</operator> <call><name>PropertyDescriptor</name><argument_list>(<argument><expr><name>JOBSANDRUNNABLES_QUANTITY</name></expr></argument>,
					<argument><expr><name><name>Messages</name><operator>.</operator><name>JobAndRunnablesPropertySource_QunatityProperty</name></name></expr></argument>)</argument_list></call></expr>,
			<expr><operator>new</operator> <call><name>PropertyDescriptor</name><argument_list>(<argument><expr><name>JOBSANDRUNNABLES_RESCHEDULEDELAY</name></expr></argument>,
					<argument><expr><name><name>Messages</name><operator>.</operator><name>JobAndRunnablesPropertySource_ResheduleDelay</name></name></expr></argument>)</argument_list></call></expr>,
			<expr><operator>new</operator> <call><name>PropertyDescriptor</name><argument_list>(<argument><expr><name>JOBSANDRUNNABLES_JOB_UI_THREAD</name></expr></argument>,
					<argument><expr><name><name>Messages</name><operator>.</operator><name>JobAndRunnablesPropertySource_JobUIThreadProperty</name></name></expr></argument>)</argument_list></call></expr>,
			<expr><operator>new</operator> <call><name>PropertyDescriptor</name><argument_list>(
					<argument><expr><name>JOBSANDRUNNABLES_JOB_WORSKPACE_LOCK</name></expr></argument>,
					<argument><expr><name><name>Messages</name><operator>.</operator><name>JobAndRunnablesPropertySource_JobWorkspaceLockProperty</name></name></expr></argument>)</argument_list></call></expr>,
			<expr><operator>new</operator> <call><name>PropertyDescriptor</name><argument_list>(<argument><expr><name>JOBSANDRUNNABLES_SYSTEMJOB</name></expr></argument>,
					<argument><expr><name><name>Messages</name><operator>.</operator><name>JobAndRunnablesPropertySource_SystemJobProperty</name></name></expr></argument>)</argument_list></call></expr>,
			<expr><operator>new</operator> <call><name>PropertyDescriptor</name><argument_list>(<argument><expr><name>JOBSANDRUNNABLES_USERJOB</name></expr></argument>,
					<argument><expr><name><name>Messages</name><operator>.</operator><name>JobAndRunnablesPropertySource_UserJobProperty</name></name></expr></argument>)</argument_list></call></expr>,
			<expr><operator>new</operator> <call><name>PropertyDescriptor</name><argument_list>(<argument><expr><name>JOBSANDRUNNABLES_INGROUP</name></expr></argument>,
					<argument><expr><name><name>Messages</name><operator>.</operator><name>JobAndRunnablesPropertySource_GroupsProperty</name></name></expr></argument>)</argument_list></call></expr>,
			<expr><operator>new</operator> <call><name>PropertyDescriptor</name><argument_list>(<argument><expr><name>JOBSANDRUNNABLES_RESCHEDULE</name></expr></argument>,
					<argument><expr><name><name>Messages</name><operator>.</operator><name>JobAndRunnablesPropertySource_ResheduleProperty</name></name></expr></argument>)</argument_list></call></expr>,
			<expr><operator>new</operator> <call><name>PropertyDescriptor</name><argument_list>(<argument><expr><name>JOBSANDRUNNABLES_WRAPPED</name></expr></argument>,
					<argument><expr><name><name>Messages</name><operator>.</operator><name>JobAndRunnablesPropertySource_WrappedProperty</name></name></expr></argument>)</argument_list></call></expr>,
			<expr><operator>new</operator> <call><name>PropertyDescriptor</name><argument_list>(<argument><expr><name>JOBSANDRUNNABLES_DEFFERED</name></expr></argument>,
					<argument><expr><name><name>Messages</name><operator>.</operator><name>JobAndRunnablesPropertySource_DeferredProperty</name></name></expr></argument>)</argument_list></call></expr>, }</block></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><specifier>private</specifier> <type><name>JobsAndRunnablesRunnable</name></type> <name>runnable</name></decl>;</decl_stmt>

	<comment type="block" format="javadoc">/**
	 * Construct property source from {@link JobsAndRunnablesRunnable}
	 * 
	 * @param jobsAndRunnablesRunnable
	 *            a runnable from which the property source should be created
	 */</comment>
	<constructor><specifier>public</specifier> <name>JobAndRunnablesPropertySource</name><parameter_list>(
			<parameter><decl><type><name>JobsAndRunnablesRunnable</name></type> <name>jobsAndRunnablesRunnable</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>runnable</name></name> <operator>=</operator> <name>jobsAndRunnablesRunnable</name></expr>;</expr_stmt>
	}</block></constructor>

	<comment type="block">/*
	 * (non-Javadoc)
	 * 
	 * @see org.eclipse.ui.views.properties.IPropertySource#getEditableValue()
	 */</comment>
	<function><specifier>public</specifier> <type><name>Object</name></type> <name>getEditableValue</name><parameter_list>()</parameter_list> <block>{
		<return>return <expr><literal type="null">null</literal></expr>;</return>
	}</block></function>

	<comment type="block">/*
	 * (non-Javadoc)
	 * 
	 * @see org.eclipse.ui.views.properties.IPropertySource#getPropertyDescriptors()
	 */</comment>
	<function><specifier>public</specifier> <type><name><name>IPropertyDescriptor</name><index>[]</index></name></type> <name>getPropertyDescriptors</name><parameter_list>()</parameter_list> <block>{
		<return>return <expr><name>descriptors</name></expr>;</return>
	}</block></function>

	<comment type="block">/*
	 * (non-Javadoc)
	 * 
	 * @see org.eclipse.ui.views.properties.IPropertySource#getPropertyValue(java.lang.Object)
	 */</comment>
	<function><specifier>public</specifier> <type><name>Object</name></type> <name>getPropertyValue</name><parameter_list>(<parameter><decl><type><name>Object</name></type> <name>id</name></decl></parameter>)</parameter_list> <block>{
		<if>if <condition>(<expr><call><name><name>id</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>JOBSANDRUNNABLES_DURATION</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
			<return>return <expr><literal type="string">""</literal> <operator>+</operator> <name><name>runnable</name><operator>.</operator><name>duration</name></name> <operator>+</operator> <literal type="string">" ms"</literal></expr>;</return> <comment type="line">//$NON-NLS-1$ //$NON-NLS-2$</comment>
		}</block></then></if>
		<if>if <condition>(<expr><call><name><name>id</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>JOBSANDRUNNABLES_PERCENT</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
			<return>return <expr><name><name>runnable</name><operator>.</operator><name>percent</name></name> <operator>+</operator> <literal type="string">"%"</literal></expr>;</return> <comment type="line">//$NON-NLS-1$</comment>
		}</block></then></if>
		<if>if <condition>(<expr><call><name><name>id</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>JOBSANDRUNNABLES_EXCEPTION</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
			<return>return <expr><call><name><name>runnable</name><operator>.</operator><name>getException</name></name><argument_list>(<argument><expr><name><name>runnable</name><operator>.</operator><name>exceptionIndex</name></name></expr></argument>)</argument_list></call></expr>;</return>
		}</block></then></if>
		<if>if <condition>(<expr><call><name><name>id</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>JOBSANDRUNNABLES_UI_THREAD</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
			<return>return <expr><literal type="string">""</literal> <operator>+</operator> <name><name>runnable</name><operator>.</operator><name>uiThread</name></name></expr>;</return> <comment type="line">//$NON-NLS-1$</comment>
		}</block></then></if>
		<if>if <condition>(<expr><call><name><name>id</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>JOBSANDRUNNABLES_IN_WINDOW</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
			<return>return <expr><literal type="string">""</literal> <operator>+</operator> <name><name>runnable</name><operator>.</operator><name>windowRunnable</name></name></expr>;</return> <comment type="line">//$NON-NLS-1$</comment>
		}</block></then></if>
		<if>if <condition>(<expr><call><name><name>id</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>JOBSANDRUNNABLES_JOBS</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
			<return>return <expr><literal type="string">""</literal> <operator>+</operator> <name><name>runnable</name><operator>.</operator><name>jobs</name></name></expr>;</return> <comment type="line">//$NON-NLS-1$</comment>
		}</block></then></if>
		<if>if <condition>(<expr><call><name><name>id</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>JOBSANDRUNNABLES_LOCKTHEWORKSPACE</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
			<return>return <expr><literal type="string">""</literal> <operator>+</operator> <name><name>runnable</name><operator>.</operator><name>progressNoForLock</name></name></expr>;</return> <comment type="line">//$NON-NLS-1$</comment>
		}</block></then></if>
		<if>if <condition>(<expr><call><name><name>id</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>JOBSANDRUNNABLES_STARTDELAY</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
			<return>return <expr><literal type="string">""</literal> <operator>+</operator> <name><name>runnable</name><operator>.</operator><name>delayString</name></name></expr>;</return> <comment type="line">//$NON-NLS-1$</comment>
		}</block></then></if>
		<if>if <condition>(<expr><call><name><name>id</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>JOBSANDRUNNABLES_QUANTITY</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
			<return>return <expr><literal type="string">""</literal> <operator>+</operator> <name><name>runnable</name><operator>.</operator><name>quantity</name></name></expr>;</return> <comment type="line">//$NON-NLS-1$</comment>
		}</block></then></if>
		<if>if <condition>(<expr><call><name><name>id</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>JOBSANDRUNNABLES_RESCHEDULEDELAY</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
			<return>return <expr><literal type="string">""</literal> <operator>+</operator> <name><name>runnable</name><operator>.</operator><name>rescheduleDelay</name></name> <operator>+</operator> <literal type="string">" ms"</literal></expr>;</return> <comment type="line">//$NON-NLS-1$ //$NON-NLS-2$</comment>
		}</block></then></if>
		<if>if <condition>(<expr><call><name><name>id</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>JOBSANDRUNNABLES_JOB_UI_THREAD</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
			<return>return <expr><literal type="string">""</literal> <operator>+</operator> <name><name>runnable</name><operator>.</operator><name>thread</name></name></expr>;</return> <comment type="line">//$NON-NLS-1$</comment>
		}</block></then></if>
		<if>if <condition>(<expr><call><name><name>id</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>JOBSANDRUNNABLES_JOB_WORSKPACE_LOCK</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
			<return>return <expr><literal type="string">""</literal> <operator>+</operator> <name><name>runnable</name><operator>.</operator><name>jobLock</name></name></expr>;</return> <comment type="line">//$NON-NLS-1$</comment>
		}</block></then></if>
		<if>if <condition>(<expr><call><name><name>id</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>JOBSANDRUNNABLES_SYSTEMJOB</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
			<return>return <expr><literal type="string">""</literal> <operator>+</operator> <name><name>runnable</name><operator>.</operator><name>system</name></name></expr>;</return> <comment type="line">//$NON-NLS-1$</comment>
		}</block></then></if>
		<if>if <condition>(<expr><call><name><name>id</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>JOBSANDRUNNABLES_USERJOB</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
			<return>return <expr><literal type="string">""</literal> <operator>+</operator> <name><name>runnable</name><operator>.</operator><name>user</name></name></expr>;</return> <comment type="line">//$NON-NLS-1$</comment>
		}</block></then></if>
		<if>if <condition>(<expr><call><name><name>id</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>JOBSANDRUNNABLES_INGROUP</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
			<return>return <expr><literal type="string">""</literal> <operator>+</operator> <name><name>runnable</name><operator>.</operator><name>useGroup</name></name></expr>;</return> <comment type="line">//$NON-NLS-1$</comment>
		}</block></then></if>
		<if>if <condition>(<expr><call><name><name>id</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>JOBSANDRUNNABLES_RESCHEDULE</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
			<return>return <expr><literal type="string">""</literal> <operator>+</operator> <name><name>runnable</name><operator>.</operator><name>reschedule</name></name></expr>;</return> <comment type="line">//$NON-NLS-1$</comment>
		}</block></then></if>
		<if>if <condition>(<expr><call><name><name>id</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>JOBSANDRUNNABLES_WRAPPED</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
			<return>return <expr><literal type="string">""</literal> <operator>+</operator> <name><name>runnable</name><operator>.</operator><name>returnErrorStatus</name></name></expr>;</return> <comment type="line">//$NON-NLS-1$</comment>
		}</block></then></if>
		<return>return <expr><literal type="null">null</literal></expr>;</return>
	}</block></function>

	<comment type="block">/*
	 * (non-Javadoc)
	 * 
	 * @see org.eclipse.ui.views.properties.IPropertySource#isPropertySet(java.lang.Object)
	 */</comment>
	<function><specifier>public</specifier> <type><name>boolean</name></type> <name>isPropertySet</name><parameter_list>(<parameter><decl><type><name>Object</name></type> <name>id</name></decl></parameter>)</parameter_list> <block>{
		<return>return <expr><literal type="boolean">false</literal></expr>;</return>
	}</block></function>

	<comment type="block">/*
	 * (non-Javadoc)
	 * 
	 * @see org.eclipse.ui.views.properties.IPropertySource#resetPropertyValue(java.lang.Object)
	 */</comment>
	<function><specifier>public</specifier> <type><name>void</name></type> <name>resetPropertyValue</name><parameter_list>(<parameter><decl><type><name>Object</name></type> <name>id</name></decl></parameter>)</parameter_list> <block>{
	}</block></function>

	<comment type="block">/*
	 * (non-Javadoc)
	 * 
	 * @see org.eclipse.ui.views.properties.IPropertySource#setPropertyValue(java.lang.Object,
	 *      java.lang.Object)
	 */</comment>
	<function><specifier>public</specifier> <type><name>void</name></type> <name>setPropertyValue</name><parameter_list>(<parameter><decl><type><name>Object</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><name>Object</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{
	}</block></function>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="org.eclipse.ui.examples.statushandlers.testtool/src/org/eclipse/ui/examples/statushandlers/testtool/views/PartInitExceptionEditor.java" hash="a50b7f8cfae667e9cce06e2e9afa9203395981a9"><comment type="block" format="javadoc">/*******************************************************************************
 * Copyright (c) 2005, 2007 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     IBM Corporation - initial API and implementation
 *******************************************************************************/</comment>
<package>package <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>examples</name><operator>.</operator><name>statushandlers</name><operator>.</operator><name>testtool</name><operator>.</operator><name>views</name></name>;</package>

<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>core</name><operator>.</operator><name>runtime</name><operator>.</operator><name>IProgressMonitor</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>swt</name><operator>.</operator><name>widgets</name><operator>.</operator><name>Composite</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>IEditorInput</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>IEditorSite</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>PartInitException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>examples</name><operator>.</operator><name>statushandlers</name><operator>.</operator><name>testtool</name><operator>.</operator><name>Messages</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>part</name><operator>.</operator><name>EditorPart</name></name>;</import>

<comment type="block" format="javadoc">/**
 * This editor throws PartInitException when inited.
 */</comment>
<class><specifier>public</specifier> class <name>PartInitExceptionEditor</name> <super><extends>extends <name>EditorPart</name></extends></super> <block>{

	<comment type="block">/*
	 * (non-Javadoc)
	 * 
	 * @see org.eclipse.ui.part.EditorPart#doSave(org.eclipse.core.runtime.IProgressMonitor)
	 */</comment>
	<function><specifier>public</specifier> <type><name>void</name></type> <name>doSave</name><parameter_list>(<parameter><decl><type><name>IProgressMonitor</name></type> <name>monitor</name></decl></parameter>)</parameter_list> <block>{

	}</block></function>

	<comment type="block">/*
	 * (non-Javadoc)
	 * 
	 * @see org.eclipse.ui.part.EditorPart#doSaveAs()
	 */</comment>
	<function><specifier>public</specifier> <type><name>void</name></type> <name>doSaveAs</name><parameter_list>()</parameter_list> <block>{

	}</block></function>

	<comment type="block">/*
	 * (non-Javadoc)
	 * 
	 * @see org.eclipse.ui.part.EditorPart#init(org.eclipse.ui.IEditorSite,
	 *      org.eclipse.ui.IEditorInput)
	 */</comment>
	<function><specifier>public</specifier> <type><name>void</name></type> <name>init</name><parameter_list>(<parameter><decl><type><name>IEditorSite</name></type> <name>site</name></decl></parameter>, <parameter><decl><type><name>IEditorInput</name></type> <name>input</name></decl></parameter>)</parameter_list>
			<throws>throws <argument><expr><name>PartInitException</name></expr></argument></throws> <block>{
		<throw>throw <expr><operator>new</operator> <call><name>PartInitException</name><argument_list>(<argument><expr><name><name>Messages</name><operator>.</operator><name>PartInitExceptionEditor_Message</name></name></expr></argument>)</argument_list></call></expr>;</throw>

	}</block></function>

	<comment type="block">/*
	 * (non-Javadoc)
	 * 
	 * @see org.eclipse.ui.part.EditorPart#isDirty()
	 */</comment>
	<function><specifier>public</specifier> <type><name>boolean</name></type> <name>isDirty</name><parameter_list>()</parameter_list> <block>{

		<return>return <expr><literal type="boolean">false</literal></expr>;</return>
	}</block></function>

	<comment type="block">/*
	 * (non-Javadoc)
	 * 
	 * @see org.eclipse.ui.part.EditorPart#isSaveAsAllowed()
	 */</comment>
	<function><specifier>public</specifier> <type><name>boolean</name></type> <name>isSaveAsAllowed</name><parameter_list>()</parameter_list> <block>{

		<return>return <expr><literal type="boolean">false</literal></expr>;</return>
	}</block></function>

	<comment type="block">/*
	 * (non-Javadoc)
	 * 
	 * @see org.eclipse.ui.part.WorkbenchPart#createPartControl(org.eclipse.swt.widgets.Composite)
	 */</comment>
	<function><specifier>public</specifier> <type><name>void</name></type> <name>createPartControl</name><parameter_list>(<parameter><decl><type><name>Composite</name></type> <name>parent</name></decl></parameter>)</parameter_list> <block>{

	}</block></function>

	<comment type="block">/*
	 * (non-Javadoc)
	 * 
	 * @see org.eclipse.ui.part.WorkbenchPart#setFocus()
	 */</comment>
	<function><specifier>public</specifier> <type><name>void</name></type> <name>setFocus</name><parameter_list>()</parameter_list> <block>{

	}</block></function>

}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="org.eclipse.ui.examples.statushandlers.testtool/src/org/eclipse/ui/examples/statushandlers/testtool/views/PartInitExceptionView.java" hash="4bf13c2b55e93cbb489d71cc7d5e6a1b56134811"><comment type="block" format="javadoc">/*******************************************************************************
 * Copyright (c) 2005, 2007 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     IBM Corporation - initial API and implementation
 *******************************************************************************/</comment>
<package>package <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>examples</name><operator>.</operator><name>statushandlers</name><operator>.</operator><name>testtool</name><operator>.</operator><name>views</name></name>;</package>

<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>swt</name><operator>.</operator><name>widgets</name><operator>.</operator><name>Composite</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>IMemento</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>IViewSite</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>PartInitException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>examples</name><operator>.</operator><name>statushandlers</name><operator>.</operator><name>testtool</name><operator>.</operator><name>Messages</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>part</name><operator>.</operator><name>ViewPart</name></name>;</import>

<comment type="block" format="javadoc">/**
 * A sample view throwing a PartInitException initialization.
 */</comment>
<class><specifier>public</specifier> class <name>PartInitExceptionView</name> <super><extends>extends <name>ViewPart</name></extends></super> <block>{

	<comment type="block">/*
	 * (non-Javadoc)
	 * 
	 * @see org.eclipse.ui.part.ViewPart#init(org.eclipse.ui.IViewSite,
	 *      org.eclipse.ui.IMemento)
	 */</comment>
	<function><specifier>public</specifier> <type><name>void</name></type> <name>init</name><parameter_list>(<parameter><decl><type><name>IViewSite</name></type> <name>site</name></decl></parameter>, <parameter><decl><type><name>IMemento</name></type> <name>memento</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>PartInitException</name></expr></argument></throws> <block>{
		<throw>throw <expr><operator>new</operator> <call><name>PartInitException</name><argument_list>(<argument><expr><name><name>Messages</name><operator>.</operator><name>PartInitExceptionView_Message</name></name></expr></argument>)</argument_list></call></expr>;</throw>
	}</block></function>

	<comment type="block">/*
	 * (non-Javadoc)
	 * 
	 * @see org.eclipse.ui.part.WorkbenchPart#createPartControl(org.eclipse.swt.widgets.Composite)
	 */</comment>
	<function><specifier>public</specifier> <type><name>void</name></type> <name>createPartControl</name><parameter_list>(<parameter><decl><type><name>Composite</name></type> <name>parent</name></decl></parameter>)</parameter_list> <block>{

	}</block></function>

	<comment type="block">/*
	 * (non-Javadoc)
	 * 
	 * @see org.eclipse.ui.part.WorkbenchPart#setFocus()
	 */</comment>
	<function><specifier>public</specifier> <type><name>void</name></type> <name>setFocus</name><parameter_list>()</parameter_list> <block>{

	}</block></function>

}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="org.eclipse.ui.examples.statushandlers.testtool/src/org/eclipse/ui/examples/statushandlers/testtool/views/RuntimeExceptionEditor.java" hash="46fb939e24edc9d249cf3a57f60a7f69ddb3bdfa"><comment type="block" format="javadoc">/*******************************************************************************
 * Copyright (c) 2005, 2007 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     IBM Corporation - initial API and implementation
 *******************************************************************************/</comment>
<package>package <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>examples</name><operator>.</operator><name>statushandlers</name><operator>.</operator><name>testtool</name><operator>.</operator><name>views</name></name>;</package>

<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>core</name><operator>.</operator><name>runtime</name><operator>.</operator><name>IProgressMonitor</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>swt</name><operator>.</operator><name>widgets</name><operator>.</operator><name>Composite</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>IEditorInput</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>IEditorSite</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>examples</name><operator>.</operator><name>statushandlers</name><operator>.</operator><name>testtool</name><operator>.</operator><name>Messages</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>part</name><operator>.</operator><name>EditorPart</name></name>;</import>

<comment type="block" format="javadoc">/**
 * A sample editor throwing runtime exception.
 */</comment>
<class><specifier>public</specifier> class <name>RuntimeExceptionEditor</name> <super><extends>extends <name>EditorPart</name></extends></super> <block>{

	<comment type="block">/*
	 * (non-Javadoc)
	 * 
	 * @see org.eclipse.ui.part.EditorPart#doSave(org.eclipse.core.runtime.IProgressMonitor)
	 */</comment>
	<function><specifier>public</specifier> <type><name>void</name></type> <name>doSave</name><parameter_list>(<parameter><decl><type><name>IProgressMonitor</name></type> <name>monitor</name></decl></parameter>)</parameter_list> <block>{

	}</block></function>

	<comment type="block">/*
	 * (non-Javadoc)
	 * 
	 * @see org.eclipse.ui.part.EditorPart#doSaveAs()
	 */</comment>
	<function><specifier>public</specifier> <type><name>void</name></type> <name>doSaveAs</name><parameter_list>()</parameter_list> <block>{

	}</block></function>

	<comment type="block">/*
	 * (non-Javadoc)
	 * 
	 * @see org.eclipse.ui.part.EditorPart#init(org.eclipse.ui.IEditorSite,
	 *      org.eclipse.ui.IEditorInput)
	 */</comment>
	<function><specifier>public</specifier> <type><name>void</name></type> <name>init</name><parameter_list>(<parameter><decl><type><name>IEditorSite</name></type> <name>site</name></decl></parameter>, <parameter><decl><type><name>IEditorInput</name></type> <name>input</name></decl></parameter>)</parameter_list> <block>{

	}</block></function>

	<comment type="block">/*
	 * (non-Javadoc)
	 * 
	 * @see org.eclipse.ui.part.EditorPart#isDirty()
	 */</comment>
	<function><specifier>public</specifier> <type><name>boolean</name></type> <name>isDirty</name><parameter_list>()</parameter_list> <block>{

		<return>return <expr><literal type="boolean">false</literal></expr>;</return>
	}</block></function>

	<comment type="block">/*
	 * (non-Javadoc)
	 * 
	 * @see org.eclipse.ui.part.EditorPart#isSaveAsAllowed()
	 */</comment>
	<function><specifier>public</specifier> <type><name>boolean</name></type> <name>isSaveAsAllowed</name><parameter_list>()</parameter_list> <block>{

		<return>return <expr><literal type="boolean">false</literal></expr>;</return>
	}</block></function>

	<comment type="block">/*
	 * (non-Javadoc)
	 * 
	 * @see org.eclipse.ui.part.WorkbenchPart#createPartControl(org.eclipse.swt.widgets.Composite)
	 */</comment>
	<function><specifier>public</specifier> <type><name>void</name></type> <name>createPartControl</name><parameter_list>(<parameter><decl><type><name>Composite</name></type> <name>parent</name></decl></parameter>)</parameter_list> <block>{

	}</block></function>

	<comment type="block">/*
	 * (non-Javadoc)
	 * 
	 * @see org.eclipse.ui.part.WorkbenchPart#setFocus()
	 */</comment>
	<function><specifier>public</specifier> <type><name>void</name></type> <name>setFocus</name><parameter_list>()</parameter_list> <block>{

	}</block></function>

	<comment type="block">/*
	 * (non-Javadoc)
	 * 
	 * @see org.eclipse.ui.part.EditorPart#getEditorSite()
	 */</comment>
	<function><specifier>public</specifier> <type><name>IEditorSite</name></type> <name>getEditorSite</name><parameter_list>()</parameter_list> <block>{
		<throw>throw <expr><operator>new</operator> <call><name>RuntimeException</name><argument_list>(<argument><expr><name><name>Messages</name><operator>.</operator><name>RuntimeExceptionEditor_Message</name></name></expr></argument>)</argument_list></call></expr>;</throw>
	}</block></function>

}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="org.eclipse.ui.examples.statushandlers.testtool/src/org/eclipse/ui/examples/statushandlers/testtool/views/RuntimeExceptionView.java" hash="1ba80d72829667b9198fbc943e6aad9bd495e7bb"><comment type="block" format="javadoc">/*******************************************************************************
 * Copyright (c) 2005, 2007 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     IBM Corporation - initial API and implementation
 *******************************************************************************/</comment>
<package>package <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>examples</name><operator>.</operator><name>statushandlers</name><operator>.</operator><name>testtool</name><operator>.</operator><name>views</name></name>;</package>

<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>swt</name><operator>.</operator><name>widgets</name><operator>.</operator><name>Composite</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>examples</name><operator>.</operator><name>statushandlers</name><operator>.</operator><name>testtool</name><operator>.</operator><name>Messages</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>part</name><operator>.</operator><name>ViewPart</name></name>;</import>

<comment type="block" format="javadoc">/**
 * A view throwing RuntimeException during control creation.
 */</comment>
<class><specifier>public</specifier> class <name>RuntimeExceptionView</name> <super><extends>extends <name>ViewPart</name></extends></super> <block>{

	<comment type="block">/*
	 * (non-Javadoc)
	 * 
	 * @see org.eclipse.ui.part.WorkbenchPart#createPartControl(org.eclipse.swt.widgets.Composite)
	 */</comment>
	<function><specifier>public</specifier> <type><name>void</name></type> <name>createPartControl</name><parameter_list>(<parameter><decl><type><name>Composite</name></type> <name>parent</name></decl></parameter>)</parameter_list> <block>{
		<throw>throw <expr><operator>new</operator> <call><name>RuntimeException</name><argument_list>(<argument><expr><name><name>Messages</name><operator>.</operator><name>RuntimeExceptionView_Message</name></name></expr></argument>)</argument_list></call></expr>;</throw>
	}</block></function>

	<comment type="block">/*
	 * (non-Javadoc)
	 * 
	 * @see org.eclipse.ui.part.WorkbenchPart#setFocus()
	 */</comment>
	<function><specifier>public</specifier> <type><name>void</name></type> <name>setFocus</name><parameter_list>()</parameter_list> <block>{

	}</block></function>

}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="org.eclipse.ui.examples.statushandlers.testtool/src/org/eclipse/ui/examples/statushandlers/testtool/views/ShowViewPropertySource.java" hash="a44f9ff43368b885b8ed15f21d3cad29fd9aba19"><comment type="block" format="javadoc">/*******************************************************************************
 * Copyright (c) 2007 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     IBM Corporation - initial API and implementation
 ******************************************************************************/</comment>

<package>package <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>examples</name><operator>.</operator><name>statushandlers</name><operator>.</operator><name>testtool</name><operator>.</operator><name>views</name></name>;</package>

<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>examples</name><operator>.</operator><name>statushandlers</name><operator>.</operator><name>testtool</name><operator>.</operator><name>Messages</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>views</name><operator>.</operator><name>properties</name><operator>.</operator><name>IPropertyDescriptor</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>views</name><operator>.</operator><name>properties</name><operator>.</operator><name>IPropertySource</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>views</name><operator>.</operator><name>properties</name><operator>.</operator><name>PropertyDescriptor</name></name>;</import>

<comment type="block" format="javadoc">/**
 * A property source for {@link ShowViewRunnable}
 */</comment>
<comment type="block">/* package */</comment><class>class <name>ShowViewPropertySource</name> <super><implements>implements <name>IPropertySource</name></implements></super> <block>{

	<decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>THROWN_EXCEPTION_ID</name> <init>= <expr><literal type="string">"showview.exception"</literal></expr></init></decl>;</decl_stmt> <comment type="line">//$NON-NLS-1$</comment>
	<decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>GUIELEMENT_ID</name> <init>= <expr><literal type="string">"showview.guielement"</literal></expr></init></decl>;</decl_stmt> <comment type="line">//$NON-NLS-1$</comment>

	<decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name><name>PropertyDescriptor</name><index>[]</index></name></type> <name>PROPERTY_DESCRIPTOR</name> <init>= <expr><operator>new</operator> <name><name>PropertyDescriptor</name><index>[]</index></name> <block>{
			<expr><operator>new</operator> <call><name>PropertyDescriptor</name><argument_list>(<argument><expr><name>GUIELEMENT_ID</name></expr></argument>,
					<argument><expr><name><name>Messages</name><operator>.</operator><name>ShowViewPropertySource_GUIElementLabel</name></name></expr></argument>)</argument_list></call></expr>,
			<expr><operator>new</operator> <call><name>PropertyDescriptor</name><argument_list>(<argument><expr><name>THROWN_EXCEPTION_ID</name></expr></argument>,
					<argument><expr><name><name>Messages</name><operator>.</operator><name>ShowViewPropertySource_ThrownExceptionLabel</name></name></expr></argument>)</argument_list></call></expr> }</block></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><specifier>private</specifier> <type><name>ShowViewRunnable</name></type> <name>runnable</name></decl>;</decl_stmt>

	<comment type="block" format="javadoc">/**
	 * Creates the property source for {@link ShowViewRunnable}
	 * 
	 * @param showViewRunnable
	 *            a runnable, for which the property source should be created.
	 */</comment>
	<constructor><specifier>public</specifier> <name>ShowViewPropertySource</name><parameter_list>(<parameter><decl><type><name>ShowViewRunnable</name></type> <name>showViewRunnable</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><name>runnable</name> <operator>=</operator> <name>showViewRunnable</name></expr>;</expr_stmt>
	}</block></constructor>

	<comment type="block">/*
	 * (non-Javadoc)
	 * 
	 * @see org.eclipse.ui.views.properties.IPropertySource#getEditableValue()
	 */</comment>
	<function><specifier>public</specifier> <type><name>Object</name></type> <name>getEditableValue</name><parameter_list>()</parameter_list> <block>{
		<return>return <expr><literal type="null">null</literal></expr>;</return>
	}</block></function>

	<comment type="block">/*
	 * (non-Javadoc)
	 * 
	 * @see org.eclipse.ui.views.properties.IPropertySource#getPropertyDescriptors()
	 */</comment>
	<function><specifier>public</specifier> <type><name><name>IPropertyDescriptor</name><index>[]</index></name></type> <name>getPropertyDescriptors</name><parameter_list>()</parameter_list> <block>{
		<return>return <expr><name>PROPERTY_DESCRIPTOR</name></expr>;</return>
	}</block></function>

	<comment type="block">/*
	 * (non-Javadoc)
	 * 
	 * @see org.eclipse.ui.views.properties.IPropertySource#getPropertyValue(java.lang.Object)
	 */</comment>
	<function><specifier>public</specifier> <type><name>Object</name></type> <name>getPropertyValue</name><parameter_list>(<parameter><decl><type><name>Object</name></type> <name>id</name></decl></parameter>)</parameter_list> <block>{
		<if>if <condition>(<expr><call><name><name>id</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>GUIELEMENT_ID</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
			<return>return <expr><call><name><name>runnable</name><operator>.</operator><name>getElement</name></name><argument_list>()</argument_list></call></expr>;</return>
		}</block></then></if>
		<if>if <condition>(<expr><call><name><name>id</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>THROWN_EXCEPTION_ID</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
			<return>return <expr><call><name><name>runnable</name><operator>.</operator><name>getException</name></name><argument_list>()</argument_list></call></expr>;</return>
		}</block></then></if>
		<return>return <expr><literal type="null">null</literal></expr>;</return>
	}</block></function>

	<comment type="block">/*
	 * (non-Javadoc)
	 * 
	 * @see org.eclipse.ui.views.properties.IPropertySource#isPropertySet(java.lang.Object)
	 */</comment>
	<function><specifier>public</specifier> <type><name>boolean</name></type> <name>isPropertySet</name><parameter_list>(<parameter><decl><type><name>Object</name></type> <name>id</name></decl></parameter>)</parameter_list> <block>{
		<return>return <expr><literal type="boolean">true</literal></expr>;</return>
	}</block></function>

	<comment type="block">/*
	 * (non-Javadoc)
	 * 
	 * @see org.eclipse.ui.views.properties.IPropertySource#resetPropertyValue(java.lang.Object)
	 */</comment>
	<function><specifier>public</specifier> <type><name>void</name></type> <name>resetPropertyValue</name><parameter_list>(<parameter><decl><type><name>Object</name></type> <name>id</name></decl></parameter>)</parameter_list> <block>{
	}</block></function>

	<comment type="block">/*
	 * (non-Javadoc)
	 * 
	 * @see org.eclipse.ui.views.properties.IPropertySource#setPropertyValue(java.lang.Object,
	 *      java.lang.Object)
	 */</comment>
	<function><specifier>public</specifier> <type><name>void</name></type> <name>setPropertyValue</name><parameter_list>(<parameter><decl><type><name>Object</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><name>Object</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{
	}</block></function>

}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="org.eclipse.ui.examples.statushandlers.testtool/src/org/eclipse/ui/examples/statushandlers/testtool/views/ShowViewComponent.java" hash="16c7c370d35cb79e137cda32ebe3eb7e78aafecb"><comment type="block" format="javadoc">/*******************************************************************************
 * Copyright (c) 2007 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     IBM Corporation - initial API and implementation
 ******************************************************************************/</comment>

<package>package <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>examples</name><operator>.</operator><name>statushandlers</name><operator>.</operator><name>testtool</name><operator>.</operator><name>views</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Arrays</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>swt</name><operator>.</operator><name>SWT</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>swt</name><operator>.</operator><name>layout</name><operator>.</operator><name>GridData</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>swt</name><operator>.</operator><name>layout</name><operator>.</operator><name>GridLayout</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>swt</name><operator>.</operator><name>widgets</name><operator>.</operator><name>Combo</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>swt</name><operator>.</operator><name>widgets</name><operator>.</operator><name>Composite</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>swt</name><operator>.</operator><name>widgets</name><operator>.</operator><name>Label</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>examples</name><operator>.</operator><name>statushandlers</name><operator>.</operator><name>testtool</name><operator>.</operator><name>Messages</name></name>;</import>

<comment type="block" format="javadoc">/**
 * This component is responsible for showing test views.
 */</comment>
<class><specifier>public</specifier> class <name>ShowViewComponent</name> <super><implements>implements <name>TestBedComponent</name></implements></super> <block>{

	<comment type="block">/* package */</comment><decl_stmt><decl><specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>RUNTIME_EXCEPTION_ID</name> <init>= <expr><literal type="string">"RuntimeException"</literal></expr></init></decl>;</decl_stmt> <comment type="line">//$NON-NLS-1$</comment>
	<comment type="block">/* package */</comment><decl_stmt><decl><specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>PART_INIT_EXCEPTION_ID</name> <init>= <expr><literal type="string">"PartInitException"</literal></expr></init></decl>;</decl_stmt> <comment type="line">//$NON-NLS-1$</comment>
	<decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>List</name></type> <name>exceptions</name> <init>= <expr><call><name><name>Arrays</name><operator>.</operator><name>asList</name></name><argument_list>(<argument><expr><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{
			<expr><name>PART_INIT_EXCEPTION_ID</name></expr>, <expr><name>RUNTIME_EXCEPTION_ID</name></expr> }</block></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="block">/* package */</comment><decl_stmt><decl><specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>VIEW_ID</name> <init>= <expr><literal type="string">"view"</literal></expr></init></decl>;</decl_stmt> <comment type="line">//$NON-NLS-1$</comment>
	<comment type="block">/* package */</comment><decl_stmt><decl><specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>EDITOR_ID</name> <init>= <expr><literal type="string">"editor"</literal></expr></init></decl>;</decl_stmt> <comment type="line">//$NON-NLS-1$</comment>
	<decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>List</name></type> <name>elements</name> <init>= <expr><call><name><name>Arrays</name><operator>.</operator><name>asList</name></name><argument_list>(<argument><expr><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{
			<expr><name>EDITOR_ID</name></expr>, <expr><name>VIEW_ID</name></expr> }</block></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><specifier>private</specifier> <type><name>Combo</name></type> <name>elementCombo</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>private</specifier> <type><name>Combo</name></type> <name>exceptionCombo</name></decl>;</decl_stmt>

	<comment type="block">/*
	 * (non-Javadoc)
	 * 
	 * @see org.eclipse.ui.examples.statushandlers.testtool.views.TestBedComponent#createComposite(org.eclipse.swt.widgets.Composite)
	 */</comment>
	<function><specifier>public</specifier> <type><name>Composite</name></type> <name>createComposite</name><parameter_list>(<parameter><decl><type><name>Composite</name></type> <name>parent</name></decl></parameter>)</parameter_list> <block>{
		<decl_stmt><decl><type><name>Composite</name></type> <name>composite</name> <init>= <expr><operator>new</operator> <call><name>Composite</name><argument_list>(<argument><expr><name>parent</name></expr></argument>, <argument><expr><name><name>SWT</name><operator>.</operator><name>NONE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>GridLayout</name></type> <name>layout</name> <init>= <expr><operator>new</operator> <call><name>GridLayout</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name><name>layout</name><operator>.</operator><name>numColumns</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>composite</name><operator>.</operator><name>setLayout</name></name><argument_list>(<argument><expr><name>layout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>GridData</name></type> <name>gd</name> <init>= <expr><operator>new</operator> <call><name>GridData</name><argument_list>(<argument><expr><name><name>GridData</name><operator>.</operator><name>FILL_HORIZONTAL</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>composite</name><operator>.</operator><name>setLayoutData</name></name><argument_list>(<argument><expr><name>gd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<decl_stmt><decl><type><name>Label</name></type> <name>showLabel</name> <init>= <expr><operator>new</operator> <call><name>Label</name><argument_list>(<argument><expr><name>composite</name></expr></argument>, <argument><expr><name><name>SWT</name><operator>.</operator><name>NONE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>showLabel</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><name><name>Messages</name><operator>.</operator><name>ShowViewComponent_ShowLabel</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>elementCombo</name> <operator>=</operator> <operator>new</operator> <call><name>Combo</name><argument_list>(<argument><expr><name>composite</name></expr></argument>, <argument><expr><name><name>SWT</name><operator>.</operator><name>READ_ONLY</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>elements</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
			<expr_stmt><expr><call><name><name>elementCombo</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>(</operator><name>String</name><operator>)</operator> <call><name><name>elements</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></for>
		<expr_stmt><expr><call><name><name>elementCombo</name><operator>.</operator><name>select</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<decl_stmt><decl><type><name>Label</name></type> <name>throwingLabel</name> <init>= <expr><operator>new</operator> <call><name>Label</name><argument_list>(<argument><expr><name>composite</name></expr></argument>, <argument><expr><name><name>SWT</name><operator>.</operator><name>NONE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>throwingLabel</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><name><name>Messages</name><operator>.</operator><name>ShowViewComponent_ThrowingLabel</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>exceptionCombo</name> <operator>=</operator> <operator>new</operator> <call><name>Combo</name><argument_list>(<argument><expr><name>composite</name></expr></argument>, <argument><expr><name><name>SWT</name><operator>.</operator><name>READ_ONLY</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>exceptions</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
			<expr_stmt><expr><call><name><name>exceptionCombo</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>(</operator><name>String</name><operator>)</operator> <call><name><name>exceptions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></for>
		<expr_stmt><expr><call><name><name>exceptionCombo</name><operator>.</operator><name>select</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>composite</name></expr>;</return>
	}</block></function>

	<comment type="block">/*
	 * (non-Javadoc)
	 * 
	 * @see org.eclipse.ui.examples.statushandlers.testtool.views.TestBedComponent#getName()
	 */</comment>
	<function><specifier>public</specifier> <type><name>String</name></type> <name>getName</name><parameter_list>()</parameter_list> <block>{
		<return>return <expr><name><name>Messages</name><operator>.</operator><name>ShowViewComponent_Name</name></name></expr>;</return>
	}</block></function>

	<comment type="block">/*
	 * (non-Javadoc)
	 * 
	 * @see org.eclipse.ui.examples.statushandlers.testtool.views.TestBedComponent#getTestBedRunner()
	 */</comment>
	<function><specifier>public</specifier> <type><name>TestBedRunnable</name></type> <name>getTestBedRunnable</name><parameter_list>()</parameter_list> <block>{
		<decl_stmt><decl><type><name>String</name></type> <name>element</name> <init>= <expr><operator>(</operator><name>String</name><operator>)</operator> <call><name><name>elements</name>
				<operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>elementCombo</name><operator>.</operator><name>getSelectionIndex</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>String</name></type> <name>exception</name> <init>= <expr><operator>(</operator><name>String</name><operator>)</operator> <call><name><name>exceptions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>exceptionCombo</name>
				<operator>.</operator><name>getSelectionIndex</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<return>return <expr><operator>new</operator> <call><name>ShowViewRunnable</name><argument_list>(<argument><expr><name>element</name></expr></argument>, <argument><expr><name>exception</name></expr></argument>)</argument_list></call></expr>;</return>
	}</block></function>

	<comment type="block">/*
	 * (non-Javadoc)
	 * 
	 * @see org.eclipse.ui.examples.statushandlers.testtool.views.TestBedComponent#accept(org.eclipse.ui.examples.statushandlers.testtool.views.TestBedRunnable)
	 */</comment>
	<function><specifier>public</specifier> <type><name>boolean</name></type> <name>accept</name><parameter_list>(<parameter><decl><type><name>TestBedRunnable</name></type> <name>runnable</name></decl></parameter>)</parameter_list> <block>{
		<if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>runnable</name> <operator>instanceof</operator> <name>ShowViewRunnable</name><operator>)</operator></expr>)</condition><then> <block>{
			<return>return <expr><literal type="boolean">false</literal></expr>;</return>
		}</block></then></if>
		<decl_stmt><decl><type><name>ShowViewRunnable</name></type> <name>showViewRunnable</name> <init>= <expr><operator>(</operator><name>ShowViewRunnable</name><operator>)</operator> <name>runnable</name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>elementCombo</name><operator>.</operator><name>select</name></name><argument_list>(<argument><expr><call><name><name>elements</name><operator>.</operator><name>indexOf</name></name><argument_list>(<argument><expr><name><name>showViewRunnable</name><operator>.</operator><name>element</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>exceptionCombo</name><operator>.</operator><name>select</name></name><argument_list>(<argument><expr><call><name><name>exceptions</name><operator>.</operator><name>indexOf</name></name><argument_list>(<argument><expr><name><name>showViewRunnable</name><operator>.</operator><name>exception</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><literal type="boolean">true</literal></expr>;</return>
	}</block></function>

}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="org.eclipse.ui.examples.statushandlers.testtool/src/org/eclipse/ui/examples/statushandlers/testtool/views/JobsAndRunnablesComponent.java" hash="d29a7c8ade9e507854a3eb4df08331724db25b8e"><comment type="block" format="javadoc">/*******************************************************************************
 * Copyright (c) 2007, 2008 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     IBM Corporation - initial API and implementation
 ******************************************************************************/</comment>

<package>package <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>examples</name><operator>.</operator><name>statushandlers</name><operator>.</operator><name>testtool</name><operator>.</operator><name>views</name></name>;</package>

<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>jface</name><operator>.</operator><name>dialogs</name><operator>.</operator><name>IDialogConstants</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>osgi</name><operator>.</operator><name>util</name><operator>.</operator><name>NLS</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>swt</name><operator>.</operator><name>SWT</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>swt</name><operator>.</operator><name>custom</name><operator>.</operator><name>StackLayout</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>swt</name><operator>.</operator><name>events</name><operator>.</operator><name>SelectionAdapter</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>swt</name><operator>.</operator><name>events</name><operator>.</operator><name>SelectionEvent</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>swt</name><operator>.</operator><name>layout</name><operator>.</operator><name>GridData</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>swt</name><operator>.</operator><name>layout</name><operator>.</operator><name>GridLayout</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>swt</name><operator>.</operator><name>widgets</name><operator>.</operator><name>Button</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>swt</name><operator>.</operator><name>widgets</name><operator>.</operator><name>Combo</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>swt</name><operator>.</operator><name>widgets</name><operator>.</operator><name>Composite</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>swt</name><operator>.</operator><name>widgets</name><operator>.</operator><name>Label</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>swt</name><operator>.</operator><name>widgets</name><operator>.</operator><name>Scale</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>swt</name><operator>.</operator><name>widgets</name><operator>.</operator><name>Text</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>examples</name><operator>.</operator><name>statushandlers</name><operator>.</operator><name>testtool</name><operator>.</operator><name>Messages</name></name>;</import>

<comment type="block" format="javadoc">/**
 * This component is responsible for gathering informations about jobs and
 * runnables from the user.
 */</comment>
<class><specifier>public</specifier> class <name>JobsAndRunnablesComponent</name> <super><implements>implements <name>TestBedComponent</name></implements></super> <block>{

	<decl_stmt><decl><specifier>private</specifier> <type><name>Combo</name></type> <name>durationField</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>private</specifier> <type><name>Scale</name></type> <name>percentField</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>private</specifier> <type><name>Combo</name></type> <name>exceptionField</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>private</specifier> <type><name>Button</name></type> <name>progressNoForkLockField</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>private</specifier> <type><name>Text</name></type> <name>delayField</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>private</specifier> <type><name>Text</name></type> <name>quantityField</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>private</specifier> <type><name>Text</name></type> <name>rescheduleDelayField</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>private</specifier> <type><name>Button</name></type> <name>threadField</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>private</specifier> <type><name>Button</name></type> <name>jobLockField</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>private</specifier> <type><name>Button</name></type> <name>systemField</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>private</specifier> <type><name>Button</name></type> <name>userField</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>private</specifier> <type><name>Button</name></type> <name>groupField</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>private</specifier> <type><name>Button</name></type> <name>rescheduleField</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>private</specifier> <type><name>Button</name></type> <name>returnErrorStatusField</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>private</specifier> <type><name>Button</name></type> <name>uiThreadRadio</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>private</specifier> <type><name>Button</name></type> <name>windowRunnableRadio</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>private</specifier> <type><name>Button</name></type> <name>jobsRadio</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>private</specifier> <type><name>Composite</name></type> <name>runJobOptions</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>private</specifier> <type><name>Composite</name></type> <name>uiRunOptions</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>private</specifier> <type><name>Composite</name></type> <name>uiInterfaceThread</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>private</specifier> <type><name>Composite</name></type> <name>parameters</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>private</specifier> <type><name>StackLayout</name></type> <name>stackLayout</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>private</specifier> <type><name>Button</name></type> <name>deferredStatusField</name></decl>;</decl_stmt>

	<comment type="block">/*
	 * (non-Javadoc)
	 * 
	 * @see org.eclipse.ui.examples.statushandlers.testtool.views.TestBedComponent#createComposite(org.eclipse.swt.widgets.Composite)
	 */</comment>
	<function><specifier>public</specifier> <type><name>Composite</name></type> <name>createComposite</name><parameter_list>(<parameter><decl><type><name>Composite</name></type> <name>parent</name></decl></parameter>)</parameter_list> <block>{
		<decl_stmt><decl><type><name>Composite</name></type> <name>composite</name> <init>= <expr><operator>new</operator> <call><name>Composite</name><argument_list>(<argument><expr><name>parent</name></expr></argument>, <argument><expr><name><name>SWT</name><operator>.</operator><name>NONE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>composite</name><operator>.</operator><name>setLayout</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>GridLayout</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>composite</name><operator>.</operator><name>setLayoutData</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>GridData</name><argument_list>(<argument><expr><name><name>GridData</name><operator>.</operator><name>FILL_HORIZONTAL</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>createEntryFieldGroup</name><argument_list>(<argument><expr><name>composite</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>createJobAndRunnableSpecificGroups</name><argument_list>(<argument><expr><name>composite</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<return>return <expr><name>composite</name></expr>;</return>
	}</block></function>

	<comment type="block">/*
	 * (non-Javadoc)
	 * 
	 * @see org.eclipse.ui.examples.statushandlers.testtool.views.TestBedComponent#getName()
	 */</comment>
	<function><specifier>public</specifier> <type><name>String</name></type> <name>getName</name><parameter_list>()</parameter_list> <block>{
		<return>return <expr><name><name>Messages</name><operator>.</operator><name>JobsAndRunnablesComponent_Name</name></name></expr>;</return>
	}</block></function>

	<comment type="block">/*
	 * (non-Javadoc)
	 * 
	 * @see org.eclipse.ui.examples.statushandlers.testtool.views.TestBedComponent#getTestBedRunner()
	 */</comment>
	<function><specifier>public</specifier> <type><name>TestBedRunnable</name></type> <name>getTestBedRunnable</name><parameter_list>()</parameter_list> <block>{
		<comment type="line">// pass controls snapshot</comment>
		<return>return <expr><operator>new</operator> <call><name>JobsAndRunnablesRunnable</name><argument_list>(<argument><expr><call><name>getDuration</name><argument_list>(<argument><expr><call><name><name>durationField</name>
				<operator>.</operator><name>getSelectionIndex</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>percentField</name><operator>.</operator><name>getSelection</name></name><argument_list>()</argument_list></call></expr></argument>,
				<argument><expr><call><name><name>exceptionField</name><operator>.</operator><name>getSelectionIndex</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>progressNoForkLockField</name>
						<operator>.</operator><name>getSelection</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>delayField</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>quantityField</name>
						<operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>rescheduleDelayField</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>threadField</name>
						<operator>.</operator><name>getSelection</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>jobLockField</name><operator>.</operator><name>getSelection</name></name><argument_list>()</argument_list></call></expr></argument>,
				<argument><expr><call><name><name>systemField</name><operator>.</operator><name>getSelection</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>userField</name><operator>.</operator><name>getSelection</name></name><argument_list>()</argument_list></call></expr></argument>,
				<argument><expr><call><name><name>groupField</name><operator>.</operator><name>getSelection</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>rescheduleField</name><operator>.</operator><name>getSelection</name></name><argument_list>()</argument_list></call></expr></argument>,
				<argument><expr><call><name><name>returnErrorStatusField</name><operator>.</operator><name>getSelection</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>uiThreadRadio</name>
						<operator>.</operator><name>getSelection</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>windowRunnableRadio</name><operator>.</operator><name>getSelection</name></name><argument_list>()</argument_list></call></expr></argument>,
				<argument><expr><call><name><name>jobsRadio</name><operator>.</operator><name>getSelection</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>deferredStatusField</name><operator>.</operator><name>getSelection</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
	}</block></function>

	<function><specifier>protected</specifier> <type><name>int</name></type> <name>getDuration</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>durationIndex</name></decl></parameter>)</parameter_list> <block>{
		<switch>switch <condition>(<expr><name>durationIndex</name></expr>)</condition> <block>{
		<case>case <expr><literal type="number">0</literal></expr>:</case>
			<return>return <expr><literal type="number">0</literal></expr>;</return>
		<case>case <expr><literal type="number">1</literal></expr>:</case>
			<return>return <expr><literal type="number">1</literal></expr>;</return>
		<case>case <expr><literal type="number">2</literal></expr>:</case>
			<return>return <expr><literal type="number">1000</literal></expr>;</return>
		<case>case <expr><literal type="number">3</literal></expr>:</case>
			<return>return <expr><literal type="number">10000</literal></expr>;</return>
		<case>case <expr><literal type="number">4</literal></expr>:</case>
			<return>return <expr><literal type="number">60000</literal></expr>;</return>
		<case>case <expr><literal type="number">5</literal></expr>:</case>
		<default>default:</default>
			<return>return <expr><literal type="number">600000</literal></expr>;</return>
		}</block></switch>
	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Creates global entry group.
	 * 
	 * @param body
	 *            parent on which all controls should be set
	 */</comment>
	<function><specifier>private</specifier> <type><name>void</name></type> <name>createEntryFieldGroup</name><parameter_list>(<parameter><decl><type><name>Composite</name></type> <name>body</name></decl></parameter>)</parameter_list> <block>{
		<comment type="line">// duration</comment>
		<decl_stmt><decl><type><name>Label</name></type> <name>label</name> <init>= <expr><operator>new</operator> <call><name>Label</name><argument_list>(<argument><expr><name>body</name></expr></argument>, <argument><expr><name><name>SWT</name><operator>.</operator><name>NONE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>label</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><literal type="string">"Duration:"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">//$NON-NLS-1$</comment>
		<expr_stmt><expr><name>durationField</name> <operator>=</operator> <operator>new</operator> <call><name>Combo</name><argument_list>(<argument><expr><name>body</name></expr></argument>, <argument><expr><name><name>SWT</name><operator>.</operator><name>DROP_DOWN</name></name> <operator>|</operator> <name><name>SWT</name><operator>.</operator><name>READ_ONLY</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>GridData</name></type> <name>data</name> <init>= <expr><operator>new</operator> <call><name>GridData</name><argument_list>(<argument><expr><name><name>GridData</name><operator>.</operator><name>FILL_HORIZONTAL</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name><name>data</name><operator>.</operator><name>widthHint</name></name> <operator>=</operator> <name><name>IDialogConstants</name><operator>.</operator><name>ENTRY_FIELD_WIDTH</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>durationField</name><operator>.</operator><name>setLayoutData</name></name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>durationField</name>
				<operator>.</operator><name>setToolTipText</name></name><argument_list>(<argument><expr><name><name>Messages</name><operator>.</operator><name>JobsAndRunnablesComponent_DurationTooltip</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>durationField</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><literal type="string">"0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">//$NON-NLS-1$</comment>
		<expr_stmt><expr><call><name><name>durationField</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name><name>Messages</name><operator>.</operator><name>JobsAndRunnablesComponent_1ms</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>durationField</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name><name>Messages</name><operator>.</operator><name>JobsAndRunnablesComponent_1s</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>durationField</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name><name>Messages</name><operator>.</operator><name>JobsAndRunnablesComponent_10s</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>durationField</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name><name>Messages</name><operator>.</operator><name>JobsAndRunnablesComponent_1minute</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>durationField</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name><name>Messages</name><operator>.</operator><name>JobsAndRunnablesComponent_10minutes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>durationField</name><operator>.</operator><name>select</name></name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// default 10 seconds</comment>

		<expr_stmt><expr><name>label</name> <operator>=</operator> <operator>new</operator> <call><name>Label</name><argument_list>(<argument><expr><name>body</name></expr></argument>, <argument><expr><name><name>SWT</name><operator>.</operator><name>NONE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>label</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><name><name>Messages</name><operator>.</operator><name>JobsAndRunnablesComponent_ThrowAfter</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>percentField</name> <operator>=</operator> <operator>new</operator> <call><name>Scale</name><argument_list>(<argument><expr><name>body</name></expr></argument>, <argument><expr><name><name>SWT</name><operator>.</operator><name>NONE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>data</name> <operator>=</operator> <operator>new</operator> <call><name>GridData</name><argument_list>(<argument><expr><name><name>GridData</name><operator>.</operator><name>FILL_HORIZONTAL</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>data</name><operator>.</operator><name>widthHint</name></name> <operator>=</operator> <name><name>IDialogConstants</name><operator>.</operator><name>ENTRY_FIELD_WIDTH</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>percentField</name><operator>.</operator><name>setLayoutData</name></name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>percentField</name>
				<operator>.</operator><name>setToolTipText</name></name><argument_list>(<argument><expr><name><name>Messages</name><operator>.</operator><name>JobsAndRunnablesComponent_DefaultThrowAfterTooltip</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>percentField</name><operator>.</operator><name>setMinimum</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>percentField</name><operator>.</operator><name>setMaximum</name></name><argument_list>(<argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>percentField</name><operator>.</operator><name>setSelection</name></name><argument_list>(<argument><expr><literal type="number">50</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>percentField</name><operator>.</operator><name>addSelectionListener</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>SelectionAdapter</name></super><argument_list>()</argument_list> <block>{

			<function><specifier>public</specifier> <type><name>void</name></type> <name>widgetSelected</name><parameter_list>(<parameter><decl><type><name>SelectionEvent</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
				<expr_stmt><expr><call><name><name>percentField</name>
						<operator>.</operator><name>setToolTipText</name></name><argument_list>(<argument><expr><call><name><name>NLS</name>
								<operator>.</operator><name>bind</name></name><argument_list>(
										<argument><expr><name><name>Messages</name><operator>.</operator><name>JobsAndRunnablesComponent_ExceptionThrownAfter</name></name></expr></argument>,
										<argument><expr><operator>new</operator> <call><name>Integer</name><argument_list>(<argument><expr><call><name><name>percentField</name><operator>.</operator><name>getSelection</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			}</block></function>

		}</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>label</name> <operator>=</operator> <operator>new</operator> <call><name>Label</name><argument_list>(<argument><expr><name>body</name></expr></argument>, <argument><expr><name><name>SWT</name><operator>.</operator><name>NONE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>label</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><name><name>Messages</name><operator>.</operator><name>JobsAndRunnablesComponent_Exception</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>exceptionField</name> <operator>=</operator> <operator>new</operator> <call><name>Combo</name><argument_list>(<argument><expr><name>body</name></expr></argument>, <argument><expr><name><name>SWT</name><operator>.</operator><name>DROP_DOWN</name></name> <operator>|</operator> <name><name>SWT</name><operator>.</operator><name>READ_ONLY</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>data</name> <operator>=</operator> <operator>new</operator> <call><name>GridData</name><argument_list>(<argument><expr><name><name>GridData</name><operator>.</operator><name>FILL_HORIZONTAL</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>data</name><operator>.</operator><name>widthHint</name></name> <operator>=</operator> <name><name>IDialogConstants</name><operator>.</operator><name>ENTRY_FIELD_WIDTH</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>exceptionField</name><operator>.</operator><name>setLayoutData</name></name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>exceptionField</name>
				<operator>.</operator><name>setToolTipText</name></name><argument_list>(<argument><expr><name><name>Messages</name><operator>.</operator><name>JobsAndRunnablesComponent_ExceptionFromTheJob</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>exceptionField</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><literal type="string">"NullPointerException"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">//$NON-NLS-1$</comment>
		<expr_stmt><expr><call><name><name>exceptionField</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><literal type="string">"OutOfMemoryError"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">//$NON-NLS-1$</comment>
		<expr_stmt><expr><call><name><name>exceptionField</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><literal type="string">"IndexOutOfBoundsException"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt><comment type="line">//$NON-NLS-1$</comment>
		<expr_stmt><expr><call><name><name>exceptionField</name><operator>.</operator><name>select</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	}</block></function>

	<function><specifier>private</specifier> <type><name>void</name></type> <name>createJobAndRunnableSpecificGroups</name><parameter_list>(<parameter><decl><type><name>Composite</name></type> <name>parent</name></decl></parameter>)</parameter_list> <block>{

		<decl_stmt><decl><type><name>Composite</name></type> <name>group</name> <init>= <expr><operator>new</operator> <call><name>Composite</name><argument_list>(<argument><expr><name>parent</name></expr></argument>, <argument><expr><name><name>SWT</name><operator>.</operator><name>NONE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>GridLayout</name></type> <name>layout</name> <init>= <expr><operator>new</operator> <call><name>GridLayout</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name><name>layout</name><operator>.</operator><name>numColumns</name></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>group</name><operator>.</operator><name>setLayout</name></name><argument_list>(<argument><expr><name>layout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>GridData</name></type> <name>gd</name> <init>= <expr><operator>new</operator> <call><name>GridData</name><argument_list>(<argument><expr><name><name>GridData</name><operator>.</operator><name>FILL_BOTH</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name><name>gd</name><operator>.</operator><name>horizontalSpan</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>group</name><operator>.</operator><name>setLayoutData</name></name><argument_list>(<argument><expr><name>gd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<decl_stmt><decl><type><name>Composite</name></type> <name>radios</name> <init>= <expr><operator>new</operator> <call><name>Composite</name><argument_list>(<argument><expr><name>parent</name></expr></argument>, <argument><expr><name><name>SWT</name><operator>.</operator><name>NONE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name>layout</name> <operator>=</operator> <operator>new</operator> <call><name>GridLayout</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>radios</name><operator>.</operator><name>setLayout</name></name><argument_list>(<argument><expr><name>layout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>gd</name> <operator>=</operator> <operator>new</operator> <call><name>GridData</name><argument_list>(<argument><expr><name><name>GridData</name><operator>.</operator><name>FILL_BOTH</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>gd</name><operator>.</operator><name>horizontalAlignment</name></name> <operator>=</operator> <name><name>GridData</name><operator>.</operator><name>HORIZONTAL_ALIGN_BEGINNING</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>radios</name><operator>.</operator><name>setLayoutData</name></name><argument_list>(<argument><expr><name>gd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>uiThreadRadio</name> <operator>=</operator> <operator>new</operator> <call><name>Button</name><argument_list>(<argument><expr><name>radios</name></expr></argument>, <argument><expr><name><name>SWT</name><operator>.</operator><name>RADIO</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>uiThreadRadio</name>
				<operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><name><name>Messages</name><operator>.</operator><name>JobsAndRunnablesComponent_RunInUIThreadLabel</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>uiThreadRadio</name>
				<operator>.</operator><name>setToolTipText</name></name><argument_list>(<argument><expr><name><name>Messages</name><operator>.</operator><name>JobsAndRunnablesComponent_RunInUIThreadTooltip</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>windowRunnableRadio</name> <operator>=</operator> <operator>new</operator> <call><name>Button</name><argument_list>(<argument><expr><name>radios</name></expr></argument>, <argument><expr><name><name>SWT</name><operator>.</operator><name>RADIO</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>windowRunnableRadio</name>
				<operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><name><name>Messages</name><operator>.</operator><name>JobsAndRunnablesComponent_WindowRunnable</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>windowRunnableRadio</name>
				<operator>.</operator><name>setToolTipText</name></name><argument_list>(<argument><expr><name><name>Messages</name><operator>.</operator><name>JobsAndRunnablesComponent_WindowRunnableTooltip</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>jobsRadio</name> <operator>=</operator> <operator>new</operator> <call><name>Button</name><argument_list>(<argument><expr><name>radios</name></expr></argument>, <argument><expr><name><name>SWT</name><operator>.</operator><name>RADIO</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>jobsRadio</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><name><name>Messages</name><operator>.</operator><name>JobsAndRunnablesComponent_Jobs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>jobsRadio</name>
				<operator>.</operator><name>setToolTipText</name></name><argument_list>(<argument><expr><name><name>Messages</name><operator>.</operator><name>JobsAndRunnablesComponent_CreateJobWithParameters</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>parameters</name> <operator>=</operator> <operator>new</operator> <call><name>Composite</name><argument_list>(<argument><expr><name>parent</name></expr></argument>, <argument><expr><name><name>SWT</name><operator>.</operator><name>BORDER</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>stackLayout</name> <operator>=</operator> <operator>new</operator> <call><name>StackLayout</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>parameters</name><operator>.</operator><name>setLayout</name></name><argument_list>(<argument><expr><name>stackLayout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>gd</name> <operator>=</operator> <operator>new</operator> <call><name>GridData</name><argument_list>(<argument><expr><name><name>GridData</name><operator>.</operator><name>FILL_BOTH</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>parameters</name><operator>.</operator><name>setLayoutData</name></name><argument_list>(<argument><expr><name>gd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>runJobOptions</name> <operator>=</operator> <call><name>createRunJob</name><argument_list>(<argument><expr><name>parameters</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>uiRunOptions</name> <operator>=</operator> <call><name>createRunInUIGroup</name><argument_list>(<argument><expr><name>parameters</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>uiInterfaceThread</name> <operator>=</operator> <call><name>createRunInUserInterfaceThread</name><argument_list>(<argument><expr><name>parameters</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>uiThreadRadio</name><operator>.</operator><name>addSelectionListener</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>SelectionAdapter</name></super><argument_list>()</argument_list> <block>{

			<function><specifier>public</specifier> <type><name>void</name></type> <name>widgetSelected</name><parameter_list>(<parameter><decl><type><name>SelectionEvent</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
				<expr_stmt><expr><name><name>stackLayout</name><operator>.</operator><name>topControl</name></name> <operator>=</operator> <name>uiRunOptions</name></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>parameters</name><operator>.</operator><name>layout</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			}</block></function>

		}</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name><name>windowRunnableRadio</name><operator>.</operator><name>addSelectionListener</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>SelectionAdapter</name></super><argument_list>()</argument_list> <block>{

			<function><specifier>public</specifier> <type><name>void</name></type> <name>widgetSelected</name><parameter_list>(<parameter><decl><type><name>SelectionEvent</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
				<expr_stmt><expr><name><name>stackLayout</name><operator>.</operator><name>topControl</name></name> <operator>=</operator> <name>uiInterfaceThread</name></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>parameters</name><operator>.</operator><name>layout</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			}</block></function>

		}</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name><name>jobsRadio</name><operator>.</operator><name>addSelectionListener</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>SelectionAdapter</name></super><argument_list>()</argument_list> <block>{

			<function><specifier>public</specifier> <type><name>void</name></type> <name>widgetSelected</name><parameter_list>(<parameter><decl><type><name>SelectionEvent</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
				<expr_stmt><expr><name><name>stackLayout</name><operator>.</operator><name>topControl</name></name> <operator>=</operator> <name>runJobOptions</name></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>parameters</name><operator>.</operator><name>layout</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			}</block></function>

		}</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name><name>uiThreadRadio</name><operator>.</operator><name>setSelection</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>stackLayout</name><operator>.</operator><name>topControl</name></name> <operator>=</operator> <name>uiRunOptions</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>parameters</name><operator>.</operator><name>layout</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<function><specifier>private</specifier> <type><name>Composite</name></type> <name>createRunInUIGroup</name><parameter_list>(<parameter><decl><type><name>Composite</name></type> <name>parent</name></decl></parameter>)</parameter_list> <block>{
		<decl_stmt><decl><type><name>Composite</name></type> <name>group</name> <init>= <expr><operator>new</operator> <call><name>Composite</name><argument_list>(<argument><expr><name>parent</name></expr></argument>, <argument><expr><name><name>SWT</name><operator>.</operator><name>BORDER</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>GridLayout</name></type> <name>layout</name> <init>= <expr><operator>new</operator> <call><name>GridLayout</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>group</name><operator>.</operator><name>setLayout</name></name><argument_list>(<argument><expr><name>layout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>group</name><operator>.</operator><name>setLayoutData</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>GridData</name><argument_list>(<argument><expr><name><name>GridData</name><operator>.</operator><name>FILL_VERTICAL</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>progressNoForkLockField</name> <operator>=</operator> <operator>new</operator> <call><name>Button</name><argument_list>(<argument><expr><name>group</name></expr></argument>, <argument><expr><name><name>SWT</name><operator>.</operator><name>CHECK</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>progressNoForkLockField</name>
				<operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><literal type="string">"Lock the workspace (run in workspace)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">//$NON-NLS-1$</comment>
		<decl_stmt><decl><type><name>GridData</name></type> <name>data</name> <init>= <expr><operator>new</operator> <call><name>GridData</name><argument_list>(<argument><expr><name><name>GridData</name><operator>.</operator><name>FILL_HORIZONTAL</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>progressNoForkLockField</name><operator>.</operator><name>setLayoutData</name></name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>progressNoForkLockField</name>
				<operator>.</operator><name>setToolTipText</name></name><argument_list>(<argument><expr><name><name>Messages</name><operator>.</operator><name>JobsAndRunnablesComponent_progressNoForkTooltip</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>group</name></expr>;</return>
	}</block></function>

	<function><specifier>private</specifier> <type><name>Composite</name></type> <name>createRunInUserInterfaceThread</name><parameter_list>(<parameter><decl><type><name>Composite</name></type> <name>parent</name></decl></parameter>)</parameter_list> <block>{

		<decl_stmt><decl><type><name>Composite</name></type> <name>group</name> <init>= <expr><operator>new</operator> <call><name>Composite</name><argument_list>(<argument><expr><name>parent</name></expr></argument>, <argument><expr><name><name>SWT</name><operator>.</operator><name>BORDER</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>GridLayout</name></type> <name>layout</name> <init>= <expr><operator>new</operator> <call><name>GridLayout</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name><name>layout</name><operator>.</operator><name>numColumns</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>group</name><operator>.</operator><name>setLayout</name></name><argument_list>(<argument><expr><name>layout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>group</name><operator>.</operator><name>setLayoutData</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>GridData</name><argument_list>(<argument><expr><name><name>GridData</name><operator>.</operator><name>FILL_HORIZONTAL</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<decl_stmt><decl><type><name>Label</name></type> <name>noOptions</name> <init>= <expr><operator>new</operator> <call><name>Label</name><argument_list>(<argument><expr><name>group</name></expr></argument>, <argument><expr><name><name>SWT</name><operator>.</operator><name>NONE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>noOptions</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><name><name>Messages</name><operator>.</operator><name>JobsAndRunnablesComponent_NoOptions</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<return>return <expr><name>group</name></expr>;</return>
	}</block></function>

	<function><specifier>private</specifier> <type><name>Composite</name></type> <name>createRunJob</name><parameter_list>(<parameter><decl><type><name>Composite</name></type> <name>parent</name></decl></parameter>)</parameter_list> <block>{
		<decl_stmt><decl><type><name>Composite</name></type> <name>group</name> <init>= <expr><operator>new</operator> <call><name>Composite</name><argument_list>(<argument><expr><name>parent</name></expr></argument>, <argument><expr><name><name>SWT</name><operator>.</operator><name>BORDER</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>GridLayout</name></type> <name>layout</name> <init>= <expr><operator>new</operator> <call><name>GridLayout</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name><name>layout</name><operator>.</operator><name>numColumns</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>group</name><operator>.</operator><name>setLayout</name></name><argument_list>(<argument><expr><name>layout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>group</name><operator>.</operator><name>setLayoutData</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>GridData</name><argument_list>(<argument><expr><name><name>GridData</name><operator>.</operator><name>FILL_HORIZONTAL</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<decl_stmt><decl><type><name>Label</name></type> <name>label</name> <init>= <expr><operator>new</operator> <call><name>Label</name><argument_list>(<argument><expr><name>group</name></expr></argument>, <argument><expr><name><name>SWT</name><operator>.</operator><name>NONE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>label</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><name><name>Messages</name><operator>.</operator><name>JobsAndRunnablesComponent_DelayLabel</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>delayField</name> <operator>=</operator> <operator>new</operator> <call><name>Text</name><argument_list>(<argument><expr><name>group</name></expr></argument>, <argument><expr><name><name>SWT</name><operator>.</operator><name>BORDER</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>GridData</name></type> <name>data</name> <init>= <expr><operator>new</operator> <call><name>GridData</name><argument_list>(<argument><expr><name><name>GridData</name><operator>.</operator><name>FILL_HORIZONTAL</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name><name>data</name><operator>.</operator><name>widthHint</name></name> <operator>=</operator> <name><name>IDialogConstants</name><operator>.</operator><name>ENTRY_FIELD_WIDTH</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>delayField</name><operator>.</operator><name>setLayoutData</name></name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>delayField</name>
				<operator>.</operator><name>setToolTipText</name></name><argument_list>(<argument><expr><name><name>Messages</name><operator>.</operator><name>JobsAndRunnablesComponent_DelayTooltip</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>delayField</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><name><name>Messages</name><operator>.</operator><name>JobsAndRunnablesComponent_23</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>label</name> <operator>=</operator> <operator>new</operator> <call><name>Label</name><argument_list>(<argument><expr><name>group</name></expr></argument>, <argument><expr><name><name>SWT</name><operator>.</operator><name>NONE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>label</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><name><name>Messages</name><operator>.</operator><name>JobsAndRunnablesComponent_Quantity</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>quantityField</name> <operator>=</operator> <operator>new</operator> <call><name>Text</name><argument_list>(<argument><expr><name>group</name></expr></argument>, <argument><expr><name><name>SWT</name><operator>.</operator><name>BORDER</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>data</name> <operator>=</operator> <operator>new</operator> <call><name>GridData</name><argument_list>(<argument><expr><name><name>GridData</name><operator>.</operator><name>FILL_HORIZONTAL</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>data</name><operator>.</operator><name>widthHint</name></name> <operator>=</operator> <name><name>IDialogConstants</name><operator>.</operator><name>ENTRY_FIELD_WIDTH</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>quantityField</name><operator>.</operator><name>setLayoutData</name></name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>quantityField</name>
				<operator>.</operator><name>setToolTipText</name></name><argument_list>(<argument><expr><name><name>Messages</name><operator>.</operator><name>JobsAndRunnablesComponent_QunatityTooltip</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>quantityField</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><literal type="string">"1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">//$NON-NLS-1$</comment>

		<comment type="line">// reschedule delay</comment>
		<expr_stmt><expr><name>label</name> <operator>=</operator> <operator>new</operator> <call><name>Label</name><argument_list>(<argument><expr><name>group</name></expr></argument>, <argument><expr><name><name>SWT</name><operator>.</operator><name>NONE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>label</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><name><name>Messages</name><operator>.</operator><name>JobsAndRunnablesComponent_ResheduleDelayLabel</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>rescheduleDelayField</name> <operator>=</operator> <operator>new</operator> <call><name>Text</name><argument_list>(<argument><expr><name>group</name></expr></argument>, <argument><expr><name><name>SWT</name><operator>.</operator><name>BORDER</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>data</name> <operator>=</operator> <operator>new</operator> <call><name>GridData</name><argument_list>(<argument><expr><name><name>GridData</name><operator>.</operator><name>FILL_HORIZONTAL</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>data</name><operator>.</operator><name>widthHint</name></name> <operator>=</operator> <name><name>IDialogConstants</name><operator>.</operator><name>ENTRY_FIELD_WIDTH</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>rescheduleDelayField</name><operator>.</operator><name>setLayoutData</name></name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>rescheduleDelayField</name>
				<operator>.</operator><name>setToolTipText</name></name><argument_list>(<argument><expr><name><name>Messages</name><operator>.</operator><name>JobsAndRunnablesComponent_ResheduleValueTooltip</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>rescheduleDelayField</name>
				<operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><name><name>Messages</name><operator>.</operator><name>JobsAndRunnablesComponent_DefaultResheduleValue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="line">// thread</comment>
		<expr_stmt><expr><name>threadField</name> <operator>=</operator> <operator>new</operator> <call><name>Button</name><argument_list>(<argument><expr><name>group</name></expr></argument>, <argument><expr><name><name>SWT</name><operator>.</operator><name>CHECK</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>threadField</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><name><name>Messages</name><operator>.</operator><name>JobsAndRunnablesComponent_UIThreadLabel</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>data</name> <operator>=</operator> <operator>new</operator> <call><name>GridData</name><argument_list>(<argument><expr><name><name>GridData</name><operator>.</operator><name>FILL_HORIZONTAL</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>threadField</name><operator>.</operator><name>setLayoutData</name></name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>threadField</name>
				<operator>.</operator><name>setToolTipText</name></name><argument_list>(<argument><expr><name><name>Messages</name><operator>.</operator><name>JobsAndRunnablesComponent_UIJobTooltip</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="line">// lock</comment>
		<expr_stmt><expr><name>jobLockField</name> <operator>=</operator> <operator>new</operator> <call><name>Button</name><argument_list>(<argument><expr><name>group</name></expr></argument>, <argument><expr><name><name>SWT</name><operator>.</operator><name>CHECK</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>jobLockField</name>
				<operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><name><name>Messages</name><operator>.</operator><name>JobsAndRunnablesComponent_LockedWorkspace</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>data</name> <operator>=</operator> <operator>new</operator> <call><name>GridData</name><argument_list>(<argument><expr><name><name>GridData</name><operator>.</operator><name>FILL_HORIZONTAL</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>jobLockField</name><operator>.</operator><name>setLayoutData</name></name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>jobLockField</name>
				<operator>.</operator><name>setToolTipText</name></name><argument_list>(<argument><expr><name><name>Messages</name><operator>.</operator><name>JobsAndRunnablesComponent_LockedWorkspaceTooltip</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="line">// system</comment>
		<expr_stmt><expr><name>systemField</name> <operator>=</operator> <operator>new</operator> <call><name>Button</name><argument_list>(<argument><expr><name>group</name></expr></argument>, <argument><expr><name><name>SWT</name><operator>.</operator><name>CHECK</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>systemField</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><name><name>Messages</name><operator>.</operator><name>JobsAndRunnablesComponent_SystemJobLabel</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>data</name> <operator>=</operator> <operator>new</operator> <call><name>GridData</name><argument_list>(<argument><expr><name><name>GridData</name><operator>.</operator><name>FILL_HORIZONTAL</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>systemField</name><operator>.</operator><name>setLayoutData</name></name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>systemField</name>
				<operator>.</operator><name>setToolTipText</name></name><argument_list>(<argument><expr><name><name>Messages</name><operator>.</operator><name>JobsAndRunnablesComponent_SystemJobTooltip</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="line">// whether the job is a user job</comment>
		<expr_stmt><expr><name>userField</name> <operator>=</operator> <operator>new</operator> <call><name>Button</name><argument_list>(<argument><expr><name>group</name></expr></argument>, <argument><expr><name><name>SWT</name><operator>.</operator><name>CHECK</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>userField</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><name><name>Messages</name><operator>.</operator><name>JobsAndRunnablesComponent_UserJob</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>data</name> <operator>=</operator> <operator>new</operator> <call><name>GridData</name><argument_list>(<argument><expr><name><name>GridData</name><operator>.</operator><name>FILL_HORIZONTAL</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>userField</name><operator>.</operator><name>setLayoutData</name></name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>userField</name>
				<operator>.</operator><name>setToolTipText</name></name><argument_list>(<argument><expr><name><name>Messages</name><operator>.</operator><name>JobsAndRunnablesComponent_UserJobTooltip</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="line">// groups</comment>
		<expr_stmt><expr><name>groupField</name> <operator>=</operator> <operator>new</operator> <call><name>Button</name><argument_list>(<argument><expr><name>group</name></expr></argument>, <argument><expr><name><name>SWT</name><operator>.</operator><name>CHECK</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>groupField</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><name><name>Messages</name><operator>.</operator><name>JobsAndRunnablesComponent_SingleGroupLabel</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>data</name> <operator>=</operator> <operator>new</operator> <call><name>GridData</name><argument_list>(<argument><expr><name><name>GridData</name><operator>.</operator><name>FILL_HORIZONTAL</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>groupField</name><operator>.</operator><name>setLayoutData</name></name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>groupField</name>
				<operator>.</operator><name>setToolTipText</name></name><argument_list>(<argument><expr><name><name>Messages</name><operator>.</operator><name>JobsAndRunnablesComponent_SingleGroupTooltip</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="line">// reschedule</comment>
		<expr_stmt><expr><name>rescheduleField</name> <operator>=</operator> <operator>new</operator> <call><name>Button</name><argument_list>(<argument><expr><name>group</name></expr></argument>, <argument><expr><name><name>SWT</name><operator>.</operator><name>CHECK</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>rescheduleField</name>
				<operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><name><name>Messages</name><operator>.</operator><name>JobsAndRunnablesComponent_resheduleLabel</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>data</name> <operator>=</operator> <operator>new</operator> <call><name>GridData</name><argument_list>(<argument><expr><name><name>GridData</name><operator>.</operator><name>FILL_HORIZONTAL</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>rescheduleField</name><operator>.</operator><name>setLayoutData</name></name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>rescheduleField</name>
				<operator>.</operator><name>setToolTipText</name></name><argument_list>(<argument><expr><name><name>Messages</name><operator>.</operator><name>JobsAndRunnablesComponent_resheduleTooltip</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>returnErrorStatusField</name> <operator>=</operator> <operator>new</operator> <call><name>Button</name><argument_list>(<argument><expr><name>group</name></expr></argument>, <argument><expr><name><name>SWT</name><operator>.</operator><name>CHECK</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>returnErrorStatusField</name>
				<operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><literal type="string">"Wrapped"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">//$NON-NLS-1$</comment>
		<expr_stmt><expr><name>data</name> <operator>=</operator> <operator>new</operator> <call><name>GridData</name><argument_list>(<argument><expr><name><name>GridData</name><operator>.</operator><name>FILL_HORIZONTAL</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>returnErrorStatusField</name><operator>.</operator><name>setLayoutData</name></name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>returnErrorStatusField</name>
				<operator>.</operator><name>setToolTipText</name></name><argument_list>(<argument><expr><name><name>Messages</name><operator>.</operator><name>JobsAndRunnablesComponent_wrapTooltip</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<expr_stmt><expr><name>deferredStatusField</name> <operator>=</operator> <operator>new</operator> <call><name>Button</name><argument_list>(<argument><expr><name>group</name></expr></argument>, <argument><expr><name><name>SWT</name><operator>.</operator><name>CHECK</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>deferredStatusField</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><literal type="string">"Deffered"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">//$NON-NLS-1$</comment>
		<expr_stmt><expr><call><name><name>deferredStatusField</name><operator>.</operator><name>setToolTipText</name></name><argument_list>(<argument><expr><literal type="string">"Does not report error immediately"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">//$NON-NLS-1$</comment>
		<return>return <expr><name>group</name></expr>;</return>
	}</block></function>

	<comment type="block">/*
	 * (non-Javadoc)
	 * 
	 * @see org.eclipse.ui.examples.statushandlers.testtool.views.TestBedComponent#accept(org.eclipse.ui.examples.statushandlers.testtool.views.TestBedRunnable)
	 */</comment>
	<function><specifier>public</specifier> <type><name>boolean</name></type> <name>accept</name><parameter_list>(<parameter><decl><type><name>TestBedRunnable</name></type> <name>runnable</name></decl></parameter>)</parameter_list> <block>{
		<if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>runnable</name> <operator>instanceof</operator> <name>JobsAndRunnablesRunnable</name><operator>)</operator></expr>)</condition><then> <block>{
			<return>return <expr><literal type="boolean">false</literal></expr>;</return>
		}</block></then></if>
		<decl_stmt><decl><type><name>JobsAndRunnablesRunnable</name></type> <name>jarr</name> <init>= <expr><operator>(</operator><name>JobsAndRunnablesRunnable</name><operator>)</operator> <name>runnable</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>index</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>millis</name> <init>= <expr><name><name>jarr</name><operator>.</operator><name>duration</name></name></expr></init></decl>;</decl_stmt>
		<switch>switch <condition>(<expr><name>millis</name></expr>)</condition> <block>{
		<case>case <expr><literal type="number">1</literal></expr>:</case> <comment type="line">// 1 ms</comment>
			<expr_stmt><expr><name>index</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><literal type="number">1000</literal></expr>:</case> <comment type="line">// 1s</comment>
			<expr_stmt><expr><name>index</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><literal type="number">10000</literal></expr>:</case> <comment type="line">// 10s</comment>
			<expr_stmt><expr><name>index</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><literal type="number">60000</literal></expr>:</case> <comment type="line">// 1m</comment>
			<expr_stmt><expr><name>index</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><literal type="number">600000</literal></expr>:</case> <comment type="line">// 10m</comment>
			<expr_stmt><expr><name>index</name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt>
			<break>break;</break>
		}</block></switch>
		<expr_stmt><expr><call><name><name>durationField</name><operator>.</operator><name>select</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>percentField</name><operator>.</operator><name>setSelection</name></name><argument_list>(<argument><expr><name><name>jarr</name><operator>.</operator><name>percent</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>exceptionField</name><operator>.</operator><name>select</name></name><argument_list>(<argument><expr><name><name>jarr</name><operator>.</operator><name>exceptionIndex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>progressNoForkLockField</name><operator>.</operator><name>setSelection</name></name><argument_list>(<argument><expr><name><name>jarr</name><operator>.</operator><name>progressNoForLock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>delayField</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><name><name>jarr</name><operator>.</operator><name>delayString</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>quantityField</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><name><name>jarr</name><operator>.</operator><name>quantity</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>rescheduleDelayField</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><name><name>jarr</name><operator>.</operator><name>rescheduleDelay</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>threadField</name><operator>.</operator><name>setSelection</name></name><argument_list>(<argument><expr><name><name>jarr</name><operator>.</operator><name>thread</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>jobLockField</name><operator>.</operator><name>setSelection</name></name><argument_list>(<argument><expr><name><name>jarr</name><operator>.</operator><name>jobLock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>systemField</name><operator>.</operator><name>setSelection</name></name><argument_list>(<argument><expr><name><name>jarr</name><operator>.</operator><name>system</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>userField</name><operator>.</operator><name>setSelection</name></name><argument_list>(<argument><expr><name><name>jarr</name><operator>.</operator><name>user</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>groupField</name><operator>.</operator><name>setSelection</name></name><argument_list>(<argument><expr><name><name>jarr</name><operator>.</operator><name>useGroup</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>rescheduleField</name><operator>.</operator><name>setSelection</name></name><argument_list>(<argument><expr><name><name>jarr</name><operator>.</operator><name>reschedule</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>returnErrorStatusField</name><operator>.</operator><name>setSelection</name></name><argument_list>(<argument><expr><name><name>jarr</name><operator>.</operator><name>returnErrorStatus</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>uiThreadRadio</name><operator>.</operator><name>setSelection</name></name><argument_list>(<argument><expr><name><name>jarr</name><operator>.</operator><name>uiThread</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if>if <condition>(<expr><name><name>jarr</name><operator>.</operator><name>uiThread</name></name></expr>)</condition><then> <block>{
			<expr_stmt><expr><name><name>stackLayout</name><operator>.</operator><name>topControl</name></name> <operator>=</operator> <name>uiRunOptions</name></expr>;</expr_stmt>
		}</block></then></if>
		<expr_stmt><expr><call><name><name>windowRunnableRadio</name><operator>.</operator><name>setSelection</name></name><argument_list>(<argument><expr><name><name>jarr</name><operator>.</operator><name>windowRunnable</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if>if <condition>(<expr><name><name>jarr</name><operator>.</operator><name>windowRunnable</name></name></expr>)</condition><then> <block>{
			<expr_stmt><expr><name><name>stackLayout</name><operator>.</operator><name>topControl</name></name> <operator>=</operator> <name>uiInterfaceThread</name></expr>;</expr_stmt>
		}</block></then></if>
		<expr_stmt><expr><call><name><name>jobsRadio</name><operator>.</operator><name>setSelection</name></name><argument_list>(<argument><expr><name><name>jarr</name><operator>.</operator><name>jobs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if>if <condition>(<expr><name><name>jarr</name><operator>.</operator><name>jobs</name></name></expr>)</condition><then> <block>{
			<expr_stmt><expr><name><name>stackLayout</name><operator>.</operator><name>topControl</name></name> <operator>=</operator> <name>runJobOptions</name></expr>;</expr_stmt>
		}</block></then></if>
		<expr_stmt><expr><call><name><name>deferredStatusField</name><operator>.</operator><name>setSelection</name></name><argument_list>(<argument><expr><name><name>jarr</name><operator>.</operator><name>deferred</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>parameters</name><operator>.</operator><name>layout</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><literal type="boolean">true</literal></expr>;</return>
	}</block></function>

}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="org.eclipse.ui.examples.statushandlers.testtool/src/org/eclipse/ui/examples/statushandlers/testtool/views/JobsAndRunnablesRunnable.java" hash="5ad0b589197cfb0a3a3c42979476b584f7a0554f"><comment type="block" format="javadoc">/*******************************************************************************
 * Copyright (c) 2007, 2008 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     IBM Corporation - initial API and implementation
 ******************************************************************************/</comment>
<package>package <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>examples</name><operator>.</operator><name>statushandlers</name><operator>.</operator><name>testtool</name><operator>.</operator><name>views</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>reflect</name><operator>.</operator><name>InvocationTargetException</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>core</name><operator>.</operator><name>resources</name><operator>.</operator><name>IWorkspaceRunnable</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>core</name><operator>.</operator><name>resources</name><operator>.</operator><name>ResourcesPlugin</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>core</name><operator>.</operator><name>runtime</name><operator>.</operator><name>CoreException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>core</name><operator>.</operator><name>runtime</name><operator>.</operator><name>IProgressMonitor</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>core</name><operator>.</operator><name>runtime</name><operator>.</operator><name>NullProgressMonitor</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>core</name><operator>.</operator><name>runtime</name><operator>.</operator><name>jobs</name><operator>.</operator><name>Job</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>jface</name><operator>.</operator><name>operation</name><operator>.</operator><name>IRunnableWithProgress</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>IMemento</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>PlatformUI</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>actions</name><operator>.</operator><name>WorkspaceModifyOperation</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>examples</name><operator>.</operator><name>statushandlers</name><operator>.</operator><name>testtool</name><operator>.</operator><name>Messages</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>examples</name><operator>.</operator><name>statushandlers</name><operator>.</operator><name>testtool</name><operator>.</operator><name>jobs</name><operator>.</operator><name>TestJob</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>examples</name><operator>.</operator><name>statushandlers</name><operator>.</operator><name>testtool</name><operator>.</operator><name>jobs</name><operator>.</operator><name>UITestJob</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>progress</name><operator>.</operator><name>IProgressService</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>views</name><operator>.</operator><name>properties</name><operator>.</operator><name>IPropertySource</name></name>;</import>

<comment type="block" format="javadoc">/**
 * This class allows for running jobs and runnables in different configurations
 */</comment>
<class><specifier>public</specifier> class <name>JobsAndRunnablesRunnable</name> <super><extends>extends <name>TestBedRunnable</name></extends></super> <block>{

	<decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>JOBS_AND_RUNNABLE_TYPE</name> <init>= <expr><literal type="string">"jobsAndRunnable"</literal></expr></init></decl>;</decl_stmt> <comment type="line">//$NON-NLS-1$</comment>
	<comment type="line">// xml keys</comment>
	<decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>JOBS</name> <init>= <expr><literal type="string">"jobs"</literal></expr></init></decl>;</decl_stmt> <comment type="line">//$NON-NLS-1$</comment>
	<decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>WINDOWRUNNABLE</name> <init>= <expr><literal type="string">"windowrunnable"</literal></expr></init></decl>;</decl_stmt> <comment type="line">//$NON-NLS-1$</comment>
	<decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>UI_THREAD</name> <init>= <expr><literal type="string">"uiThread"</literal></expr></init></decl>;</decl_stmt> <comment type="line">//$NON-NLS-1$</comment>
	<decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>ERRORSTATUS</name> <init>= <expr><literal type="string">"errorstatus"</literal></expr></init></decl>;</decl_stmt> <comment type="line">//$NON-NLS-1$</comment>
	<decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>RESCHEDULE</name> <init>= <expr><literal type="string">"reschedule"</literal></expr></init></decl>;</decl_stmt> <comment type="line">//$NON-NLS-1$</comment>
	<decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>USEGROUP</name> <init>= <expr><literal type="string">"usegroup"</literal></expr></init></decl>;</decl_stmt> <comment type="line">//$NON-NLS-1$</comment>
	<decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>USER</name> <init>= <expr><literal type="string">"user"</literal></expr></init></decl>;</decl_stmt> <comment type="line">//$NON-NLS-1$</comment>
	<decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>SYSTEM</name> <init>= <expr><literal type="string">"system"</literal></expr></init></decl>;</decl_stmt> <comment type="line">//$NON-NLS-1$</comment>
	<decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>JOBLOCK</name> <init>= <expr><literal type="string">"joblock"</literal></expr></init></decl>;</decl_stmt> <comment type="line">//$NON-NLS-1$</comment>
	<decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>THREAD</name> <init>= <expr><literal type="string">"thread"</literal></expr></init></decl>;</decl_stmt> <comment type="line">//$NON-NLS-1$</comment>
	<decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>PROGRESS_NO_FOR_LOCK</name> <init>= <expr><literal type="string">"progressNoForLock"</literal></expr></init></decl>;</decl_stmt> <comment type="line">//$NON-NLS-1$</comment>
	<decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>RESCHEDULE_DELAY</name> <init>= <expr><literal type="string">"rescheduleDelay"</literal></expr></init></decl>;</decl_stmt> <comment type="line">//$NON-NLS-1$</comment>
	<decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>QUANTITY</name> <init>= <expr><literal type="string">"quantity"</literal></expr></init></decl>;</decl_stmt> <comment type="line">//$NON-NLS-1$</comment>
	<decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>DELAY</name> <init>= <expr><literal type="string">"delay"</literal></expr></init></decl>;</decl_stmt> <comment type="line">//$NON-NLS-1$</comment>
	<decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>EXCEPTION</name> <init>= <expr><literal type="string">"exception"</literal></expr></init></decl>;</decl_stmt> <comment type="line">//$NON-NLS-1$</comment>
	<decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>DURATION</name> <init>= <expr><literal type="string">"duration"</literal></expr></init></decl>;</decl_stmt> <comment type="line">//$NON-NLS-1$</comment>
	<decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>PERCENT</name> <init>= <expr><literal type="string">"percent"</literal></expr></init></decl>;</decl_stmt> <comment type="line">//$NON-NLS-1$</comment>
	<decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>DEFERRED</name> <init>= <expr><literal type="string">"deferred"</literal></expr></init></decl>;</decl_stmt> <comment type="line">//$NON-NLS-1$</comment>

	<decl_stmt><decl><type><name>int</name></type> <name>percent</name></decl>, <decl><type ref="prev"/><name>duration</name></decl>, <decl><type ref="prev"/><name>exceptionIndex</name></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>String</name></type> <name>delayString</name></decl>, <decl><type ref="prev"/><name>quantity</name></decl>, <decl><type ref="prev"/><name>rescheduleDelay</name></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>boolean</name></type> <name>progressNoForLock</name></decl>, <decl><type ref="prev"/><name>thread</name></decl>, <decl><type ref="prev"/><name>jobLock</name></decl>, <decl><type ref="prev"/><name>system</name></decl>, <decl><type ref="prev"/><name>user</name></decl>, <decl><type ref="prev"/><name>useGroup</name></decl>,
			<decl><type ref="prev"/><name>reschedule</name></decl>, <decl><type ref="prev"/><name>returnErrorStatus</name></decl>, <decl><type ref="prev"/><name>uiThread</name></decl>, <decl><type ref="prev"/><name>windowRunnable</name></decl>, <decl><type ref="prev"/><name>jobs</name></decl>,
			<decl><type ref="prev"/><name>deferred</name></decl>;</decl_stmt>

	<decl_stmt><decl><specifier>private</specifier> <type><name>JobAndRunnablesPropertySource</name></type> <name>source</name></decl>;</decl_stmt>

	<constructor><specifier>public</specifier> <name>JobsAndRunnablesRunnable</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>duration</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>percent</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>exception</name></decl></parameter>,
			<parameter><decl><type><name>boolean</name></type> <name>progressNoForLock</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>delay</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>quantity</name></decl></parameter>,
			<parameter><decl><type><name>String</name></type> <name>rescheduldeDelay</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>thread</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>jobLock</name></decl></parameter>,
			<parameter><decl><type><name>boolean</name></type> <name>system</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>user</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>useGroup</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>reschedule</name></decl></parameter>,
			<parameter><decl><type><name>boolean</name></type> <name>returnErrorStatus</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>uiThread</name></decl></parameter>,
			<parameter><decl><type><name>boolean</name></type> <name>windowRunnable</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>jobs</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>deffered</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>percent</name></name> <operator>=</operator> <name>percent</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>duration</name></name> <operator>=</operator> <name>duration</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>exceptionIndex</name></name> <operator>=</operator> <name>exception</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>delayString</name></name> <operator>=</operator> <name>delay</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>quantity</name></name> <operator>=</operator> <name>quantity</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>rescheduleDelay</name></name> <operator>=</operator> <name>rescheduldeDelay</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>progressNoForLock</name></name> <operator>=</operator> <name>progressNoForLock</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>thread</name></name> <operator>=</operator> <name>thread</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>jobLock</name></name> <operator>=</operator> <name>jobLock</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>system</name></name> <operator>=</operator> <name>system</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>user</name></name> <operator>=</operator> <name>user</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>useGroup</name></name> <operator>=</operator> <name>useGroup</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>reschedule</name></name> <operator>=</operator> <name>reschedule</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>returnErrorStatus</name></name> <operator>=</operator> <name>returnErrorStatus</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>uiThread</name></name> <operator>=</operator> <name>uiThread</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>windowRunnable</name></name> <operator>=</operator> <name>windowRunnable</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>jobs</name></name> <operator>=</operator> <name>jobs</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>deferred</name></name> <operator>=</operator> <name>deffered</name></expr>;</expr_stmt>
	}</block></constructor>

	<constructor><name>JobsAndRunnablesRunnable</name><parameter_list>()</parameter_list> <block>{
	}</block></constructor>

	<function><specifier>public</specifier> <type><name>void</name></type> <name>run</name><parameter_list>()</parameter_list> <block>{
		<decl_stmt><decl><type><specifier>final</specifier> <name>Throwable</name></type> <name>throwable</name> <init>= <expr><call><name>getException</name><argument_list>(<argument><expr><name>exceptionIndex</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier>final</specifier> <name>long</name></type> <name>throwAfter</name> <init>= <expr><call><name>getThrowAfter</name><argument_list>(<argument><expr><name>duration</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if>if <condition>(<expr><name>uiThread</name></expr>)</condition><then> <block>{

			<decl_stmt><decl><type><name>IProgressService</name></type> <name>progressService</name> <init>= <expr><call><name><name>PlatformUI</name><operator>.</operator><name>getWorkbench</name></name><argument_list>()</argument_list></call>
					<operator>.</operator><call><name>getProgressService</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
			<try>try <block>{
				<expr_stmt><expr><call><name><name>progressService</name><operator>.</operator><name>runInUI</name></name><argument_list>(<argument><expr><name>progressService</name></expr></argument>,
						<argument><expr><operator>new</operator> <class><super><name>IRunnableWithProgress</name></super><argument_list>()</argument_list> <block>{
							<function><specifier>public</specifier> <type><name>void</name></type> <name>run</name><parameter_list>(<parameter><decl><type><name>IProgressMonitor</name></type> <name>monitor</name></decl></parameter>)</parameter_list> <block>{
								<if>if <condition>(<expr><name>progressNoForLock</name></expr>)</condition><then>
									<block type="pseudo"><expr_stmt><expr><call><name>doRunInWorkspace</name><argument_list>(<argument><expr><name>duration</name></expr></argument>, <argument><expr><name>throwAfter</name></expr></argument>,
											<argument><expr><name>throwable</name></expr></argument>, <argument><expr><name>monitor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
								<else>else
									<block type="pseudo"><expr_stmt><expr><call><name>doRun</name><argument_list>(<argument><expr><name>duration</name></expr></argument>, <argument><expr><name>throwAfter</name></expr></argument>, <argument><expr><name>throwable</name></expr></argument>,
											<argument><expr><name>monitor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>
							}</block></function>
						}</block></class></expr></argument>, <argument><expr><call><name><name>ResourcesPlugin</name><operator>.</operator><name>getWorkspace</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getRoot</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>InvocationTargetException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
				<expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			}</block></catch> <catch>catch <parameter_list>(<parameter><decl><type><name>InterruptedException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
				<expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			}</block></catch></try>
		}</block></then></if>
		<if>if <condition>(<expr><name>windowRunnable</name></expr>)</condition><then> <block>{
			<decl_stmt><decl><type><specifier>final</specifier> <name>long</name></type> <name>sleep</name> <init>= <expr><literal type="number">10</literal></expr></init></decl>;</decl_stmt>

			<decl_stmt><decl><type><name>IRunnableWithProgress</name></type> <name>runnableTest</name> <init>= <expr><operator>new</operator> <class><super><name>WorkspaceModifyOperation</name></super><argument_list>()</argument_list> <block>{

				<comment type="block">/*
				 * (non-Javadoc)
				 * 
				 * @see org.eclipse.ui.actions.WorkspaceModifyOperation#execute(org.eclipse.core.runtime.IProgressMonitor)
				 */</comment>
				<function><specifier>protected</specifier> <type><name>void</name></type> <name>execute</name><parameter_list>(<parameter><decl><type><name>IProgressMonitor</name></type> <name>monitor</name></decl></parameter>)</parameter_list> <block>{

					<decl_stmt><decl><type><name>int</name></type> <name>ticks</name> <init>= <expr><call>(<name>int</name>) <argument_list>(<argument><expr><name>duration</name> <operator>/</operator> <name>sleep</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>int</name></type> <name>ticksToThrow</name> <init>= <expr><call>(<name>int</name>) <argument_list>(<argument><expr><name>throwAfter</name> <operator>/</operator> <name>sleep</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

					<expr_stmt><expr><call><name><name>monitor</name><operator>.</operator><name>beginTask</name></name><argument_list>(
							<argument><expr><name><name>Messages</name><operator>.</operator><name>JobsAndRunnablesRunnable_SpinningTaskName</name></name></expr></argument>,
							<argument><expr><name>ticks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name>monitor</name>
							<operator>.</operator><name>setTaskName</name></name><argument_list>(<argument><expr><name><name>Messages</name><operator>.</operator><name>JobsAndRunnablesRunnable_SpinningTaskName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>ticks</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
						<expr_stmt><expr><call><name><name>monitor</name><operator>.</operator><name>subTask</name></name><argument_list>(<argument><expr><literal type="string">"Processing tick #"</literal> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">//$NON-NLS-1$</comment>
						<if>if <condition>(<expr><call><name><name>monitor</name><operator>.</operator><name>isCanceled</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
							<block type="pseudo"><return>return;</return></block></then></if>
						<try>try <block>{
							<expr_stmt><expr><call><name><name>Thread</name><operator>.</operator><name>sleep</name></name><argument_list>(<argument><expr><name>sleep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>InterruptedException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
							<comment type="line">// ignore</comment>
						}</block></catch></try>
						<if>if <condition>(<expr><name>i</name> <operator>==</operator> <name>ticksToThrow</name></expr>)</condition><then> <block>{
							<expr_stmt><expr><call><name>throwException</name><argument_list>(<argument><expr><name>throwable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							<comment type="line">// throwable is neither a runtime exception nor an</comment>
							<comment type="line">// error</comment>
							<return>return;</return>
						}</block></then></if>
						<expr_stmt><expr><call><name><name>monitor</name><operator>.</operator><name>worked</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></for>
				}</block></function>

			}</block></class></expr></init></decl>;</decl_stmt>

			<try>try <block>{
				<expr_stmt><expr><call><name><name>PlatformUI</name><operator>.</operator><name>getWorkbench</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getActiveWorkbenchWindow</name><argument_list>()</argument_list></call><operator>.</operator><call><name>run</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>,
						<argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><name>runnableTest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>InvocationTargetException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
				<expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			}</block></catch> <catch>catch <parameter_list>(<parameter><decl><type><name>InterruptedException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
				<expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			}</block></catch></try>
		}</block></then></if>
		<if>if <condition>(<expr><name>jobs</name></expr>)</condition><then> <block>{
			<decl_stmt><decl><type><name>int</name></type> <name>jobCount</name> <init>= <expr><call><name><name>Integer</name><operator>.</operator><name>parseInt</name></name><argument_list>(<argument><expr><name>quantity</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><specifier>final</specifier> <name>long</name></type> <name>rescheduleWait</name> <init>= <expr><call><name><name>Long</name><operator>.</operator><name>parseLong</name></name><argument_list>(<argument><expr><name>rescheduleDelay</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

			<decl_stmt><decl><type><name>int</name></type> <name>groupIncrement</name> <init>= <expr><name><name>IProgressMonitor</name><operator>.</operator><name>UNKNOWN</name></name></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>IProgressMonitor</name></type> <name>group</name> <init>= <expr><operator>new</operator> <call><name>NullProgressMonitor</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>int</name></type> <name>total</name> <init>= <expr><name><name>IProgressMonitor</name><operator>.</operator><name>UNKNOWN</name></name></expr></init></decl>;</decl_stmt>

			<if>if <condition>(<expr><name>jobCount</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><then> <block>{
				<expr_stmt><expr><name>total</name> <operator>=</operator> <literal type="number">100</literal></expr>;</expr_stmt>
				<expr_stmt><expr><name>groupIncrement</name> <operator>=</operator> <literal type="number">100</literal> <operator>/</operator> <name>jobCount</name></expr>;</expr_stmt>
			}</block></then></if>

			<if>if <condition>(<expr><name>useGroup</name></expr>)</condition><then> <block>{
				<expr_stmt><expr><name>group</name> <operator>=</operator> <call><name><name>Job</name><operator>.</operator><name>getJobManager</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>createProgressGroup</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>group</name><operator>.</operator><name>beginTask</name></name><argument_list>(
						<argument><expr><name><name>Messages</name><operator>.</operator><name>JobsAndRunnablesRunnable_GroupTaskName</name></name></expr></argument>, <argument><expr><name>total</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>

			<decl_stmt><decl><type><name>long</name></type> <name>delay</name> <init>= <expr><call><name><name>Integer</name><operator>.</operator><name>parseInt</name></name><argument_list>(<argument><expr><name>delayString</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>jobCount</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
				<decl_stmt><decl><type><name>Job</name></type> <name>result</name></decl>;</decl_stmt>
				<if>if <condition>(<expr><name>thread</name></expr>)</condition><then>
					<block type="pseudo"><expr_stmt><expr><name>result</name> <operator>=</operator> <operator>new</operator> <call><name>UITestJob</name><argument_list>(<argument><expr><name>duration</name></expr></argument>, <argument><expr><name>jobLock</name></expr></argument>, <argument><expr><name>throwAfter</name></expr></argument>,
							<argument><expr><name>throwable</name></expr></argument>, <argument><expr><name>returnErrorStatus</name></expr></argument>, <argument><expr><name>deferred</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
				<else>else
					<block type="pseudo"><expr_stmt><expr><name>result</name> <operator>=</operator> <operator>new</operator> <call><name>TestJob</name><argument_list>(<argument><expr><name>duration</name></expr></argument>, <argument><expr><name>jobLock</name></expr></argument>, <argument><expr><name>reschedule</name></expr></argument>,
							<argument><expr><name>rescheduleWait</name></expr></argument>, <argument><expr><name>throwAfter</name></expr></argument>, <argument><expr><name>throwable</name></expr></argument>,
							<argument><expr><name>returnErrorStatus</name></expr></argument>, <argument><expr><name>deferred</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>

				<expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>setProgressGroup</name></name><argument_list>(<argument><expr><name>group</name></expr></argument>, <argument><expr><name>groupIncrement</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>setSystem</name></name><argument_list>(<argument><expr><name>system</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>setUser</name></name><argument_list>(<argument><expr><name>user</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>schedule</name></name><argument_list>(<argument><expr><name>delay</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></for>
		}</block></then></if>
	}</block></function>

	<function><type><name>Throwable</name></type> <name>getException</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>exceptionIndex</name></decl></parameter>)</parameter_list> <block>{

		<switch>switch <condition>(<expr><name>exceptionIndex</name></expr>)</condition> <block>{
		<case>case <expr><literal type="number">0</literal></expr>:</case>
			<return>return <expr><operator>new</operator> <call><name>NullPointerException</name><argument_list>(
					<argument><expr><name><name>Messages</name><operator>.</operator><name>JobsAndRunnablesRunnable_NullPointerExceptionMessage</name></name></expr></argument>)</argument_list></call></expr>;</return>
		<case>case <expr><literal type="number">1</literal></expr>:</case>
			<return>return <expr><operator>new</operator> <call><name>OutOfMemoryError</name><argument_list>(
					<argument><expr><name><name>Messages</name><operator>.</operator><name>JobsAndRunnablesRunnable_OutOfMemoryExceptionMessage</name></name></expr></argument>)</argument_list></call></expr>;</return>
		<case>case <expr><literal type="number">2</literal></expr>:</case>
			<return>return <expr><operator>new</operator> <call><name>IndexOutOfBoundsException</name><argument_list>(
					<argument><expr><name><name>Messages</name><operator>.</operator><name>JobsAndRunnablesRunnable_IndexOutOfBoundsMessage</name></name></expr></argument>)</argument_list></call></expr>;</return>
		<default>default:</default>
			<return>return <expr><operator>new</operator> <call><name>NullPointerException</name><argument_list>(
					<argument><expr><name><name>Messages</name><operator>.</operator><name>JobsAndRunnablesRunnable_NullPointerExceptionMessage</name></name></expr></argument>)</argument_list></call></expr>;</return>

		}</block></switch>
	}</block></function>

	<function><specifier>private</specifier> <type><name>long</name></type> <name>getThrowAfter</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>duration</name></decl></parameter>)</parameter_list> <block>{
		<return>return <expr><call><name><name>Math</name><operator>.</operator><name>round</name></name><argument_list>(<argument><expr><name>duration</name> <operator>*</operator> <name>percent</name> <operator>/</operator> <literal type="number">100.0</literal></expr></argument>)</argument_list></call></expr>;</return>
	}</block></function>

	<function><specifier>protected</specifier> <type><name>void</name></type> <name>doRunInWorkspace</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>long</name></type> <name>duration</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>long</name></type> <name>throwAfter</name></decl></parameter>,
			<parameter><decl><type><specifier>final</specifier> <name>Throwable</name></type> <name>toBeThrown</name></decl></parameter>, <parameter><decl><type><name>IProgressMonitor</name></type> <name>monitor</name></decl></parameter>)</parameter_list> <block>{
		<try>try <block>{
			<expr_stmt><expr><call><name><name>ResourcesPlugin</name><operator>.</operator><name>getWorkspace</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>run</name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>IWorkspaceRunnable</name></super><argument_list>()</argument_list> <block>{
				<function><specifier>public</specifier> <type><name>void</name></type> <name>run</name><parameter_list>(<parameter><decl><type><name>IProgressMonitor</name></type> <name>monitor</name></decl></parameter>)</parameter_list> <block>{
					<expr_stmt><expr><call><name>doRun</name><argument_list>(<argument><expr><name>duration</name></expr></argument>, <argument><expr><name>throwAfter</name></expr></argument>, <argument><expr><name>toBeThrown</name></expr></argument>, <argument><expr><name>monitor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></function>
			}</block></class></expr></argument>, <argument><expr><name>monitor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>CoreException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
			<expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		}</block></catch></try>
	}</block></function>

	<function><specifier>protected</specifier> <type><name>void</name></type> <name>doRun</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>duration</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>long</name></type> <name>throwAfter</name></decl></parameter>,
			<parameter><decl><type><specifier>final</specifier> <name>Throwable</name></type> <name>toBeThrown</name></decl></parameter>, <parameter><decl><type><name>IProgressMonitor</name></type> <name>monitor</name></decl></parameter>)</parameter_list> <block>{
		<decl_stmt><decl><type><specifier>final</specifier> <name>long</name></type> <name>sleep</name> <init>= <expr><literal type="number">10</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>ticks</name> <init>= <expr><call>(<name>int</name>) <argument_list>(<argument><expr><name>duration</name> <operator>/</operator> <name>sleep</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>ticksToThrow</name> <init>= <expr><call>(<name>int</name>) <argument_list>(<argument><expr><name>throwAfter</name> <operator>/</operator> <name>sleep</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>monitor</name><operator>.</operator><name>beginTask</name></name><argument_list>(<argument><expr><name><name>Messages</name><operator>.</operator><name>JobsAndRunnablesRunnable_SpiningInside</name></name></expr></argument>,
				<argument><expr><name>ticks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>monitor</name><operator>.</operator><name>setTaskName</name></name><argument_list>(<argument><expr><literal type="string">"Spinning inside IProgressService"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">//$NON-NLS-1$</comment>
		<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>ticks</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
			<expr_stmt><expr><call><name><name>monitor</name><operator>.</operator><name>subTask</name></name><argument_list>(<argument><expr><name><name>Messages</name><operator>.</operator><name>JobsAndRunnablesRunnable_ProcessingTick</name></name>
					<operator>+</operator> <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if>if <condition>(<expr><call><name><name>monitor</name><operator>.</operator><name>isCanceled</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
				<block type="pseudo"><return>return;</return></block></then></if>
			<try>try <block>{
				<expr_stmt><expr><call><name><name>Thread</name><operator>.</operator><name>sleep</name></name><argument_list>(<argument><expr><name>sleep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>InterruptedException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
				<comment type="line">// ignore</comment>
			}</block></catch></try>
			<if>if <condition>(<expr><name>i</name> <operator>==</operator> <name>ticksToThrow</name></expr>)</condition><then> <block>{
				<expr_stmt><expr><call><name>throwException</name><argument_list>(<argument><expr><name>toBeThrown</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<comment type="line">// toBeThrown is neither a runtime exception nor an error</comment>
				<return>return;</return>
			}</block></then></if>
			<expr_stmt><expr><call><name><name>monitor</name><operator>.</operator><name>worked</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></for>
	}</block></function>

	<function><specifier>private</specifier> <type><name>void</name></type> <name>throwException</name><parameter_list>(<parameter><decl><type><name>Throwable</name></type> <name>th</name></decl></parameter>)</parameter_list> <block>{
		<if>if <condition>(<expr><name>th</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then>
			<block type="pseudo"><return>return;</return></block></then></if>

		<if>if <condition>(<expr><name>th</name> <operator>instanceof</operator> <name>RuntimeException</name></expr>)</condition><then>
			<block type="pseudo"><throw>throw <expr><operator>(</operator><name>RuntimeException</name><operator>)</operator> <name>th</name></expr>;</throw></block></then></if>

		<if>if <condition>(<expr><name>th</name> <operator>instanceof</operator> <name>Error</name></expr>)</condition><then> <block>{
			<throw>throw <expr><operator>(</operator><name>Error</name><operator>)</operator> <name>th</name></expr>;</throw>
		}</block></then></if>

	}</block></function>

	<comment type="block">/*
	 * (non-Javadoc)
	 * 
	 * @see org.eclipse.ui.examples.statushandlers.testtool.views.TestBedRunnable#toString()
	 */</comment>
	<function><specifier>public</specifier> <type><name>String</name></type> <name>toString</name><parameter_list>()</parameter_list> <block>{
		<return>return <expr><name><name>Messages</name><operator>.</operator><name>JobsAndRunnablesRunnable_Name</name></name></expr>;</return>
	}</block></function>

	<comment type="block">/*
	 * (non-Javadoc)
	 * 
	 * @see org.eclipse.core.runtime.IAdaptable#getAdapter(java.lang.Class)
	 */</comment>
	<function><specifier>public</specifier> <type><name>Object</name></type> <name>getAdapter</name><parameter_list>(<parameter><decl><type><name>Class</name></type> <name>adapter</name></decl></parameter>)</parameter_list> <block>{
		<if>if <condition>(<expr><name>adapter</name> <operator>==</operator> <name><name>IPropertySource</name><operator>.</operator><name>class</name></name></expr>)</condition><then> <block>{
			<if>if <condition>(<expr><name>source</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
				<expr_stmt><expr><name>source</name> <operator>=</operator> <operator>new</operator> <call><name>JobAndRunnablesPropertySource</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>
			<return>return <expr><name>source</name></expr>;</return>
		}</block></then></if>
		<return>return <expr><literal type="null">null</literal></expr>;</return>
	}</block></function>

	<comment type="block">/*
	 * (non-Javadoc)
	 * 
	 * @see org.eclipse.ui.examples.statushandlers.testtool.views.TestBedRunnable#getTypeId()
	 */</comment>
	<function><specifier>public</specifier> <type><name>String</name></type> <name>getTypeId</name><parameter_list>()</parameter_list> <block>{
		<return>return <expr><name>JOBS_AND_RUNNABLE_TYPE</name></expr>;</return>
	}</block></function>

	<comment type="block">/*
	 * (non-Javadoc)
	 * 
	 * @see org.eclipse.ui.examples.statushandlers.testtool.views.TestBedRunnable#saveState(org.eclipse.ui.IMemento)
	 */</comment>
	<function><specifier>protected</specifier> <type><name>void</name></type> <name>saveState</name><parameter_list>(<parameter><decl><type><name>IMemento</name></type> <name>memento</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><call><name><name>memento</name><operator>.</operator><name>putInteger</name></name><argument_list>(<argument><expr><name>PERCENT</name></expr></argument>, <argument><expr><name>percent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>memento</name><operator>.</operator><name>putInteger</name></name><argument_list>(<argument><expr><name>DURATION</name></expr></argument>, <argument><expr><name>duration</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>memento</name><operator>.</operator><name>putInteger</name></name><argument_list>(<argument><expr><name>EXCEPTION</name></expr></argument>, <argument><expr><name>exceptionIndex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>memento</name><operator>.</operator><name>putString</name></name><argument_list>(<argument><expr><name>DELAY</name></expr></argument>, <argument><expr><name>delayString</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>memento</name><operator>.</operator><name>putString</name></name><argument_list>(<argument><expr><name>QUANTITY</name></expr></argument>, <argument><expr><name>quantity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>memento</name><operator>.</operator><name>putString</name></name><argument_list>(<argument><expr><name>RESCHEDULE_DELAY</name></expr></argument>, <argument><expr><name>rescheduleDelay</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>memento</name><operator>.</operator><name>putString</name></name><argument_list>(<argument><expr><name>PROGRESS_NO_FOR_LOCK</name></expr></argument>, <argument><expr><literal type="string">""</literal> <operator>+</operator> <name>progressNoForLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">//$NON-NLS-1$</comment>
		<expr_stmt><expr><call><name><name>memento</name><operator>.</operator><name>putString</name></name><argument_list>(<argument><expr><name>THREAD</name></expr></argument>, <argument><expr><literal type="string">""</literal> <operator>+</operator> <name>thread</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">//$NON-NLS-1$</comment>
		<expr_stmt><expr><call><name><name>memento</name><operator>.</operator><name>putString</name></name><argument_list>(<argument><expr><name>JOBLOCK</name></expr></argument>, <argument><expr><literal type="string">""</literal> <operator>+</operator> <name>jobLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">//$NON-NLS-1$</comment>
		<expr_stmt><expr><call><name><name>memento</name><operator>.</operator><name>putString</name></name><argument_list>(<argument><expr><name>SYSTEM</name></expr></argument>, <argument><expr><literal type="string">""</literal> <operator>+</operator> <name>system</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">//$NON-NLS-1$</comment>
		<expr_stmt><expr><call><name><name>memento</name><operator>.</operator><name>putString</name></name><argument_list>(<argument><expr><name>USER</name></expr></argument>, <argument><expr><literal type="string">""</literal> <operator>+</operator> <name>user</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">//$NON-NLS-1$</comment>
		<expr_stmt><expr><call><name><name>memento</name><operator>.</operator><name>putString</name></name><argument_list>(<argument><expr><name>USEGROUP</name></expr></argument>, <argument><expr><literal type="string">""</literal> <operator>+</operator> <name>useGroup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">//$NON-NLS-1$</comment>
		<expr_stmt><expr><call><name><name>memento</name><operator>.</operator><name>putString</name></name><argument_list>(<argument><expr><name>RESCHEDULE</name></expr></argument>, <argument><expr><literal type="string">""</literal> <operator>+</operator> <name>reschedule</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">//$NON-NLS-1$</comment>
		<expr_stmt><expr><call><name><name>memento</name><operator>.</operator><name>putString</name></name><argument_list>(<argument><expr><name>ERRORSTATUS</name></expr></argument>, <argument><expr><literal type="string">""</literal> <operator>+</operator> <name>returnErrorStatus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">//$NON-NLS-1$</comment>
		<expr_stmt><expr><call><name><name>memento</name><operator>.</operator><name>putString</name></name><argument_list>(<argument><expr><name>UI_THREAD</name></expr></argument>, <argument><expr><literal type="string">""</literal> <operator>+</operator> <name>uiThread</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">//$NON-NLS-1$</comment>
		<expr_stmt><expr><call><name><name>memento</name><operator>.</operator><name>putString</name></name><argument_list>(<argument><expr><name>WINDOWRUNNABLE</name></expr></argument>, <argument><expr><literal type="string">""</literal> <operator>+</operator> <name>windowRunnable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">//$NON-NLS-1$</comment>
		<expr_stmt><expr><call><name><name>memento</name><operator>.</operator><name>putString</name></name><argument_list>(<argument><expr><name>JOBS</name></expr></argument>, <argument><expr><literal type="string">""</literal> <operator>+</operator> <name>jobs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">//$NON-NLS-1$</comment>
		<expr_stmt><expr><call><name><name>memento</name><operator>.</operator><name>putString</name></name><argument_list>(<argument><expr><name>DEFERRED</name></expr></argument>, <argument><expr><literal type="string">""</literal> <operator>+</operator> <name>deferred</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">//$NON-NLS-1$</comment>
	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Creates JobsAndRunnablesRunnable from the memento
	 * 
	 * @param memento
	 *            that stores all information about runnable
	 * @return JobsAndRunnablesRunnable corresponding to the memento
	 */</comment>
	<function><specifier>public</specifier> <specifier>static</specifier> <type><name>TestBedRunnable</name></type> <name>create</name><parameter_list>(<parameter><decl><type><name>IMemento</name></type> <name>memento</name></decl></parameter>)</parameter_list> <block>{
		<decl_stmt><decl><type><name>JobsAndRunnablesRunnable</name></type> <name>runnable</name> <init>= <expr><operator>new</operator> <call><name>JobsAndRunnablesRunnable</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name><name>runnable</name><operator>.</operator><name>percent</name></name> <operator>=</operator> <call><name><name>memento</name><operator>.</operator><name>getInteger</name></name><argument_list>(<argument><expr><name>PERCENT</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>intValue</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>runnable</name><operator>.</operator><name>duration</name></name> <operator>=</operator> <call><name><name>memento</name><operator>.</operator><name>getInteger</name></name><argument_list>(<argument><expr><name>DURATION</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>intValue</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>runnable</name><operator>.</operator><name>exceptionIndex</name></name> <operator>=</operator> <call><name><name>memento</name><operator>.</operator><name>getInteger</name></name><argument_list>(<argument><expr><name>EXCEPTION</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>intValue</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>runnable</name><operator>.</operator><name>delayString</name></name> <operator>=</operator> <call><name><name>memento</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name>DELAY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>runnable</name><operator>.</operator><name>quantity</name></name> <operator>=</operator> <call><name><name>memento</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name>QUANTITY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>runnable</name><operator>.</operator><name>rescheduleDelay</name></name> <operator>=</operator> <call><name><name>memento</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name>RESCHEDULE_DELAY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>runnable</name><operator>.</operator><name>progressNoForLock</name></name> <operator>=</operator> <operator>new</operator> <call><name>Boolean</name><argument_list>(<argument><expr><call><name><name>memento</name>
				<operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name>PROGRESS_NO_FOR_LOCK</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>booleanValue</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>runnable</name><operator>.</operator><name>thread</name></name> <operator>=</operator> <operator>new</operator> <call><name>Boolean</name><argument_list>(<argument><expr><call><name><name>memento</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name>THREAD</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>booleanValue</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>runnable</name><operator>.</operator><name>jobLock</name></name> <operator>=</operator> <operator>new</operator> <call><name>Boolean</name><argument_list>(<argument><expr><call><name><name>memento</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name>JOBLOCK</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
				<operator>.</operator><call><name>booleanValue</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>runnable</name><operator>.</operator><name>system</name></name> <operator>=</operator> <operator>new</operator> <call><name>Boolean</name><argument_list>(<argument><expr><call><name><name>memento</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name>SYSTEM</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>booleanValue</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>runnable</name><operator>.</operator><name>user</name></name> <operator>=</operator> <operator>new</operator> <call><name>Boolean</name><argument_list>(<argument><expr><call><name><name>memento</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name>USER</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>booleanValue</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>runnable</name><operator>.</operator><name>useGroup</name></name> <operator>=</operator> <operator>new</operator> <call><name>Boolean</name><argument_list>(<argument><expr><call><name><name>memento</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name>USEGROUP</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
				<operator>.</operator><call><name>booleanValue</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>runnable</name><operator>.</operator><name>reschedule</name></name> <operator>=</operator> <operator>new</operator> <call><name>Boolean</name><argument_list>(<argument><expr><call><name><name>memento</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name>RESCHEDULE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
				<operator>.</operator><call><name>booleanValue</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>runnable</name><operator>.</operator><name>returnErrorStatus</name></name> <operator>=</operator> <operator>new</operator> <call><name>Boolean</name><argument_list>(<argument><expr><call><name><name>memento</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name>ERRORSTATUS</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
				<operator>.</operator><call><name>booleanValue</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>runnable</name><operator>.</operator><name>uiThread</name></name> <operator>=</operator> <operator>new</operator> <call><name>Boolean</name><argument_list>(<argument><expr><call><name><name>memento</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name>UI_THREAD</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
				<operator>.</operator><call><name>booleanValue</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>runnable</name><operator>.</operator><name>windowRunnable</name></name> <operator>=</operator> <operator>new</operator> <call><name>Boolean</name><argument_list>(<argument><expr><call><name><name>memento</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name>WINDOWRUNNABLE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
				<operator>.</operator><call><name>booleanValue</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>runnable</name><operator>.</operator><name>jobs</name></name> <operator>=</operator> <operator>new</operator> <call><name>Boolean</name><argument_list>(<argument><expr><call><name><name>memento</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name>JOBS</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>booleanValue</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>runnable</name><operator>.</operator><name>deferred</name></name> <operator>=</operator> <operator>new</operator> <call><name>Boolean</name><argument_list>(<argument><expr><call><name><name>memento</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name>DEFERRED</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>booleanValue</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>runnable</name></expr>;</return>
	}</block></function>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="org.eclipse.ui.examples.statushandlers.testtool/src/org/eclipse/ui/examples/statushandlers/testtool/views/ShowViewRunnable.java" hash="8c7559cf5db8abd1e53a7229f14a247d67aa800d"><comment type="block" format="javadoc">/*******************************************************************************
 * Copyright (c) 2007 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     IBM Corporation - initial API and implementation
 ******************************************************************************/</comment>

<package>package <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>examples</name><operator>.</operator><name>statushandlers</name><operator>.</operator><name>testtool</name><operator>.</operator><name>views</name></name>;</package>

<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>jface</name><operator>.</operator><name>resource</name><operator>.</operator><name>ImageDescriptor</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>IEditorInput</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>IMemento</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>IPersistableElement</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>PartInitException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>PlatformUI</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>examples</name><operator>.</operator><name>statushandlers</name><operator>.</operator><name>testtool</name><operator>.</operator><name>Messages</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>views</name><operator>.</operator><name>properties</name><operator>.</operator><name>IPropertySource</name></name>;</import>

<class>class <name>ShowViewRunnable</name> <super><extends>extends <name>TestBedRunnable</name></extends></super> <block>{

	<decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>SHOW_VIEW_TYPE</name> <init>= <expr><literal type="string">"showView"</literal></expr></init></decl>;</decl_stmt> <comment type="line">//$NON-NLS-1$</comment>

	<comment type="line">// xml tags</comment>
	<decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>EXCEPTION</name> <init>= <expr><literal type="string">"exception"</literal></expr></init></decl>;</decl_stmt> <comment type="line">//$NON-NLS-1$</comment>
	<decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>UIELEMENT</name> <init>= <expr><literal type="string">"uielement"</literal></expr></init></decl>;</decl_stmt> <comment type="line">//$NON-NLS-1$</comment>

	<decl_stmt><decl><type><name>String</name></type> <name>element</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>String</name></type> <name>exception</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>private</specifier> <type><name>Object</name></type> <name>source</name></decl>;</decl_stmt>

	<constructor><specifier>public</specifier> <name>ShowViewRunnable</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>element</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>exception</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>element</name></name> <operator>=</operator> <name>element</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>exception</name></name> <operator>=</operator> <name>exception</name></expr>;</expr_stmt>
	}</block></constructor>

	<function><specifier>public</specifier> <type><name>void</name></type> <name>run</name><parameter_list>()</parameter_list> <block>{
		<if>if <condition>(<expr><call><name><name>element</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>ShowViewComponent</name><operator>.</operator><name>EDITOR_ID</name></name></expr></argument>)</argument_list></call>
				<operator>&amp;&amp;</operator> <call><name><name>exception</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>ShowViewComponent</name><operator>.</operator><name>PART_INIT_EXCEPTION_ID</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
			<expr_stmt><expr><call><name>showPartInitExceptionEditor</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>
		<if>if <condition>(<expr><call><name><name>element</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>ShowViewComponent</name><operator>.</operator><name>EDITOR_ID</name></name></expr></argument>)</argument_list></call>
				<operator>&amp;&amp;</operator> <call><name><name>exception</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>ShowViewComponent</name><operator>.</operator><name>RUNTIME_EXCEPTION_ID</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
			<expr_stmt><expr><call><name>showRuntimeExceptionEditor</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>
		<if>if <condition>(<expr><call><name><name>element</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>ShowViewComponent</name><operator>.</operator><name>VIEW_ID</name></name></expr></argument>)</argument_list></call>
				<operator>&amp;&amp;</operator> <call><name><name>exception</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>ShowViewComponent</name><operator>.</operator><name>PART_INIT_EXCEPTION_ID</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
			<expr_stmt><expr><call><name>showPartInitExceptionView</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>
		<if>if <condition>(<expr><call><name><name>element</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>ShowViewComponent</name><operator>.</operator><name>VIEW_ID</name></name></expr></argument>)</argument_list></call>
				<operator>&amp;&amp;</operator> <call><name><name>exception</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>ShowViewComponent</name><operator>.</operator><name>RUNTIME_EXCEPTION_ID</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
			<expr_stmt><expr><call><name>showRuntimeExceptionView</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>

	}</block></function>

	<function><specifier>private</specifier> <type><name>void</name></type> <name>showRuntimeExceptionEditor</name><parameter_list>()</parameter_list> <block>{
		<try>try <block>{
			<expr_stmt><expr><call><name><name>PlatformUI</name>
					<operator>.</operator><name>getWorkbench</name></name><argument_list>()</argument_list></call>
					<operator>.</operator><call><name>getActiveWorkbenchWindow</name><argument_list>()</argument_list></call>
					<operator>.</operator><call><name>getActivePage</name><argument_list>()</argument_list></call>
					<operator>.</operator><call><name>openEditor</name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>IEditorInput</name></super><argument_list>()</argument_list> <block>{

						<function><specifier>public</specifier> <type><name>boolean</name></type> <name>exists</name><parameter_list>()</parameter_list> <block>{

							<return>return <expr><literal type="boolean">false</literal></expr>;</return>
						}</block></function>

						<function><specifier>public</specifier> <type><name>ImageDescriptor</name></type> <name>getImageDescriptor</name><parameter_list>()</parameter_list> <block>{

							<return>return <expr><literal type="null">null</literal></expr>;</return>
						}</block></function>

						<function><specifier>public</specifier> <type><name>String</name></type> <name>getName</name><parameter_list>()</parameter_list> <block>{

							<return>return <expr><literal type="null">null</literal></expr>;</return>
						}</block></function>

						<function><specifier>public</specifier> <type><name>IPersistableElement</name></type> <name>getPersistable</name><parameter_list>()</parameter_list> <block>{

							<return>return <expr><literal type="null">null</literal></expr>;</return>
						}</block></function>

						<function><specifier>public</specifier> <type><name>String</name></type> <name>getToolTipText</name><parameter_list>()</parameter_list> <block>{

							<return>return <expr><literal type="null">null</literal></expr>;</return>
						}</block></function>

						<function><specifier>public</specifier> <type><name>Object</name></type> <name>getAdapter</name><parameter_list>(<parameter><decl><type><name>Class</name></type> <name>adapter</name></decl></parameter>)</parameter_list> <block>{

							<return>return <expr><literal type="null">null</literal></expr>;</return>
						}</block></function>

					}</block></class></expr></argument>,
							<argument><expr><literal type="string">"org.eclipse.ui.examples.statushandlers.testtool.RuntimeExceptionEditor"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">//$NON-NLS-1$</comment>
		}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>PartInitException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
			<comment type="line">// should not be thrown !</comment>
			<expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		}</block></catch></try>
	}</block></function>

	<function><specifier>private</specifier> <type><name>void</name></type> <name>showPartInitExceptionView</name><parameter_list>()</parameter_list> <block>{
		<try>try <block>{
			<expr_stmt><expr><call><name><name>PlatformUI</name>
					<operator>.</operator><name>getWorkbench</name></name><argument_list>()</argument_list></call>
					<operator>.</operator><call><name>getActiveWorkbenchWindow</name><argument_list>()</argument_list></call>
					<operator>.</operator><call><name>getActivePage</name><argument_list>()</argument_list></call>
					<operator>.</operator><call><name>showView</name><argument_list>(
							<argument><expr><literal type="string">"org.eclipse.ui.examples.statushandlers.testtool.views.PartInitExceptionView"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">//$NON-NLS-1$</comment>
		}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>PartInitException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
			<comment type="line">// should not be thrown !</comment>
			<expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		}</block></catch></try>
	}</block></function>

	<function><specifier>private</specifier> <type><name>void</name></type> <name>showRuntimeExceptionView</name><parameter_list>()</parameter_list> <block>{
		<try>try <block>{
			<expr_stmt><expr><call><name><name>PlatformUI</name>
					<operator>.</operator><name>getWorkbench</name></name><argument_list>()</argument_list></call>
					<operator>.</operator><call><name>getActiveWorkbenchWindow</name><argument_list>()</argument_list></call>
					<operator>.</operator><call><name>getActivePage</name><argument_list>()</argument_list></call>
					<operator>.</operator><call><name>showView</name><argument_list>(
							<argument><expr><literal type="string">"org.eclipse.ui.examples.statushandlers.testtool.views.RuntimeExceptionView"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">//$NON-NLS-1$</comment>
		}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>PartInitException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
			<comment type="line">// should not be thrown !</comment>
			<expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		}</block></catch></try>
	}</block></function>

	<function><specifier>private</specifier> <type><name>void</name></type> <name>showPartInitExceptionEditor</name><parameter_list>()</parameter_list> <block>{
		<try>try <block>{
			<expr_stmt><expr><call><name><name>PlatformUI</name>
					<operator>.</operator><name>getWorkbench</name></name><argument_list>()</argument_list></call>
					<operator>.</operator><call><name>getActiveWorkbenchWindow</name><argument_list>()</argument_list></call>
					<operator>.</operator><call><name>getActivePage</name><argument_list>()</argument_list></call>
					<operator>.</operator><call><name>openEditor</name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>IEditorInput</name></super><argument_list>()</argument_list> <block>{

						<function><specifier>public</specifier> <type><name>boolean</name></type> <name>exists</name><parameter_list>()</parameter_list> <block>{

							<return>return <expr><literal type="boolean">false</literal></expr>;</return>
						}</block></function>

						<function><specifier>public</specifier> <type><name>ImageDescriptor</name></type> <name>getImageDescriptor</name><parameter_list>()</parameter_list> <block>{

							<return>return <expr><literal type="null">null</literal></expr>;</return>
						}</block></function>

						<function><specifier>public</specifier> <type><name>String</name></type> <name>getName</name><parameter_list>()</parameter_list> <block>{

							<return>return <expr><literal type="null">null</literal></expr>;</return>
						}</block></function>

						<function><specifier>public</specifier> <type><name>IPersistableElement</name></type> <name>getPersistable</name><parameter_list>()</parameter_list> <block>{

							<return>return <expr><literal type="null">null</literal></expr>;</return>
						}</block></function>

						<function><specifier>public</specifier> <type><name>String</name></type> <name>getToolTipText</name><parameter_list>()</parameter_list> <block>{

							<return>return <expr><literal type="null">null</literal></expr>;</return>
						}</block></function>

						<function><specifier>public</specifier> <type><name>Object</name></type> <name>getAdapter</name><parameter_list>(<parameter><decl><type><name>Class</name></type> <name>adapter</name></decl></parameter>)</parameter_list> <block>{

							<return>return <expr><literal type="null">null</literal></expr>;</return>
						}</block></function>

					}</block></class></expr></argument>,
							<argument><expr><literal type="string">"org.eclipse.ui.examples.statushandlers.testtool.PartInitExceptionEditor"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">//$NON-NLS-1$</comment>
		}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>PartInitException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
			<comment type="line">// should not be thrown !</comment>
			<expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		}</block></catch></try>
	}</block></function>

	<comment type="block">/*
	 * (non-Javadoc)
	 * 
	 * @see org.eclipse.ui.examples.statushandlers.testtool.views.TestBedRunnable#toString()
	 */</comment>
	<function><specifier>public</specifier> <type><name>String</name></type> <name>toString</name><parameter_list>()</parameter_list> <block>{
		<return>return <expr><name><name>Messages</name><operator>.</operator><name>ShowViewRunnable_ShowView</name></name></expr>;</return>
	}</block></function>

	<comment type="block">/*
	 * (non-Javadoc)
	 * 
	 * @see org.eclipse.core.runtime.IAdaptable#getAdapter(java.lang.Class)
	 */</comment>
	<function><specifier>public</specifier> <type><name>Object</name></type> <name>getAdapter</name><parameter_list>(<parameter><decl><type><name>Class</name></type> <name>adapter</name></decl></parameter>)</parameter_list> <block>{
		<if>if <condition>(<expr><name>adapter</name> <operator>==</operator> <name><name>IPropertySource</name><operator>.</operator><name>class</name></name></expr>)</condition><then> <block>{
			<if>if <condition>(<expr><name>source</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
				<expr_stmt><expr><name>source</name> <operator>=</operator> <operator>new</operator> <call><name>ShowViewPropertySource</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>
			<return>return <expr><name>source</name></expr>;</return>
		}</block></then></if>
		<return>return <expr><literal type="null">null</literal></expr>;</return>
	}</block></function>

	<function><specifier>public</specifier> <type><name>String</name></type> <name>getElement</name><parameter_list>()</parameter_list> <block>{
		<return>return <expr><name>element</name></expr>;</return>
	}</block></function>

	<function><specifier>public</specifier> <type><name>void</name></type> <name>setElement</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>element</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>element</name></name> <operator>=</operator> <name>element</name></expr>;</expr_stmt>
	}</block></function>

	<function><specifier>public</specifier> <type><name>String</name></type> <name>getException</name><parameter_list>()</parameter_list> <block>{
		<return>return <expr><name>exception</name></expr>;</return>
	}</block></function>

	<function><specifier>public</specifier> <type><name>void</name></type> <name>setException</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>exception</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>exception</name></name> <operator>=</operator> <name>exception</name></expr>;</expr_stmt>
	}</block></function>

	<comment type="block">/*
	 * (non-Javadoc)
	 * 
	 * @see org.eclipse.ui.examples.statushandlers.testtool.views.TestBedRunnable#getTypeId()
	 */</comment>
	<function><specifier>public</specifier> <type><name>String</name></type> <name>getTypeId</name><parameter_list>()</parameter_list> <block>{
		<return>return <expr><name>SHOW_VIEW_TYPE</name></expr>;</return>
	}</block></function>

	<comment type="block">/*
	 * (non-Javadoc)
	 * 
	 * @see org.eclipse.ui.examples.statushandlers.testtool.views.TestBedRunnable#saveState(org.eclipse.ui.IMemento)
	 */</comment>
	<function><specifier>protected</specifier> <type><name>void</name></type> <name>saveState</name><parameter_list>(<parameter><decl><type><name>IMemento</name></type> <name>memento</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><call><name><name>memento</name><operator>.</operator><name>putString</name></name><argument_list>(<argument><expr><name>UIELEMENT</name></expr></argument>, <argument><expr><name>element</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>memento</name><operator>.</operator><name>putString</name></name><argument_list>(<argument><expr><name>EXCEPTION</name></expr></argument>, <argument><expr><name>exception</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Creates ShowViewRunnable from the memento
	 * 
	 * @param memento
	 *            that stores all information about runnable
	 * @return ShowViewRunnable corresponding to the memento
	 */</comment>
	<function><specifier>public</specifier> <specifier>static</specifier> <type><name>TestBedRunnable</name></type> <name>create</name><parameter_list>(<parameter><decl><type><name>IMemento</name></type> <name>memento</name></decl></parameter>)</parameter_list> <block>{
		<decl_stmt><decl><type><name>String</name></type> <name>element</name> <init>= <expr><call><name><name>memento</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name>UIELEMENT</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>String</name></type> <name>exception</name> <init>= <expr><call><name><name>memento</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name>EXCEPTION</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<return>return <expr><operator>new</operator> <call><name>ShowViewRunnable</name><argument_list>(<argument><expr><name>element</name></expr></argument>, <argument><expr><name>exception</name></expr></argument>)</argument_list></call></expr>;</return>
	}</block></function>

}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="org.eclipse.ui.examples.statushandlers.testtool/src/org/eclipse/ui/examples/statushandlers/testtool/views/SleepingComponent.java" hash="912b56b6f362605faf76d900df4a95610d24dcd2"><comment type="block" format="javadoc">/*******************************************************************************
 * Copyright (c) 2007 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     IBM Corporation - initial API and implementation
 ******************************************************************************/</comment>

<package>package <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>examples</name><operator>.</operator><name>statushandlers</name><operator>.</operator><name>testtool</name><operator>.</operator><name>views</name></name>;</package>

<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>swt</name><operator>.</operator><name>SWT</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>swt</name><operator>.</operator><name>layout</name><operator>.</operator><name>GridData</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>swt</name><operator>.</operator><name>layout</name><operator>.</operator><name>GridLayout</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>swt</name><operator>.</operator><name>widgets</name><operator>.</operator><name>Composite</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>swt</name><operator>.</operator><name>widgets</name><operator>.</operator><name>Label</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>swt</name><operator>.</operator><name>widgets</name><operator>.</operator><name>Spinner</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>IMemento</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>examples</name><operator>.</operator><name>statushandlers</name><operator>.</operator><name>testtool</name><operator>.</operator><name>Messages</name></name>;</import>

<comment type="block" format="javadoc">/**
 * This component is responsible for allowing user to put sleeping elements into
 * the tests.
 */</comment>
<class><specifier>public</specifier> class <name>SleepingComponent</name> <super><implements>implements <name>TestBedComponent</name></implements></super> <block>{

	<decl_stmt><decl><specifier>private</specifier> <type><name>Spinner</name></type> <name>spinner</name></decl>;</decl_stmt>

	<class><specifier>public</specifier> <specifier>static</specifier> class <name>SleepingRunnable</name> <super><extends>extends <name>TestBedRunnable</name></extends></super> <block>{

		<decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>SLEEP_TYPE</name> <init>= <expr><literal type="string">"Sleep"</literal></expr></init></decl>;</decl_stmt> <comment type="line">//$NON-NLS-1$</comment>

		<comment type="line">// xml constant</comment>
		<decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>SLEEP</name> <init>= <expr><literal type="string">"sleep"</literal></expr></init></decl>;</decl_stmt> <comment type="line">//$NON-NLS-1$</comment>

		<decl_stmt><decl><specifier>private</specifier> <type><name>int</name></type> <name>sleepingTime</name></decl>;</decl_stmt>

		<constructor><specifier>public</specifier> <name>SleepingRunnable</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>time</name></decl></parameter>)</parameter_list> <block>{
			<expr_stmt><expr><name>sleepingTime</name> <operator>=</operator> <name>time</name></expr>;</expr_stmt>
		}</block></constructor>

		<function><specifier>public</specifier> <type><name>void</name></type> <name>run</name><parameter_list>()</parameter_list> <block>{
			<try>try <block>{
				<expr_stmt><expr><call><name><name>Thread</name><operator>.</operator><name>sleep</name></name><argument_list>(<argument><expr><name>sleepingTime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>InterruptedException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
				<comment type="line">// should not happen</comment>
				<expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			}</block></catch></try>

		}</block></function>

		<function><specifier>public</specifier> <type><name>String</name></type> <name>toString</name><parameter_list>()</parameter_list> <block>{
			<return>return <expr><name><name>Messages</name><operator>.</operator><name>SleepingComponent_SleepingFor</name></name> <operator>+</operator> <name>sleepingTime</name>
					<operator>+</operator> <name><name>Messages</name><operator>.</operator><name>SleepingComponent_Miliseconds</name></name></expr>;</return>
		}</block></function>

		<comment type="block">/*
		 * (non-Javadoc)
		 * 
		 * @see org.eclipse.core.runtime.IAdaptable#getAdapter(java.lang.Class)
		 */</comment>
		<function><specifier>public</specifier> <type><name>Object</name></type> <name>getAdapter</name><parameter_list>(<parameter><decl><type><name>Class</name></type> <name>adapter</name></decl></parameter>)</parameter_list> <block>{
			<return>return <expr><literal type="null">null</literal></expr>;</return>
		}</block></function>

		<comment type="block">/*
		 * (non-Javadoc)
		 * 
		 * @see org.eclipse.ui.examples.statushandlers.testtool.views.TestBedRunnable#getTypeId()
		 */</comment>
		<function><specifier>public</specifier> <type><name>String</name></type> <name>getTypeId</name><parameter_list>()</parameter_list> <block>{
			<return>return <expr><name>SLEEP_TYPE</name></expr>;</return>
		}</block></function>

		<comment type="block">/*
		 * (non-Javadoc)
		 * 
		 * @see org.eclipse.ui.examples.statushandlers.testtool.views.TestBedRunnable#saveState(org.eclipse.ui.IMemento)
		 */</comment>
		<function><specifier>protected</specifier> <type><name>void</name></type> <name>saveState</name><parameter_list>(<parameter><decl><type><name>IMemento</name></type> <name>memento</name></decl></parameter>)</parameter_list> <block>{
			<expr_stmt><expr><call><name><name>memento</name><operator>.</operator><name>putInteger</name></name><argument_list>(<argument><expr><name>SLEEP</name></expr></argument>, <argument><expr><name>sleepingTime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></function>

		<comment type="block" format="javadoc">/**
		 * Creates SleepingRunnable from the memento
		 * 
		 * @param memento
		 *            that stores all information about runnable
		 * @return SleepingRunnable corresponding to the memento
		 */</comment>
		<function><specifier>public</specifier> <specifier>static</specifier> <type><name>TestBedRunnable</name></type> <name>create</name><parameter_list>(<parameter><decl><type><name>IMemento</name></type> <name>memento</name></decl></parameter>)</parameter_list> <block>{
			<decl_stmt><decl><type><name>int</name></type> <name>time</name> <init>= <expr><call><name><name>memento</name><operator>.</operator><name>getInteger</name></name><argument_list>(<argument><expr><name>SLEEP</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>intValue</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
			<return>return <expr><operator>new</operator> <call><name>SleepingRunnable</name><argument_list>(<argument><expr><name>time</name></expr></argument>)</argument_list></call></expr>;</return>
		}</block></function>

		<comment type="block" format="javadoc">/**
		 * Gets the sleeping time.
		 * 
		 * @return sleeping time
		 */</comment>
		<function><specifier>public</specifier> <type><name>int</name></type> <name>getSleepingTime</name><parameter_list>()</parameter_list> <block>{
			<return>return <expr><name>sleepingTime</name></expr>;</return>
		}</block></function>
	}</block></class>

	<comment type="block">/*
	 * (non-Javadoc)
	 * 
	 * @see org.eclipse.ui.examples.statushandlers.testtool.views.TestBedComponent#createComposite(org.eclipse.swt.widgets.Composite)
	 */</comment>
	<function><specifier>public</specifier> <type><name>Composite</name></type> <name>createComposite</name><parameter_list>(<parameter><decl><type><name>Composite</name></type> <name>parent</name></decl></parameter>)</parameter_list> <block>{
		<decl_stmt><decl><type><name>Composite</name></type> <name>composite</name> <init>= <expr><operator>new</operator> <call><name>Composite</name><argument_list>(<argument><expr><name>parent</name></expr></argument>, <argument><expr><name><name>SWT</name><operator>.</operator><name>NONE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>composite</name><operator>.</operator><name>setLayout</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>GridLayout</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>composite</name><operator>.</operator><name>setLayoutData</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>GridData</name><argument_list>(<argument><expr><name><name>GridData</name><operator>.</operator><name>FILL_HORIZONTAL</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>Label</name></type> <name>label</name> <init>= <expr><operator>new</operator> <call><name>Label</name><argument_list>(<argument><expr><name>composite</name></expr></argument>, <argument><expr><name><name>SWT</name><operator>.</operator><name>NONE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>label</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><name><name>Messages</name><operator>.</operator><name>SleepingComponent_BlockFor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>spinner</name> <operator>=</operator> <operator>new</operator> <call><name>Spinner</name><argument_list>(<argument><expr><name>composite</name></expr></argument>, <argument><expr><name><name>SWT</name><operator>.</operator><name>BORDER</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>spinner</name><operator>.</operator><name>setValues</name></name><argument_list>(<argument><expr><literal type="number">1000</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1000000</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>Label</name></type> <name>unit</name> <init>= <expr><operator>new</operator> <call><name>Label</name><argument_list>(<argument><expr><name>composite</name></expr></argument>, <argument><expr><name><name>SWT</name><operator>.</operator><name>NONE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>unit</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><literal type="string">"ms."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">//$NON-NLS-1$</comment>
		<return>return <expr><name>composite</name></expr>;</return>
	}</block></function>

	<comment type="block">/*
	 * (non-Javadoc)
	 * 
	 * @see org.eclipse.ui.examples.statushandlers.testtool.views.TestBedComponent#getName()
	 */</comment>
	<function><specifier>public</specifier> <type><name>String</name></type> <name>getName</name><parameter_list>()</parameter_list> <block>{
		<return>return <expr><name><name>Messages</name><operator>.</operator><name>SleepingComponent_Name</name></name></expr>;</return>
	}</block></function>

	<comment type="block">/*
	 * (non-Javadoc)
	 * 
	 * @see org.eclipse.ui.examples.statushandlers.testtool.views.TestBedComponent#getTestBedRunnable()
	 */</comment>
	<function><specifier>public</specifier> <type><name>TestBedRunnable</name></type> <name>getTestBedRunnable</name><parameter_list>()</parameter_list> <block>{
		<return>return <expr><operator>new</operator> <call><name>SleepingRunnable</name><argument_list>(<argument><expr><call><name><name>spinner</name><operator>.</operator><name>getSelection</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
	}</block></function>

	<comment type="block">/*
	 * (non-Javadoc)
	 * 
	 * @see org.eclipse.ui.examples.statushandlers.testtool.views.TestBedComponent#accept(org.eclipse.ui.examples.statushandlers.testtool.views.TestBedRunnable)
	 */</comment>
	<function><specifier>public</specifier> <type><name>boolean</name></type> <name>accept</name><parameter_list>(<parameter><decl><type><name>TestBedRunnable</name></type> <name>runnable</name></decl></parameter>)</parameter_list> <block>{
		<if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>runnable</name> <operator>instanceof</operator> <name>SleepingRunnable</name><operator>)</operator></expr>)</condition><then> <block>{
			<return>return <expr><literal type="boolean">false</literal></expr>;</return>
		}</block></then></if>
		<decl_stmt><decl><type><name>SleepingRunnable</name></type> <name>sleepingRunnable</name> <init>= <expr><operator>(</operator><name>SleepingRunnable</name><operator>)</operator> <name>runnable</name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>spinner</name><operator>.</operator><name>setSelection</name></name><argument_list>(<argument><expr><name><name>sleepingRunnable</name><operator>.</operator><name>sleepingTime</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><literal type="boolean">true</literal></expr>;</return>
	}</block></function>

}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="org.eclipse.ui.examples.statushandlers.testtool/src/org/eclipse/ui/examples/statushandlers/testtool/views/TestBedComponent.java" hash="10c91ab207ba07014eb1a60784e3f6a9642e48fe"><comment type="block" format="javadoc">/*******************************************************************************
 * Copyright (c) 2007 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     IBM Corporation - initial API and implementation
 ******************************************************************************/</comment>

<package>package <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>examples</name><operator>.</operator><name>statushandlers</name><operator>.</operator><name>testtool</name><operator>.</operator><name>views</name></name>;</package>

<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>swt</name><operator>.</operator><name>widgets</name><operator>.</operator><name>Composite</name></name>;</import>

<comment type="block" format="javadoc">/**
 * This interface should be implemented by any elements that will be visible in
 * the status handling test bed.
 */</comment>
<interface><specifier>public</specifier> interface <name>TestBedComponent</name> <block>{
	<comment type="block" format="javadoc">/**
	 * This method should create all controls on the given composite to interact
	 * with the user. First created control should be new composite.
	 * 
	 * @param parent
	 * @return The first composite.
	 */</comment>
	<function_decl><specifier>public</specifier> <type><name>Composite</name></type> <name>createComposite</name><parameter_list>(<parameter><decl><type><name>Composite</name></type> <name>parent</name></decl></parameter>)</parameter_list>;</function_decl>

	<comment type="block" format="javadoc">/**
	 * This method should return a {@link TestBedRunnable} that will allow for
	 * running particular tests.
	 * 
	 * @return TestBedRunnable
	 */</comment>
	<function_decl><specifier>public</specifier> <type><name>TestBedRunnable</name></type> <name>getTestBedRunnable</name><parameter_list>()</parameter_list>;</function_decl>

	<comment type="block" format="javadoc">/**
	 * This function returns a name of the component that will be presented to
	 * the user.
	 * 
	 * @return the name of the component
	 */</comment>
	<function_decl><specifier>public</specifier> <type><name>String</name></type> <name>getName</name><parameter_list>()</parameter_list>;</function_decl>

	<comment type="block" format="javadoc">/**
	 * This function sets the composite controls to represent the runnable.
	 * 
	 * @param runnable
	 *            A runnable to be displayed
	 * @return true if the component is able to display the runnable, false
	 *         otherwise
	 */</comment>
	<function_decl><specifier>public</specifier> <type><name>boolean</name></type> <name>accept</name><parameter_list>(<parameter><decl><type><name>TestBedRunnable</name></type> <name>runnable</name></decl></parameter>)</parameter_list>;</function_decl>
}</block></interface>
</unit>

<unit revision="0.9.5" language="Java" filename="org.eclipse.ui.examples.statushandlers.testtool/src/org/eclipse/ui/examples/statushandlers/testtool/views/TestBedRunnable.java" hash="f37563471d3b5102c8900eb8b9b9f8e43da34e60"><comment type="block" format="javadoc">/*******************************************************************************
 * Copyright (c) 2007 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     IBM Corporation - initial API and implementation
 ******************************************************************************/</comment>

<package>package <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>examples</name><operator>.</operator><name>statushandlers</name><operator>.</operator><name>testtool</name><operator>.</operator><name>views</name></name>;</package>

<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>core</name><operator>.</operator><name>runtime</name><operator>.</operator><name>IAdaptable</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>IMemento</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>examples</name><operator>.</operator><name>statushandlers</name><operator>.</operator><name>testtool</name><operator>.</operator><name>views</name><operator>.</operator><name>SleepingComponent</name><operator>.</operator><name>SleepingRunnable</name></name>;</import>

<comment type="block" format="javadoc">/**
 * This class represents a general action used in status handling testing. All
 * test actions should inherit from this class.
 */</comment>
<class><specifier>public</specifier> <specifier>abstract</specifier> class <name>TestBedRunnable</name> <super><implements>implements <name>Runnable</name>, <name>IAdaptable</name></implements></super> <block>{

	<decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>TYPE</name> <init>= <expr><literal type="string">"type"</literal></expr></init></decl>;</decl_stmt> <comment type="line">//$NON-NLS-1$</comment>

	<decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>TEST_BED_RUNNABLE</name> <init>= <expr><literal type="string">"testBedRunnable"</literal></expr></init></decl>;</decl_stmt> <comment type="line">//$NON-NLS-1$</comment>

	<comment type="block">/*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Runnable#run()
	 */</comment>
	<function_decl><specifier>public</specifier> <specifier>abstract</specifier> <type><name>void</name></type> <name>run</name><parameter_list>()</parameter_list>;</function_decl>

	<comment type="block" format="javadoc">/**
	 * This method returns String visible to the user in the execution list
	 * view.
	 */</comment>
	<function_decl><specifier>public</specifier> <specifier>abstract</specifier> <type><name>String</name></type> <name>toString</name><parameter_list>()</parameter_list>;</function_decl>

	<comment type="block" format="javadoc">/**
	 * This method returns String that is used in the XMLMemento to identify the
	 * type of the class.
	 * 
	 * @return the id of the runnable
	 */</comment>
	<function_decl><specifier>public</specifier> <specifier>abstract</specifier> <type><name>String</name></type> <name>getTypeId</name><parameter_list>()</parameter_list>;</function_decl>

	<function><specifier>public</specifier> <type><name>void</name></type> <name>save</name><parameter_list>(<parameter><decl><type><name>IMemento</name></type> <name>memento</name></decl></parameter>)</parameter_list> <block>{
		<decl_stmt><decl><type><name>IMemento</name></type> <name>child</name> <init>= <expr><call><name><name>memento</name><operator>.</operator><name>createChild</name></name><argument_list>(<argument><expr><name>TEST_BED_RUNNABLE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>child</name><operator>.</operator><name>putString</name></name><argument_list>(<argument><expr><name>TYPE</name></expr></argument>, <argument><expr><call><name>getTypeId</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>saveState</name><argument_list>(<argument><expr><name>child</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Saves the state of current TestBedRunnable.
	 * 
	 * @param memento
	 *            a memento that will store the state
	 */</comment>
	<function_decl><specifier>protected</specifier> <specifier>abstract</specifier> <type><name>void</name></type> <name>saveState</name><parameter_list>(<parameter><decl><type><name>IMemento</name></type> <name>memento</name></decl></parameter>)</parameter_list>;</function_decl>

	<comment type="block" format="javadoc">/**
	 * Factory method. Delegates restoring to particular classes.
	 * 
	 * @param memento
	 *            a memento that stores the state
	 * @return a runnable corresponding to memento
	 */</comment>
	<function><specifier>public</specifier> <specifier>static</specifier> <type><name>TestBedRunnable</name></type> <name>restore</name><parameter_list>(<parameter><decl><type><name>IMemento</name></type> <name>memento</name></decl></parameter>)</parameter_list> <block>{
		<decl_stmt><decl><type><name>String</name></type> <name>type</name> <init>= <expr><call><name><name>memento</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name>TYPE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if>if <condition>(<expr><call><name><name>type</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>JobsAndRunnablesRunnable</name><operator>.</operator><name>JOBS_AND_RUNNABLE_TYPE</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
			<return>return <expr><call><name><name>JobsAndRunnablesRunnable</name><operator>.</operator><name>create</name></name><argument_list>(<argument><expr><name>memento</name></expr></argument>)</argument_list></call></expr>;</return>
		}</block></then></if>
		<if>if <condition>(<expr><call><name><name>type</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>StatusHandlingRunnable</name><operator>.</operator><name>STATUS_HANDLING_TYPE</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
			<return>return <expr><call><name><name>StatusHandlingRunnable</name><operator>.</operator><name>create</name></name><argument_list>(<argument><expr><name>memento</name></expr></argument>)</argument_list></call></expr>;</return>
		}</block></then></if>
		<if>if <condition>(<expr><call><name><name>type</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>ShowViewRunnable</name><operator>.</operator><name>SHOW_VIEW_TYPE</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
			<return>return <expr><call><name><name>ShowViewRunnable</name><operator>.</operator><name>create</name></name><argument_list>(<argument><expr><name>memento</name></expr></argument>)</argument_list></call></expr>;</return>
		}</block></then></if>
		<if>if <condition>(<expr><call><name><name>type</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>SleepingRunnable</name><operator>.</operator><name>SLEEP_TYPE</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
			<return>return <expr><call><name><name>SleepingRunnable</name><operator>.</operator><name>create</name></name><argument_list>(<argument><expr><name>memento</name></expr></argument>)</argument_list></call></expr>;</return>
		}</block></then></if>
		<return>return <expr><literal type="null">null</literal></expr>;</return>
	}</block></function>

}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="org.eclipse.ui.examples.statushandlers.testtool/src/org/eclipse/ui/examples/statushandlers/testtool/views/StatusHandlingRunnable.java" hash="2ac0be8770896d9a39a495868a9f4f73946404b5"><comment type="block" format="javadoc">/*******************************************************************************
 * Copyright (c) 2007, 2008 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     IBM Corporation - initial API and implementation
 ******************************************************************************/</comment>

<package>package <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>examples</name><operator>.</operator><name>statushandlers</name><operator>.</operator><name>testtool</name><operator>.</operator><name>views</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Iterator</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>IMemento</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>examples</name><operator>.</operator><name>statushandlers</name><operator>.</operator><name>testtool</name><operator>.</operator><name>Messages</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>examples</name><operator>.</operator><name>statushandlers</name><operator>.</operator><name>testtool</name><operator>.</operator><name>views</name><operator>.</operator><name>StatusHandlingComponent</name><operator>.</operator><name>DisplayedItem</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>views</name><operator>.</operator><name>properties</name><operator>.</operator><name>IPropertyDescriptor</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>views</name><operator>.</operator><name>properties</name><operator>.</operator><name>IPropertySource</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>views</name><operator>.</operator><name>properties</name><operator>.</operator><name>PropertyDescriptor</name></name>;</import>

<comment type="block" format="javadoc">/**
 * This component is responsible for testing statuses.
 */</comment>
<class><specifier>public</specifier> class <name>StatusHandlingRunnable</name> <super><extends>extends <name>TestBedRunnable</name></extends></super> <block>{

	<decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>STATUS_HANDLING_TYPE</name> <init>= <expr><literal type="string">"statusHandling"</literal></expr></init></decl>;</decl_stmt> <comment type="line">//$NON-NLS-1$</comment>

	<comment type="block" format="javadoc">/**
	 * TODO: properties for statusAdapter
	 */</comment>
	<class><specifier>private</specifier> <specifier>final</specifier> class <name>StatusHandlingPropertySource</name> <super><implements>implements <name>IPropertySource</name></implements></super> <block>{

		<decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name><name>IPropertyDescriptor</name><index>[]</index></name></type> <name>PROPERTY_DESCRIPTOR</name> <init>= <expr><operator>new</operator> <name><name>IPropertyDescriptor</name><index>[]</index></name> <block>{
				<expr><operator>new</operator> <call><name>PropertyDescriptor</name><argument_list>(<argument><expr><name>STATUS</name></expr></argument>,
						<argument><expr><name><name>Messages</name><operator>.</operator><name>StatusHandlingRunnable_StatusProperty</name></name></expr></argument>)</argument_list></call></expr>,
				<expr><operator>new</operator> <call><name>PropertyDescriptor</name><argument_list>(<argument><expr><name>FLAG</name></expr></argument>,
						<argument><expr><name><name>Messages</name><operator>.</operator><name>StatusHandlingRunnable_Hint</name></name></expr></argument>)</argument_list></call></expr>,
				<expr><operator>new</operator> <call><name>PropertyDescriptor</name><argument_list>(<argument><expr><name>WRAPPED</name></expr></argument>,
						<argument><expr><name><name>Messages</name><operator>.</operator><name>StatusHandlingRunnable_Wrapped</name></name></expr></argument>)</argument_list></call></expr>,
				<expr><operator>new</operator> <call><name>PropertyDescriptor</name><argument_list>(<argument><expr><name>EXPLANATION</name></expr></argument>,
						<argument><expr><name><name>Messages</name><operator>.</operator><name>StatusHandlingRunnable_Explanation</name></name></expr></argument>)</argument_list></call></expr>,
				<expr><operator>new</operator> <call><name>PropertyDescriptor</name><argument_list>(<argument><expr><name>ACTION</name></expr></argument>,
						<argument><expr><name><name>Messages</name><operator>.</operator><name>StatusHandlingRunnable_Action</name></name></expr></argument>)</argument_list></call></expr> }</block></expr></init></decl>;</decl_stmt>

		<function><specifier>public</specifier> <type><name>Object</name></type> <name>getEditableValue</name><parameter_list>()</parameter_list> <block>{
			<return>return <expr><literal type="null">null</literal></expr>;</return>
		}</block></function>

		<function><specifier>public</specifier> <type><name><name>IPropertyDescriptor</name><index>[]</index></name></type> <name>getPropertyDescriptors</name><parameter_list>()</parameter_list> <block>{
			<decl_stmt><decl><type><name><name>PropertyDescriptor</name><index>[]</index></name></type> <name>descriptors</name> <init>= <expr><operator>new</operator> <name><name>PropertyDescriptor</name><index>[<expr><call><name><name>items</name>
					<operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>]</index></name></expr></init></decl>;</decl_stmt>

			<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>items</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
				<expr_stmt><expr><name><name>descriptors</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>new</operator> <call><name>PropertyDescriptor</name><argument_list>(
						<argument><expr><name><name>Messages</name><operator>.</operator><name>StatusHandlingRunnable_StatusProperty</name></name> <operator>+</operator> <name>i</name></expr></argument>,
						<argument><expr><name><name>Messages</name><operator>.</operator><name>StatusHandlingRunnable_StatusHandlinNo</name></name> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></for>

			<return>return <expr><name>descriptors</name></expr>;</return>
		}</block></function>

		<function><specifier>public</specifier> <type><name>Object</name></type> <name>getPropertyValue</name><parameter_list>(<parameter><decl><type><name>Object</name></type> <name>id</name></decl></parameter>)</parameter_list> <block>{
			<decl_stmt><decl><type><name>String</name></type> <name>stringId</name> <init>= <expr><operator>(</operator><name>String</name><operator>)</operator> <name>id</name></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><name>stringId</name> <operator>=</operator> <call><name><name>stringId</name><operator>.</operator><name>replaceAll</name></name><argument_list>(
					<argument><expr><name><name>Messages</name><operator>.</operator><name>StatusHandlingRunnable_StatusProperty</name></name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">//$NON-NLS-1$</comment>
			<decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>index</name> <init>= <expr><call><name><name>Integer</name><operator>.</operator><name>parseInt</name></name><argument_list>(<argument><expr><name>stringId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<return>return <expr><operator>new</operator> <class><super><name>IPropertySource</name></super><argument_list>()</argument_list> <block>{

				<function><specifier>public</specifier> <type><name>Object</name></type> <name>getEditableValue</name><parameter_list>()</parameter_list> <block>{
					<return>return <expr><literal type="null">null</literal></expr>;</return>
				}</block></function>

				<function><specifier>public</specifier> <type><name><name>IPropertyDescriptor</name><index>[]</index></name></type> <name>getPropertyDescriptors</name><parameter_list>()</parameter_list> <block>{
					<return>return <expr><name>PROPERTY_DESCRIPTOR</name></expr>;</return>
				}</block></function>

				<function><specifier>public</specifier> <type><name>Object</name></type> <name>getPropertyValue</name><parameter_list>(<parameter><decl><type><name>Object</name></type> <name>id</name></decl></parameter>)</parameter_list> <block>{
					<decl_stmt><decl><type><name>DisplayedItem</name></type> <name>di</name> <init>= <expr><operator>(</operator><name>DisplayedItem</name><operator>)</operator> <call><name><name>items</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

					<if>if <condition>(<expr><call><name><name>id</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>STATUS</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
						<return>return <expr><call><name><name>di</name><operator>.</operator><name>getStatus</name></name><argument_list>()</argument_list></call></expr>;</return>
					}</block></then></if>
					<if>if <condition>(<expr><call><name><name>id</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>FLAG</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
						<decl_stmt><decl><type><name>String</name></type> <name>result</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt> <comment type="line">//$NON-NLS-1$</comment>
						<if>if <condition>(<expr><operator>(</operator><call><name><name>di</name><operator>.</operator><name>getHint</name></name><argument_list>()</argument_list></call> <operator>&amp;</operator> <literal type="number">2</literal><operator>)</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
							<expr_stmt><expr><name>result</name> <operator>+=</operator> <name><name>Messages</name><operator>.</operator><name>StatusHandlingComponent_HintShow</name></name></expr>;</expr_stmt>
						}</block></then></if>
						<if>if <condition>(<expr><operator>(</operator><call><name><name>di</name><operator>.</operator><name>getHint</name></name><argument_list>()</argument_list></call> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
							<expr_stmt><expr><name>result</name> <operator>+=</operator> <name><name>Messages</name><operator>.</operator><name>StatusHandlingComponent_HintLog</name></name></expr>;</expr_stmt>
						}</block></then></if>
						<if>if <condition>(<expr><operator>(</operator><call><name><name>di</name><operator>.</operator><name>getHint</name></name><argument_list>()</argument_list></call> <operator>&amp;</operator> <literal type="number">4</literal><operator>)</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
							<expr_stmt><expr><name>result</name> <operator>+=</operator> <name><name>Messages</name><operator>.</operator><name>StatusHandlingComponent_HintBlock</name></name></expr>;</expr_stmt>
						}</block></then></if>
						<if>if <condition>(<expr><call><name><name>result</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{ <comment type="line">//$NON-NLS-1$</comment>
							<expr_stmt><expr><name>result</name> <operator>+=</operator> <name><name>Messages</name><operator>.</operator><name>StatusHandlingComponent_HintNone</name></name></expr>;</expr_stmt>
						}</block></then></if>
						<return>return <expr><name>result</name></expr>;</return>
					}</block></then></if>
					<if>if <condition>(<expr><call><name><name>id</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>WRAPPED</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
						<return>return <expr><literal type="string">""</literal> <operator>+</operator> <call><name><name>di</name><operator>.</operator><name>isWrapped</name></name><argument_list>()</argument_list></call></expr>;</return> <comment type="line">//$NON-NLS-1$</comment>
					}</block></then></if>
					<if>if <condition>(<expr><call><name><name>id</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>EXPLANATION</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
						<return>return <expr><call><name><name>di</name><operator>.</operator><name>getExplanation</name></name><argument_list>()</argument_list></call></expr>;</return>
					}</block></then></if>
					<if>if <condition>(<expr><call><name><name>id</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>ACTION</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
						<return>return <expr><call><name><name>di</name><operator>.</operator><name>getAction</name></name><argument_list>()</argument_list></call></expr>;</return>
					}</block></then></if>
					<return>return <expr><literal type="null">null</literal></expr>;</return>
				}</block></function>

				<function><specifier>public</specifier> <type><name>boolean</name></type> <name>isPropertySet</name><parameter_list>(<parameter><decl><type><name>Object</name></type> <name>id</name></decl></parameter>)</parameter_list> <block>{
					<return>return <expr><literal type="boolean">true</literal></expr>;</return>
				}</block></function>

				<function><specifier>public</specifier> <type><name>void</name></type> <name>resetPropertyValue</name><parameter_list>(<parameter><decl><type><name>Object</name></type> <name>id</name></decl></parameter>)</parameter_list> <block>{
				}</block></function>

				<function><specifier>public</specifier> <type><name>void</name></type> <name>setPropertyValue</name><parameter_list>(<parameter><decl><type><name>Object</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><name>Object</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{
				}</block></function>
			}</block></class></expr>;</return>
		}</block></function>

		<function><specifier>public</specifier> <type><name>boolean</name></type> <name>isPropertySet</name><parameter_list>(<parameter><decl><type><name>Object</name></type> <name>id</name></decl></parameter>)</parameter_list> <block>{
			<return>return <expr><literal type="boolean">false</literal></expr>;</return>
		}</block></function>

		<function><specifier>public</specifier> <type><name>void</name></type> <name>resetPropertyValue</name><parameter_list>(<parameter><decl><type><name>Object</name></type> <name>id</name></decl></parameter>)</parameter_list> <block>{

		}</block></function>

		<function><specifier>public</specifier> <type><name>void</name></type> <name>setPropertyValue</name><parameter_list>(<parameter><decl><type><name>Object</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><name>Object</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{

		}</block></function>
	}</block></class>

	<decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>STATUS</name> <init>= <expr><literal type="string">"status"</literal></expr></init></decl>;</decl_stmt> <comment type="line">//$NON-NLS-1$</comment>
	<decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>FLAG</name> <init>= <expr><literal type="string">"handleFlag"</literal></expr></init></decl>;</decl_stmt> <comment type="line">//$NON-NLS-1$</comment>
	<decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>WRAPPED</name> <init>= <expr><literal type="string">"wrapped"</literal></expr></init></decl>;</decl_stmt> <comment type="line">//$NON-NLS-1$</comment>
	<decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>EXPLANATION</name> <init>= <expr><literal type="string">"explanation"</literal></expr></init></decl>;</decl_stmt> <comment type="line">//$NON-NLS-1$</comment>
	<decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>ACTION</name> <init>= <expr><literal type="string">"action"</literal></expr></init></decl>;</decl_stmt> <comment type="line">//$NON-NLS-1$</comment>
	<decl_stmt><decl><type><name>List</name></type> <name>items</name></decl>;</decl_stmt>

	<comment type="block" format="javadoc">/**
	 * @param statusItems
	 */</comment>
	<constructor><specifier>public</specifier> <name>StatusHandlingRunnable</name><parameter_list>(<parameter><decl><type><name>List</name></type> <name>statusItems</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><name>items</name> <operator>=</operator> <name>statusItems</name></expr>;</expr_stmt>
	}</block></constructor>

	<constructor><name>StatusHandlingRunnable</name><parameter_list>()</parameter_list> <block>{
		<expr_stmt><expr><name>items</name> <operator>=</operator> <operator>new</operator> <call><name>ArrayList</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	}</block></constructor>

	<function><specifier>public</specifier> <type><name>void</name></type> <name>run</name><parameter_list>()</parameter_list> <block>{
		<for>for <control>(<init><decl><type><name>Iterator</name></type> <name>it</name> <init>= <expr><call><name><name>items</name><operator>.</operator><name>iterator</name></name><argument_list>()</argument_list></call></expr></init></decl>;</init> <condition><expr><call><name><name>it</name><operator>.</operator><name>hasNext</name></name><argument_list>()</argument_list></call></expr>;</condition><incr/>)</control> <block>{
			<decl_stmt><decl><type><name>DisplayedItem</name></type> <name>di</name> <init>= <expr><operator>(</operator><name>DisplayedItem</name><operator>)</operator> <call><name><name>it</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name><name>di</name><operator>.</operator><name>execute</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		}</block></for>
	}</block></function>

	<comment type="block">/*
	 * (non-Javadoc)
	 * 
	 * @see org.eclipse.ui.examples.statushandlers.testtool.views.TestBedRunnable#toString()
	 */</comment>
	<function><specifier>public</specifier> <type><name>String</name></type> <name>toString</name><parameter_list>()</parameter_list> <block>{
		<return>return <expr><name><name>Messages</name><operator>.</operator><name>StatusHandlingRunnable_StatusHandling</name></name></expr>;</return>
	}</block></function>

	<comment type="block">/*
	 * (non-Javadoc)
	 * 
	 * @see org.eclipse.core.runtime.IAdaptable#getAdapter(java.lang.Class)
	 */</comment>
	<function><specifier>public</specifier> <type><name>Object</name></type> <name>getAdapter</name><parameter_list>(<parameter><decl><type><name>Class</name></type> <name>adapter</name></decl></parameter>)</parameter_list> <block>{
		<if>if <condition>(<expr><name>adapter</name> <operator>==</operator> <name><name>IPropertySource</name><operator>.</operator><name>class</name></name></expr>)</condition><then> <block>{
			<return>return <expr><operator>new</operator> <call><name>StatusHandlingPropertySource</name><argument_list>()</argument_list></call></expr>;</return>
		}</block></then></if>
		<return>return <expr><literal type="null">null</literal></expr>;</return>
	}</block></function>

	<comment type="block">/*
	 * (non-Javadoc)
	 * 
	 * @see org.eclipse.ui.examples.statushandlers.testtool.views.TestBedRunnable#getTypeId()
	 */</comment>
	<function><specifier>public</specifier> <type><name>String</name></type> <name>getTypeId</name><parameter_list>()</parameter_list> <block>{
		<return>return <expr><name>STATUS_HANDLING_TYPE</name></expr>;</return>
	}</block></function>

	<comment type="block">/*
	 * (non-Javadoc)
	 * 
	 * @see org.eclipse.ui.examples.statushandlers.testtool.views.TestBedRunnable#saveState(org.eclipse.ui.IMemento)
	 */</comment>
	<function><specifier>protected</specifier> <type><name>void</name></type> <name>saveState</name><parameter_list>(<parameter><decl><type><name>IMemento</name></type> <name>memento</name></decl></parameter>)</parameter_list> <block>{
		<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>items</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
			<decl_stmt><decl><type><name>DisplayedItem</name></type> <name>di</name> <init>= <expr><operator>(</operator><name>DisplayedItem</name><operator>)</operator> <call><name><name>items</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name><name>di</name><operator>.</operator><name>saveState</name></name><argument_list>(<argument><expr><name>memento</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></for>
	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Creates StatusHandlingRunnable from the memento
	 * 
	 * @param memento
	 *            that stores all information about runnable
	 * @return StatusHandlingRunnable corresponding to the memento
	 */</comment>
	<function><specifier>public</specifier> <specifier>static</specifier> <type><name>TestBedRunnable</name></type> <name>create</name><parameter_list>(<parameter><decl><type><name>IMemento</name></type> <name>memento</name></decl></parameter>)</parameter_list> <block>{
		<decl_stmt><decl><type><name>StatusHandlingRunnable</name></type> <name>runnable</name> <init>= <expr><operator>new</operator> <call><name>StatusHandlingRunnable</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>IMemento</name></type> <name><name>children</name><index>[]</index></name> <init>= <expr><call><name><name>memento</name><operator>.</operator><name>getChildren</name></name><argument_list>(<argument><expr><name><name>DisplayedItem</name><operator>.</operator><name>STATUS</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>children</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
			<expr_stmt><expr><call><name><name>runnable</name><operator>.</operator><name>items</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>DisplayedItem</name><operator>.</operator><name>create</name></name><argument_list>(<argument><expr><name><name>children</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></for>
		<return>return <expr><name>runnable</name></expr>;</return>
	}</block></function>

}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="org.eclipse.ui.examples.statushandlers.testtool/src/org/eclipse/ui/examples/statushandlers/testtool/handlers/CompatibilityModeHandler.java" hash="4cee8ddd69206ccfd241b5856426cac7bbca24d4"><package>package <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>examples</name><operator>.</operator><name>statushandlers</name><operator>.</operator><name>testtool</name><operator>.</operator><name>handlers</name></name>;</package>

<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>jface</name><operator>.</operator><name>util</name><operator>.</operator><name>Policy</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>statushandlers</name><operator>.</operator><name>WorkbenchErrorHandler</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>statushandlers</name><operator>.</operator><name>WorkbenchStatusDialogManager</name></name>;</import>

<comment type="block" format="javadoc">/**
 * This handler uses the dialog in the compatibility mode.
 */</comment>
<class><specifier>public</specifier> class <name>CompatibilityModeHandler</name> <super><extends>extends <name>WorkbenchErrorHandler</name></extends></super> <block>{

	<comment type="block">/* (non-Javadoc)
	 * @see org.eclipse.ui.statushandlers.WorkbenchErrorHandler#configureStatusDialog(org.eclipse.ui.statushandlers.WorkbenchStatusDialogManager)
	 */</comment>
	<function><specifier>protected</specifier> <type><name>void</name></type> <name>configureStatusDialog</name><parameter_list>(
			<parameter><decl><type><name>WorkbenchStatusDialogManager</name></type> <name>statusDialog</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>configureStatusDialog</name></name><argument_list>(<argument><expr><name>statusDialog</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if>if <condition>(<expr><call><name><name>Policy</name><operator>.</operator><name>getErrorSupportProvider</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
			<expr_stmt><expr><call><name><name>statusDialog</name><operator>.</operator><name>enableDefaultSupportArea</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>
		<expr_stmt><expr><call><name><name>statusDialog</name><operator>.</operator><name>enableErrorDialogCompatibility</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	}</block></function>


}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="org.eclipse.ui.examples.statushandlers.testtool/src/org/eclipse/ui/examples/statushandlers/testtool/jobs/UITestJob.java" hash="d41b40f7e2cb43e31756be4d116e6d89aa3684a0"><comment type="block" format="javadoc">/*******************************************************************************
 * Copyright (c) 2006, 2008 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     IBM Corporation - initial API and implementation
 *******************************************************************************/</comment>
<package>package <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>examples</name><operator>.</operator><name>statushandlers</name><operator>.</operator><name>testtool</name><operator>.</operator><name>jobs</name></name>;</package>

<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>core</name><operator>.</operator><name>resources</name><operator>.</operator><name>ResourcesPlugin</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>core</name><operator>.</operator><name>runtime</name><operator>.</operator><name>IProgressMonitor</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>core</name><operator>.</operator><name>runtime</name><operator>.</operator><name>IStatus</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>core</name><operator>.</operator><name>runtime</name><operator>.</operator><name>MultiStatus</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>core</name><operator>.</operator><name>runtime</name><operator>.</operator><name>Status</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>examples</name><operator>.</operator><name>statushandlers</name><operator>.</operator><name>testtool</name><operator>.</operator><name>Messages</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>progress</name><operator>.</operator><name>IProgressConstants</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>progress</name><operator>.</operator><name>UIJob</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Base class for a simple test UI job with configurable parameters
 */</comment>
<class><specifier>public</specifier> class <name>UITestJob</name> <super><extends>extends <name>UIJob</name></extends></super> <block>{

	<decl_stmt><decl><specifier>private</specifier> <type><name>long</name></type> <name>duration</name></decl>;</decl_stmt>

	<decl_stmt><decl><specifier>private</specifier> <type><name>boolean</name></type> <name>returnError</name></decl>;</decl_stmt>

	<decl_stmt><decl><specifier>private</specifier> <type><name>Throwable</name></type> <name>toBeThrown</name></decl>;</decl_stmt>

	<decl_stmt><decl><specifier>private</specifier> <type><name>long</name></type> <name>throwAfter</name></decl>;</decl_stmt>

	<comment type="block" format="javadoc">/**
	 * Creates the UI test Job
	 * 
	 * @param duration
	 *            total time that the test job should sleep, in milliseconds
	 * @param lock
	 *            indicates if the workspace should be locked
	 * @param throwAfter
	 *            indicates when the exception will be thrown (ticks)
	 * @param toBeThrown
	 *            exception to be thrown
	 * @param returnError
	 *            indicates if the error should be wrapped in the status
	 * @param deffered
	 *            indicates if the error should not be shown immediately
	 */</comment>
	<constructor><specifier>public</specifier> <name>UITestJob</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>duration</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>lock</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>throwAfter</name></decl></parameter>,
			<parameter><decl><type><name>Throwable</name></type> <name>toBeThrown</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>returnError</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>deffered</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name><name>Messages</name><operator>.</operator><name>TestJob_TestJob</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>duration</name></name> <operator>=</operator> <name>duration</name></expr>;</expr_stmt>

		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>throwAfter</name></name> <operator>=</operator> <name>throwAfter</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>toBeThrown</name></name> <operator>=</operator> <name>toBeThrown</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>returnError</name></name> <operator>=</operator> <name>returnError</name></expr>;</expr_stmt>
		<if>if <condition>(<expr><name>deffered</name></expr>)</condition><then> <block>{
			<expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>setProperty</name></name><argument_list>(
					<argument><expr><name><name>IProgressConstants</name><operator>.</operator><name>NO_IMMEDIATE_ERROR_PROMPT_PROPERTY</name></name></expr></argument>,
					<argument><expr><name><name>Boolean</name><operator>.</operator><name>TRUE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>
		<if>if <condition>(<expr><name>lock</name></expr>)</condition><then>
			<block type="pseudo"><expr_stmt><expr><call><name>setRule</name><argument_list>(<argument><expr><call><name><name>ResourcesPlugin</name><operator>.</operator><name>getWorkspace</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getRoot</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
	}</block></constructor>

	<function><specifier>public</specifier> <type><name>IStatus</name></type> <name>runInUIThread</name><parameter_list>(<parameter><decl><type><name>IProgressMonitor</name></type> <name>monitor</name></decl></parameter>)</parameter_list> <block>{

		<decl_stmt><decl><type><specifier>final</specifier> <name>long</name></type> <name>sleep</name> <init>= <expr><literal type="number">10</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>ticks</name> <init>= <expr><call>(<name>int</name>) <argument_list>(<argument><expr><name>duration</name> <operator>/</operator> <name>sleep</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>ticksToThrow</name> <init>= <expr><call>(<name>int</name>) <argument_list>(<argument><expr><name>throwAfter</name> <operator>/</operator> <name>sleep</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><call><name><name>monitor</name><operator>.</operator><name>beginTask</name></name><argument_list>(<argument><expr><name><name>Messages</name><operator>.</operator><name>TestJob_UITask</name></name></expr></argument>, <argument><expr><name>ticks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>monitor</name><operator>.</operator><name>setTaskName</name></name><argument_list>(<argument><expr><name><name>Messages</name><operator>.</operator><name>TestJob_UITask</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<try>try <block>{
			<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>ticks</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
				<if>if <condition>(<expr><call><name><name>monitor</name><operator>.</operator><name>isCanceled</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
					<block type="pseudo"><return>return <expr><name><name>Status</name><operator>.</operator><name>CANCEL_STATUS</name></name></expr>;</return></block></then></if>
				<expr_stmt><expr><call><name><name>monitor</name><operator>.</operator><name>subTask</name></name><argument_list>(<argument><expr><literal type="string">"Processing tick #"</literal> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">//$NON-NLS-1$</comment>
				<try>try <block>{
					<expr_stmt><expr><call><name><name>Thread</name><operator>.</operator><name>sleep</name></name><argument_list>(<argument><expr><name>sleep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>InterruptedException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
					<return>return <expr><name><name>Status</name><operator>.</operator><name>CANCEL_STATUS</name></name></expr>;</return>
				}</block></catch></try>

				<if>if <condition>(<expr><name>i</name> <operator>==</operator> <name>ticksToThrow</name></expr>)</condition><then> <block>{
					<if>if <condition>(<expr><name>returnError</name></expr>)</condition><then> <block>{
						<decl_stmt><decl><type><name>MultiStatus</name></type> <name>result</name> <init>= <expr><operator>new</operator> <call><name>MultiStatus</name><argument_list>(
								<argument><expr><literal type="string">"org.eclipse.ui.examples.statushandling.jobs"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>Messages</name><operator>.</operator><name>TestJob_MultiStatusMessage</name></name></expr></argument>, <argument><expr><operator>new</operator> <call><name>RuntimeException</name><argument_list>(<argument><expr><name><name>Messages</name><operator>.</operator><name>TestJob_MultiStatusException</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="line">//$NON-NLS-1$</comment>
						<expr_stmt><expr><call><name><name>result</name>
								<operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Status</name><argument_list>(
										<argument><expr><name><name>IStatus</name><operator>.</operator><name>ERROR</name></name></expr></argument>,
										<argument><expr><literal type="string">"org.eclipse.ui.examples.statushandling.jobs"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>Messages</name><operator>.</operator><name>TestJob_ChildStatusMessage</name></name></expr></argument>, <argument><expr><name>toBeThrown</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">//$NON-NLS-1$</comment>
						<return>return <expr><name>result</name></expr>;</return>
					}</block></then></if>
					<expr_stmt><expr><call><name>throwException</name><argument_list>(<argument><expr><name>toBeThrown</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<comment type="line">// toBeThrown is neither a runtime exception nor an</comment>
					<comment type="line">// error</comment>
					<return>return <expr><name><name>Status</name><operator>.</operator><name>CANCEL_STATUS</name></name></expr>;</return>

				}</block></then></if>

				<expr_stmt><expr><call><name><name>monitor</name><operator>.</operator><name>worked</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></for>
		}</block> <finally>finally <block>{
			<expr_stmt><expr><call><name><name>monitor</name><operator>.</operator><name>done</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		}</block></finally></try>
		<return>return <expr><name><name>Status</name><operator>.</operator><name>OK_STATUS</name></name></expr>;</return>
	}</block></function>

	<function><specifier>private</specifier> <type><name>void</name></type> <name>throwException</name><parameter_list>(<parameter><decl><type><name>Throwable</name></type> <name>th</name></decl></parameter>)</parameter_list> <block>{
		<if>if <condition>(<expr><name>th</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then>
			<block type="pseudo"><return>return;</return></block></then></if>

		<if>if <condition>(<expr><name>th</name> <operator>instanceof</operator> <name>RuntimeException</name></expr>)</condition><then>
			<block type="pseudo"><throw>throw <expr><operator>(</operator><name>RuntimeException</name><operator>)</operator> <name>th</name></expr>;</throw></block></then></if>

		<if>if <condition>(<expr><name>th</name> <operator>instanceof</operator> <name>Error</name></expr>)</condition><then> <block>{
			<throw>throw <expr><operator>(</operator><name>Error</name><operator>)</operator> <name>th</name></expr>;</throw>
		}</block></then></if>

	}</block></function>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="org.eclipse.ui.examples.statushandlers.testtool/src/org/eclipse/ui/examples/statushandlers/testtool/actions/EnableSupportAction.java" hash="fe81ad2be205213968b2224bb9d5bd4e3c90ae1e"><package>package <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>examples</name><operator>.</operator><name>statushandlers</name><operator>.</operator><name>testtool</name><operator>.</operator><name>actions</name></name>;</package>

<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>jface</name><operator>.</operator><name>action</name><operator>.</operator><name>IAction</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>jface</name><operator>.</operator><name>util</name><operator>.</operator><name>Policy</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>jface</name><operator>.</operator><name>viewers</name><operator>.</operator><name>ISelection</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>swt</name><operator>.</operator><name>SWT</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>swt</name><operator>.</operator><name>layout</name><operator>.</operator><name>GridLayout</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>swt</name><operator>.</operator><name>widgets</name><operator>.</operator><name>Composite</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>swt</name><operator>.</operator><name>widgets</name><operator>.</operator><name>Control</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>swt</name><operator>.</operator><name>widgets</name><operator>.</operator><name>Label</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>IWorkbenchWindow</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>IWorkbenchWindowActionDelegate</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>statushandlers</name><operator>.</operator><name>AbstractStatusAreaProvider</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>statushandlers</name><operator>.</operator><name>StatusAdapter</name></name>;</import>

<class><specifier>public</specifier> class <name>EnableSupportAction</name> <super><implements>implements <name>IWorkbenchWindowActionDelegate</name></implements></super> <block>{

	<function><specifier>public</specifier> <type><name>void</name></type> <name>dispose</name><parameter_list>()</parameter_list> <block>{

	}</block></function>

	<function><specifier>public</specifier> <type><name>void</name></type> <name>init</name><parameter_list>(<parameter><decl><type><name>IWorkbenchWindow</name></type> <name>window</name></decl></parameter>)</parameter_list> <block>{

	}</block></function>

	<function><specifier>public</specifier> <type><name>void</name></type> <name>run</name><parameter_list>(<parameter><decl><type><name>IAction</name></type> <name>action</name></decl></parameter>)</parameter_list> <block>{
		<if>if <condition>(<expr><call><name><name>action</name><operator>.</operator><name>isChecked</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
			<expr_stmt><expr><call><name><name>Policy</name><operator>.</operator><name>setErrorSupportProvider</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>AbstractStatusAreaProvider</name></super><argument_list>()</argument_list> <block>{
				<function><specifier>public</specifier> <type><name>Control</name></type> <name>createSupportArea</name><parameter_list>(<parameter><decl><type><name>Composite</name></type> <name>parent</name></decl></parameter>,
						<parameter><decl><type><name>StatusAdapter</name></type> <name>statusAdapter</name></decl></parameter>)</parameter_list> <block>{
					<decl_stmt><decl><type><name>Composite</name></type> <name>composite</name> <init>= <expr><operator>new</operator> <call><name>Composite</name><argument_list>(<argument><expr><name>parent</name></expr></argument>, <argument><expr><name><name>SWT</name><operator>.</operator><name>NONE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<expr_stmt><expr><call><name><name>composite</name><operator>.</operator><name>setLayout</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>GridLayout</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<decl_stmt><decl><type><name>Label</name></type> <name>label</name> <init>= <expr><operator>new</operator> <call><name>Label</name><argument_list>(<argument><expr><name>composite</name></expr></argument>, <argument><expr><name><name>SWT</name><operator>.</operator><name>NONE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<expr_stmt><expr><call><name><name>label</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><call><name><name>statusAdapter</name><operator>.</operator><name>getStatus</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getMessage</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<return>return <expr><name>composite</name></expr>;</return>
				}</block></function>
			}</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then> <else>else <block>{
			<expr_stmt><expr><call><name><name>Policy</name><operator>.</operator><name>setErrorSupportProvider</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></else></if>

	}</block></function>

	<function><specifier>public</specifier> <type><name>void</name></type> <name>selectionChanged</name><parameter_list>(<parameter><decl><type><name>IAction</name></type> <name>action</name></decl></parameter>, <parameter><decl><type><name>ISelection</name></type> <name>selection</name></decl></parameter>)</parameter_list> <block>{

	}</block></function>

}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="org.eclipse.ui.examples.statushandlers.testtool/src/org/eclipse/ui/examples/statushandlers/testtool/jobs/TestJob.java" hash="24b96899190d9a6b9b6c30388788cb808a96f74f"><comment type="block" format="javadoc">/*******************************************************************************
 * Copyright (c) 2006, 2008 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     IBM Corporation - initial API and implementation
 *******************************************************************************/</comment>
<package>package <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>examples</name><operator>.</operator><name>statushandlers</name><operator>.</operator><name>testtool</name><operator>.</operator><name>jobs</name></name>;</package>

<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>core</name><operator>.</operator><name>resources</name><operator>.</operator><name>ResourcesPlugin</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>core</name><operator>.</operator><name>runtime</name><operator>.</operator><name>IProgressMonitor</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>core</name><operator>.</operator><name>runtime</name><operator>.</operator><name>IStatus</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>core</name><operator>.</operator><name>runtime</name><operator>.</operator><name>MultiStatus</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>core</name><operator>.</operator><name>runtime</name><operator>.</operator><name>Status</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>core</name><operator>.</operator><name>runtime</name><operator>.</operator><name>jobs</name><operator>.</operator><name>Job</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>examples</name><operator>.</operator><name>statushandlers</name><operator>.</operator><name>testtool</name><operator>.</operator><name>Messages</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>progress</name><operator>.</operator><name>IProgressConstants</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Base class for a simple test job with configurable parameters.
 */</comment>
<class><specifier>public</specifier> class <name>TestJob</name> <super><extends>extends <name>Job</name></extends></super> <block>{
	
	<comment type="block" format="javadoc">/**
	 * A family identifier for all test jobs
	 */</comment>
	<decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>Object</name></type> <name>FAMILY_TEST_JOB</name> <init>= <expr><operator>new</operator> <call><name>Object</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	
	<comment type="block" format="javadoc">/**
	 * Total duration that the test job should sleep, in milliseconds.
	 */</comment>
	<decl_stmt><decl><specifier>private</specifier> <type><name>long</name></type> <name>duration</name></decl>;</decl_stmt>

	<decl_stmt><decl><specifier>private</specifier> <type><name>boolean</name></type> <name>reschedule</name></decl>;</decl_stmt>

	<decl_stmt><decl><specifier>private</specifier> <type><name>long</name></type> <name>rescheduleWait</name></decl>;</decl_stmt>

	<decl_stmt><decl><specifier>private</specifier> <type><name>boolean</name></type> <name>returnError</name></decl>;</decl_stmt>

	<decl_stmt><decl><specifier>private</specifier> <type><name>Throwable</name></type> <name>toBeThrown</name></decl>;</decl_stmt>

	<decl_stmt><decl><specifier>private</specifier> <type><name>long</name></type> <name>throwAfter</name></decl>;</decl_stmt>

	<comment type="block" format="javadoc">/**
	 * Creates a new test job
	 * 
	 * @param duration
	 *            total time that the test job should sleep, in milliseconds
	 * @param lock
	 *            whether the job should use a workspace scheduling rule
	 * @param rescheduleWait
	 *            indicates how much time eclipse should wait before resheduling
	 *            job again
	 * @param reschedule
	 *            indicates if the job should be resheduled
	 * @param throwAfter
	 *            indicates when the exception will be thrown (ticks)
	 * @param toBeThrown
	 *            exception to be thrown
	 * @param returnError
	 *            indicates if the error should be wrapped in the status
	 * @param deferred
	 *            indicates if the error should not be shown immediately
	 */</comment>
	<constructor><specifier>public</specifier> <name>TestJob</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>duration</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>lock</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>reschedule</name></decl></parameter>,
			<parameter><decl><type><name>long</name></type> <name>rescheduleWait</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>throwAfter</name></decl></parameter>, <parameter><decl><type><name>Throwable</name></type> <name>toBeThrown</name></decl></parameter>,
			<parameter><decl><type><name>boolean</name></type> <name>returnError</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>deferred</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name><name>Messages</name><operator>.</operator><name>TestJob_TestJob</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>duration</name></name> <operator>=</operator> <name>duration</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>reschedule</name></name> <operator>=</operator> <name>reschedule</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>rescheduleWait</name></name> <operator>=</operator> <name>rescheduleWait</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>throwAfter</name></name> <operator>=</operator> <name>throwAfter</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>toBeThrown</name></name> <operator>=</operator> <name>toBeThrown</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>returnError</name></name> <operator>=</operator> <name>returnError</name></expr>;</expr_stmt>
		<if>if <condition>(<expr><name>deferred</name></expr>)</condition><then> <block>{
			<expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>setProperty</name></name><argument_list>(
					<argument><expr><name><name>IProgressConstants</name><operator>.</operator><name>NO_IMMEDIATE_ERROR_PROMPT_PROPERTY</name></name></expr></argument>,
					<argument><expr><name><name>Boolean</name><operator>.</operator><name>TRUE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>
		<if>if <condition>(<expr><name>lock</name></expr>)</condition><then>
			<block type="pseudo"><expr_stmt><expr><call><name>setRule</name><argument_list>(<argument><expr><call><name><name>ResourcesPlugin</name><operator>.</operator><name>getWorkspace</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getRoot</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
	}</block></constructor>

	<comment type="block">/*
	 * (non-Javadoc)
	 * 
	 * @see org.eclipse.core.internal.jobs.InternalJob#belongsTo(java.lang.Object)
	 */</comment>
	<function><specifier>public</specifier> <type><name>boolean</name></type> <name>belongsTo</name><parameter_list>(<parameter><decl><type><name>Object</name></type> <name>family</name></decl></parameter>)</parameter_list> <block>{
		<if>if <condition>(<expr><name>family</name> <operator>instanceof</operator> <name>TestJob</name></expr>)</condition><then> <block>{
			<return>return <expr><literal type="boolean">true</literal></expr>;</return>
		}</block></then></if>
		<return>return <expr><name>family</name> <operator>==</operator> <name>FAMILY_TEST_JOB</name></expr>;</return>
	}</block></function>

	<comment type="block">/*
	 * (non-Javadoc)
	 * 
	 * @see org.eclipse.core.internal.jobs.InternalJob#run(org.eclipse.core.runtime.IProgressMonitor)
	 */</comment>
	<function><specifier>public</specifier> <type><name>IStatus</name></type> <name>run</name><parameter_list>(<parameter><decl><type><name>IProgressMonitor</name></type> <name>monitor</name></decl></parameter>)</parameter_list> <block>{

		<decl_stmt><decl><type><specifier>final</specifier> <name>long</name></type> <name>sleep</name> <init>= <expr><literal type="number">10</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>ticks</name> <init>= <expr><call>(<name>int</name>) <argument_list>(<argument><expr><name>duration</name> <operator>/</operator> <name>sleep</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>ticksToThrow</name> <init>= <expr><call>(<name>int</name>) <argument_list>(<argument><expr><name>throwAfter</name> <operator>/</operator> <name>sleep</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><call><name><name>monitor</name><operator>.</operator><name>beginTask</name></name><argument_list>(<argument><expr><name><name>Messages</name><operator>.</operator><name>TestJob_UITask</name></name></expr></argument>, <argument><expr><name>ticks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>monitor</name><operator>.</operator><name>setTaskName</name></name><argument_list>(<argument><expr><name><name>Messages</name><operator>.</operator><name>TestJob_UITask</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<try>try <block>{
			<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>ticks</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
				<if>if <condition>(<expr><call><name><name>monitor</name><operator>.</operator><name>isCanceled</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
					<block type="pseudo"><return>return <expr><name><name>Status</name><operator>.</operator><name>CANCEL_STATUS</name></name></expr>;</return></block></then></if>
				<expr_stmt><expr><call><name><name>monitor</name><operator>.</operator><name>subTask</name></name><argument_list>(<argument><expr><literal type="string">"Processing tick #"</literal> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">//$NON-NLS-1$</comment>
				<try>try <block>{
					<expr_stmt><expr><call><name><name>Thread</name><operator>.</operator><name>sleep</name></name><argument_list>(<argument><expr><name>sleep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>InterruptedException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
					<return>return <expr><name><name>Status</name><operator>.</operator><name>CANCEL_STATUS</name></name></expr>;</return>
				}</block></catch></try>
				<if>if <condition>(<expr><name>i</name> <operator>==</operator> <name>ticksToThrow</name></expr>)</condition><then> <block>{
					<if>if <condition>(<expr><name>returnError</name></expr>)</condition><then> <block>{
						<decl_stmt><decl><type><name>MultiStatus</name></type> <name>result</name> <init>= <expr><operator>new</operator> <call><name>MultiStatus</name><argument_list>(
								<argument><expr><literal type="string">"org.eclipse.ui.examples.statushandling.jobs"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>Messages</name><operator>.</operator><name>TestJob_MultiStatusMessage</name></name></expr></argument>, <argument><expr><operator>new</operator> <call><name>RuntimeException</name><argument_list>(<argument><expr><name><name>Messages</name><operator>.</operator><name>TestJob_MultiStatusException</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="line">//$NON-NLS-1$</comment>
						<expr_stmt><expr><call><name><name>result</name>
								<operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Status</name><argument_list>(
										<argument><expr><name><name>IStatus</name><operator>.</operator><name>ERROR</name></name></expr></argument>,
										<argument><expr><literal type="string">"org.eclipse.ui.examples.statushandling.jobs"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>Messages</name><operator>.</operator><name>TestJob_ChildStatusMessage</name></name></expr></argument>, <argument><expr><name>toBeThrown</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">//$NON-NLS-1$</comment>
						<return>return <expr><name>result</name></expr>;</return>
					}</block></then></if>
					<expr_stmt><expr><call><name>throwException</name><argument_list>(<argument><expr><name>toBeThrown</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<comment type="line">// toBeThrown is neither a runtime exception nor an</comment>
					<comment type="line">// error</comment>
					<return>return <expr><name><name>Status</name><operator>.</operator><name>CANCEL_STATUS</name></name></expr>;</return>

				}</block></then></if>

				<expr_stmt><expr><call><name><name>monitor</name><operator>.</operator><name>worked</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></for>
		}</block> <finally>finally <block>{
			<if>if <condition>(<expr><name>reschedule</name></expr>)</condition><then>
				<block type="pseudo"><expr_stmt><expr><call><name>schedule</name><argument_list>(<argument><expr><name>rescheduleWait</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
			<expr_stmt><expr><call><name><name>monitor</name><operator>.</operator><name>done</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		}</block></finally></try>

		<return>return <expr><name><name>Status</name><operator>.</operator><name>OK_STATUS</name></name></expr>;</return>
	}</block></function>

	<function><specifier>private</specifier> <type><name>void</name></type> <name>throwException</name><parameter_list>(<parameter><decl><type><name>Throwable</name></type> <name>th</name></decl></parameter>)</parameter_list> <block>{
		<if>if <condition>(<expr><name>th</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then>
			<block type="pseudo"><return>return;</return></block></then></if>

		<if>if <condition>(<expr><name>th</name> <operator>instanceof</operator> <name>RuntimeException</name></expr>)</condition><then>
			<block type="pseudo"><throw>throw <expr><operator>(</operator><name>RuntimeException</name><operator>)</operator> <name>th</name></expr>;</throw></block></then></if>

		<if>if <condition>(<expr><name>th</name> <operator>instanceof</operator> <name>Error</name></expr>)</condition><then> <block>{
			<throw>throw <expr><operator>(</operator><name>Error</name><operator>)</operator> <name>th</name></expr>;</throw>
		}</block></then></if>
	}</block></function>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="org.eclipse.ui.examples.statushandlers.testtool/src/org/eclipse/ui/examples/statushandlers/testtool/actions/OpenErrorDialogAction.java" hash="b9d9606dea75d4637fabff1aa6e2d434d38782a1"><comment type="block" format="javadoc">/*******************************************************************************
 * Copyright (c) 2005, 2007 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     IBM Corporation - initial API and implementation
 *******************************************************************************/</comment>
<package>package <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>examples</name><operator>.</operator><name>statushandlers</name><operator>.</operator><name>testtool</name><operator>.</operator><name>actions</name></name>;</package>

<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>jface</name><operator>.</operator><name>action</name><operator>.</operator><name>IAction</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>jface</name><operator>.</operator><name>dialogs</name><operator>.</operator><name>MessageDialog</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>jface</name><operator>.</operator><name>viewers</name><operator>.</operator><name>ISelection</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>IWorkbenchWindow</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>IWorkbenchWindowActionDelegate</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>PlatformUI</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>examples</name><operator>.</operator><name>statushandlers</name><operator>.</operator><name>testtool</name><operator>.</operator><name>Messages</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Throws OutOfMemoryError error.
 */</comment>
<class><specifier>public</specifier> class <name>OpenErrorDialogAction</name> <super><implements>implements <name>IWorkbenchWindowActionDelegate</name></implements></super> <block>{

	<comment type="block" format="javadoc">/**
	 * The constructor.
	 */</comment>
	<constructor><specifier>public</specifier> <name>OpenErrorDialogAction</name><parameter_list>()</parameter_list> <block>{
	}</block></constructor>

	<comment type="block">/*
	 * (non-Javadoc)
	 * 
	 * @see org.eclipse.ui.IWorkbenchWindowActionDelegate#run(org.eclipse.jface.action.IAction)
	 */</comment>
	<function><specifier>public</specifier> <type><name>void</name></type> <name>run</name><parameter_list>(<parameter><decl><type><name>IAction</name></type> <name>action</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><call><name><name>MessageDialog</name><operator>.</operator><name>openError</name></name><argument_list>(<argument><expr><call><name><name>PlatformUI</name><operator>.</operator><name>getWorkbench</name></name><argument_list>()</argument_list></call>
				<operator>.</operator><call><name>getActiveWorkbenchWindow</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getShell</name><argument_list>()</argument_list></call></expr></argument>,
				<argument><expr><name><name>Messages</name><operator>.</operator><name>OpenErrorDialogAction_OpenError</name></name></expr></argument>,
				<argument><expr><name><name>Messages</name><operator>.</operator><name>OpenErrorDialogAction_1</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<comment type="block">/*
	 * (non-Javadoc)
	 * 
	 * @see org.eclipse.ui.IWorkbenchWindowActionDelegate#dispose()
	 */</comment>
	<function><specifier>public</specifier> <type><name>void</name></type> <name>dispose</name><parameter_list>()</parameter_list> <block>{
	}</block></function>

	<comment type="block">/*
	 * (non-Javadoc)
	 * 
	 * @see org.eclipse.ui.IWorkbenchWindowActionDelegate#init(org.eclipse.ui.IWorkbenchWindow)
	 */</comment>
	<function><specifier>public</specifier> <type><name>void</name></type> <name>init</name><parameter_list>(<parameter><decl><type><name>IWorkbenchWindow</name></type> <name>window</name></decl></parameter>)</parameter_list> <block>{
	}</block></function>

	<comment type="block">/*
	 * (non-Javadoc)
	 * 
	 * @see org.eclipse.ui.IActionDelegate#selectionChanged(org.eclipse.jface.action.IAction,
	 *      org.eclipse.jface.viewers.ISelection)
	 */</comment>
	<function><specifier>public</specifier> <type><name>void</name></type> <name>selectionChanged</name><parameter_list>(<parameter><decl><type><name>IAction</name></type> <name>action</name></decl></parameter>, <parameter><decl><type><name>ISelection</name></type> <name>selection</name></decl></parameter>)</parameter_list> <block>{
	}</block></function>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="org.eclipse.ui.examples.statushandlers.testtool/src/org/eclipse/ui/examples/statushandlers/testtool/actions/OpenInfoDialogAction.java" hash="8b61d43dc14c4f5aa9aa14c921e927abdeba212f"><comment type="block" format="javadoc">/*******************************************************************************
 * Copyright (c) 2005, 2007 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     IBM Corporation - initial API and implementation
 *******************************************************************************/</comment>
<package>package <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>examples</name><operator>.</operator><name>statushandlers</name><operator>.</operator><name>testtool</name><operator>.</operator><name>actions</name></name>;</package>

<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>jface</name><operator>.</operator><name>action</name><operator>.</operator><name>IAction</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>jface</name><operator>.</operator><name>dialogs</name><operator>.</operator><name>MessageDialog</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>jface</name><operator>.</operator><name>viewers</name><operator>.</operator><name>ISelection</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>IWorkbenchWindow</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>IWorkbenchWindowActionDelegate</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>PlatformUI</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>examples</name><operator>.</operator><name>statushandlers</name><operator>.</operator><name>testtool</name><operator>.</operator><name>Messages</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Throws OutOfMemoryError error.
 */</comment>
<class><specifier>public</specifier> class <name>OpenInfoDialogAction</name> <super><implements>implements <name>IWorkbenchWindowActionDelegate</name></implements></super> <block>{

	<comment type="block" format="javadoc">/**
	 * The constructor.
	 */</comment>
	<constructor><specifier>public</specifier> <name>OpenInfoDialogAction</name><parameter_list>()</parameter_list> <block>{
	}</block></constructor>

	<comment type="block">/*
	 * (non-Javadoc)
	 * 
	 * @see org.eclipse.ui.IWorkbenchWindowActionDelegate#run(org.eclipse.jface.action.IAction)
	 */</comment>
	<function><specifier>public</specifier> <type><name>void</name></type> <name>run</name><parameter_list>(<parameter><decl><type><name>IAction</name></type> <name>action</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><call><name><name>MessageDialog</name><operator>.</operator><name>openInformation</name></name><argument_list>(<argument><expr><call><name><name>PlatformUI</name><operator>.</operator><name>getWorkbench</name></name><argument_list>()</argument_list></call>
				<operator>.</operator><call><name>getActiveWorkbenchWindow</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getShell</name><argument_list>()</argument_list></call></expr></argument>,
				<argument><expr><name><name>Messages</name><operator>.</operator><name>OpenInfoDialogAction_OpenInformation</name></name></expr></argument>,
				<argument><expr><literal type="string">"MessageDialog:openInformation()"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">//$NON-NLS-1$</comment>
	}</block></function>

	<comment type="block">/*
	 * (non-Javadoc)
	 * 
	 * @see org.eclipse.ui.IWorkbenchWindowActionDelegate#dispose()
	 */</comment>
	<function><specifier>public</specifier> <type><name>void</name></type> <name>dispose</name><parameter_list>()</parameter_list> <block>{
	}</block></function>

	<comment type="block">/*
	 * (non-Javadoc)
	 * 
	 * @see org.eclipse.ui.IWorkbenchWindowActionDelegate#init(org.eclipse.ui.IWorkbenchWindow)
	 */</comment>
	<function><specifier>public</specifier> <type><name>void</name></type> <name>init</name><parameter_list>(<parameter><decl><type><name>IWorkbenchWindow</name></type> <name>window</name></decl></parameter>)</parameter_list> <block>{
	}</block></function>

	<comment type="block">/*
	 * (non-Javadoc)
	 * 
	 * @see org.eclipse.ui.IActionDelegate#selectionChanged(org.eclipse.jface.action.IAction,
	 *      org.eclipse.jface.viewers.ISelection)
	 */</comment>
	<function><specifier>public</specifier> <type><name>void</name></type> <name>selectionChanged</name><parameter_list>(<parameter><decl><type><name>IAction</name></type> <name>action</name></decl></parameter>, <parameter><decl><type><name>ISelection</name></type> <name>selection</name></decl></parameter>)</parameter_list> <block>{
	}</block></function>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="org.eclipse.ui.examples.statushandlers.testtool/src/org/eclipse/ui/examples/statushandlers/testtool/actions/ThrowNullPointerAction.java" hash="7e92325c6e5bd1ebfa86915635ecb9ee6c24e56e"><comment type="block" format="javadoc">/*******************************************************************************
 * Copyright (c) 2005, 2007 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     IBM Corporation - initial API and implementation
 *******************************************************************************/</comment>
<package>package <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>examples</name><operator>.</operator><name>statushandlers</name><operator>.</operator><name>testtool</name><operator>.</operator><name>actions</name></name>;</package>

<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>jface</name><operator>.</operator><name>action</name><operator>.</operator><name>IAction</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>jface</name><operator>.</operator><name>viewers</name><operator>.</operator><name>ISelection</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>IWorkbenchWindow</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>IWorkbenchWindowActionDelegate</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>examples</name><operator>.</operator><name>statushandlers</name><operator>.</operator><name>testtool</name><operator>.</operator><name>Messages</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Creates a status with NullPointerException and passes it to error handling
 * facility.
 */</comment>
<class><specifier>public</specifier> class <name>ThrowNullPointerAction</name> <super><implements>implements <name>IWorkbenchWindowActionDelegate</name></implements></super> <block>{

	<comment type="block">/*
	 * (non-Javadoc)
	 * 
	 * @see org.eclipse.ui.IWorkbenchWindowActionDelegate#run(org.eclipse.jface.action.IAction)
	 */</comment>
	<function><specifier>public</specifier> <type><name>void</name></type> <name>run</name><parameter_list>(<parameter><decl><type><name>IAction</name></type> <name>action</name></decl></parameter>)</parameter_list> <block>{
		<throw>throw <expr><operator>new</operator> <call><name>NullPointerException</name><argument_list>(
				<argument><expr><name><name>Messages</name><operator>.</operator><name>ThrowNullPointerAction_NPEMessage</name></name></expr></argument>)</argument_list></call></expr>;</throw>
	}</block></function>

	<comment type="block">/*
	 * (non-Javadoc)
	 * 
	 * @see org.eclipse.ui.IWorkbenchWindowActionDelegate#dispose()
	 */</comment>
	<function><specifier>public</specifier> <type><name>void</name></type> <name>dispose</name><parameter_list>()</parameter_list> <block>{
	}</block></function>

	<comment type="block">/*
	 * (non-Javadoc)
	 * 
	 * @see org.eclipse.ui.IWorkbenchWindowActionDelegate#init(org.eclipse.ui.IWorkbenchWindow)
	 */</comment>
	<function><specifier>public</specifier> <type><name>void</name></type> <name>init</name><parameter_list>(<parameter><decl><type><name>IWorkbenchWindow</name></type> <name>window</name></decl></parameter>)</parameter_list> <block>{
	}</block></function>

	<comment type="block">/*
	 * (non-Javadoc)
	 * 
	 * @see org.eclipse.ui.IActionDelegate#selectionChanged(org.eclipse.jface.action.IAction,
	 *      org.eclipse.jface.viewers.ISelection)
	 */</comment>
	<function><specifier>public</specifier> <type><name>void</name></type> <name>selectionChanged</name><parameter_list>(<parameter><decl><type><name>IAction</name></type> <name>action</name></decl></parameter>, <parameter><decl><type><name>ISelection</name></type> <name>selection</name></decl></parameter>)</parameter_list> <block>{
	}</block></function>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="org.eclipse.ui.examples.statushandlers.testtool/src/org/eclipse/ui/examples/statushandlers/testtool/actions/OpenWarningDialogAction.java" hash="2c5da448ce19dbec56b7e3994a5ceb90d16f2b12"><comment type="block" format="javadoc">/*******************************************************************************
 * Copyright (c) 2005, 2007 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     IBM Corporation - initial API and implementation
 *******************************************************************************/</comment>
<package>package <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>examples</name><operator>.</operator><name>statushandlers</name><operator>.</operator><name>testtool</name><operator>.</operator><name>actions</name></name>;</package>

<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>jface</name><operator>.</operator><name>action</name><operator>.</operator><name>IAction</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>jface</name><operator>.</operator><name>dialogs</name><operator>.</operator><name>MessageDialog</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>jface</name><operator>.</operator><name>viewers</name><operator>.</operator><name>ISelection</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>IWorkbenchWindow</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>IWorkbenchWindowActionDelegate</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>PlatformUI</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>examples</name><operator>.</operator><name>statushandlers</name><operator>.</operator><name>testtool</name><operator>.</operator><name>Messages</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Throws OutOfMemoryError error.
 */</comment>
<class><specifier>public</specifier> class <name>OpenWarningDialogAction</name> <super><implements>implements <name>IWorkbenchWindowActionDelegate</name></implements></super> <block>{

	<comment type="block" format="javadoc">/**
	 * The constructor.
	 */</comment>
	<constructor><specifier>public</specifier> <name>OpenWarningDialogAction</name><parameter_list>()</parameter_list> <block>{
	}</block></constructor>

	<comment type="block">/*
	 * (non-Javadoc)
	 * 
	 * @see org.eclipse.ui.IWorkbenchWindowActionDelegate#run(org.eclipse.jface.action.IAction)
	 */</comment>
	<function><specifier>public</specifier> <type><name>void</name></type> <name>run</name><parameter_list>(<parameter><decl><type><name>IAction</name></type> <name>action</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><call><name><name>MessageDialog</name><operator>.</operator><name>openWarning</name></name><argument_list>(<argument><expr><call><name><name>PlatformUI</name><operator>.</operator><name>getWorkbench</name></name><argument_list>()</argument_list></call>
				<operator>.</operator><call><name>getActiveWorkbenchWindow</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getShell</name><argument_list>()</argument_list></call></expr></argument>,
				<argument><expr><name><name>Messages</name><operator>.</operator><name>OpenWarningDialogAction_OpenWarning</name></name></expr></argument>,
				<argument><expr><name><name>Messages</name><operator>.</operator><name>OpenWarningDialogAction_OpenWarning</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<comment type="block">/*
	 * (non-Javadoc)
	 * 
	 * @see org.eclipse.ui.IWorkbenchWindowActionDelegate#dispose()
	 */</comment>
	<function><specifier>public</specifier> <type><name>void</name></type> <name>dispose</name><parameter_list>()</parameter_list> <block>{
	}</block></function>

	<comment type="block">/*
	 * (non-Javadoc)
	 * 
	 * @see org.eclipse.ui.IWorkbenchWindowActionDelegate#init(org.eclipse.ui.IWorkbenchWindow)
	 */</comment>
	<function><specifier>public</specifier> <type><name>void</name></type> <name>init</name><parameter_list>(<parameter><decl><type><name>IWorkbenchWindow</name></type> <name>window</name></decl></parameter>)</parameter_list> <block>{
	}</block></function>

	<comment type="block">/*
	 * (non-Javadoc)
	 * 
	 * @see org.eclipse.ui.IActionDelegate#selectionChanged(org.eclipse.jface.action.IAction,
	 *      org.eclipse.jface.viewers.ISelection)
	 */</comment>
	<function><specifier>public</specifier> <type><name>void</name></type> <name>selectionChanged</name><parameter_list>(<parameter><decl><type><name>IAction</name></type> <name>action</name></decl></parameter>, <parameter><decl><type><name>ISelection</name></type> <name>selection</name></decl></parameter>)</parameter_list> <block>{
	}</block></function>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="org.eclipse.ui.examples.statushandlers.testtool/src/org/eclipse/ui/examples/statushandlers/testtool/actions/ThrowOutOfMemoryAction.java" hash="aa0d6b7e2809b95f68c4676934ae5bd963e52f08"><comment type="block" format="javadoc">/*******************************************************************************
 * Copyright (c) 2005, 2007 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     IBM Corporation - initial API and implementation
 *******************************************************************************/</comment>
<package>package <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>examples</name><operator>.</operator><name>statushandlers</name><operator>.</operator><name>testtool</name><operator>.</operator><name>actions</name></name>;</package>

<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>jface</name><operator>.</operator><name>action</name><operator>.</operator><name>IAction</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>jface</name><operator>.</operator><name>viewers</name><operator>.</operator><name>ISelection</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>IWorkbenchWindow</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>IWorkbenchWindowActionDelegate</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Throws OutOfMemoryError error.
 */</comment>
<class><specifier>public</specifier> class <name>ThrowOutOfMemoryAction</name> <super><implements>implements <name>IWorkbenchWindowActionDelegate</name></implements></super> <block>{

	<comment type="block">/*
	 * (non-Javadoc)
	 * 
	 * @see org.eclipse.ui.IWorkbenchWindowActionDelegate#run(org.eclipse.jface.action.IAction)
	 */</comment>
	<function><specifier>public</specifier> <type><name>void</name></type> <name>run</name><parameter_list>(<parameter><decl><type><name>IAction</name></type> <name>action</name></decl></parameter>)</parameter_list> <block>{
		<throw>throw <expr><operator>new</operator> <call><name>OutOfMemoryError</name><argument_list>(<argument><expr><literal type="string">"OutOfMemory exception not handled by user"</literal></expr></argument>)</argument_list></call></expr>;</throw> <comment type="line">//$NON-NLS-1$</comment>
	}</block></function>

	<comment type="block">/*
	 * (non-Javadoc)
	 * 
	 * @see org.eclipse.ui.IWorkbenchWindowActionDelegate#dispose()
	 */</comment>
	<function><specifier>public</specifier> <type><name>void</name></type> <name>dispose</name><parameter_list>()</parameter_list> <block>{
	}</block></function>

	<comment type="block">/*
	 * (non-Javadoc)
	 * 
	 * @see org.eclipse.ui.IWorkbenchWindowActionDelegate#init(org.eclipse.ui.IWorkbenchWindow)
	 */</comment>
	<function><specifier>public</specifier> <type><name>void</name></type> <name>init</name><parameter_list>(<parameter><decl><type><name>IWorkbenchWindow</name></type> <name>window</name></decl></parameter>)</parameter_list> <block>{
	}</block></function>

	<comment type="block">/*
	 * (non-Javadoc)
	 * 
	 * @see org.eclipse.ui.IActionDelegate#selectionChanged(org.eclipse.jface.action.IAction,
	 *      org.eclipse.jface.viewers.ISelection)
	 */</comment>
	<function><specifier>public</specifier> <type><name>void</name></type> <name>selectionChanged</name><parameter_list>(<parameter><decl><type><name>IAction</name></type> <name>action</name></decl></parameter>, <parameter><decl><type><name>ISelection</name></type> <name>selection</name></decl></parameter>)</parameter_list> <block>{
	}</block></function>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="org.eclipse.ui.examples.statushandlers.testtool/src/org/eclipse/ui/examples/statushandlers/testtool/views/StatusHandlingView.java" hash="a45408259410311ca768e2df5d704058ff0befef"><comment type="block" format="javadoc">/*******************************************************************************
 * Copyright (c) 2005, 2007 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     IBM Corporation - initial API and implementation
 *******************************************************************************/</comment>
<package>package <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>examples</name><operator>.</operator><name>statushandlers</name><operator>.</operator><name>testtool</name><operator>.</operator><name>views</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>BufferedReader</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>BufferedWriter</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>File</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>FileReader</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>FileWriter</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Collections</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>core</name><operator>.</operator><name>runtime</name><operator>.</operator><name>IProgressMonitor</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>core</name><operator>.</operator><name>runtime</name><operator>.</operator><name>IStatus</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>core</name><operator>.</operator><name>runtime</name><operator>.</operator><name>Status</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>core</name><operator>.</operator><name>runtime</name><operator>.</operator><name>jobs</name><operator>.</operator><name>Job</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>jface</name><operator>.</operator><name>viewers</name><operator>.</operator><name>ISelection</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>jface</name><operator>.</operator><name>viewers</name><operator>.</operator><name>ISelectionChangedListener</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>jface</name><operator>.</operator><name>viewers</name><operator>.</operator><name>IStructuredContentProvider</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>jface</name><operator>.</operator><name>viewers</name><operator>.</operator><name>SelectionChangedEvent</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>jface</name><operator>.</operator><name>viewers</name><operator>.</operator><name>StructuredSelection</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>jface</name><operator>.</operator><name>viewers</name><operator>.</operator><name>TableViewer</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>jface</name><operator>.</operator><name>viewers</name><operator>.</operator><name>Viewer</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>swt</name><operator>.</operator><name>SWT</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>swt</name><operator>.</operator><name>custom</name><operator>.</operator><name>ScrolledComposite</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>swt</name><operator>.</operator><name>events</name><operator>.</operator><name>SelectionAdapter</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>swt</name><operator>.</operator><name>events</name><operator>.</operator><name>SelectionEvent</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>swt</name><operator>.</operator><name>layout</name><operator>.</operator><name>FillLayout</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>swt</name><operator>.</operator><name>layout</name><operator>.</operator><name>GridData</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>swt</name><operator>.</operator><name>layout</name><operator>.</operator><name>GridLayout</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>swt</name><operator>.</operator><name>widgets</name><operator>.</operator><name>Button</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>swt</name><operator>.</operator><name>widgets</name><operator>.</operator><name>Composite</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>swt</name><operator>.</operator><name>widgets</name><operator>.</operator><name>Event</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>swt</name><operator>.</operator><name>widgets</name><operator>.</operator><name>FileDialog</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>swt</name><operator>.</operator><name>widgets</name><operator>.</operator><name>Listener</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>swt</name><operator>.</operator><name>widgets</name><operator>.</operator><name>Menu</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>swt</name><operator>.</operator><name>widgets</name><operator>.</operator><name>MenuItem</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>swt</name><operator>.</operator><name>widgets</name><operator>.</operator><name>TabFolder</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>swt</name><operator>.</operator><name>widgets</name><operator>.</operator><name>TabItem</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>IMemento</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>WorkbenchException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>XMLMemento</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>examples</name><operator>.</operator><name>statushandlers</name><operator>.</operator><name>testtool</name><operator>.</operator><name>Messages</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>part</name><operator>.</operator><name>ViewPart</name></name>;</import>

<comment type="block" format="javadoc">/**
 * A view dedicated to generating status (error.
 */</comment>
<class><specifier>public</specifier> class <name>StatusHandlingView</name> <super><extends>extends <name>ViewPart</name></extends></super> <block>{

	<decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>XML_EXTENSIONS</name> <init>= <expr><literal type="string">"*.xml"</literal></expr></init></decl>;</decl_stmt> <comment type="line">//$NON-NLS-1$</comment>

	<comment type="block" format="javadoc">/**
	 * This class is responsible for executing test sequence in the background
	 */</comment>
	<class><specifier>private</specifier> <specifier>final</specifier> class <name>TestBedSequenceJob</name> <super><extends>extends <name>Job</name></extends></super> <block>{

		<constructor><specifier>private</specifier> <name>TestBedSequenceJob</name><parameter_list>()</parameter_list> <block>{
			<expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name><name>Messages</name><operator>.</operator><name>StatusHandlingView_TestBedSequence</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></constructor>

		<function><specifier>protected</specifier> <type><name>IStatus</name></type> <name>run</name><parameter_list>(<parameter><decl><type><name>IProgressMonitor</name></type> <name>monitor</name></decl></parameter>)</parameter_list> <block>{
			<expr_stmt><expr><call><name><name>monitor</name><operator>.</operator><name>beginTask</name></name><argument_list>(
					<argument><expr><name><name>Messages</name><operator>.</operator><name>StatusHandlingView_ExecutingTestBedSequence</name></name></expr></argument>,
					<argument><expr><call><name><name>executionList</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>executionList</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
				<decl_stmt><decl><type><name>TestBedRunnable</name></type> <name>runnable</name> <init>= <expr><operator>(</operator><name>TestBedRunnable</name><operator>)</operator> <call><name><name>executionList</name>
						<operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><call><name><name>runnable</name><operator>.</operator><name>run</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>monitor</name><operator>.</operator><name>worked</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></for>
			<expr_stmt><expr><call><name><name>monitor</name><operator>.</operator><name>done</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><name><name>Status</name><operator>.</operator><name>OK_STATUS</name></name></expr>;</return>
		}</block></function>
	}</block></class>

	<class><specifier>private</specifier> <specifier>final</specifier> class <name>RemoveSelectionAdapter</name> <super><extends>extends <name>SelectionAdapter</name></extends></super> <block>{
		<function><specifier>public</specifier> <type><name>void</name></type> <name>widgetSelected</name><parameter_list>(<parameter><decl><type><name>SelectionEvent</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
			<expr_stmt><expr><call><name>removeSelectedFromExecutionList</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		}</block></function>
	}</block></class>

	<class><specifier>static</specifier> <specifier>final</specifier> class <name>MoveDownSelectionAdapter</name> <super><extends>extends <name>SelectionAdapter</name></extends></super> <block>{
		<decl_stmt><decl><specifier>private</specifier> <type><name>TableViewer</name></type> <name>viewer</name></decl>;</decl_stmt>
		<decl_stmt><decl><specifier>private</specifier> <type><name><name>List</name><index>[]</index></name></type> <name>list</name></decl>;</decl_stmt>

		<constructor><specifier>public</specifier> <name>MoveDownSelectionAdapter</name><parameter_list>(<parameter><decl><type><name>TableViewer</name></type> <name>viewer</name></decl></parameter>, <parameter><decl><type><name><name>List</name><index>[]</index></name></type> <name>list</name></decl></parameter>)</parameter_list> <block>{
			<expr_stmt><expr><call><name>super</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>this</name><operator>.</operator><name>viewer</name></name> <operator>=</operator> <name>viewer</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>this</name><operator>.</operator><name>list</name></name> <operator>=</operator> <name>list</name></expr>;</expr_stmt>
		}</block></constructor>

		<function><specifier>public</specifier> <type><name>void</name></type> <name>widgetSelected</name><parameter_list>(<parameter><decl><type><name>SelectionEvent</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
			<decl_stmt><decl><type><name>int</name></type> <name>index</name> <init>= <expr><call><name><name>viewer</name><operator>.</operator><name>getTable</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getSelectionIndex</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><name><name>list</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><call><name>add</name><argument_list>(<argument><expr><name>index</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>list</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><call><name>remove</name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>viewer</name><operator>.</operator><name>getTable</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>setSelection</name><argument_list>(<argument><expr><name>index</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>viewer</name><operator>.</operator><name>refresh</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		}</block></function>
	}</block></class>

	<class><specifier>static</specifier> <specifier>final</specifier> class <name>MoveUpSelectionAdapter</name> <super><extends>extends <name>SelectionAdapter</name></extends></super> <block>{
		<decl_stmt><decl><specifier>private</specifier> <type><name>TableViewer</name></type> <name>viewer</name></decl>;</decl_stmt>
		<decl_stmt><decl><specifier>private</specifier> <type><name><name>List</name><index>[]</index></name></type> <name>list</name></decl>;</decl_stmt>

		<constructor><specifier>public</specifier> <name>MoveUpSelectionAdapter</name><parameter_list>(<parameter><decl><type><name>TableViewer</name></type> <name>viewer</name></decl></parameter>, <parameter><decl><type><name><name>List</name><index>[]</index></name></type> <name>list</name></decl></parameter>)</parameter_list> <block>{
			<expr_stmt><expr><call><name>super</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>this</name><operator>.</operator><name>viewer</name></name> <operator>=</operator> <name>viewer</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>this</name><operator>.</operator><name>list</name></name> <operator>=</operator> <name>list</name></expr>;</expr_stmt>
		}</block></constructor>

		<function><specifier>public</specifier> <type><name>void</name></type> <name>widgetSelected</name><parameter_list>(<parameter><decl><type><name>SelectionEvent</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
			<decl_stmt><decl><type><name>int</name></type> <name>index</name> <init>= <expr><call><name><name>viewer</name><operator>.</operator><name>getTable</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getSelectionIndex</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><name><name>list</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><call><name>add</name><argument_list>(<argument><expr><name>index</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>list</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><call><name>remove</name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>viewer</name><operator>.</operator><name>getTable</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>setSelection</name><argument_list>(<argument><expr><name>index</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>viewer</name><operator>.</operator><name>refresh</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		}</block></function>
	}</block></class>

	<decl_stmt><decl><specifier>private</specifier> <type><name>TestBedComponent</name></type> <name><name>components</name><index>[]</index></name> <init>= <expr><operator>new</operator> <name><name>TestBedComponent</name><index>[]</index></name> <block>{
			<expr><operator>new</operator> <call><name>JobsAndRunnablesComponent</name><argument_list>()</argument_list></call></expr>, <expr><operator>new</operator> <call><name>ShowViewComponent</name><argument_list>()</argument_list></call></expr>,
			<expr><operator>new</operator> <call><name>StatusHandlingComponent</name><argument_list>()</argument_list></call></expr>, <expr><operator>new</operator> <call><name>SleepingComponent</name><argument_list>()</argument_list></call></expr> }</block></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>private</specifier> <type><name>TabFolder</name></type> <name>tabFolder</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>private</specifier> <type><name>TabItem</name></type> <name>firstTab</name></decl>;</decl_stmt>

	<decl_stmt><decl><specifier>private</specifier> <type><name>TableViewer</name></type> <name>viewer</name></decl>;</decl_stmt>

	<decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>List</name></type> <name>executionList</name> <init>= <expr><call><name><name>Collections</name>
			<operator>.</operator><name>synchronizedList</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>ArrayList</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>private</specifier> <type><name>Button</name></type> <name>addButton</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>private</specifier> <type><name>Button</name></type> <name>executeButton</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>private</specifier> <type><name>Button</name></type> <name>removeButton</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>private</specifier> <type><name>Button</name></type> <name>exportButton</name></decl>;</decl_stmt>

	<comment type="block">/*
	 * (non-Javadoc)
	 * 
	 * @see org.eclipse.ui.part.WorkbenchPart#createPartControl(org.eclipse.swt.widgets.Composite)
	 */</comment>
	<function><specifier>public</specifier> <type><name>void</name></type> <name>createPartControl</name><parameter_list>(<parameter><decl><type><name>Composite</name></type> <name>parent</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><call><name><name>parent</name><operator>.</operator><name>setLayout</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>FillLayout</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<decl_stmt><decl><type><name>ScrolledComposite</name></type> <name>sc</name> <init>= <expr><operator>new</operator> <call><name>ScrolledComposite</name><argument_list>(<argument><expr><name>parent</name></expr></argument>, <argument><expr><name><name>SWT</name><operator>.</operator><name>H_SCROLL</name></name>
				<operator>|</operator> <name><name>SWT</name><operator>.</operator><name>V_SCROLL</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>sc</name><operator>.</operator><name>setLayout</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>FillLayout</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>parent</name> <operator>=</operator> <operator>new</operator> <call><name>Composite</name><argument_list>(<argument><expr><name>sc</name></expr></argument>, <argument><expr><name><name>SWT</name><operator>.</operator><name>NONE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>parent</name><operator>.</operator><name>setLayout</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>GridLayout</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>tabFolder</name> <operator>=</operator> <operator>new</operator> <call><name>TabFolder</name><argument_list>(<argument><expr><name>parent</name></expr></argument>, <argument><expr><name><name>SWT</name><operator>.</operator><name>NONE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>tabFolder</name><operator>.</operator><name>setLayoutData</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>GridData</name><argument_list>(<argument><expr><name><name>GridData</name><operator>.</operator><name>FILL_BOTH</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>firstTab</name> <operator>=</operator> <call><name>createTab</name><argument_list>(<argument><expr><name><name>components</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>components</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
			<expr_stmt><expr><call><name>createTab</name><argument_list>(<argument><expr><name><name>components</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></for>

		<expr_stmt><expr><name>viewer</name> <operator>=</operator> <operator>new</operator> <call><name>TableViewer</name><argument_list>(<argument><expr><name>parent</name></expr></argument>, <argument><expr><name><name>SWT</name><operator>.</operator><name>BORDER</name></name> <operator>|</operator> <name><name>SWT</name><operator>.</operator><name>MULTI</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>GridData</name></type> <name>gridData</name> <init>= <expr><operator>new</operator> <call><name>GridData</name><argument_list>(<argument><expr><name><name>GridData</name><operator>.</operator><name>FILL_BOTH</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>viewer</name><operator>.</operator><name>getTable</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>setLayoutData</name><argument_list>(<argument><expr><name>gridData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>viewer</name><operator>.</operator><name>setContentProvider</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>IStructuredContentProvider</name></super><argument_list>()</argument_list> <block>{

			<function><specifier>public</specifier> <type><name><name>Object</name><index>[]</index></name></type> <name>getElements</name><parameter_list>(<parameter><decl><type><name>Object</name></type> <name>inputElement</name></decl></parameter>)</parameter_list> <block>{
				<return>return <expr><call><name><name>executionList</name><operator>.</operator><name>toArray</name></name><argument_list>()</argument_list></call></expr>;</return>
			}</block></function>

			<function><specifier>public</specifier> <type><name>void</name></type> <name>dispose</name><parameter_list>()</parameter_list> <block>{
			}</block></function>

			<function><specifier>public</specifier> <type><name>void</name></type> <name>inputChanged</name><parameter_list>(<parameter><decl><type><name>Viewer</name></type> <name>viewer</name></decl></parameter>, <parameter><decl><type><name>Object</name></type> <name>oldInput</name></decl></parameter>,
					<parameter><decl><type><name>Object</name></type> <name>newInput</name></decl></parameter>)</parameter_list> <block>{

			}</block></function>

		}</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>viewer</name><operator>.</operator><name>setInput</name></name><argument_list>(<argument><expr><operator>new</operator> <name><name>Object</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>getSite</name><argument_list>()</argument_list></call><operator>.</operator><call><name>setSelectionProvider</name><argument_list>(<argument><expr><name>viewer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>viewer</name><operator>.</operator><name>addPostSelectionChangedListener</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>ISelectionChangedListener</name></super><argument_list>()</argument_list> <block>{

			<function><specifier>public</specifier> <type><name>void</name></type> <name>selectionChanged</name><parameter_list>(<parameter><decl><type><name>SelectionChangedEvent</name></type> <name>event</name></decl></parameter>)</parameter_list> <block>{
				<decl_stmt><decl><type><name>ISelection</name></type> <name>iSelection</name> <init>= <expr><call><name><name>event</name><operator>.</operator><name>getSelection</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
				<if>if <condition>(<expr><name>iSelection</name> <operator>instanceof</operator> <name>StructuredSelection</name></expr>)</condition><then> <block>{
					<decl_stmt><decl><type><name>StructuredSelection</name></type> <name>selection</name> <init>= <expr><operator>(</operator><name>StructuredSelection</name><operator>)</operator> <name>iSelection</name></expr></init></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>TestBedRunnable</name></type> <name>runnable</name> <init>= <expr><operator>(</operator><name>TestBedRunnable</name><operator>)</operator> <call><name><name>selection</name>
							<operator>.</operator><name>getFirstElement</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
					<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>components</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
						<if>if <condition>(<expr><name><name>components</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>accept</name><argument_list>(<argument><expr><name>runnable</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
							<expr_stmt><expr><call><name><name>tabFolder</name><operator>.</operator><name>setSelection</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							<break>break;</break>
						}</block></then></if>
					}</block></for>
				}</block></then></if>
			}</block></function>

		}</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>createPopMenu</name><argument_list>(<argument><expr><name>viewer</name></expr></argument>, <argument><expr><operator>new</operator> <name><name>List</name><index>[]</index></name> <block>{ <expr><name>executionList</name></expr> }</block></expr></argument>,
				<argument><expr><operator>new</operator> <call><name>RemoveSelectionAdapter</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<decl_stmt><decl><type><name>Composite</name></type> <name>tabButtons</name> <init>= <expr><operator>new</operator> <call><name>Composite</name><argument_list>(<argument><expr><name>parent</name></expr></argument>, <argument><expr><name><name>SWT</name><operator>.</operator><name>NONE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>tabButtons</name><operator>.</operator><name>setLayout</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>GridLayout</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>createExecuteButton</name><argument_list>(<argument><expr><name>tabButtons</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>addButton</name> <operator>=</operator> <operator>new</operator> <call><name>Button</name><argument_list>(<argument><expr><name>tabButtons</name></expr></argument>, <argument><expr><name><name>SWT</name><operator>.</operator><name>NONE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>addButton</name><operator>.</operator><name>setLayoutData</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>GridData</name><argument_list>(<argument><expr><name><name>GridData</name><operator>.</operator><name>FILL_HORIZONTAL</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>addButton</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><name><name>Messages</name><operator>.</operator><name>StatusHandlingView_AddToTheExecutionList</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<decl_stmt><decl><type><name>Composite</name></type> <name>listButtons</name> <init>= <expr><operator>new</operator> <call><name>Composite</name><argument_list>(<argument><expr><name>parent</name></expr></argument>, <argument><expr><name><name>SWT</name><operator>.</operator><name>NONE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>listButtons</name><operator>.</operator><name>setLayout</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>GridLayout</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<decl_stmt><decl><type><name>Button</name></type> <name>executeAll</name> <init>= <expr><operator>new</operator> <call><name>Button</name><argument_list>(<argument><expr><name>listButtons</name></expr></argument>, <argument><expr><name><name>SWT</name><operator>.</operator><name>NONE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name>exportButton</name> <operator>=</operator> <operator>new</operator> <call><name>Button</name><argument_list>(<argument><expr><name>listButtons</name></expr></argument>, <argument><expr><name><name>SWT</name><operator>.</operator><name>NONE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>removeButton</name> <operator>=</operator> <operator>new</operator> <call><name>Button</name><argument_list>(<argument><expr><name>listButtons</name></expr></argument>, <argument><expr><name><name>SWT</name><operator>.</operator><name>NONE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><specifier>final</specifier> <name>Button</name></type> <name>importButton</name> <init>= <expr><operator>new</operator> <call><name>Button</name><argument_list>(<argument><expr><name>listButtons</name></expr></argument>, <argument><expr><name><name>SWT</name><operator>.</operator><name>NONE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><call><name><name>executeAll</name><operator>.</operator><name>setLayoutData</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>GridData</name><argument_list>(<argument><expr><name><name>GridData</name><operator>.</operator><name>FILL_HORIZONTAL</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>executeAll</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><name><name>Messages</name><operator>.</operator><name>StatusHandlingView_ExecuteAll</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>executeAll</name><operator>.</operator><name>addSelectionListener</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>SelectionAdapter</name></super><argument_list>()</argument_list> <block>{

			<function><specifier>public</specifier> <type><name>void</name></type> <name>widgetSelected</name><parameter_list>(<parameter><decl><type><name>SelectionEvent</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
				<decl_stmt><decl><type><name>Job</name></type> <name>job</name> <init>= <expr><operator>new</operator> <call><name>TestBedSequenceJob</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><call><name><name>job</name><operator>.</operator><name>schedule</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			}</block></function>

		}</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name><name>removeButton</name><operator>.</operator><name>setLayoutData</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>GridData</name><argument_list>(<argument><expr><name><name>GridData</name><operator>.</operator><name>FILL_HORIZONTAL</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>removeButton</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><name><name>Messages</name><operator>.</operator><name>StatusHandlingView_Remove</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>removeButton</name><operator>.</operator><name>setEnabled</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>removeButton</name><operator>.</operator><name>addSelectionListener</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>SelectionAdapter</name></super><argument_list>()</argument_list> <block>{

			<function><specifier>public</specifier> <type><name>void</name></type> <name>widgetSelected</name><parameter_list>(<parameter><decl><type><name>SelectionEvent</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
				<expr_stmt><expr><call><name>removeSelectedFromExecutionList</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			}</block></function>

		}</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name><name>exportButton</name><operator>.</operator><name>setLayoutData</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>GridData</name><argument_list>(<argument><expr><name><name>GridData</name><operator>.</operator><name>FILL_HORIZONTAL</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>exportButton</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><name><name>Messages</name><operator>.</operator><name>StatusHandlingView_Export</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>exportButton</name><operator>.</operator><name>setEnabled</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>exportButton</name><operator>.</operator><name>addSelectionListener</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>SelectionAdapter</name></super><argument_list>()</argument_list> <block>{
			<function><specifier>public</specifier> <type><name>void</name></type> <name>widgetSelected</name><parameter_list>(<parameter><decl><type><name>SelectionEvent</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
				<expr_stmt><expr><call><name>storeState</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			}</block></function>
		}</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name><name>importButton</name><operator>.</operator><name>setLayoutData</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>GridData</name><argument_list>(<argument><expr><name><name>GridData</name><operator>.</operator><name>FILL_HORIZONTAL</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>importButton</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><name><name>Messages</name><operator>.</operator><name>StatusHandlingView_Import</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>importButton</name><operator>.</operator><name>addSelectionListener</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>SelectionAdapter</name></super><argument_list>()</argument_list> <block>{
			<function><specifier>public</specifier> <type><name>void</name></type> <name>widgetSelected</name><parameter_list>(<parameter><decl><type><name>SelectionEvent</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
				<expr_stmt><expr><call><name>restoreState</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				<if>if <condition>(<expr><call><name><name>executionList</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
					<expr_stmt><expr><call><name><name>removeButton</name><operator>.</operator><name>setEnabled</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name>exportButton</name><operator>.</operator><name>setEnabled</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then> <else>else <block>{
					<expr_stmt><expr><call><name><name>removeButton</name><operator>.</operator><name>setEnabled</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name>exportButton</name><operator>.</operator><name>setEnabled</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></else></if>
				<expr_stmt><expr><call><name><name>viewer</name><operator>.</operator><name>refresh</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			}</block></function>
		}</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name><name>addButton</name><operator>.</operator><name>addSelectionListener</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>SelectionAdapter</name></super><argument_list>()</argument_list> <block>{

			<function><specifier>public</specifier> <type><name>void</name></type> <name>widgetSelected</name><parameter_list>(<parameter><decl><type><name>SelectionEvent</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
				<decl_stmt><decl><type><name>int</name></type> <name>index</name> <init>= <expr><call><name><name>tabFolder</name><operator>.</operator><name>getSelectionIndex</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>TestBedRunnable</name></type> <name>runnable</name> <init>= <expr><name><name>components</name><index>[<expr><name>index</name></expr>]</index></name>
						<operator>.</operator><call><name>getTestBedRunnable</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><call><name><name>executionList</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>runnable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>viewer</name><operator>.</operator><name>refresh</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>removeButton</name><operator>.</operator><name>setEnabled</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>exportButton</name><operator>.</operator><name>setEnabled</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></function>

		}</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name><name>sc</name><operator>.</operator><name>setMinSize</name></name><argument_list>(<argument><expr><call><name><name>parent</name><operator>.</operator><name>computeSize</name></name><argument_list>(<argument><expr><name><name>SWT</name><operator>.</operator><name>DEFAULT</name></name></expr></argument>, <argument><expr><name><name>SWT</name><operator>.</operator><name>DEFAULT</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>sc</name><operator>.</operator><name>setContent</name></name><argument_list>(<argument><expr><name>parent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>sc</name><operator>.</operator><name>setExpandHorizontal</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>sc</name><operator>.</operator><name>setExpandVertical</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	}</block></function>

	<function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>createPopMenu</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>TableViewer</name></type> <name>viewer</name></decl></parameter>,
			<parameter><decl><type><specifier>final</specifier> <name><name>List</name><index>[]</index></name></type> <name>list</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>SelectionAdapter</name></type> <name>remove</name></decl></parameter>)</parameter_list> <block>{
		<decl_stmt><decl><type><name>Menu</name></type> <name>menu</name> <init>= <expr><operator>new</operator> <call><name>Menu</name><argument_list>(<argument><expr><call><name><name>viewer</name><operator>.</operator><name>getControl</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getShell</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>SWT</name><operator>.</operator><name>POP_UP</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>viewer</name><operator>.</operator><name>getTable</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>setMenu</name><argument_list>(<argument><expr><name>menu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<decl_stmt><decl><type><specifier>final</specifier> <name>MenuItem</name></type> <name>upMenuItem</name> <init>= <expr><operator>new</operator> <call><name>MenuItem</name><argument_list>(<argument><expr><name>menu</name></expr></argument>, <argument><expr><name><name>SWT</name><operator>.</operator><name>PUSH</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>upMenuItem</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><name><name>Messages</name><operator>.</operator><name>StatusHandlingView_Up</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>upMenuItem</name>
				<operator>.</operator><name>addSelectionListener</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>MoveUpSelectionAdapter</name><argument_list>(<argument><expr><name>viewer</name></expr></argument>, <argument><expr><name>list</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<decl_stmt><decl><type><specifier>final</specifier> <name>MenuItem</name></type> <name>downMenuItem</name> <init>= <expr><operator>new</operator> <call><name>MenuItem</name><argument_list>(<argument><expr><name>menu</name></expr></argument>, <argument><expr><name><name>SWT</name><operator>.</operator><name>PUSH</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>downMenuItem</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><name><name>Messages</name><operator>.</operator><name>StatusHandlingView_Down</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>downMenuItem</name><operator>.</operator><name>addSelectionListener</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>MoveDownSelectionAdapter</name><argument_list>(<argument><expr><name>viewer</name></expr></argument>,
				<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<decl_stmt><decl><type><specifier>final</specifier> <name>MenuItem</name></type> <name>deleteMenuItem</name> <init>= <expr><operator>new</operator> <call><name>MenuItem</name><argument_list>(<argument><expr><name>menu</name></expr></argument>, <argument><expr><name><name>SWT</name><operator>.</operator><name>PUSH</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>deleteMenuItem</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><name><name>Messages</name><operator>.</operator><name>StatusHandlingView_Delete</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>deleteMenuItem</name><operator>.</operator><name>addSelectionListener</name></name><argument_list>(<argument><expr><name>remove</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name><name>menu</name><operator>.</operator><name>addListener</name></name><argument_list>(<argument><expr><name><name>SWT</name><operator>.</operator><name>Show</name></name></expr></argument>, <argument><expr><operator>new</operator> <class><super><name>Listener</name></super><argument_list>()</argument_list> <block>{

			<function><specifier>public</specifier> <type><name>void</name></type> <name>handleEvent</name><parameter_list>(<parameter><decl><type><name>Event</name></type> <name>event</name></decl></parameter>)</parameter_list> <block>{
				<if>if <condition>(<expr><call><name><name>viewer</name><operator>.</operator><name>getTable</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getItems</name><argument_list>()</argument_list></call><operator>.</operator><name>length</name> <operator>&gt;</operator> <literal type="number">1</literal>
						<operator>&amp;&amp;</operator> <call><name><name>viewer</name><operator>.</operator><name>getTable</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getSelectionIndices</name><argument_list>()</argument_list></call><operator>.</operator><name>length</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then> <block>{
					<if>if <condition>(<expr><call><name><name>viewer</name><operator>.</operator><name>getTable</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getSelectionIndex</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
						<expr_stmt><expr><call><name><name>upMenuItem</name><operator>.</operator><name>setEnabled</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name><name>downMenuItem</name><operator>.</operator><name>setEnabled</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></then> <elseif>else <if>if <condition>(<expr><call><name><name>viewer</name><operator>.</operator><name>getTable</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getSelectionIndex</name><argument_list>()</argument_list></call> <operator>==</operator> <call><name><name>viewer</name>
							<operator>.</operator><name>getTable</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getItems</name><argument_list>()</argument_list></call><operator>.</operator><name>length</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition><then> <block>{
						<expr_stmt><expr><call><name><name>upMenuItem</name><operator>.</operator><name>setEnabled</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name><name>downMenuItem</name><operator>.</operator><name>setEnabled</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></then></if></elseif> <else>else <block>{
						<expr_stmt><expr><call><name><name>upMenuItem</name><operator>.</operator><name>setEnabled</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name><name>downMenuItem</name><operator>.</operator><name>setEnabled</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></else></if>
				}</block></then> <else>else <block>{
					<expr_stmt><expr><call><name><name>upMenuItem</name><operator>.</operator><name>setEnabled</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name>downMenuItem</name><operator>.</operator><name>setEnabled</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></else></if>
				<expr_stmt><expr><call><name><name>deleteMenuItem</name>
						<operator>.</operator><name>setEnabled</name></name><argument_list>(<argument><expr><call><name><name>viewer</name><operator>.</operator><name>getTable</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getItems</name><argument_list>()</argument_list></call><operator>.</operator><name>length</name> <operator>!=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></function>

		}</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<function><specifier>private</specifier> <type><name>void</name></type> <name>createExecuteButton</name><parameter_list>(<parameter><decl><type><name>Composite</name></type> <name>parent</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><name>executeButton</name> <operator>=</operator> <operator>new</operator> <call><name>Button</name><argument_list>(<argument><expr><name>parent</name></expr></argument>, <argument><expr><name><name>SWT</name><operator>.</operator><name>PUSH</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>executeButton</name><operator>.</operator><name>setLayoutData</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>GridData</name><argument_list>(<argument><expr><name><name>GridData</name><operator>.</operator><name>FILL_HORIZONTAL</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>executeButton</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><name><name>Messages</name><operator>.</operator><name>StatusHandlingView_ExecuteTab</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>executeButton</name>
				<operator>.</operator><name>setToolTipText</name></name><argument_list>(<argument><expr><name><name>Messages</name><operator>.</operator><name>StatusHandlingView_ExecuteTabTooltip</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>executeButton</name><operator>.</operator><name>addSelectionListener</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>SelectionAdapter</name></super><argument_list>()</argument_list> <block>{

			<function><specifier>public</specifier> <type><name>void</name></type> <name>widgetSelected</name><parameter_list>(<parameter><decl><type><name>SelectionEvent</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
				<decl_stmt><decl><type><name>int</name></type> <name>index</name> <init>= <expr><call><name><name>tabFolder</name><operator>.</operator><name>getSelectionIndex</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>TestBedRunnable</name></type> <name>runnable</name> <init>= <expr><name><name>components</name><index>[<expr><name>index</name></expr>]</index></name>
						<operator>.</operator><call><name>getTestBedRunnable</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><call><name><name>runnable</name><operator>.</operator><name>run</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			}</block></function>

		}</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<function><specifier>private</specifier> <type><name>TabItem</name></type> <name>createTab</name><parameter_list>(<parameter><decl><type><name>TestBedComponent</name></type> <name>component</name></decl></parameter>)</parameter_list> <block>{
		<decl_stmt><decl><type><name>Composite</name></type> <name>composite</name> <init>= <expr><call><name><name>component</name><operator>.</operator><name>createComposite</name></name><argument_list>(<argument><expr><name>tabFolder</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>TabItem</name></type> <name>tab</name> <init>= <expr><operator>new</operator> <call><name>TabItem</name><argument_list>(<argument><expr><name>tabFolder</name></expr></argument>, <argument><expr><name><name>SWT</name><operator>.</operator><name>NONE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>tab</name><operator>.</operator><name>setControl</name></name><argument_list>(<argument><expr><name>composite</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>tab</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><call><name><name>component</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>tab</name></expr>;</return>
	}</block></function>

	<function><specifier>public</specifier> <type><name>void</name></type> <name>setFocus</name><parameter_list>()</parameter_list> <block>{
		<expr_stmt><expr><call><name><name>tabFolder</name><operator>.</operator><name>setSelection</name></name><argument_list>(<argument><expr><name>firstTab</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<function><specifier>private</specifier> <type><name>void</name></type> <name>storeState</name><parameter_list>()</parameter_list> <block>{
		<try>try <block>{
			<decl_stmt><decl><type><name>FileDialog</name></type> <name>fd</name> <init>= <expr><operator>new</operator> <call><name>FileDialog</name><argument_list>(<argument><expr><call><name><name>tabFolder</name><operator>.</operator><name>getShell</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>SWT</name><operator>.</operator><name>SAVE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name><name>fd</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><name><name>Messages</name><operator>.</operator><name>StatusHandlingView_SaveDialogTitle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>fd</name><operator>.</operator><name>setFilterExtensions</name></name><argument_list>(<argument><expr><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{ <expr><name>XML_EXTENSIONS</name></expr> }</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<decl_stmt><decl><type><name>String</name></type> <name>path</name> <init>= <expr><call><name><name>fd</name><operator>.</operator><name>open</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
			<if>if <condition>(<expr><name>path</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then>
				<block type="pseudo"><return>return;</return></block></then></if>
			<decl_stmt><decl><type><name>BufferedWriter</name></type> <name>bw</name> <init>= <expr><operator>new</operator> <call><name>BufferedWriter</name><argument_list>(<argument><expr><operator>new</operator> <call><name>FileWriter</name><argument_list>(
					<argument><expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>XMLMemento</name></type> <name>memento</name> <init>= <expr><call><name><name>XMLMemento</name><operator>.</operator><name>createWriteRoot</name></name><argument_list>(<argument><expr><literal type="string">"runnables"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="line">//$NON-NLS-1$</comment>
			<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>executionList</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
				<decl_stmt><decl><type><name>TestBedRunnable</name></type> <name>runnable</name> <init>= <expr><operator>(</operator><name>TestBedRunnable</name><operator>)</operator> <call><name><name>executionList</name>
						<operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><call><name><name>runnable</name><operator>.</operator><name>save</name></name><argument_list>(<argument><expr><name>memento</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></for>
			<expr_stmt><expr><call><name><name>memento</name><operator>.</operator><name>save</name></name><argument_list>(<argument><expr><name>bw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>bw</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
			<expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		}</block></catch></try>
	}</block></function>

	<function><specifier>private</specifier> <type><name>void</name></type> <name>restoreState</name><parameter_list>()</parameter_list> <block>{
		<try>try <block>{
			<decl_stmt><decl><type><name>FileDialog</name></type> <name>fd</name> <init>= <expr><operator>new</operator> <call><name>FileDialog</name><argument_list>(<argument><expr><call><name><name>tabFolder</name><operator>.</operator><name>getShell</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>SWT</name><operator>.</operator><name>OPEN</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name><name>fd</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><name><name>Messages</name><operator>.</operator><name>StatusHandlingView_LoadDialogTitle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>fd</name><operator>.</operator><name>setFilterExtensions</name></name><argument_list>(<argument><expr><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{ <expr><name>XML_EXTENSIONS</name></expr> }</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<decl_stmt><decl><type><name>String</name></type> <name>path</name> <init>= <expr><call><name><name>fd</name><operator>.</operator><name>open</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
			<if>if <condition>(<expr><name>path</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then>
				<block type="pseudo"><return>return;</return></block></then></if>
			<expr_stmt><expr><call><name><name>executionList</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<decl_stmt><decl><type><name>BufferedReader</name></type> <name>br</name> <init>= <expr><operator>new</operator> <call><name>BufferedReader</name><argument_list>(<argument><expr><operator>new</operator> <call><name>FileReader</name><argument_list>(
					<argument><expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>XMLMemento</name></type> <name>memento</name> <init>= <expr><call><name><name>XMLMemento</name><operator>.</operator><name>createReadRoot</name></name><argument_list>(<argument><expr><name>br</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>IMemento</name></type> <name><name>children</name><index>[]</index></name> <init>= <expr><call><name><name>memento</name>
					<operator>.</operator><name>getChildren</name></name><argument_list>(<argument><expr><name><name>TestBedRunnable</name><operator>.</operator><name>TEST_BED_RUNNABLE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>children</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
				<expr_stmt><expr><call><name><name>executionList</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>TestBedRunnable</name><operator>.</operator><name>restore</name></name><argument_list>(<argument><expr><name><name>children</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></for>
		}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
			<expr_stmt><expr><call><name><name>executionList</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>viewer</name><operator>.</operator><name>refresh</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		}</block></catch> <catch>catch <parameter_list>(<parameter><decl><type><name>WorkbenchException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
			<expr_stmt><expr><call><name><name>executionList</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>viewer</name><operator>.</operator><name>refresh</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		}</block></catch></try>
	}</block></function>

	<function><specifier>private</specifier> <type><name>void</name></type> <name>removeSelectedFromExecutionList</name><parameter_list>()</parameter_list> <block>{
		<decl_stmt><decl><type><name>int</name></type> <name><name>indices</name><index>[]</index></name> <init>= <expr><call><name><name>viewer</name><operator>.</operator><name>getTable</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getSelectionIndices</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name><name>indices</name><operator>.</operator><name>length</name></name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{
			<expr_stmt><expr><call><name><name>executionList</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><name><name>indices</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></for>
		<if>if <condition>(<expr><call><name><name>executionList</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
			<expr_stmt><expr><call><name><name>removeButton</name><operator>.</operator><name>setEnabled</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>exportButton</name><operator>.</operator><name>setEnabled</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>
		<expr_stmt><expr><call><name><name>viewer</name><operator>.</operator><name>refresh</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	}</block></function>
}</block></class>
</unit>

</unit>
