<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="0.9.5" language="Java" filename="ProjectRefreshSnapshotImportWizardPage.java"><comment type="block" format="javadoc">/*******************************************************************************
 * Copyright (c) 2004, 2010 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     IBM Corporation - initial API and implementation
 *     Red Hat, Inc - extensive changes to allow importing of Archive Files
 *     Philippe Ombredanne (pombredanne@nexb.com)
 *     		- Bug 101180 [Import/Export] Import Existing Project into Workspace default widget is back button , should be text field
 *     Martin Oberhuber (martin.oberhuber@windriver.com)
 *     		- Bug 187318[Wizards] "Import Existing Project" loops forever with cyclic symbolic links
 *     Remy Chi Jian Suen  (remy.suen@gmail.com)
 *     		- Bug 210568 [Import/Export] [Import/Export] - Refresh button does not update list of projects
 *     Francis Lynch (Wind River) - adapted from standard project import wizard
 *******************************************************************************/</comment>
<package>package <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>ide</name><operator>.</operator><name>examples</name><operator>.</operator><name>projectsnapshot</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>File</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>reflect</name><operator>.</operator><name>InvocationTargetException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>net</name><operator>.</operator><name>URI</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Collection</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashSet</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Iterator</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Set</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>core</name><operator>.</operator><name>resources</name><operator>.</operator><name>IProject</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>core</name><operator>.</operator><name>resources</name><operator>.</operator><name>IProjectDescription</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>core</name><operator>.</operator><name>resources</name><operator>.</operator><name>IResource</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>core</name><operator>.</operator><name>resources</name><operator>.</operator><name>IWorkspace</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>core</name><operator>.</operator><name>resources</name><operator>.</operator><name>ResourcesPlugin</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>core</name><operator>.</operator><name>runtime</name><operator>.</operator><name>CoreException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>core</name><operator>.</operator><name>runtime</name><operator>.</operator><name>IPath</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>core</name><operator>.</operator><name>runtime</name><operator>.</operator><name>IProgressMonitor</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>core</name><operator>.</operator><name>runtime</name><operator>.</operator><name>IStatus</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>core</name><operator>.</operator><name>runtime</name><operator>.</operator><name>OperationCanceledException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>core</name><operator>.</operator><name>runtime</name><operator>.</operator><name>Path</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>core</name><operator>.</operator><name>runtime</name><operator>.</operator><name>Platform</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>core</name><operator>.</operator><name>runtime</name><operator>.</operator><name>Status</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>core</name><operator>.</operator><name>runtime</name><operator>.</operator><name>SubProgressMonitor</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>jface</name><operator>.</operator><name>dialogs</name><operator>.</operator><name>Dialog</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>jface</name><operator>.</operator><name>dialogs</name><operator>.</operator><name>ErrorDialog</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>jface</name><operator>.</operator><name>dialogs</name><operator>.</operator><name>IDialogConstants</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>jface</name><operator>.</operator><name>dialogs</name><operator>.</operator><name>IDialogSettings</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>jface</name><operator>.</operator><name>dialogs</name><operator>.</operator><name>MessageDialog</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>jface</name><operator>.</operator><name>operation</name><operator>.</operator><name>IRunnableWithProgress</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>jface</name><operator>.</operator><name>viewers</name><operator>.</operator><name>CheckStateChangedEvent</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>jface</name><operator>.</operator><name>viewers</name><operator>.</operator><name>CheckboxTreeViewer</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>jface</name><operator>.</operator><name>viewers</name><operator>.</operator><name>ICheckStateListener</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>jface</name><operator>.</operator><name>viewers</name><operator>.</operator><name>ITreeContentProvider</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>jface</name><operator>.</operator><name>viewers</name><operator>.</operator><name>LabelProvider</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>jface</name><operator>.</operator><name>viewers</name><operator>.</operator><name>Viewer</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>jface</name><operator>.</operator><name>viewers</name><operator>.</operator><name>ViewerComparator</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>jface</name><operator>.</operator><name>wizard</name><operator>.</operator><name>WizardPage</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>osgi</name><operator>.</operator><name>util</name><operator>.</operator><name>NLS</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>swt</name><operator>.</operator><name>SWT</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>swt</name><operator>.</operator><name>events</name><operator>.</operator><name>FocusAdapter</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>swt</name><operator>.</operator><name>events</name><operator>.</operator><name>SelectionAdapter</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>swt</name><operator>.</operator><name>events</name><operator>.</operator><name>SelectionEvent</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>swt</name><operator>.</operator><name>events</name><operator>.</operator><name>TraverseEvent</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>swt</name><operator>.</operator><name>events</name><operator>.</operator><name>TraverseListener</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>swt</name><operator>.</operator><name>layout</name><operator>.</operator><name>GridData</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>swt</name><operator>.</operator><name>layout</name><operator>.</operator><name>GridLayout</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>swt</name><operator>.</operator><name>widgets</name><operator>.</operator><name>Button</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>swt</name><operator>.</operator><name>widgets</name><operator>.</operator><name>Composite</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>swt</name><operator>.</operator><name>widgets</name><operator>.</operator><name>DirectoryDialog</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>swt</name><operator>.</operator><name>widgets</name><operator>.</operator><name>Label</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>swt</name><operator>.</operator><name>widgets</name><operator>.</operator><name>Text</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>actions</name><operator>.</operator><name>WorkspaceModifyOperation</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>dialogs</name><operator>.</operator><name>IOverwriteQuery</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>internal</name><operator>.</operator><name>ide</name><operator>.</operator><name>IDEWorkbenchPlugin</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>internal</name><operator>.</operator><name>ide</name><operator>.</operator><name>StatusUtil</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>statushandlers</name><operator>.</operator><name>StatusManager</name></name>;</import>

<comment type="block" format="javadoc">/**
 * The ProjectRefreshSnapshotImportWizardPage is the page that allows the user
 * to import projects from a particular location with refresh snapshots.
 */</comment>
<class><specifier>public</specifier> class <name>ProjectRefreshSnapshotImportWizardPage</name> <super><extends>extends <name>WizardPage</name></extends>
		<implements>implements <name>IOverwriteQuery</name></implements></super> <block>{

	<comment type="block" format="javadoc">/**
	 * The name of the folder containing metadata information for the workspace.
	 */</comment>
	<decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>METADATA_FOLDER</name> <init>= <expr><literal type="string">".metadata"</literal></expr></init></decl>;</decl_stmt> <comment type="line">//$NON-NLS-1$</comment>

	<comment type="block" format="javadoc">/**
	 * Class declared public only for test suite.
	 */</comment>
	<class><specifier>public</specifier> class <name>ProjectRecord</name> <block>{
		<decl_stmt><decl><type><name>File</name></type> <name>projectSystemFile</name></decl>;</decl_stmt>

		<decl_stmt><decl><type><name>String</name></type> <name>projectName</name></decl>;</decl_stmt>

		<decl_stmt><decl><type><name>Object</name></type> <name>parent</name></decl>;</decl_stmt>

		<decl_stmt><decl><type><name>int</name></type> <name>level</name></decl>;</decl_stmt>

		<decl_stmt><decl><type><name>IProjectDescription</name></type> <name>description</name></decl>;</decl_stmt>

		<comment type="block" format="javadoc">/**
		 * Create a record for a project based on the info in the file.
		 * 
		 * @param file
		 */</comment>
		<constructor><name>ProjectRecord</name><parameter_list>(<parameter><decl><type><name>File</name></type> <name>file</name></decl></parameter>)</parameter_list> <block>{
			<expr_stmt><expr><name>projectSystemFile</name> <operator>=</operator> <name>file</name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>setProjectName</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		}</block></constructor>

		<comment type="block" format="javadoc">/**
		 * Set the name of the project based on the projectFile.
		 */</comment>
		<function><specifier>private</specifier> <type><name>void</name></type> <name>setProjectName</name><parameter_list>()</parameter_list> <block>{
			<try>try <block>{

				<comment type="line">// If we don't have the project name try again</comment>
				<if>if <condition>(<expr><name>projectName</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
					<decl_stmt><decl><type><name>IPath</name></type> <name>path</name> <init>= <expr><operator>new</operator> <call><name>Path</name><argument_list>(<argument><expr><call><name><name>projectSystemFile</name><operator>.</operator><name>getPath</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<comment type="line">// if the file is in the default location, use the directory</comment>
					<comment type="line">// name as the project name</comment>
					<if>if <condition>(<expr><call><name>isDefaultLocation</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
						<expr_stmt><expr><name>projectName</name> <operator>=</operator> <call><name><name>path</name><operator>.</operator><name>segment</name></name><argument_list>(<argument><expr><call><name><name>path</name><operator>.</operator><name>segmentCount</name></name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><name>description</name> <operator>=</operator> <call><name><name>IDEWorkbenchPlugin</name><operator>.</operator><name>getPluginWorkspace</name></name><argument_list>()</argument_list></call>
								<operator>.</operator><call><name>newProjectDescription</name><argument_list>(<argument><expr><name>projectName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></then> <else>else <block>{
						<expr_stmt><expr><name>description</name> <operator>=</operator> <call><name><name>IDEWorkbenchPlugin</name><operator>.</operator><name>getPluginWorkspace</name></name><argument_list>()</argument_list></call>
								<operator>.</operator><call><name>loadProjectDescription</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><name>projectName</name> <operator>=</operator> <call><name><name>description</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
					}</block></else></if>

				}</block></then></if>
			}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>CoreException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
				<comment type="line">// no good couldn't get the name</comment>
			}</block></catch></try>
		}</block></function>

		<comment type="block" format="javadoc">/**
		 * Returns whether the given project description file path is in the
		 * default location for a project
		 * 
		 * @param path
		 *            The path to examine
		 * @return Whether the given path is the default location for a project
		 */</comment>
		<function><specifier>private</specifier> <type><name>boolean</name></type> <name>isDefaultLocation</name><parameter_list>(<parameter><decl><type><name>IPath</name></type> <name>path</name></decl></parameter>)</parameter_list> <block>{
			<comment type="line">// The project description file must at least be within the project,</comment>
			<comment type="line">// which is within the workspace location</comment>
			<if>if <condition>(<expr><call><name><name>path</name><operator>.</operator><name>segmentCount</name></name><argument_list>()</argument_list></call> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition><then>
				<block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr>;</return></block></then></if>
			<return>return <expr><call><name><name>path</name><operator>.</operator><name>removeLastSegments</name></name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>toFile</name><argument_list>()</argument_list></call>
					<operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><call><name><name>Platform</name><operator>.</operator><name>getLocation</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>toFile</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
		}</block></function>

		<comment type="block" format="javadoc">/**
		 * Get the name of the project
		 * 
		 * @return String
		 */</comment>
		<function><specifier>public</specifier> <type><name>String</name></type> <name>getProjectName</name><parameter_list>()</parameter_list> <block>{
			<return>return <expr><name>projectName</name></expr>;</return>
		}</block></function>

		<comment type="block" format="javadoc">/**
		 * Gets the label to be used when rendering this project record in the
		 * UI.
		 * 
		 * @return String the label
		 * @since 3.4
		 */</comment>
		<function><specifier>public</specifier> <type><name>String</name></type> <name>getProjectLabel</name><parameter_list>()</parameter_list> <block>{
			<if>if <condition>(<expr><name>description</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then>
				<block type="pseudo"><return>return <expr><name>projectName</name></expr>;</return></block></then></if>

			<decl_stmt><decl><type><name>String</name></type> <name>path</name> <init>= <expr><call><name><name>projectSystemFile</name><operator>.</operator><name>getParent</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

			<return>return <expr><call><name><name>NLS</name>
					<operator>.</operator><name>bind</name></name><argument_list>(<argument><expr><name><name>Messages</name><operator>.</operator><name>ProjectRefreshSnapshotImportWizardPage_projectLabel</name></name></expr></argument>,
							<argument><expr><name>projectName</name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</return>
		}</block></function>
	}</block></class>

	<comment type="line">// dialog store id constants</comment>
	<decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <specifier>static</specifier> <name>String</name></type> <name>STORE_RECURSE_SUBFOLDERS</name> <init>= <expr><literal type="string">"WizardProjectRefreshSnapshotImportPage.STORE__RECURSE_SUBFOLDERS_ID"</literal></expr></init></decl>;</decl_stmt> <comment type="line">//$NON-NLS-1$</comment>

	<decl_stmt><decl><specifier>private</specifier> <type><name>Text</name></type> <name>directoryPathField</name></decl>;</decl_stmt>

	<decl_stmt><decl><specifier>private</specifier> <type><name>Text</name></type> <name>directorySnapshotPathField</name></decl>;</decl_stmt>

	<decl_stmt><decl><specifier>private</specifier> <type><name>CheckboxTreeViewer</name></type> <name>projectsList</name></decl>;</decl_stmt>

	<decl_stmt><decl><specifier>private</specifier> <type><name>Button</name></type> <name>recurseIntoSubFoldersCheckbox</name></decl>;</decl_stmt>

	<decl_stmt><decl><specifier>private</specifier> <type><name>boolean</name></type> <name>recurseIntoSubFolders</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><specifier>private</specifier> <type><name><name>ProjectRecord</name><index>[]</index></name></type> <name>selectedProjects</name> <init>= <expr><operator>new</operator> <name><name>ProjectRecord</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

	<comment type="line">// Keep track of the directory that we browsed to last time</comment>
	<comment type="line">// the wizard was invoked.</comment>
	<decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>previouslyBrowsedDirectory</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt> <comment type="line">//$NON-NLS-1$</comment>

	<decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>previouslyBrowsedSnapshotDirectory</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt> <comment type="line">//$NON-NLS-1$</comment>

	<decl_stmt><decl><specifier>private</specifier> <type><name>Button</name></type> <name>browseDirectoriesButton</name></decl>;</decl_stmt>

	<decl_stmt><decl><specifier>private</specifier> <type><name>Button</name></type> <name>browseSnapshotDirectoryButton</name></decl>;</decl_stmt>

	<decl_stmt><decl><specifier>private</specifier> <type><name><name>IProject</name><index>[]</index></name></type> <name>wsProjects</name></decl>;</decl_stmt>

	<comment type="line">// The last selected path to minimize searches</comment>
	<decl_stmt><decl><specifier>private</specifier> <type><name>String</name></type> <name>lastPath</name></decl>;</decl_stmt>

	<comment type="line">// The last time that the file or folder at the selected path was modified</comment>
	<comment type="line">// to minimize searches</comment>
	<decl_stmt><decl><specifier>private</specifier> <type><name>long</name></type> <name>lastModified</name></decl>;</decl_stmt>

	<comment type="line">// The last selected snapshot directory path</comment>
	<decl_stmt><decl><specifier>private</specifier> <type><name>String</name></type> <name>lastSnapshotPath</name></decl>;</decl_stmt>

	<comment type="line">// The last time the snapshot folder was modified</comment>
	<decl_stmt><decl><specifier>private</specifier> <type><name>long</name></type> <name>lastSnapshotModified</name></decl>;</decl_stmt>

	<comment type="block" format="javadoc">/**
	 * Creates a new project creation wizard page.
	 * 
	 */</comment>
	<constructor><specifier>public</specifier> <name>ProjectRefreshSnapshotImportWizardPage</name><parameter_list>()</parameter_list> <block>{
		<expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><literal type="string">"refreshSnapshotImportPage"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">//$NON-NLS-1$</comment>
	}</block></constructor>

	<comment type="block" format="javadoc">/**
	 * Create a new instance of the receiver.
	 * 
	 * @param pageName
	 */</comment>
	<constructor><specifier>public</specifier> <name>ProjectRefreshSnapshotImportWizardPage</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>pageName</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>pageName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>setPageComplete</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>setTitle</name><argument_list>(<argument><expr><name><name>Messages</name><operator>.</operator><name>ProjectRefreshSnapshotImportWizardPage_title</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>setDescription</name><argument_list>(<argument><expr><name><name>Messages</name><operator>.</operator><name>ProjectRefreshSnapshotImportWizardPage_description</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></constructor>

	<comment type="block">/*
	 * (non-Javadoc)
	 * 
	 * @see
	 * org.eclipse.jface.dialogs.IDialogPage#createControl(org.eclipse.swt.widgets
	 * .Composite)
	 */</comment>
	<function><specifier>public</specifier> <type><name>void</name></type> <name>createControl</name><parameter_list>(<parameter><decl><type><name>Composite</name></type> <name>parent</name></decl></parameter>)</parameter_list> <block>{

		<expr_stmt><expr><call><name>initializeDialogUnits</name><argument_list>(<argument><expr><name>parent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<decl_stmt><decl><type><name>Composite</name></type> <name>workArea</name> <init>= <expr><operator>new</operator> <call><name>Composite</name><argument_list>(<argument><expr><name>parent</name></expr></argument>, <argument><expr><name><name>SWT</name><operator>.</operator><name>NONE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>setControl</name><argument_list>(<argument><expr><name>workArea</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name><name>workArea</name><operator>.</operator><name>setLayout</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>GridLayout</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>workArea</name><operator>.</operator><name>setLayoutData</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>GridData</name><argument_list>(<argument><expr><name><name>GridData</name><operator>.</operator><name>FILL_BOTH</name></name>
				<operator>|</operator> <name><name>GridData</name><operator>.</operator><name>GRAB_HORIZONTAL</name></name> <operator>|</operator> <name><name>GridData</name><operator>.</operator><name>GRAB_VERTICAL</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>createProjectsRoot</name><argument_list>(<argument><expr><name>workArea</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>createProjectsList</name><argument_list>(<argument><expr><name>workArea</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>createOptionsArea</name><argument_list>(<argument><expr><name>workArea</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>createSnapshotArea</name><argument_list>(<argument><expr><name>workArea</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>restoreWidgetValues</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>Dialog</name><operator>.</operator><name>applyDialogFont</name></name><argument_list>(<argument><expr><name>workArea</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	}</block></function>

	<function><specifier>private</specifier> <type><name>void</name></type> <name>checkForComplete</name><parameter_list>()</parameter_list> <block>{
		<if>if <condition>(<expr><call><name><name>projectsList</name><operator>.</operator><name>getCheckedElements</name></name><argument_list>()</argument_list></call><operator>.</operator><name>length</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
			<decl_stmt><decl><type><name>String</name></type> <name>path</name> <init>= <expr><call><name><name>directorySnapshotPathField</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>trim</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
			<if>if <condition>(<expr><call><name><name>path</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
				<decl_stmt><decl><type><name>File</name></type> <name>dirpath</name> <init>= <expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<if>if <condition>(<expr><call><name><name>dirpath</name><operator>.</operator><name>exists</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
					<expr_stmt><expr><call><name>setPageComplete</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<return>return;</return>
				}</block></then></if>
			}</block></then></if>
		}</block></then></if>

		<expr_stmt><expr><call><name>setPageComplete</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Create the checkbox list for the found projects.
	 * 
	 * @param workArea
	 */</comment>
	<function><specifier>private</specifier> <type><name>void</name></type> <name>createProjectsList</name><parameter_list>(<parameter><decl><type><name>Composite</name></type> <name>workArea</name></decl></parameter>)</parameter_list> <block>{

		<decl_stmt><decl><type><name>Label</name></type> <name>title</name> <init>= <expr><operator>new</operator> <call><name>Label</name><argument_list>(<argument><expr><name>workArea</name></expr></argument>, <argument><expr><name><name>SWT</name><operator>.</operator><name>NONE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>title</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><name><name>Messages</name><operator>.</operator><name>ProjectRefreshSnapshotImportWizardPage_selectProject</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<decl_stmt><decl><type><name>Composite</name></type> <name>listComposite</name> <init>= <expr><operator>new</operator> <call><name>Composite</name><argument_list>(<argument><expr><name>workArea</name></expr></argument>, <argument><expr><name><name>SWT</name><operator>.</operator><name>NONE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>GridLayout</name></type> <name>layout</name> <init>= <expr><operator>new</operator> <call><name>GridLayout</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name><name>layout</name><operator>.</operator><name>numColumns</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>layout</name><operator>.</operator><name>marginWidth</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>layout</name><operator>.</operator><name>makeColumnsEqualWidth</name></name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>listComposite</name><operator>.</operator><name>setLayout</name></name><argument_list>(<argument><expr><name>layout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name><name>listComposite</name><operator>.</operator><name>setLayoutData</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>GridData</name><argument_list>(<argument><expr><name><name>GridData</name><operator>.</operator><name>GRAB_HORIZONTAL</name></name>
				<operator>|</operator> <name><name>GridData</name><operator>.</operator><name>GRAB_VERTICAL</name></name> <operator>|</operator> <name><name>GridData</name><operator>.</operator><name>FILL_BOTH</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>projectsList</name> <operator>=</operator> <operator>new</operator> <call><name>CheckboxTreeViewer</name><argument_list>(<argument><expr><name>listComposite</name></expr></argument>, <argument><expr><name><name>SWT</name><operator>.</operator><name>BORDER</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>GridData</name></type> <name>listData</name> <init>= <expr><operator>new</operator> <call><name>GridData</name><argument_list>(<argument><expr><name><name>GridData</name><operator>.</operator><name>GRAB_HORIZONTAL</name></name>
				<operator>|</operator> <name><name>GridData</name><operator>.</operator><name>GRAB_VERTICAL</name></name> <operator>|</operator> <name><name>GridData</name><operator>.</operator><name>FILL_BOTH</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name><name>listData</name><operator>.</operator><name>heightHint</name></name> <operator>=</operator> <literal type="number">100</literal></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>projectsList</name><operator>.</operator><name>getControl</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>setLayoutData</name><argument_list>(<argument><expr><name>listData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name><name>projectsList</name><operator>.</operator><name>setContentProvider</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>ITreeContentProvider</name></super><argument_list>()</argument_list> <block>{

			<comment type="block">/*
			 * (non-Javadoc)
			 * 
			 * @see
			 * org.eclipse.jface.viewers.ITreeContentProvider#getChildren(java
			 * .lang.Object)
			 */</comment>
			<function><specifier>public</specifier> <type><name><name>Object</name><index>[]</index></name></type> <name>getChildren</name><parameter_list>(<parameter><decl><type><name>Object</name></type> <name>parentElement</name></decl></parameter>)</parameter_list> <block>{
				<return>return <expr><literal type="null">null</literal></expr>;</return>
			}</block></function>

			<comment type="block">/*
			 * (non-Javadoc)
			 * 
			 * @see
			 * org.eclipse.jface.viewers.IStructuredContentProvider#getElements
			 * (java.lang.Object)
			 */</comment>
			<function><specifier>public</specifier> <type><name><name>Object</name><index>[]</index></name></type> <name>getElements</name><parameter_list>(<parameter><decl><type><name>Object</name></type> <name>inputElement</name></decl></parameter>)</parameter_list> <block>{
				<return>return <expr><call><name>getValidProjects</name><argument_list>()</argument_list></call></expr>;</return>
			}</block></function>

			<comment type="block">/*
			 * (non-Javadoc)
			 * 
			 * @see
			 * org.eclipse.jface.viewers.ITreeContentProvider#hasChildren(java
			 * .lang.Object)
			 */</comment>
			<function><specifier>public</specifier> <type><name>boolean</name></type> <name>hasChildren</name><parameter_list>(<parameter><decl><type><name>Object</name></type> <name>element</name></decl></parameter>)</parameter_list> <block>{
				<return>return <expr><literal type="boolean">false</literal></expr>;</return>
			}</block></function>

			<comment type="block">/*
			 * (non-Javadoc)
			 * 
			 * @see
			 * org.eclipse.jface.viewers.ITreeContentProvider#getParent(java
			 * .lang.Object)
			 */</comment>
			<function><specifier>public</specifier> <type><name>Object</name></type> <name>getParent</name><parameter_list>(<parameter><decl><type><name>Object</name></type> <name>element</name></decl></parameter>)</parameter_list> <block>{
				<return>return <expr><literal type="null">null</literal></expr>;</return>
			}</block></function>

			<comment type="block">/*
			 * (non-Javadoc)
			 * 
			 * @see org.eclipse.jface.viewers.IContentProvider#dispose()
			 */</comment>
			<function><specifier>public</specifier> <type><name>void</name></type> <name>dispose</name><parameter_list>()</parameter_list> <block>{

			}</block></function>

			<comment type="block">/*
			 * (non-Javadoc)
			 * 
			 * @see
			 * org.eclipse.jface.viewers.IContentProvider#inputChanged(org.eclipse
			 * .jface.viewers.Viewer, java.lang.Object, java.lang.Object)
			 */</comment>
			<function><specifier>public</specifier> <type><name>void</name></type> <name>inputChanged</name><parameter_list>(<parameter><decl><type><name>Viewer</name></type> <name>viewer</name></decl></parameter>, <parameter><decl><type><name>Object</name></type> <name>oldInput</name></decl></parameter>,
					<parameter><decl><type><name>Object</name></type> <name>newInput</name></decl></parameter>)</parameter_list> <block>{
			}</block></function>

		}</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name><name>projectsList</name><operator>.</operator><name>setLabelProvider</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>LabelProvider</name></super><argument_list>()</argument_list> <block>{
			<comment type="block">/*
			 * (non-Javadoc)
			 * 
			 * @see
			 * org.eclipse.jface.viewers.LabelProvider#getText(java.lang.Object)
			 */</comment>
			<function><specifier>public</specifier> <type><name>String</name></type> <name>getText</name><parameter_list>(<parameter><decl><type><name>Object</name></type> <name>element</name></decl></parameter>)</parameter_list> <block>{
				<return>return <expr><operator>(</operator><operator>(</operator><name>ProjectRecord</name><operator>)</operator> <name>element</name><operator>)</operator><operator>.</operator><call><name>getProjectLabel</name><argument_list>()</argument_list></call></expr>;</return>
			}</block></function>
		}</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name><name>projectsList</name><operator>.</operator><name>addCheckStateListener</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>ICheckStateListener</name></super><argument_list>()</argument_list> <block>{
			<comment type="block">/*
			 * (non-Javadoc)
			 * 
			 * @see
			 * org.eclipse.jface.viewers.ICheckStateListener#checkStateChanged
			 * (org.eclipse.jface.viewers.CheckStateChangedEvent)
			 */</comment>
			<function><specifier>public</specifier> <type><name>void</name></type> <name>checkStateChanged</name><parameter_list>(<parameter><decl><type><name>CheckStateChangedEvent</name></type> <name>event</name></decl></parameter>)</parameter_list> <block>{
				<expr_stmt><expr><call><name>checkForComplete</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			}</block></function>
		}</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name><name>projectsList</name><operator>.</operator><name>setInput</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>projectsList</name><operator>.</operator><name>setComparator</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>ViewerComparator</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Create the area to specify the snapshot directory.
	 * 
	 * @param workArea
	 */</comment>
	<function><specifier>private</specifier> <type><name>void</name></type> <name>createSnapshotArea</name><parameter_list>(<parameter><decl><type><name>Composite</name></type> <name>workArea</name></decl></parameter>)</parameter_list> <block>{

		<comment type="line">// project specification group</comment>
		<decl_stmt><decl><type><name>Composite</name></type> <name>projectGroup</name> <init>= <expr><operator>new</operator> <call><name>Composite</name><argument_list>(<argument><expr><name>workArea</name></expr></argument>, <argument><expr><name><name>SWT</name><operator>.</operator><name>NONE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>GridLayout</name></type> <name>layout</name> <init>= <expr><operator>new</operator> <call><name>GridLayout</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name><name>layout</name><operator>.</operator><name>numColumns</name></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>layout</name><operator>.</operator><name>makeColumnsEqualWidth</name></name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>layout</name><operator>.</operator><name>marginWidth</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>projectGroup</name><operator>.</operator><name>setLayout</name></name><argument_list>(<argument><expr><name>layout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>projectGroup</name><operator>.</operator><name>setLayoutData</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>GridData</name><argument_list>(<argument><expr><name><name>GridData</name><operator>.</operator><name>FILL_HORIZONTAL</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<decl_stmt><decl><type><name>Label</name></type> <name>title</name> <init>= <expr><operator>new</operator> <call><name>Label</name><argument_list>(<argument><expr><name>projectGroup</name></expr></argument>, <argument><expr><name><name>SWT</name><operator>.</operator><name>NONE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>title</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><name><name>Messages</name><operator>.</operator><name>ProjectRefreshSnapshotImportWizardPage_selectSnapshot</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="line">// refresh snapshot directory location entry field</comment>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>directorySnapshotPathField</name></name> <operator>=</operator> <operator>new</operator> <call><name>Text</name><argument_list>(<argument><expr><name>projectGroup</name></expr></argument>, <argument><expr><name><name>SWT</name><operator>.</operator><name>BORDER</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>directorySnapshotPathField</name><operator>.</operator><name>setLayoutData</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>GridData</name><argument_list>(
				<argument><expr><name><name>GridData</name><operator>.</operator><name>FILL_HORIZONTAL</name></name> <operator>|</operator> <name><name>GridData</name><operator>.</operator><name>GRAB_HORIZONTAL</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="line">// browse button</comment>
		<expr_stmt><expr><name>browseSnapshotDirectoryButton</name> <operator>=</operator> <operator>new</operator> <call><name>Button</name><argument_list>(<argument><expr><name>projectGroup</name></expr></argument>, <argument><expr><name><name>SWT</name><operator>.</operator><name>PUSH</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>browseSnapshotDirectoryButton</name>
				<operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><name><name>Messages</name><operator>.</operator><name>ProjectRefreshSnapshotImportWizardPage_snapshotBrowse</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>setButtonLayoutData</name><argument_list>(<argument><expr><name>browseSnapshotDirectoryButton</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name><name>browseSnapshotDirectoryButton</name>
				<operator>.</operator><name>addSelectionListener</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>SelectionAdapter</name></super><argument_list>()</argument_list> <block>{
					<comment type="block">/*
					 * (non-Javadoc)
					 * 
					 * @see org.eclipse.swt.events.SelectionAdapter#widgetS
					 * elected(org.eclipse.swt.events.SelectionEvent)
					 */</comment>
					<function><specifier>public</specifier> <type><name>void</name></type> <name>widgetSelected</name><parameter_list>(<parameter><decl><type><name>SelectionEvent</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
						<expr_stmt><expr><call><name>handleLocationSnapshotDirectoryButtonPressed</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
					}</block></function>
				}</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name><name>directorySnapshotPathField</name><operator>.</operator><name>addTraverseListener</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>TraverseListener</name></super><argument_list>()</argument_list> <block>{

			<comment type="block">/*
			 * (non-Javadoc)
			 * 
			 * @see org.eclipse.swt.events.TraverseListener#keyTraversed(
			 * org.eclipse.swt.events.TraverseEvent)
			 */</comment>
			<function><specifier>public</specifier> <type><name>void</name></type> <name>keyTraversed</name><parameter_list>(<parameter><decl><type><name>TraverseEvent</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
				<if>if <condition>(<expr><name><name>e</name><operator>.</operator><name>detail</name></name> <operator>==</operator> <name><name>SWT</name><operator>.</operator><name>TRAVERSE_RETURN</name></name></expr>)</condition><then> <block>{
					<expr_stmt><expr><name><name>e</name><operator>.</operator><name>doit</name></name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>updateSnapshotPath</name><argument_list>(<argument><expr><call><name><name>directorySnapshotPathField</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call>
							<operator>.</operator><call><name>trim</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>checkForComplete</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				}</block></then></if>
			}</block></function>

		}</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name><name>directorySnapshotPathField</name><operator>.</operator><name>addFocusListener</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>FocusAdapter</name></super><argument_list>()</argument_list> <block>{

			<comment type="block">/*
			 * (non-Javadoc)
			 * 
			 * @see
			 * org.eclipse.swt.events.FocusListener#focusLost(org.eclipse.swt
			 * .events.FocusEvent)
			 */</comment>
			<function><specifier>public</specifier> <type><name>void</name></type> <name>focusLost</name><parameter_list>(<parameter><decl><type><name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>swt</name><operator>.</operator><name>events</name><operator>.</operator><name>FocusEvent</name></name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
				<expr_stmt><expr><call><name>updateSnapshotPath</name><argument_list>(<argument><expr><call><name><name>directorySnapshotPathField</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>trim</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></function>

		}</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Create the area with the extra options.
	 * 
	 * @param workArea
	 */</comment>
	<function><specifier>private</specifier> <type><name>void</name></type> <name>createOptionsArea</name><parameter_list>(<parameter><decl><type><name>Composite</name></type> <name>workArea</name></decl></parameter>)</parameter_list> <block>{
		<decl_stmt><decl><type><name>Composite</name></type> <name>optionsGroup</name> <init>= <expr><operator>new</operator> <call><name>Composite</name><argument_list>(<argument><expr><name>workArea</name></expr></argument>, <argument><expr><name><name>SWT</name><operator>.</operator><name>NONE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>optionsGroup</name><operator>.</operator><name>setLayout</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>GridLayout</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>optionsGroup</name><operator>.</operator><name>setLayoutData</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>GridData</name><argument_list>(<argument><expr><name><name>GridData</name><operator>.</operator><name>FILL_HORIZONTAL</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>recurseIntoSubFoldersCheckbox</name> <operator>=</operator> <operator>new</operator> <call><name>Button</name><argument_list>(<argument><expr><name>optionsGroup</name></expr></argument>, <argument><expr><name><name>SWT</name><operator>.</operator><name>CHECK</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>recurseIntoSubFoldersCheckbox</name>
				<operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><name><name>Messages</name><operator>.</operator><name>ProjectRefreshSnapshotImportWizardPage_recurse</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>recurseIntoSubFoldersCheckbox</name><operator>.</operator><name>setLayoutData</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>GridData</name><argument_list>(
				<argument><expr><name><name>GridData</name><operator>.</operator><name>FILL_HORIZONTAL</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>recurseIntoSubFoldersCheckbox</name>
				<operator>.</operator><name>addSelectionListener</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>SelectionAdapter</name></super><argument_list>()</argument_list> <block>{
					<function><specifier>public</specifier> <type><name>void</name></type> <name>widgetSelected</name><parameter_list>(<parameter><decl><type><name>SelectionEvent</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
						<expr_stmt><expr><name>recurseIntoSubFolders</name> <operator>=</operator> <call><name><name>recurseIntoSubFoldersCheckbox</name>
								<operator>.</operator><name>getSelection</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><name>lastPath</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt> <comment type="line">// force update</comment>
						<expr_stmt><expr><call><name>updateProjectsList</name><argument_list>(<argument><expr><call><name><name>directoryPathField</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>trim</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></function>
				}</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Create the area where you select the root directory for the projects.
	 * 
	 * @param workArea
	 *            Composite
	 */</comment>
	<function><specifier>private</specifier> <type><name>void</name></type> <name>createProjectsRoot</name><parameter_list>(<parameter><decl><type><name>Composite</name></type> <name>workArea</name></decl></parameter>)</parameter_list> <block>{

		<comment type="line">// project specification group</comment>
		<decl_stmt><decl><type><name>Composite</name></type> <name>projectGroup</name> <init>= <expr><operator>new</operator> <call><name>Composite</name><argument_list>(<argument><expr><name>workArea</name></expr></argument>, <argument><expr><name><name>SWT</name><operator>.</operator><name>NONE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>GridLayout</name></type> <name>layout</name> <init>= <expr><operator>new</operator> <call><name>GridLayout</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name><name>layout</name><operator>.</operator><name>numColumns</name></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>layout</name><operator>.</operator><name>makeColumnsEqualWidth</name></name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>layout</name><operator>.</operator><name>marginWidth</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>projectGroup</name><operator>.</operator><name>setLayout</name></name><argument_list>(<argument><expr><name>layout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>projectGroup</name><operator>.</operator><name>setLayoutData</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>GridData</name><argument_list>(<argument><expr><name><name>GridData</name><operator>.</operator><name>FILL_HORIZONTAL</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<decl_stmt><decl><type><name>Label</name></type> <name>dirTitle</name> <init>= <expr><operator>new</operator> <call><name>Label</name><argument_list>(<argument><expr><name>projectGroup</name></expr></argument>, <argument><expr><name><name>SWT</name><operator>.</operator><name>NONE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>dirTitle</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><name><name>Messages</name><operator>.</operator><name>ProjectRefreshSnapshotImportWizardPage_sourceDirectory</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="line">// project location entry field</comment>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>directoryPathField</name></name> <operator>=</operator> <operator>new</operator> <call><name>Text</name><argument_list>(<argument><expr><name>projectGroup</name></expr></argument>, <argument><expr><name><name>SWT</name><operator>.</operator><name>BORDER</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>directoryPathField</name><operator>.</operator><name>setLayoutData</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>GridData</name><argument_list>(
				<argument><expr><name><name>GridData</name><operator>.</operator><name>FILL_HORIZONTAL</name></name> <operator>|</operator> <name><name>GridData</name><operator>.</operator><name>GRAB_HORIZONTAL</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="line">// browse button</comment>
		<expr_stmt><expr><name>browseDirectoriesButton</name> <operator>=</operator> <operator>new</operator> <call><name>Button</name><argument_list>(<argument><expr><name>projectGroup</name></expr></argument>, <argument><expr><name><name>SWT</name><operator>.</operator><name>PUSH</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>browseDirectoriesButton</name>
				<operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><name><name>Messages</name><operator>.</operator><name>ProjectRefreshSnapshotImportWizardPage_sourceBrowse</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>setButtonLayoutData</name><argument_list>(<argument><expr><name>browseDirectoriesButton</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name><name>browseDirectoriesButton</name><operator>.</operator><name>addSelectionListener</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>SelectionAdapter</name></super><argument_list>()</argument_list> <block>{
			<comment type="block">/*
			 * (non-Javadoc)
			 * 
			 * @see org.eclipse.swt.events.SelectionAdapter#widgetS
			 * elected(org.eclipse.swt.events.SelectionEvent)
			 */</comment>
			<function><specifier>public</specifier> <type><name>void</name></type> <name>widgetSelected</name><parameter_list>(<parameter><decl><type><name>SelectionEvent</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
				<expr_stmt><expr><call><name>handleLocationDirectoryButtonPressed</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			}</block></function>

		}</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name><name>directoryPathField</name><operator>.</operator><name>addTraverseListener</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>TraverseListener</name></super><argument_list>()</argument_list> <block>{

			<comment type="block">/*
			 * (non-Javadoc)
			 * 
			 * @see
			 * org.eclipse.swt.events.TraverseListener#keyTraversed(org.eclipse
			 * .swt.events.TraverseEvent)
			 */</comment>
			<function><specifier>public</specifier> <type><name>void</name></type> <name>keyTraversed</name><parameter_list>(<parameter><decl><type><name>TraverseEvent</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
				<if>if <condition>(<expr><name><name>e</name><operator>.</operator><name>detail</name></name> <operator>==</operator> <name><name>SWT</name><operator>.</operator><name>TRAVERSE_RETURN</name></name></expr>)</condition><then> <block>{
					<expr_stmt><expr><name><name>e</name><operator>.</operator><name>doit</name></name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>updateProjectsList</name><argument_list>(<argument><expr><call><name><name>directoryPathField</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>trim</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then></if>
			}</block></function>

		}</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name><name>directoryPathField</name><operator>.</operator><name>addFocusListener</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>FocusAdapter</name></super><argument_list>()</argument_list> <block>{

			<comment type="block">/*
			 * (non-Javadoc)
			 * 
			 * @see
			 * org.eclipse.swt.events.FocusListener#focusLost(org.eclipse.swt
			 * .events.FocusEvent)
			 */</comment>
			<function><specifier>public</specifier> <type><name>void</name></type> <name>focusLost</name><parameter_list>(<parameter><decl><type><name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>swt</name><operator>.</operator><name>events</name><operator>.</operator><name>FocusEvent</name></name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
				<expr_stmt><expr><call><name>updateProjectsList</name><argument_list>(<argument><expr><call><name><name>directoryPathField</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>trim</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></function>

		}</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<comment type="block">/*
	 * (non-Javadoc) Method declared on IDialogPage. Set the focus on path
	 * fields when page becomes visible.
	 */</comment>
	<function><specifier>public</specifier> <type><name>void</name></type> <name>setVisible</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>visible</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>setVisible</name></name><argument_list>(<argument><expr><name>visible</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if>if <condition>(<expr><name>visible</name></expr>)</condition><then> <block>{
			<expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>directoryPathField</name><operator>.</operator><name>setFocus</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>
	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Update the list of projects based on path. Method declared public only
	 * for test suite.
	 * 
	 * @param path
	 */</comment>
	<function><specifier>public</specifier> <type><name>void</name></type> <name>updateProjectsList</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>String</name></type> <name>path</name></decl></parameter>)</parameter_list> <block>{
		<comment type="line">// on an empty path empty selectedProjects</comment>
		<if>if <condition>(<expr><name>path</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <call><name><name>path</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
			<expr_stmt><expr><call><name>setMessage</name><argument_list>(<argument><expr><name><name>Messages</name><operator>.</operator><name>ProjectRefreshSnapshotImportWizardPage_selectProjects</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>selectedProjects</name> <operator>=</operator> <operator>new</operator> <name><name>ProjectRecord</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>projectsList</name><operator>.</operator><name>refresh</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>projectsList</name><operator>.</operator><name>setCheckedElements</name></name><argument_list>(<argument><expr><name>selectedProjects</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>checkForComplete</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>lastPath</name> <operator>=</operator> <name>path</name></expr>;</expr_stmt>
			<return>return;</return>
		}</block></then></if>

		<decl_stmt><decl><type><specifier>final</specifier> <name>File</name></type> <name>directory</name> <init>= <expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>long</name></type> <name>modified</name> <init>= <expr><call><name><name>directory</name><operator>.</operator><name>lastModified</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<if>if <condition>(<expr><call><name><name>path</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>lastPath</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>lastModified</name> <operator>==</operator> <name>modified</name></expr>)</condition><then> <block>{
			<comment type="line">// since the file/folder was not modified and the path did not</comment>
			<comment type="line">// change, no refreshing is required</comment>
			<return>return;</return>
		}</block></then></if>

		<expr_stmt><expr><name>lastPath</name> <operator>=</operator> <name>path</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>lastModified</name> <operator>=</operator> <name>modified</name></expr>;</expr_stmt>

		<try>try <block>{
			<expr_stmt><expr><call><name>getContainer</name><argument_list>()</argument_list></call><operator>.</operator><call><name>run</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><operator>new</operator> <class><super><name>IRunnableWithProgress</name></super><argument_list>()</argument_list> <block>{

				<comment type="block">/*
				 * (non-Javadoc)
				 * 
				 * @see
				 * org.eclipse.jface.operation.IRunnableWithProgress#run(org
				 * .eclipse.core.runtime.IProgressMonitor)
				 */</comment>
				<function><specifier>public</specifier> <type><name>void</name></type> <name>run</name><parameter_list>(<parameter><decl><type><name>IProgressMonitor</name></type> <name>monitor</name></decl></parameter>)</parameter_list> <block>{

					<decl_stmt><decl><type><name>boolean</name></type> <name>dirSelected</name> <init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>

					<expr_stmt><expr><call><name><name>monitor</name><operator>.</operator><name>beginTask</name></name><argument_list>(
							<argument><expr><name><name>Messages</name><operator>.</operator><name>ProjectRefreshSnapshotImportWizardPage_searching</name></name></expr></argument>,
							<argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name>selectedProjects</name> <operator>=</operator> <operator>new</operator> <name><name>ProjectRecord</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
					<decl_stmt><decl><type><name>Collection</name></type> <name>files</name> <init>= <expr><operator>new</operator> <call><name>ArrayList</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
					<expr_stmt><expr><call><name><name>monitor</name><operator>.</operator><name>worked</name></name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					<decl_stmt><decl><type><name>File</name></type> <name>dirpath</name> <init>= <expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<if>if <condition>(<expr><call><name><name>dirpath</name><operator>.</operator><name>exists</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
						<expr_stmt><expr><name>dirSelected</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
					}</block></then></if>

					<if>if <condition>(<expr><name>dirSelected</name> <operator>&amp;&amp;</operator> <call><name><name>directory</name><operator>.</operator><name>isDirectory</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{

						<if>if <condition>(<expr><operator>!</operator><call><name>collectProjectFilesFromDirectory</name><argument_list>(<argument><expr><name>files</name></expr></argument>, <argument><expr><name>directory</name></expr></argument>,
								<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>monitor</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
							<return>return;</return>
						}</block></then></if>
						<decl_stmt><decl><type><name>Iterator</name></type> <name>filesIterator</name> <init>= <expr><call><name><name>files</name><operator>.</operator><name>iterator</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
						<expr_stmt><expr><name>selectedProjects</name> <operator>=</operator> <operator>new</operator> <name><name>ProjectRecord</name><index>[<expr><call><name><name>files</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>]</index></name></expr>;</expr_stmt>
						<decl_stmt><decl><type><name>int</name></type> <name>index</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
						<expr_stmt><expr><call><name><name>monitor</name><operator>.</operator><name>worked</name></name><argument_list>(<argument><expr><literal type="number">50</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name><name>monitor</name><operator>.</operator><name>subTask</name></name><argument_list>(<argument><expr><name><name>Messages</name><operator>.</operator><name>ProjectRefreshSnapshotImportWizardPage_processing</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<while>while <condition>(<expr><call><name><name>filesIterator</name><operator>.</operator><name>hasNext</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
							<decl_stmt><decl><type><name>File</name></type> <name>file</name> <init>= <expr><operator>(</operator><name>File</name><operator>)</operator> <call><name><name>filesIterator</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
							<expr_stmt><expr><name><name>selectedProjects</name><index>[<expr><name>index</name></expr>]</index></name> <operator>=</operator> <operator>new</operator> <call><name>ProjectRecord</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							<expr_stmt><expr><name>index</name><operator>++</operator></expr>;</expr_stmt>
						}</block></while>
					}</block></then> <else>else <block>{
						<expr_stmt><expr><call><name><name>monitor</name><operator>.</operator><name>worked</name></name><argument_list>(<argument><expr><literal type="number">60</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></else></if>
					<expr_stmt><expr><call><name><name>monitor</name><operator>.</operator><name>done</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				}</block></function>

			}</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>InvocationTargetException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
			<expr_stmt><expr><call><name><name>IDEWorkbenchPlugin</name><operator>.</operator><name>log</name></name><argument_list>(<argument><expr><call><name><name>e</name><operator>.</operator><name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></catch> <catch>catch <parameter_list>(<parameter><decl><type><name>InterruptedException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
			<comment type="line">// Nothing to do if the user interrupts.</comment>
		}</block></catch></try>

		<expr_stmt><expr><call><name><name>projectsList</name><operator>.</operator><name>refresh</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>projectsList</name><operator>.</operator><name>setCheckedElements</name></name><argument_list>(<argument><expr><call><name>getValidProjects</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if>if <condition>(<expr><call><name>getValidProjects</name><argument_list>()</argument_list></call><operator>.</operator><name>length</name> <operator>&lt;</operator> <name><name>selectedProjects</name><operator>.</operator><name>length</name></name></expr>)</condition><then> <block>{
			<expr_stmt><expr><call><name>setMessage</name><argument_list>(
					<argument><expr><name><name>Messages</name><operator>.</operator><name>ProjectRefreshSnapshotImportWizardPage_hiddenProjects</name></name></expr></argument>,
					<argument><expr><name>WARNING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then> <else>else <block>{
			<expr_stmt><expr><call><name>setMessage</name><argument_list>(<argument><expr><name><name>Messages</name><operator>.</operator><name>ProjectRefreshSnapshotImportWizardPage_description</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></else></if>
		<expr_stmt><expr><call><name>checkForComplete</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Update the refresh snapshot directory if it has changed. Causes the
	 * projects list to be updated as well, if it has changed.
	 * 
	 * @param path
	 */</comment>
	<function><specifier>private</specifier> <type><name>void</name></type> <name>updateSnapshotPath</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>String</name></type> <name>path</name></decl></parameter>)</parameter_list> <block>{
		<comment type="line">// on an empty path empty selectedProjects</comment>
		<if>if <condition>(<expr><name>path</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <call><name><name>path</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
			<expr_stmt><expr><call><name>setMessage</name><argument_list>(<argument><expr><name><name>Messages</name><operator>.</operator><name>ProjectRefreshSnapshotImportWizardPage_selectProjects</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>selectedProjects</name> <operator>=</operator> <operator>new</operator> <name><name>ProjectRecord</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>projectsList</name><operator>.</operator><name>refresh</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>projectsList</name><operator>.</operator><name>setCheckedElements</name></name><argument_list>(<argument><expr><name>selectedProjects</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>checkForComplete</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>lastPath</name> <operator>=</operator> <name>path</name></expr>;</expr_stmt>
			<return>return;</return>
		}</block></then></if>

		<decl_stmt><decl><type><specifier>final</specifier> <name>File</name></type> <name>directory</name> <init>= <expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>long</name></type> <name>modified</name> <init>= <expr><call><name><name>directory</name><operator>.</operator><name>lastModified</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<if>if <condition>(<expr><call><name><name>path</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>lastSnapshotPath</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>lastSnapshotModified</name> <operator>==</operator> <name>modified</name></expr>)</condition><then> <block>{
			<comment type="line">// since the file/folder was not modified and the path did not</comment>
			<comment type="line">// change, no refreshing is required</comment>
			<return>return;</return>
		}</block></then></if>

		<expr_stmt><expr><name>lastSnapshotPath</name> <operator>=</operator> <name>path</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>lastSnapshotModified</name> <operator>=</operator> <name>modified</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>lastPath</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt> <comment type="line">// force update of projects list</comment>
		<expr_stmt><expr><call><name>updateProjectsList</name><argument_list>(<argument><expr><call><name><name>directoryPathField</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>trim</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>checkForComplete</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Display an error dialog with the specified message.
	 * 
	 * @param message
	 *            the error message
	 */</comment>
	<function><specifier>protected</specifier> <type><name>void</name></type> <name>displayErrorDialog</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>message</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><call><name><name>MessageDialog</name><operator>.</operator><name>openError</name></name><argument_list>(<argument><expr><call><name>getContainer</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getShell</name><argument_list>()</argument_list></call></expr></argument>,
				<argument><expr><call><name>getErrorDialogTitle</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Get the title for an error dialog. Subclasses should override.
	 */</comment>
	<function><specifier>protected</specifier> <type><name>String</name></type> <name>getErrorDialogTitle</name><parameter_list>()</parameter_list> <block>{
		<return>return <expr><name><name>Messages</name><operator>.</operator><name>ProjectRefreshSnapshotImportWizardPage_internalError</name></name></expr>;</return>
	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Get the title for an error dialog. Subclasses should override.
	 */</comment>
	<function><specifier>protected</specifier> <type><name>String</name></type> <name>getInformationDialogTitle</name><parameter_list>()</parameter_list> <block>{
		<return>return <expr><name><name>Messages</name><operator>.</operator><name>ProjectRefreshSnapshotImportWizardPage_snapshotError</name></name></expr>;</return>
	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Collect the list of .project files that are under directory into files.
	 * To avoid potential performance degradation on slow file systems, by
	 * default only the files in this directory are collected; no recursion into
	 * sub-directories is performed unless the user checks the "recurse into
	 * subfolders" flag.
	 * 
	 * @param files
	 * @param directory
	 * @param monitor
	 *            The monitor to report to
	 * @return boolean &lt;code&gt;true&lt;/code&gt; if the operation was completed.
	 */</comment>
	<function><specifier>private</specifier> <type><name>boolean</name></type> <name>collectProjectFilesFromDirectory</name><parameter_list>(<parameter><decl><type><name>Collection</name></type> <name>files</name></decl></parameter>,
			<parameter><decl><type><name>File</name></type> <name>directory</name></decl></parameter>, <parameter><decl><type><name>Set</name></type> <name>directoriesVisited</name></decl></parameter>, <parameter><decl><type><name>IProgressMonitor</name></type> <name>monitor</name></decl></parameter>)</parameter_list> <block>{

		<if>if <condition>(<expr><call><name><name>monitor</name><operator>.</operator><name>isCanceled</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
			<return>return <expr><literal type="boolean">false</literal></expr>;</return>
		}</block></then></if>
		<expr_stmt><expr><call><name><name>monitor</name><operator>.</operator><name>subTask</name></name><argument_list>(<argument><expr><call><name><name>NLS</name><operator>.</operator><name>bind</name></name><argument_list>(
				<argument><expr><name><name>Messages</name><operator>.</operator><name>ProjectRefreshSnapshotImportWizardPage_checking</name></name></expr></argument>,
				<argument><expr><call><name><name>directory</name><operator>.</operator><name>getPath</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name><name>File</name><index>[]</index></name></type> <name>contents</name> <init>= <expr><call><name><name>directory</name><operator>.</operator><name>listFiles</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<if>if <condition>(<expr><name>contents</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then>
			<block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr>;</return></block></then></if>

		<comment type="line">// Initialize recursion guard for recursive symbolic links</comment>
		<if>if <condition>(<expr><name>directoriesVisited</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
			<expr_stmt><expr><name>directoriesVisited</name> <operator>=</operator> <operator>new</operator> <call><name>HashSet</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<try>try <block>{
				<expr_stmt><expr><call><name><name>directoriesVisited</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>directory</name><operator>.</operator><name>getCanonicalPath</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>exception</name></decl></parameter>)</parameter_list> <block>{
				<expr_stmt><expr><call><name><name>StatusManager</name><operator>.</operator><name>getManager</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>handle</name><argument_list>(
						<argument><expr><call><name><name>StatusUtil</name><operator>.</operator><name>newStatus</name></name><argument_list>(<argument><expr><name><name>IStatus</name><operator>.</operator><name>ERROR</name></name></expr></argument>,
								<argument><expr><call><name><name>exception</name><operator>.</operator><name>getLocalizedMessage</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>exception</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></catch></try>
		}</block></then></if>

		<comment type="line">// first look for project description files</comment>
		<decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>dotProject</name> <init>= <expr><name><name>IProjectDescription</name><operator>.</operator><name>DESCRIPTION_FILE_NAME</name></name></expr></init></decl>;</decl_stmt>
		<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>contents</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
			<decl_stmt><decl><type><name>File</name></type> <name>file</name> <init>= <expr><name><name>contents</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
			<if>if <condition>(<expr><call><name><name>file</name><operator>.</operator><name>isFile</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>file</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name>dotProject</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
				<expr_stmt><expr><call><name><name>files</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<comment type="line">// don't search sub-directories since we can't have nested</comment>
				<comment type="line">// projects</comment>
				<return>return <expr><literal type="boolean">true</literal></expr>;</return>
			}</block></then></if>
		}</block></for>
		<if>if <condition>(<expr><operator>!</operator><name>recurseIntoSubFolders</name></expr>)</condition><then>
			<block type="pseudo"><return>return <expr><literal type="boolean">true</literal></expr>;</return></block></then></if>
		<comment type="line">// no project description found, so recurse into sub-directories</comment>
		<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>contents</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
			<if>if <condition>(<expr><name><name>contents</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>isDirectory</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
				<if>if <condition>(<expr><operator>!</operator><name><name>contents</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>getName</name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name>METADATA_FOLDER</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
					<try>try <block>{
						<decl_stmt><decl><type><name>String</name></type> <name>canonicalPath</name> <init>= <expr><name><name>contents</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>getCanonicalPath</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
						<if>if <condition>(<expr><operator>!</operator><call><name><name>directoriesVisited</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>canonicalPath</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
							<comment type="line">// already been here --&gt; do not recurse</comment>
							<continue>continue;</continue>
						}</block></then></if>
					}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>exception</name></decl></parameter>)</parameter_list> <block>{
						<expr_stmt><expr><call><name><name>StatusManager</name><operator>.</operator><name>getManager</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>handle</name><argument_list>(
								<argument><expr><call><name><name>StatusUtil</name><operator>.</operator><name>newStatus</name></name><argument_list>(<argument><expr><name><name>IStatus</name><operator>.</operator><name>ERROR</name></name></expr></argument>,
										<argument><expr><call><name><name>exception</name><operator>.</operator><name>getLocalizedMessage</name></name><argument_list>()</argument_list></call></expr></argument>,
										<argument><expr><name>exception</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					}</block></catch></try>
					<expr_stmt><expr><call><name>collectProjectFilesFromDirectory</name><argument_list>(<argument><expr><name>files</name></expr></argument>, <argument><expr><name><name>contents</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,
							<argument><expr><name>directoriesVisited</name></expr></argument>, <argument><expr><name>monitor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then></if>
			}</block></then></if>
		}</block></for>
		<return>return <expr><literal type="boolean">true</literal></expr>;</return>
	}</block></function>

	<comment type="block" format="javadoc">/**
	 * The browse button has been selected. Select the location.
	 */</comment>
	<function><specifier>protected</specifier> <type><name>void</name></type> <name>handleLocationDirectoryButtonPressed</name><parameter_list>()</parameter_list> <block>{

		<decl_stmt><decl><type><name>DirectoryDialog</name></type> <name>dialog</name> <init>= <expr><operator>new</operator> <call><name>DirectoryDialog</name><argument_list>(
				<argument><expr><call><name><name>directoryPathField</name><operator>.</operator><name>getShell</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>dialog</name><operator>.</operator><name>setMessage</name></name><argument_list>(<argument><expr><name><name>Messages</name><operator>.</operator><name>ProjectRefreshSnapshotImportWizardPage_browseSource</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<decl_stmt><decl><type><name>String</name></type> <name>dirName</name> <init>= <expr><call><name><name>directoryPathField</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>trim</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<if>if <condition>(<expr><call><name><name>dirName</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
			<expr_stmt><expr><name>dirName</name> <operator>=</operator> <name>previouslyBrowsedDirectory</name></expr>;</expr_stmt>
		}</block></then></if>

		<if>if <condition>(<expr><call><name><name>dirName</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
			<expr_stmt><expr><call><name><name>dialog</name><operator>.</operator><name>setFilterPath</name></name><argument_list>(<argument><expr><call><name><name>IDEWorkbenchPlugin</name><operator>.</operator><name>getPluginWorkspace</name></name><argument_list>()</argument_list></call>
					<operator>.</operator><call><name>getRoot</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getLocation</name><argument_list>()</argument_list></call><operator>.</operator><call><name>toOSString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then> <else>else <block>{
			<decl_stmt><decl><type><name>File</name></type> <name>path</name> <init>= <expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><name>dirName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<if>if <condition>(<expr><call><name><name>path</name><operator>.</operator><name>exists</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
				<expr_stmt><expr><call><name><name>dialog</name><operator>.</operator><name>setFilterPath</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Path</name><argument_list>(<argument><expr><name>dirName</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>toOSString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>
		}</block></else></if>

		<decl_stmt><decl><type><name>String</name></type> <name>selectedDirectory</name> <init>= <expr><call><name><name>dialog</name><operator>.</operator><name>open</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<if>if <condition>(<expr><name>selectedDirectory</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
			<expr_stmt><expr><name>previouslyBrowsedDirectory</name> <operator>=</operator> <name>selectedDirectory</name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>directoryPathField</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><name>previouslyBrowsedDirectory</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>updateProjectsList</name><argument_list>(<argument><expr><name>selectedDirectory</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>

	}</block></function>

	<comment type="block" format="javadoc">/**
	 * The browse button has been selected. Select the location.
	 */</comment>
	<function><specifier>protected</specifier> <type><name>void</name></type> <name>handleLocationSnapshotDirectoryButtonPressed</name><parameter_list>()</parameter_list> <block>{

		<decl_stmt><decl><type><name>DirectoryDialog</name></type> <name>dialog</name> <init>= <expr><operator>new</operator> <call><name>DirectoryDialog</name><argument_list>(
				<argument><expr><call><name><name>directorySnapshotPathField</name><operator>.</operator><name>getShell</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>dialog</name><operator>.</operator><name>setMessage</name></name><argument_list>(<argument><expr><name><name>Messages</name><operator>.</operator><name>ProjectRefreshSnapshotImportWizardPage_browseSnapshot</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<decl_stmt><decl><type><name>String</name></type> <name>dirName</name> <init>= <expr><call><name><name>directorySnapshotPathField</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>trim</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<if>if <condition>(<expr><call><name><name>dirName</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
			<expr_stmt><expr><name>dirName</name> <operator>=</operator> <name>previouslyBrowsedSnapshotDirectory</name></expr>;</expr_stmt>
		}</block></then></if>

		<if>if <condition>(<expr><call><name><name>dirName</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
			<expr_stmt><expr><call><name><name>dialog</name><operator>.</operator><name>setFilterPath</name></name><argument_list>(<argument><expr><call><name><name>IDEWorkbenchPlugin</name><operator>.</operator><name>getPluginWorkspace</name></name><argument_list>()</argument_list></call>
					<operator>.</operator><call><name>getRoot</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getLocation</name><argument_list>()</argument_list></call><operator>.</operator><call><name>toOSString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then> <else>else <block>{
			<decl_stmt><decl><type><name>File</name></type> <name>path</name> <init>= <expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><name>dirName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<if>if <condition>(<expr><call><name><name>path</name><operator>.</operator><name>exists</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
				<expr_stmt><expr><call><name><name>dialog</name><operator>.</operator><name>setFilterPath</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Path</name><argument_list>(<argument><expr><name>dirName</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>toOSString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>
		}</block></else></if>

		<decl_stmt><decl><type><name>String</name></type> <name>selectedDirectory</name> <init>= <expr><call><name><name>dialog</name><operator>.</operator><name>open</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<if>if <condition>(<expr><name>selectedDirectory</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
			<expr_stmt><expr><name>previouslyBrowsedSnapshotDirectory</name> <operator>=</operator> <name>selectedDirectory</name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>directorySnapshotPathField</name>
					<operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><name>previouslyBrowsedSnapshotDirectory</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>updateSnapshotPath</name><argument_list>(<argument><expr><name>selectedDirectory</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>

	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Create the selected projects
	 * 
	 * @return boolean &lt;code&gt;true&lt;/code&gt; if all project creations were
	 *         successful.
	 */</comment>
	<function><specifier>public</specifier> <type><name>boolean</name></type> <name>createProjects</name><parameter_list>()</parameter_list> <block>{

		<expr_stmt><expr><call><name>saveWidgetValues</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

		<decl_stmt><decl><type><specifier>final</specifier> <name><name>Object</name><index>[]</index></name></type> <name>selected</name> <init>= <expr><call><name><name>projectsList</name><operator>.</operator><name>getCheckedElements</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier>final</specifier> <name>IPath</name></type> <name>snapshotPath</name> <init>= <expr><operator>new</operator> <call><name>Path</name><argument_list>(<argument><expr><call><name><name>directorySnapshotPathField</name>
				<operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>trim</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<decl_stmt><decl><type><name>WorkspaceModifyOperation</name></type> <name>op</name> <init>= <expr><operator>new</operator> <class><super><name>WorkspaceModifyOperation</name></super><argument_list>()</argument_list> <block>{
			<function><specifier>protected</specifier> <type><name>void</name></type> <name>execute</name><parameter_list>(<parameter><decl><type><name>IProgressMonitor</name></type> <name>monitor</name></decl></parameter>)</parameter_list>
					<throws>throws <argument><expr><name>InvocationTargetException</name></expr></argument>, <argument><expr><name>InterruptedException</name></expr></argument></throws> <block>{
				<try>try <block>{
					<expr_stmt><expr><call><name><name>monitor</name><operator>.</operator><name>beginTask</name></name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><name><name>selected</name><operator>.</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">//$NON-NLS-1$</comment>
					<if>if <condition>(<expr><call><name><name>monitor</name><operator>.</operator><name>isCanceled</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
						<throw>throw <expr><operator>new</operator> <call><name>OperationCanceledException</name><argument_list>()</argument_list></call></expr>;</throw>
					}</block></then></if>
					<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>selected</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
						<expr_stmt><expr><call><name>createExistingProject</name><argument_list>(<argument><expr><operator>(</operator><name>ProjectRecord</name><operator>)</operator> <name><name>selected</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,
								<argument><expr><name>snapshotPath</name></expr></argument>,
								<argument><expr><operator>new</operator> <call><name>SubProgressMonitor</name><argument_list>(<argument><expr><name>monitor</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></for>
				}</block> <finally>finally <block>{
					<expr_stmt><expr><call><name><name>monitor</name><operator>.</operator><name>done</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				}</block></finally></try>
			}</block></function>
		}</block></class></expr></init></decl>;</decl_stmt>
		<comment type="line">// run the new project creation operation</comment>
		<try>try <block>{
			<expr_stmt><expr><call><name>getContainer</name><argument_list>()</argument_list></call><operator>.</operator><call><name>run</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>InterruptedException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
			<return>return <expr><literal type="boolean">false</literal></expr>;</return>
		}</block></catch> <catch>catch <parameter_list>(<parameter><decl><type><name>InvocationTargetException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
			<comment type="line">// one of the steps resulted in a core exception</comment>
			<decl_stmt><decl><type><name>Throwable</name></type> <name>t</name> <init>= <expr><call><name><name>e</name><operator>.</operator><name>getTargetException</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>String</name></type> <name>message</name> <init>= <expr><name><name>Messages</name><operator>.</operator><name>ProjectRefreshSnapshotImportWizardPage_creationProblems</name></name></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>IStatus</name></type> <name>status</name></decl>;</decl_stmt>
			<if>if <condition>(<expr><name>t</name> <operator>instanceof</operator> <name>CoreException</name></expr>)</condition><then> <block>{
				<expr_stmt><expr><name>status</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>CoreException</name><operator>)</operator> <name>t</name><operator>)</operator><operator>.</operator><call><name>getStatus</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			}</block></then> <else>else <block>{
				<expr_stmt><expr><name>status</name> <operator>=</operator> <operator>new</operator> <call><name>Status</name><argument_list>(<argument><expr><name><name>IStatus</name><operator>.</operator><name>ERROR</name></name></expr></argument>,
						<argument><expr><name><name>IDEWorkbenchPlugin</name><operator>.</operator><name>IDE_WORKBENCH</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>message</name></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></else></if>
			<expr_stmt><expr><call><name><name>ErrorDialog</name><operator>.</operator><name>openError</name></name><argument_list>(<argument><expr><call><name>getShell</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>message</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><literal type="boolean">false</literal></expr>;</return>
		}</block></catch></try>
		<return>return <expr><literal type="boolean">true</literal></expr>;</return>
	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Performs clean-up if the user cancels the wizard without doing anything
	 */</comment>
	<function><specifier>public</specifier> <type><name>void</name></type> <name>performCancel</name><parameter_list>()</parameter_list> <block>{
	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Create the project described in record. If it is successful return true.
	 * 
	 * @param record
	 * @return boolean &lt;code&gt;true&lt;/code&gt; if successful
	 * @throws InterruptedException
	 */</comment>
	<function><specifier>private</specifier> <type><name>boolean</name></type> <name>createExistingProject</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>ProjectRecord</name></type> <name>record</name></decl></parameter>,
			<parameter><decl><type><name>IPath</name></type> <name>snapshotPath</name></decl></parameter>, <parameter><decl><type><name>IProgressMonitor</name></type> <name>monitor</name></decl></parameter>)</parameter_list>
			<throws>throws <argument><expr><name>InvocationTargetException</name></expr></argument>, <argument><expr><name>InterruptedException</name></expr></argument></throws> <block>{
		<decl_stmt><decl><type><name>String</name></type> <name>projectName</name> <init>= <expr><call><name><name>record</name><operator>.</operator><name>getProjectName</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier>final</specifier> <name>IWorkspace</name></type> <name>workspace</name> <init>= <expr><call><name><name>ResourcesPlugin</name><operator>.</operator><name>getWorkspace</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier>final</specifier> <name>IProject</name></type> <name>project</name> <init>= <expr><call><name><name>workspace</name><operator>.</operator><name>getRoot</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getProject</name><argument_list>(<argument><expr><name>projectName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if>if <condition>(<expr><name><name>record</name><operator>.</operator><name>description</name></name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
			<comment type="line">// error case</comment>
			<expr_stmt><expr><name><name>record</name><operator>.</operator><name>description</name></name> <operator>=</operator> <call><name><name>workspace</name><operator>.</operator><name>newProjectDescription</name></name><argument_list>(<argument><expr><name>projectName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<decl_stmt><decl><type><name>IPath</name></type> <name>locationPath</name> <init>= <expr><operator>new</operator> <call><name>Path</name><argument_list>(
					<argument><expr><call><name><name>record</name><operator>.</operator><name>projectSystemFile</name><operator>.</operator><name>getAbsolutePath</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

			<comment type="line">// If it is under the root use the default location</comment>
			<if>if <condition>(<expr><call><name><name>Platform</name><operator>.</operator><name>getLocation</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>isPrefixOf</name><argument_list>(<argument><expr><name>locationPath</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
				<expr_stmt><expr><call><name><name>record</name><operator>.</operator><name>description</name><operator>.</operator><name>setLocation</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then> <else>else <block>{
				<expr_stmt><expr><call><name><name>record</name><operator>.</operator><name>description</name><operator>.</operator><name>setLocation</name></name><argument_list>(<argument><expr><name>locationPath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></else></if>
		}</block></then> <else>else <block>{
			<expr_stmt><expr><call><name><name>record</name><operator>.</operator><name>description</name><operator>.</operator><name>setName</name></name><argument_list>(<argument><expr><name>projectName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></else></if>
		<comment type="line">// load snapshot and open project</comment>
		<try>try <block>{
			<expr_stmt><expr><call><name><name>monitor</name><operator>.</operator><name>beginTask</name></name><argument_list>(
					<argument><expr><name><name>Messages</name><operator>.</operator><name>ProjectRefreshSnapshotImportWizardPage_createProjectsTask</name></name></expr></argument>,
					<argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>project</name><operator>.</operator><name>create</name></name><argument_list>(<argument><expr><name><name>record</name><operator>.</operator><name>description</name></name></expr></argument>, <argument><expr><operator>new</operator> <call><name>SubProgressMonitor</name><argument_list>(<argument><expr><name>monitor</name></expr></argument>,
					<argument><expr><literal type="number">30</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<decl_stmt><decl><type><name>IPath</name></type> <name>zipPath</name> <init>= <expr><call><name><name>snapshotPath</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><name>projectName</name> <operator>+</operator> <literal type="string">"-index.zip"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="line">//$NON-NLS-1$</comment>
			<decl_stmt><decl><type><name>URI</name></type> <name>snapshotLocation</name> <init>= <expr><call><name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>core</name><operator>.</operator><name>filesystem</name><operator>.</operator><name>URIUtil</name>
					<operator>.</operator><name>toURI</name></name><argument_list>(<argument><expr><name>zipPath</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name><name>project</name><operator>.</operator><name>loadSnapshot</name></name><argument_list>(<argument><expr><name><name>IProject</name><operator>.</operator><name>SNAPSHOT_TREE</name></name></expr></argument>, <argument><expr><name>snapshotLocation</name></expr></argument>,
					<argument><expr><operator>new</operator> <call><name>SubProgressMonitor</name><argument_list>(<argument><expr><name>monitor</name></expr></argument>, <argument><expr><literal type="number">40</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>project</name><operator>.</operator><name>open</name></name><argument_list>(<argument><expr><name><name>IResource</name><operator>.</operator><name>NONE</name></name></expr></argument>, <argument><expr><operator>new</operator> <call><name>SubProgressMonitor</name><argument_list>(<argument><expr><name>monitor</name></expr></argument>, <argument><expr><literal type="number">30</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>CoreException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
			<throw>throw <expr><operator>new</operator> <call><name>InvocationTargetException</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
		}</block></catch> <finally>finally <block>{
			<expr_stmt><expr><call><name><name>monitor</name><operator>.</operator><name>done</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		}</block></finally></try>

		<return>return <expr><literal type="boolean">true</literal></expr>;</return>
	}</block></function>

	<comment type="block" format="javadoc">/**
	 * The &lt;code&gt;WizardDataTransfer&lt;/code&gt; implementation of this
	 * &lt;code&gt;IOverwriteQuery&lt;/code&gt; method asks the user whether the existing
	 * resource at the given path should be overwritten.
	 * 
	 * @param pathString
	 * @return the user's reply: one of &lt;code&gt;"YES"&lt;/code&gt;, &lt;code&gt;"NO"&lt;/code&gt;,
	 *         &lt;code&gt;"ALL"&lt;/code&gt;, or &lt;code&gt;"CANCEL"&lt;/code&gt;
	 */</comment>
	<function><specifier>public</specifier> <type><name>String</name></type> <name>queryOverwrite</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>pathString</name></decl></parameter>)</parameter_list> <block>{

		<decl_stmt><decl><type><name>Path</name></type> <name>path</name> <init>= <expr><operator>new</operator> <call><name>Path</name><argument_list>(<argument><expr><name>pathString</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<decl_stmt><decl><type><name>String</name></type> <name>messageString</name></decl>;</decl_stmt>
		<comment type="line">// Break the message up if there is a file name and a directory</comment>
		<comment type="line">// and there are at least 2 segments.</comment>
		<if>if <condition>(<expr><call><name><name>path</name><operator>.</operator><name>getFileExtension</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <call><name><name>path</name><operator>.</operator><name>segmentCount</name></name><argument_list>()</argument_list></call> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition><then> <block>{
			<expr_stmt><expr><name>messageString</name> <operator>=</operator> <call><name><name>NLS</name><operator>.</operator><name>bind</name></name><argument_list>(
					<argument><expr><name><name>Messages</name><operator>.</operator><name>ProjectRefreshSnapshotImportWizardPage_overwrite</name></name></expr></argument>,
					<argument><expr><name>pathString</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then> <else>else <block>{
			<expr_stmt><expr><name>messageString</name> <operator>=</operator> <call><name><name>NLS</name>
					<operator>.</operator><name>bind</name></name><argument_list>(<argument><expr><name><name>Messages</name><operator>.</operator><name>ProjectRefreshSnapshotImportWizardPage_overwriteInFolder</name></name></expr></argument>,
							<argument><expr><call><name><name>path</name><operator>.</operator><name>lastSegment</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>path</name><operator>.</operator><name>removeLastSegments</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call>
									<operator>.</operator><call><name>toOSString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></else></if>

		<decl_stmt><decl><type><specifier>final</specifier> <name>MessageDialog</name></type> <name>dialog</name> <init>= <expr><operator>new</operator> <call><name>MessageDialog</name><argument_list>(<argument><expr><call><name>getContainer</name><argument_list>()</argument_list></call>
				<operator>.</operator><call><name>getShell</name><argument_list>()</argument_list></call></expr></argument>,
				<argument><expr><name><name>Messages</name><operator>.</operator><name>ProjectRefreshSnapshotImportWizardPage_question</name></name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>,
				<argument><expr><name>messageString</name></expr></argument>, <argument><expr><name><name>MessageDialog</name><operator>.</operator><name>QUESTION</name></name></expr></argument>, <argument><expr><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{
						<expr><name><name>IDialogConstants</name><operator>.</operator><name>YES_LABEL</name></name></expr>,
						<expr><name><name>IDialogConstants</name><operator>.</operator><name>YES_TO_ALL_LABEL</name></name></expr>,
						<expr><name><name>IDialogConstants</name><operator>.</operator><name>NO_LABEL</name></name></expr>,
						<expr><name><name>IDialogConstants</name><operator>.</operator><name>NO_TO_ALL_LABEL</name></name></expr>,
						<expr><name><name>IDialogConstants</name><operator>.</operator><name>CANCEL_LABEL</name></name></expr> }</block></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name><name>String</name><index>[]</index></name></type> <name>response</name> <init>= <expr><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{ <expr><name>YES</name></expr>, <expr><name>ALL</name></expr>, <expr><name>NO</name></expr>, <expr><name>NO_ALL</name></expr>, <expr><name>CANCEL</name></expr> }</block></expr></init></decl>;</decl_stmt>
		<comment type="line">// run in syncExec because callback is from an operation,</comment>
		<comment type="line">// which is probably not running in the UI thread.</comment>
		<expr_stmt><expr><call><name>getControl</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getDisplay</name><argument_list>()</argument_list></call><operator>.</operator><call><name>syncExec</name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>Runnable</name></super><argument_list>()</argument_list> <block>{
			<function><specifier>public</specifier> <type><name>void</name></type> <name>run</name><parameter_list>()</parameter_list> <block>{
				<expr_stmt><expr><call><name><name>dialog</name><operator>.</operator><name>open</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			}</block></function>
		}</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><ternary><condition><expr><call><name><name>dialog</name><operator>.</operator><name>getReturnCode</name></name><argument_list>()</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>CANCEL</name></expr> </then><else>: <expr><name><name>response</name><index>[<expr><call><name><name>dialog</name>
				<operator>.</operator><name>getReturnCode</name></name><argument_list>()</argument_list></call></expr>]</index></name></expr></else></ternary></expr>;</return>
	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Method used for test suite.
	 * 
	 * @return CheckboxTreeViewer the viewer containing all the projects found
	 */</comment>
	<function><specifier>public</specifier> <type><name>CheckboxTreeViewer</name></type> <name>getProjectsList</name><parameter_list>()</parameter_list> <block>{
		<return>return <expr><name>projectsList</name></expr>;</return>
	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Retrieve all the projects in the current workspace.
	 * 
	 * @return IProject[] array of IProject in the current workspace
	 */</comment>
	<function><specifier>private</specifier> <type><name><name>IProject</name><index>[]</index></name></type> <name>getProjectsInWorkspace</name><parameter_list>()</parameter_list> <block>{
		<if>if <condition>(<expr><name>wsProjects</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
			<expr_stmt><expr><name>wsProjects</name> <operator>=</operator> <call><name><name>IDEWorkbenchPlugin</name><operator>.</operator><name>getPluginWorkspace</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getRoot</name><argument_list>()</argument_list></call>
					<operator>.</operator><call><name>getProjects</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>
		<return>return <expr><name>wsProjects</name></expr>;</return>
	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Get the array of valid project records that can be imported from the
	 * source workspace or archive, selected by the user. If a project with the
	 * same name exists in both the source workspace and the current workspace,
	 * or if no refresh snapshot for the project is found in the snapshot
	 * folder, it will not appear in the list of projects to import and thus
	 * cannot be selected for import.
	 * 
	 * Method declared public for test suite.
	 * 
	 * @return ProjectRecord[] array of projects that can be imported into the
	 *         workspace
	 */</comment>
	<function><specifier>public</specifier> <type><name><name>ProjectRecord</name><index>[]</index></name></type> <name>getValidProjects</name><parameter_list>()</parameter_list> <block>{
		<decl_stmt><decl><type><name>List</name></type> <name>validProjects</name> <init>= <expr><operator>new</operator> <call><name>ArrayList</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>selectedProjects</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
			<decl_stmt><decl><type><name>String</name></type> <name>projectName</name> <init>= <expr><name><name>selectedProjects</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>getProjectName</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
			<if>if <condition>(<expr><operator>!</operator><call><name>isProjectInWorkspace</name><argument_list>(<argument><expr><name>projectName</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>hasSnapshot</name><argument_list>(<argument><expr><name>projectName</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
				<expr_stmt><expr><call><name><name>validProjects</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name><name>selectedProjects</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>
		}</block></for>
		<return>return <expr><operator>(</operator><name><name>ProjectRecord</name><index>[]</index></name><operator>)</operator> <call><name><name>validProjects</name>
				<operator>.</operator><name>toArray</name></name><argument_list>(<argument><expr><operator>new</operator> <name><name>ProjectRecord</name><index>[<expr><call><name><name>validProjects</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>
	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Determine if the project with the given name is in the current workspace.
	 * 
	 * @param projectName
	 *            String the project name to check
	 * @return boolean true if the project with the given name is in this
	 *         workspace
	 */</comment>
	<function><specifier>private</specifier> <type><name>boolean</name></type> <name>isProjectInWorkspace</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>projectName</name></decl></parameter>)</parameter_list> <block>{
		<if>if <condition>(<expr><name>projectName</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
			<return>return <expr><literal type="boolean">false</literal></expr>;</return>
		}</block></then></if>
		<decl_stmt><decl><type><name><name>IProject</name><index>[]</index></name></type> <name>workspaceProjects</name> <init>= <expr><call><name>getProjectsInWorkspace</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>workspaceProjects</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
			<if>if <condition>(<expr><call><name><name>projectName</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>workspaceProjects</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>getName</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
				<return>return <expr><literal type="boolean">true</literal></expr>;</return>
			}</block></then></if>
		}</block></for>
		<return>return <expr><literal type="boolean">false</literal></expr>;</return>
	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Determine if the named project has a refresh snapshot in the current
	 * snapshot directory.
	 * 
	 * @param projectName
	 *            String the project name to check
	 * @return boolean true if the project with the given name has a refresh
	 *         snapshot in the current snapshot directory
	 */</comment>
	<function><specifier>private</specifier> <type><name>boolean</name></type> <name>hasSnapshot</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>projectName</name></decl></parameter>)</parameter_list> <block>{
		<if>if <condition>(<expr><name>projectName</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
			<return>return <expr><literal type="boolean">false</literal></expr>;</return>
		}</block></then></if>
		<decl_stmt><decl><type><specifier>final</specifier> <name>IPath</name></type> <name>snapshotPath</name> <init>= <expr><operator>new</operator> <call><name>Path</name><argument_list>(<argument><expr><call><name><name>directorySnapshotPathField</name>
				<operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>trim</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>IPath</name></type> <name>zipPath</name> <init>= <expr><call><name><name>snapshotPath</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><name>projectName</name> <operator>+</operator> <literal type="string">"-index.zip"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="line">//$NON-NLS-1$</comment>
		<return>return <expr><call><name><name>zipPath</name><operator>.</operator><name>toFile</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>exists</name><argument_list>()</argument_list></call></expr>;</return>
	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Use the dialog store to restore widget values to the values that they
	 * held last time this wizard was used to completion.
	 * 
	 * Method declared public only for use of tests.
	 */</comment>
	<function><specifier>public</specifier> <type><name>void</name></type> <name>restoreWidgetValues</name><parameter_list>()</parameter_list> <block>{
		<decl_stmt><decl><type><name>IDialogSettings</name></type> <name>settings</name> <init>= <expr><call><name>getDialogSettings</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<if>if <condition>(<expr><name>settings</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
			<expr_stmt><expr><name>recurseIntoSubFolders</name> <operator>=</operator> <call><name><name>settings</name>
					<operator>.</operator><name>getBoolean</name></name><argument_list>(<argument><expr><name>STORE_RECURSE_SUBFOLDERS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>recurseIntoSubFoldersCheckbox</name><operator>.</operator><name>setSelection</name></name><argument_list>(<argument><expr><name>recurseIntoSubFolders</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>
	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Since Finish was pressed, write widget values to the dialog store so that
	 * they will persist into the next invocation of this wizard page.
	 * 
	 * Method declared public only for use of tests.
	 */</comment>
	<function><specifier>public</specifier> <type><name>void</name></type> <name>saveWidgetValues</name><parameter_list>()</parameter_list> <block>{
		<decl_stmt><decl><type><name>IDialogSettings</name></type> <name>settings</name> <init>= <expr><call><name>getDialogSettings</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<if>if <condition>(<expr><name>settings</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
			<expr_stmt><expr><call><name><name>settings</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>STORE_RECURSE_SUBFOLDERS</name></expr></argument>, <argument><expr><name>recurseIntoSubFolders</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>
	}</block></function>

}</block></class>
</unit>
