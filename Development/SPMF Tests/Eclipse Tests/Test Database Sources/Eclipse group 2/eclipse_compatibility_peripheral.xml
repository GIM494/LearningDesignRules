<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="0.9.5">

<unit revision="0.9.5" language="Java" filename="org.eclipse.ui.ide.markers.compatibility/src/org/eclipse/ui/ide/markers/compatibility/MarkersPlugin.java" hash="27210589a569c14d81088f3609007745ee809118"><package>package <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>ide</name><operator>.</operator><name>markers</name><operator>.</operator><name>compatibility</name></name>;</package>

<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>plugin</name><operator>.</operator><name>AbstractUIPlugin</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>osgi</name><operator>.</operator><name>framework</name><operator>.</operator><name>BundleContext</name></name>;</import>

<comment type="block" format="javadoc">/**
 * The activator class controls the plug-in life cycle
 */</comment>
<class><specifier>public</specifier> class <name>MarkersPlugin</name> <super><extends>extends <name>AbstractUIPlugin</name></extends></super> <block>{

	<comment type="line">// The plug-in ID</comment>
	<decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>PLUGIN_ID</name> <init>= <expr><literal type="string">"org.eclipse.ui.ide.markers.compatibility"</literal></expr></init></decl>;</decl_stmt>

	<comment type="line">// The shared instance</comment>
	<decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><name>MarkersPlugin</name></type> <name>plugin</name></decl>;</decl_stmt>
	
	<comment type="block" format="javadoc">/**
	 * The constructor
	 */</comment>
	<constructor><specifier>public</specifier> <name>MarkersPlugin</name><parameter_list>()</parameter_list> <block>{
	}</block></constructor>

	<comment type="block">/*
	 * (non-Javadoc)
	 * @see org.eclipse.ui.plugin.AbstractUIPlugin#start(org.osgi.framework.BundleContext)
	 */</comment>
	<function><specifier>public</specifier> <type><name>void</name></type> <name>start</name><parameter_list>(<parameter><decl><type><name>BundleContext</name></type> <name>context</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{
		<expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>start</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>plugin</name> <operator>=</operator> <name>this</name></expr>;</expr_stmt>
	}</block></function>

	<comment type="block">/*
	 * (non-Javadoc)
	 * @see org.eclipse.ui.plugin.AbstractUIPlugin#stop(org.osgi.framework.BundleContext)
	 */</comment>
	<function><specifier>public</specifier> <type><name>void</name></type> <name>stop</name><parameter_list>(<parameter><decl><type><name>BundleContext</name></type> <name>context</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{
		<expr_stmt><expr><name>plugin</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>stop</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Returns the shared instance
	 *
	 * @return the shared instance
	 */</comment>
	<function><specifier>public</specifier> <specifier>static</specifier> <type><name>MarkersPlugin</name></type> <name>getDefault</name><parameter_list>()</parameter_list> <block>{
		<return>return <expr><name>plugin</name></expr>;</return>
	}</block></function>

}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="org.eclipse.ui.ide.markers.compatibility/src/org/eclipse/ui/ide/markers/compatibility/ported/MarkersInternalPreferences.java" hash="18c1b2754173f6dd25a93dc54e743fb8820cde88"><package>package <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>ide</name><operator>.</operator><name>markers</name><operator>.</operator><name>compatibility</name><operator>.</operator><name>ported</name></name>;</package>


<comment type="block" format="javadoc">/**
 * MarkersInternalPreferences is the port of IDEInternalPreferences for standalone 
 * marker support.
 *
 */</comment>
<class><specifier>public</specifier> class <name>MarkersInternalPreferences</name> <block>{
	
	 <comment type="line">//Enablement of marker limits</comment>
    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>USE_MARKER_LIMITS</name> <init>= <expr><literal type="string">"USE_MARKER_LIMITS"</literal></expr></init></decl>;</decl_stmt> <comment type="line">//$NON-NLS-1$</comment>
    	
   	<comment type="line">//Value of marker limits</comment>
    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>MARKER_LIMITS_VALUE</name> <init>= <expr><literal type="string">"MARKER_LIMITS_VALUE"</literal></expr></init></decl>;</decl_stmt> <comment type="line">//$NON-NLS-1$</comment>

}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="org.eclipse.ui.ide.markers.compatibility/src/org/eclipse/ui/ide/markers/compatibility/internal/AllErrorsParameters.java" hash="691eb6c657905367019f7d7842affcfc18668ca1"><comment type="block" format="javadoc">/*******************************************************************************
 * Copyright (c) 2007 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     IBM Corporation - initial API and implementation
 ******************************************************************************/</comment>
<package>package <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>ide</name><operator>.</operator><name>markers</name><operator>.</operator><name>compatibility</name><operator>.</operator><name>internal</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashMap</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>core</name><operator>.</operator><name>resources</name><operator>.</operator><name>IMarker</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>ide</name><operator>.</operator><name>markers</name><operator>.</operator><name>compatibility</name><operator>.</operator><name>api</name><operator>.</operator><name>FiltersContributionParameters</name></name>;</import>

<comment type="block" format="javadoc">/**
 * AllErrorsParameters is the parameters for the error severity type.
 * 
 * @since 3.4
 * 
 */</comment>
<class><specifier>public</specifier> class <name>AllErrorsParameters</name> <super><extends>extends <name>FiltersContributionParameters</name></extends></super> <block>{

	<decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><name>Map</name></type> <name>errorsMap</name></decl>;</decl_stmt>
	<static>static <block>{
		<expr_stmt><expr><name>errorsMap</name> <operator>=</operator> <operator>new</operator> <call><name>HashMap</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>errorsMap</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>IMarker</name><operator>.</operator><name>SEVERITY</name></name></expr></argument>, <argument><expr><operator>new</operator> <call><name>Integer</name><argument_list>(
				<argument><expr><name><name>SeverityAndDescriptionFieldFilter</name><operator>.</operator><name>SEVERITY_ERROR</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></static>

	<comment type="block" format="javadoc">/**
	 * Create a new instance of the reciever.
	 */</comment>
	<constructor><specifier>public</specifier> <name>AllErrorsParameters</name><parameter_list>()</parameter_list> <block>{
		<expr_stmt><expr><call><name>super</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	}</block></constructor>

	<comment type="block">/*
	 * (non-Javadoc)
	 * 
	 * @see org.eclipse.ui.internal.provisional.views.markers.FiltersContributionParameters#getParameterValues()
	 */</comment>
	<function><specifier>public</specifier> <type><name>Map</name></type> <name>getParameterValues</name><parameter_list>()</parameter_list> <block>{
		<return>return <expr><name>errorsMap</name></expr>;</return>
	}</block></function>

}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="org.eclipse.ui.ide.markers.compatibility/src/org/eclipse/ui/ide/markers/compatibility/ported/MarkerTypesModel.java" hash="02852b342c21428ea74888c22111739333afbcab"><comment type="block" format="javadoc">/*******************************************************************************
 * Copyright (c) 2000, 2006 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     IBM Corporation - initial API and implementation
 *******************************************************************************/</comment>

<package>package <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>ide</name><operator>.</operator><name>markers</name><operator>.</operator><name>compatibility</name><operator>.</operator><name>ported</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashMap</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>core</name><operator>.</operator><name>resources</name><operator>.</operator><name>IMarker</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>core</name><operator>.</operator><name>resources</name><operator>.</operator><name>ResourcesPlugin</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>core</name><operator>.</operator><name>runtime</name><operator>.</operator><name>IConfigurationElement</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>core</name><operator>.</operator><name>runtime</name><operator>.</operator><name>IExtension</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>core</name><operator>.</operator><name>runtime</name><operator>.</operator><name>IExtensionPoint</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>core</name><operator>.</operator><name>runtime</name><operator>.</operator><name>Platform</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Maintains a model of all known marker types. Accessed statically as
 * the list does not change frequently.
 */</comment>
<class>class <name>MarkerTypesModel</name> <block>{
	
	<comment type="block" format="javadoc">/**
	 * Return the singleton implementation.
	 * @return MarkerTypesModel
	 */</comment>
	<function><specifier>static</specifier> <type><name>MarkerTypesModel</name></type> <name>getInstance</name><parameter_list>()</parameter_list><block>{
		<if>if<condition>(<expr><name>instance</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
			<expr_stmt><expr><name>instance</name> <operator>=</operator> <operator>new</operator> <call><name>MarkerTypesModel</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>
		<return>return <expr><name>instance</name></expr>;</return>
	}</block></function>

	<decl_stmt><decl><specifier>static</specifier> <type><name>MarkerTypesModel</name></type> <name>instance</name></decl>;</decl_stmt>

	<comment type="block" format="javadoc">/**
	 * Maps from marker type id to MarkerType.
	 */</comment>
	<decl_stmt><decl><specifier>private</specifier> <type><name>HashMap</name></type> <name>types</name></decl>;</decl_stmt>

	<comment type="block" format="javadoc">/**
	 * Creates a new marker types model.
	 */</comment>
	<constructor><specifier>private</specifier> <name>MarkerTypesModel</name><parameter_list>()</parameter_list> <block>{
		<expr_stmt><expr><name>types</name> <operator>=</operator> <call><name>readTypes</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	}</block></constructor>

	<comment type="block" format="javadoc">/**
	 * Returns the marker type with the given id, or &lt;code&gt;null&lt;/code&gt; if
	 * there is no such marker type.
	 */</comment>
	<function><specifier>public</specifier> <type><name>MarkerType</name></type> <name>getType</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>id</name></decl></parameter>)</parameter_list> <block>{
		<return>return <expr><operator>(</operator><name>MarkerType</name><operator>)</operator> <call><name><name>types</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</return>
	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Returns all known marker types.
	 */</comment>
	<function><specifier>public</specifier> <type><name><name>MarkerType</name><index>[]</index></name></type> <name>getTypes</name><parameter_list>()</parameter_list> <block>{
		<decl_stmt><decl><type><name><name>MarkerType</name><index>[]</index></name></type> <name>result</name> <init>= <expr><operator>new</operator> <name><name>MarkerType</name><index>[<expr><call><name><name>types</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>types</name><operator>.</operator><name>values</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>toArray</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>result</name></expr>;</return>
	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Returns the label for the given marker type. Workaround until we have
	 * labels in XML.
	 */</comment>
	<function><specifier>private</specifier> <type><name>String</name></type> <name>getWellKnownLabel</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>type</name></decl></parameter>)</parameter_list> <block>{
		<if>if <condition>(<expr><call><name><name>type</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>IMarker</name><operator>.</operator><name>PROBLEM</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
			<return>return <expr><literal type="string">"Problem"</literal></expr>;</return><comment type="line">//$NON-NLS-1$</comment>
		}</block></then></if>
		<if>if <condition>(<expr><call><name><name>type</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>IMarker</name><operator>.</operator><name>TASK</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
			<return>return <expr><literal type="string">"Task"</literal></expr>;</return><comment type="line">//$NON-NLS-1$</comment>
		}</block></then></if>
		<if>if <condition>(<expr><call><name><name>type</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><literal type="string">"org.eclipse.jdt.core.problem"</literal></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{ <comment type="line">//$NON-NLS-1$</comment>
			<return>return <expr><literal type="string">"Java Problem"</literal></expr>;</return><comment type="line">//$NON-NLS-1$</comment>
		}</block></then></if>
		<return>return <expr><name>type</name></expr>;</return>
	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Reads the marker types from the registry.
	 */</comment>
	<function><specifier>private</specifier> <type><name>HashMap</name></type> <name>readTypes</name><parameter_list>()</parameter_list> <block>{
		<decl_stmt><decl><type><name>HashMap</name></type> <name>types</name> <init>= <expr><operator>new</operator> <call><name>HashMap</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

		<decl_stmt><decl><type><name>IExtensionPoint</name></type> <name>point</name> <init>= <expr><call><name><name>Platform</name><operator>.</operator><name>getExtensionRegistry</name></name><argument_list>()</argument_list></call>
				<operator>.</operator><call><name>getExtensionPoint</name><argument_list>(<argument><expr><name><name>ResourcesPlugin</name><operator>.</operator><name>PI_RESOURCES</name></name></expr></argument>,
						<argument><expr><name><name>ResourcesPlugin</name><operator>.</operator><name>PT_MARKERS</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if>if <condition>(<expr><name>point</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
			<comment type="line">// Gather all registered marker types.</comment>
			<decl_stmt><decl><type><name><name>IExtension</name><index>[]</index></name></type> <name>extensions</name> <init>= <expr><call><name><name>point</name><operator>.</operator><name>getExtensions</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
			<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>extensions</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{
				<decl_stmt><decl><type><name>IExtension</name></type> <name>ext</name> <init>= <expr><name><name>extensions</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>String</name></type> <name>id</name> <init>= <expr><call><name><name>ext</name><operator>.</operator><name>getUniqueIdentifier</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>String</name></type> <name>label</name> <init>= <expr><call><name><name>ext</name><operator>.</operator><name>getLabel</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
				<if>if <condition>(<expr><call><name><name>label</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{<comment type="line">//$NON-NLS-1$</comment>
					<expr_stmt><expr><name>label</name> <operator>=</operator> <call><name>getWellKnownLabel</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then></if>
				<decl_stmt><decl><type><name>ArrayList</name></type> <name>supersList</name> <init>= <expr><operator>new</operator> <call><name>ArrayList</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name><name>IConfigurationElement</name><index>[]</index></name></type> <name>configElements</name> <init>= <expr><call><name><name>ext</name>
						<operator>.</operator><name>getConfigurationElements</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
				<for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>configElements</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control> <block>{
					<decl_stmt><decl><type><name>IConfigurationElement</name></type> <name>elt</name> <init>= <expr><name><name>configElements</name><index>[<expr><name>j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
					<if>if <condition>(<expr><call><name><name>elt</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>equalsIgnoreCase</name><argument_list>(<argument><expr><literal type="string">"super"</literal></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{<comment type="line">//$NON-NLS-1$</comment>
						<decl_stmt><decl><type><name>String</name></type> <name>sup</name> <init>= <expr><call><name><name>elt</name><operator>.</operator><name>getAttribute</name></name><argument_list>(<argument><expr><literal type="string">"type"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line">//$NON-NLS-1$</comment>
						<if>if <condition>(<expr><name>sup</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
							<expr_stmt><expr><call><name><name>supersList</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>sup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						}</block></then></if>
					}</block></then></if>
				}</block></for>
				<decl_stmt><decl><type><name><name>String</name><index>[]</index></name></type> <name>superTypes</name> <init>= <expr><operator>new</operator> <name><name>String</name><index>[<expr><call><name><name>supersList</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>]</index></name></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><call><name><name>supersList</name><operator>.</operator><name>toArray</name></name><argument_list>(<argument><expr><name>superTypes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<decl_stmt><decl><type><name>MarkerType</name></type> <name>type</name> <init>= <expr><operator>new</operator> <call><name>MarkerType</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><name>label</name></expr></argument>, <argument><expr><name>superTypes</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><call><name><name>types</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></for>
		}</block></then></if>
		<return>return <expr><name>types</name></expr>;</return>
	}</block></function>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="org.eclipse.ui.ide.markers.compatibility/src/org/eclipse/ui/ide/markers/compatibility/internal/AddTaskHandler.java" hash="b057c74c95fffea1eee640a5949bc4edaffb8faa"><package>package <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>ide</name><operator>.</operator><name>markers</name><operator>.</operator><name>compatibility</name><operator>.</operator><name>internal</name></name>;</package>

<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>core</name><operator>.</operator><name>commands</name><operator>.</operator><name>ExecutionEvent</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>ide</name><operator>.</operator><name>markers</name><operator>.</operator><name>compatibility</name><operator>.</operator><name>api</name><operator>.</operator><name>MarkerViewHandler</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>views</name><operator>.</operator><name>markers</name><operator>.</operator><name>internal</name><operator>.</operator><name>DialogTaskProperties</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>views</name><operator>.</operator><name>markers</name><operator>.</operator><name>internal</name><operator>.</operator><name>MarkerMessages</name></name>;</import>

<comment type="block" format="javadoc">/**
 * AddTaskHandler is the handler for adding a new task to the task list.
 * 
 * @since 3.4
 * 
 */</comment>
<class><specifier>public</specifier> class <name>AddTaskHandler</name> <super><extends>extends <name>MarkerViewHandler</name></extends></super> <block>{

	<comment type="block">/*
	 * (non-Javadoc)
	 * 
	 * @see org.eclipse.core.commands.IHandler#execute(org.eclipse.core.commands.ExecutionEvent)
	 */</comment>
	<function><specifier>public</specifier> <type><name>Object</name></type> <name>execute</name><parameter_list>(<parameter><decl><type><name>ExecutionEvent</name></type> <name>event</name></decl></parameter>)</parameter_list> <block>{

		<decl_stmt><decl><type><specifier>final</specifier> <name>ExtendedMarkersView</name></type> <name>view</name> <init>= <expr><call><name>getView</name><argument_list>(<argument><expr><name>event</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if>if <condition>(<expr><name>view</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then>
			<block type="pseudo"><return>return <expr><name>this</name></expr>;</return></block></then></if>

		<decl_stmt><decl><type><name>DialogTaskProperties</name></type> <name>dialog</name> <init>= <expr><operator>new</operator> <call><name>DialogTaskProperties</name><argument_list>(<argument><expr><call><name><name>view</name><operator>.</operator><name>getSite</name></name><argument_list>()</argument_list></call>
				<operator>.</operator><call><name>getShell</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>dialog</name><operator>.</operator><name>create</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>dialog</name><operator>.</operator><name>getShell</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>setText</name><argument_list>(<argument><expr><name><name>MarkerMessages</name><operator>.</operator><name>addGlobalTaskDialog_title</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>dialog</name><operator>.</operator><name>open</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>this</name></expr>;</return>
	}</block></function>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="org.eclipse.ui.ide.markers.compatibility/src/org/eclipse/ui/ide/markers/compatibility/internal/AllMarkersView.java" hash="6e5ce1003495df7f9f42666423bf6e2901a9f177"><package>package <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>ide</name><operator>.</operator><name>markers</name><operator>.</operator><name>compatibility</name><operator>.</operator><name>internal</name></name>;</package>
<comment type="block" format="javadoc">/*******************************************************************************
 * Copyright (c) 2008 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     IBM Corporation - initial API and implementation
 *******************************************************************************/</comment>

<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>ide</name><operator>.</operator><name>markers</name><operator>.</operator><name>compatibility</name><operator>.</operator><name>api</name><operator>.</operator><name>MarkerSupportView</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>views</name><operator>.</operator><name>markers</name><operator>.</operator><name>internal</name><operator>.</operator><name>MarkerSupportRegistry</name></name>;</import>

<comment type="block" format="javadoc">/**
 * AllMarkersView is the view that shows all markers.
 * @since 3.4
 *
 */</comment>
<class><specifier>public</specifier> class <name>AllMarkersView</name> <super><extends>extends <name>MarkerSupportView</name></extends></super> <block>{

	<comment type="block" format="javadoc">/**
	 * Create a new instance of the receiver.
	 */</comment>
	<constructor><specifier>public</specifier> <name>AllMarkersView</name><parameter_list>()</parameter_list> <block>{
		<expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name><name>MarkerSupportRegistry</name><operator>.</operator><name>ALL_MARKERS_GENERATOR</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></constructor>

}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="org.eclipse.ui.ide.markers.compatibility/src/org/eclipse/ui/ide/markers/compatibility/internal/BookmarksView.java" hash="bba4730d0d4cba633863e619be199d39268bf9c6"><comment type="block" format="javadoc">/*******************************************************************************
 * Copyright (c) 2008 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     IBM Corporation - initial API and implementation
 ******************************************************************************/</comment>

<package>package <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>ide</name><operator>.</operator><name>markers</name><operator>.</operator><name>compatibility</name><operator>.</operator><name>internal</name></name>;</package>

<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>ide</name><operator>.</operator><name>markers</name><operator>.</operator><name>compatibility</name><operator>.</operator><name>api</name><operator>.</operator><name>MarkerSupportView</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>ide</name><operator>.</operator><name>markers</name><operator>.</operator><name>compatibility</name><operator>.</operator><name>api</name><operator>.</operator><name>internal</name><operator>.</operator><name>MarkerSupportRegistry</name></name>;</import>

<comment type="block" format="javadoc">/**
 * The BookmarksView is the ide view for bookmarks.
 * @since 3.4
 *
 */</comment>
<class><specifier>public</specifier> class <name>BookmarksView</name> <super><extends>extends <name>MarkerSupportView</name></extends></super> <block>{

	<comment type="block" format="javadoc">/**
	 * Create a new instance of the receiver.
	 */</comment>
	<constructor><specifier>public</specifier> <name>BookmarksView</name><parameter_list>()</parameter_list> <block>{
		<expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name><name>MarkerSupportRegistry</name><operator>.</operator><name>BOOKMARKS_GENERATOR</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
	}</block></constructor>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="org.eclipse.ui.ide.markers.compatibility/src/org/eclipse/ui/ide/markers/compatibility/internal/CompatibilityFieldFilter.java" hash="1e07a5257b6c212b699e35d1cd8a6718bc9ba345"><comment type="block" format="javadoc">/*******************************************************************************
 * Copyright (c) 2008 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     IBM Corporation - initial API and implementation
 ******************************************************************************/</comment>

<package>package <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>ide</name><operator>.</operator><name>markers</name><operator>.</operator><name>compatibility</name><operator>.</operator><name>internal</name></name>;</package>

<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>IMemento</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>ide</name><operator>.</operator><name>markers</name><operator>.</operator><name>compatibility</name><operator>.</operator><name>api</name><operator>.</operator><name>MarkerFieldFilter</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>ide</name><operator>.</operator><name>markers</name><operator>.</operator><name>compatibility</name><operator>.</operator><name>api</name><operator>.</operator><name>internal</name><operator>.</operator><name>ProblemFilter</name></name>;</import>

<comment type="block" format="javadoc">/**
 * CompatibilityFieldFilter is the abstract superclass of the internal filters that support
 * the compatibility filter.
 * @since 3.4
 *
 */</comment>
<class><specifier>public</specifier> <specifier>abstract</specifier> class <name>CompatibilityFieldFilter</name> <super><extends>extends <name>MarkerFieldFilter</name></extends></super> <block>{

	<comment type="block" format="javadoc">/**
	 * Load the settings in the legacy format for the receiver.
	 * @param memento
	 */</comment>
	<function_decl><specifier>public</specifier> <specifier>abstract</specifier> <type><name>void</name></type> <name>loadLegacySettings</name><parameter_list>(<parameter><decl><type><name>IMemento</name></type> <name>memento</name></decl></parameter>)</parameter_list>;</function_decl>

	<comment type="block" format="javadoc">/**
	 * Initialize from a legacy problem filter
	 * @param problemFilter
	 */</comment>
	<function_decl><specifier>public</specifier> <specifier>abstract</specifier> <type><name>void</name></type> <name>initialize</name><parameter_list>(<parameter><decl><type><name>ProblemFilter</name></type> <name>problemFilter</name></decl></parameter>)</parameter_list>;</function_decl>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="org.eclipse.ui.ide.markers.compatibility/src/org/eclipse/ui/ide/markers/compatibility/internal/CompatibilityMarkerFieldFilterGroup.java" hash="6ac402c396b187416cf78b93405e841b2255ef30"><comment type="block" format="javadoc">/*******************************************************************************
 * Copyright (c) 2008 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     IBM Corporation - initial API and implementation
 ******************************************************************************/</comment>

<package>package <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>ide</name><operator>.</operator><name>markers</name><operator>.</operator><name>compatibility</name><operator>.</operator><name>internal</name></name>;</package>

<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>ide</name><operator>.</operator><name>markers</name><operator>.</operator><name>compatibility</name><operator>.</operator><name>api</name><operator>.</operator><name>internal</name><operator>.</operator><name>ProblemFilter</name></name>;</import>

<comment type="block" format="javadoc">/**
 * CompatibilityMarkerFieldFilterGroup is a filter group that uses a
 * {@link ProblemFilter}.
 * 
 * @since 3.4
 * 
 */</comment>
<class><specifier>public</specifier> class <name>CompatibilityMarkerFieldFilterGroup</name> <super><extends>extends <name>MarkerFieldFilterGroup</name></extends></super> <block>{

	<decl_stmt><decl><type><name>ProblemFilter</name></type> <name>problemFilter</name></decl>;</decl_stmt>

	<comment type="block" format="javadoc">/**
	 * Create a new instance of the receiver based on the ProblemFilter.
	 * 
	 * @param filter
	 * @param cachedMarkerBuilder
	 */</comment>
	<constructor><specifier>public</specifier> <name>CompatibilityMarkerFieldFilterGroup</name><parameter_list>(<parameter><decl><type><name>ProblemFilter</name></type> <name>filter</name></decl></parameter>,
			<parameter><decl><type><name>CachedMarkerBuilder</name></type> <name>cachedMarkerBuilder</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>cachedMarkerBuilder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>problemFilter</name> <operator>=</operator> <name>filter</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>setEnabled</name><argument_list>(<argument><expr><call><name><name>filter</name><operator>.</operator><name>isEnabled</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>setScope</name><argument_list>(<argument><expr><call><name><name>filter</name><operator>.</operator><name>getOnResource</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></constructor>

	<comment type="block">/*
	 * (non-Javadoc)
	 * 
	 * @see org.eclipse.ui.internal.views.markers.MarkerFieldFilterGroup#getID()
	 */</comment>
	<function><specifier>public</specifier> <type><name>String</name></type> <name>getID</name><parameter_list>()</parameter_list> <block>{
		<return>return <expr><call><name><name>problemFilter</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr>;</return>
	}</block></function>

	<comment type="block">/*
	 * (non-Javadoc)
	 * 
	 * @see org.eclipse.ui.internal.views.markers.MarkerFieldFilterGroup#getName()
	 */</comment>
	<function><specifier>public</specifier> <type><name>String</name></type> <name>getName</name><parameter_list>()</parameter_list> <block>{
		<return>return <expr><call><name><name>problemFilter</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr>;</return>
	}</block></function>

	<comment type="block">/*
	 * (non-Javadoc)
	 * 
	 * @see org.eclipse.ui.internal.views.markers.MarkerFieldFilterGroup#isSystem()
	 */</comment>
	<function><specifier>public</specifier> <type><name>boolean</name></type> <name>isSystem</name><parameter_list>()</parameter_list> <block>{
		<return>return <expr><literal type="boolean">true</literal></expr>;</return>
	}</block></function>

	<comment type="block">/*
	 * (non-Javadoc)
	 * 
	 * @see org.eclipse.ui.internal.views.markers.MarkerFieldFilterGroup#makeWorkingCopy()
	 */</comment>
	<function><type><name>MarkerFieldFilterGroup</name></type> <name>makeWorkingCopy</name><parameter_list>()</parameter_list> <block>{

		<decl_stmt><decl><type><name>CompatibilityMarkerFieldFilterGroup</name></type> <name>clone</name> <init>= <expr><operator>new</operator> <call><name>CompatibilityMarkerFieldFilterGroup</name><argument_list>(
				<argument><expr><name><name>this</name><operator>.</operator><name>problemFilter</name></name></expr></argument>, <argument><expr><name><name>this</name><operator>.</operator><name>builder</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if>if <condition>(<expr><call><name>populateClone</name><argument_list>(<argument><expr><name>clone</name></expr></argument>)</argument_list></call></expr>)</condition><then>
			<block type="pseudo"><return>return <expr><name>clone</name></expr>;</return></block></then></if>
		<return>return <expr><literal type="null">null</literal></expr>;</return>

	}</block></function>

	<comment type="block">/*
	 * (non-Javadoc)
	 * 
	 * @see org.eclipse.ui.internal.views.markers.MarkerFieldFilterGroup#calculateFilters()
	 */</comment>
	<function><specifier>protected</specifier> <type><name>void</name></type> <name>calculateFilters</name><parameter_list>()</parameter_list> <block>{
		<expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>calculateFilters</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<comment type="line">// Now initialize with the ProblemFilter</comment>
		<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>fieldFilters</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
			<if>if <condition>(<expr><name><name>fieldFilters</name><index>[<expr><name>i</name></expr>]</index></name> <operator>instanceof</operator> <name>CompatibilityFieldFilter</name></expr>)</condition><then>
				<block type="pseudo"><expr_stmt><expr><operator>(</operator><operator>(</operator><name>CompatibilityFieldFilter</name><operator>)</operator> <name><name>fieldFilters</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator>
						<operator>.</operator><call><name>initialize</name><argument_list>(<argument><expr><name>problemFilter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
		}</block></for>
	}</block></function>

}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="org.eclipse.ui.ide.markers.compatibility/src/org/eclipse/ui/ide/markers/compatibility/ported/MarkerType.java" hash="1b27552de36a824a1342baab205221097e943845"><comment type="block" format="javadoc">/*******************************************************************************
 * Copyright (c) 2000, 2005 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     IBM Corporation - initial API and implementation
 *******************************************************************************/</comment>

<package>package <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>ide</name><operator>.</operator><name>markers</name><operator>.</operator><name>compatibility</name><operator>.</operator><name>ported</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Represents a marker type.
 */</comment>
<class><specifier>public</specifier> class <name>MarkerType</name> <block>{
    <decl_stmt><decl><specifier>private</specifier> <type><name>MarkerTypesModel</name></type> <name>model</name></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <type><name>String</name></type> <name>id</name></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <type><name>String</name></type> <name>label</name></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <type><name><name>String</name><index>[]</index></name></type> <name>supertypeIds</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Creates a new marker type.
     */</comment>
    <constructor><specifier>public</specifier> <name>MarkerType</name><parameter_list>(<parameter><decl><type><name>MarkerTypesModel</name></type> <name>model</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>label</name></decl></parameter>,
            <parameter><decl><type><name><name>String</name><index>[]</index></name></type> <name>supertypeIds</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>model</name></name> <operator>=</operator> <name>model</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>id</name></name> <operator>=</operator> <name>id</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>label</name></name> <operator>=</operator> <name>label</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>supertypeIds</name></name> <operator>=</operator> <name>supertypeIds</name></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="block" format="javadoc">/**
     * Returns all this type's supertypes.
     */</comment>
    <function><specifier>public</specifier> <type><name><name>MarkerType</name><index>[]</index></name></type> <name>getAllSupertypes</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>ArrayList</name></type> <name>result</name> <init>= <expr><operator>new</operator> <call><name>ArrayList</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>getAllSupertypes</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><operator>(</operator><name><name>MarkerType</name><index>[]</index></name><operator>)</operator> <call><name><name>result</name><operator>.</operator><name>toArray</name></name><argument_list>(<argument><expr><operator>new</operator> <name><name>MarkerType</name><index>[<expr><call><name><name>result</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Appends all this type's supertypes to the given list.
     */</comment>
    <function><specifier>private</specifier> <type><name>void</name></type> <name>getAllSupertypes</name><parameter_list>(<parameter><decl><type><name>ArrayList</name></type> <name>result</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><name><name>MarkerType</name><index>[]</index></name></type> <name>supers</name> <init>= <expr><call><name>getSupertypes</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>supers</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{
            <decl_stmt><decl><type><name>MarkerType</name></type> <name>sup</name> <init>= <expr><name><name>supers</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><operator>!</operator><call><name><name>result</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><name>sup</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>sup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>sup</name><operator>.</operator><name>getAllSupertypes</name></name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></for>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Returns the marker type id.
     */</comment>
    <function><specifier>public</specifier> <type><name>String</name></type> <name>getId</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>id</name></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Returns the human-readable label for this marker type.
     */</comment>
    <function><specifier>public</specifier> <type><name>String</name></type> <name>getLabel</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>label</name></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Returns the types which have this type as a direct supertype.
     *
     * @return the direct subtypes of this type
     */</comment>
    <function><specifier>public</specifier> <type><name><name>MarkerType</name><index>[]</index></name></type> <name>getSubtypes</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name><name>MarkerType</name><index>[]</index></name></type> <name>types</name> <init>= <expr><call><name><name>model</name><operator>.</operator><name>getTypes</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>ArrayList</name></type> <name>result</name> <init>= <expr><operator>new</operator> <call><name>ArrayList</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>types</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{
            <decl_stmt><decl><type><name>MarkerType</name></type> <name>type</name> <init>= <expr><name><name>types</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name>String</name><index>[]</index></name></type> <name>supers</name> <init>= <expr><call><name><name>type</name><operator>.</operator><name>getSupertypeIds</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>supers</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control> <block>{
                <if>if <condition>(<expr><name><name>supers</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
            }</block></for>
        }</block></for>
        <return>return <expr><operator>(</operator><name><name>MarkerType</name><index>[]</index></name><operator>)</operator> <call><name><name>result</name><operator>.</operator><name>toArray</name></name><argument_list>(<argument><expr><operator>new</operator> <name><name>MarkerType</name><index>[<expr><call><name><name>result</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <type><name><name>MarkerType</name><index>[]</index></name></type> <name>getAllSubTypes</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>List</name></type> <name>subTypes</name> <init>= <expr><operator>new</operator> <call><name>ArrayList</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>addSubTypes</name><argument_list>(<argument><expr><name>subTypes</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name><name>MarkerType</name><index>[]</index></name></type> <name>subs</name> <init>= <expr><operator>new</operator> <name><name>MarkerType</name><index>[<expr><call><name><name>subTypes</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>subTypes</name><operator>.</operator><name>toArray</name></name><argument_list>(<argument><expr><name>subs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>subs</name></expr>;</return>
    }</block></function>

    <function><specifier>private</specifier> <type><name>void</name></type> <name>addSubTypes</name><parameter_list>(<parameter><decl><type><name>List</name></type> <name>list</name></decl></parameter>, <parameter><decl><type><name>MarkerType</name></type> <name>superType</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><name><name>MarkerType</name><index>[]</index></name></type> <name>subTypes</name> <init>= <expr><call><name><name>superType</name><operator>.</operator><name>getSubtypes</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>subTypes</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
            <decl_stmt><decl><type><name>MarkerType</name></type> <name>subType</name> <init>= <expr><name><name>subTypes</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><operator>!</operator><call><name><name>list</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><name>subType</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>list</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>subType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <expr_stmt><expr><call><name>addSubTypes</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>subType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Returns the marker type ids for this type's supertypes.
     */</comment>
    <function><specifier>public</specifier> <type><name><name>String</name><index>[]</index></name></type> <name>getSupertypeIds</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>supertypeIds</name></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Returns this type's direct supertypes.
     */</comment>
    <function><specifier>public</specifier> <type><name><name>MarkerType</name><index>[]</index></name></type> <name>getSupertypes</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>ArrayList</name></type> <name>result</name> <init>= <expr><operator>new</operator> <call><name>ArrayList</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>supertypeIds</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{
            <decl_stmt><decl><type><name>MarkerType</name></type> <name>sup</name> <init>= <expr><call><name><name>model</name><operator>.</operator><name>getType</name></name><argument_list>(<argument><expr><name><name>supertypeIds</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>sup</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>sup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></for>
        <return>return <expr><operator>(</operator><name><name>MarkerType</name><index>[]</index></name><operator>)</operator> <call><name><name>result</name><operator>.</operator><name>toArray</name></name><argument_list>(<argument><expr><operator>new</operator> <name><name>MarkerType</name><index>[<expr><call><name><name>result</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Returns whether this marker type is considered to be a subtype of
     * the given marker type. 
     *
     * @return boolean &lt;code&gt;true&lt;/code&gt;if this type is the same as (or a subtype of) the given type
     */</comment>
    <function><specifier>public</specifier> <type><name>boolean</name></type> <name>isSubtypeOf</name><parameter_list>(<parameter><decl><type><name>MarkerType</name></type> <name>superType</name></decl></parameter>)</parameter_list> <block>{
        <if>if <condition>(<expr><call><name><name>id</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><call><name><name>superType</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr><literal type="boolean">true</literal></expr>;</return>
        }</block></then></if>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>supertypeIds</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{
            <decl_stmt><decl><type><name>MarkerType</name></type> <name>sup</name> <init>= <expr><call><name><name>model</name><operator>.</operator><name>getType</name></name><argument_list>(<argument><expr><name><name>supertypeIds</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>sup</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>sup</name><operator>.</operator><name>isSubtypeOf</name></name><argument_list>(<argument><expr><name>superType</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <return>return <expr><literal type="boolean">true</literal></expr>;</return>
            }</block></then></if>
        }</block></for>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <type><name>boolean</name></type> <name>equals</name><parameter_list>(<parameter><decl><type><name>Object</name></type> <name>other</name></decl></parameter>)</parameter_list> <block>{
        <if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>other</name> <operator>instanceof</operator> <name>MarkerType</name><operator>)</operator></expr>)</condition><then> <block>{
            <return>return <expr><literal type="boolean">false</literal></expr>;</return>
        }</block></then></if>
        <return>return <expr><operator>(</operator><operator>(</operator><name>MarkerType</name><operator>)</operator> <name>other</name><operator>)</operator><operator>.</operator><call><name>getId</name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="org.eclipse.ui.ide.markers.compatibility/src/org/eclipse/ui/ide/markers/compatibility/internal/ConfigureContentsDialogHandler.java" hash="5e571b2ff9af4da2270f0659d18998776495eaa5"><package>package <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>ide</name><operator>.</operator><name>markers</name><operator>.</operator><name>compatibility</name><operator>.</operator><name>internal</name></name>;</package>

<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>core</name><operator>.</operator><name>commands</name><operator>.</operator><name>ExecutionEvent</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>core</name><operator>.</operator><name>commands</name><operator>.</operator><name>IHandler</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>ide</name><operator>.</operator><name>markers</name><operator>.</operator><name>compatibility</name><operator>.</operator><name>api</name><operator>.</operator><name>MarkerViewHandler</name></name>;</import>

<comment type="block" format="javadoc">/**
 * The ConfigureContentsDialogHandler is the handler for opening the contents
 * configuration dialog
 * 
 * @since 3.4
 * 
 */</comment>
<class><specifier>public</specifier> class <name>ConfigureContentsDialogHandler</name> <super><extends>extends <name>MarkerViewHandler</name></extends> <implements>implements <name>IHandler</name></implements></super> <block>{

	<comment type="block">/*
	 * (non-Javadoc)
	 * 
	 * @see org.eclipse.core.commands.IHandler#execute(org.eclipse.core.commands.ExecutionEvent)
	 */</comment>
	<function><specifier>public</specifier> <type><name>Object</name></type> <name>execute</name><parameter_list>(<parameter><decl><type><name>ExecutionEvent</name></type> <name>event</name></decl></parameter>)</parameter_list> <block>{
		<decl_stmt><decl><type><name>ExtendedMarkersView</name></type> <name>view</name> <init>= <expr><call><name>getView</name><argument_list>(<argument><expr><name>event</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if>if <condition>(<expr><name>view</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then>
			<block type="pseudo"><return>return <expr><name>this</name></expr>;</return></block></then></if>
		<expr_stmt><expr><call><name><name>view</name><operator>.</operator><name>openFiltersDialog</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>this</name></expr>;</return>
	}</block></function>

}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="org.eclipse.ui.ide.markers.compatibility/src/org/eclipse/ui/ide/markers/compatibility/internal/CompletionConfigurationArea.java" hash="fef07de858efaaad40d64e81aad7aa4dc5e254e1"><comment type="block" format="javadoc">/*******************************************************************************
 * Copyright (c) 2007 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     IBM Corporation - initial API and implementation
 ******************************************************************************/</comment>
<package>package <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>ide</name><operator>.</operator><name>markers</name><operator>.</operator><name>compatibility</name><operator>.</operator><name>internal</name></name>;</package>

<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>swt</name><operator>.</operator><name>SWT</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>swt</name><operator>.</operator><name>events</name><operator>.</operator><name>SelectionAdapter</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>swt</name><operator>.</operator><name>events</name><operator>.</operator><name>SelectionEvent</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>swt</name><operator>.</operator><name>layout</name><operator>.</operator><name>GridLayout</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>swt</name><operator>.</operator><name>widgets</name><operator>.</operator><name>Button</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>swt</name><operator>.</operator><name>widgets</name><operator>.</operator><name>Composite</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>ide</name><operator>.</operator><name>markers</name><operator>.</operator><name>compatibility</name><operator>.</operator><name>api</name><operator>.</operator><name>FilterConfigurationArea</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>ide</name><operator>.</operator><name>markers</name><operator>.</operator><name>compatibility</name><operator>.</operator><name>api</name><operator>.</operator><name>MarkerFieldFilter</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>ide</name><operator>.</operator><name>markers</name><operator>.</operator><name>compatibility</name><operator>.</operator><name>api</name><operator>.</operator><name>internal</name><operator>.</operator><name>MarkerMessages</name></name>;</import>

<comment type="block" format="javadoc">/**
 * CompletionConfigurationField is the field for the configuration of filters
 * based on configurations.
 * 
 * @since 3.4
 * 
 */</comment>
<class><specifier>public</specifier> class <name>CompletionConfigurationArea</name> <super><extends>extends <name>FilterConfigurationArea</name></extends></super> <block>{

	<decl_stmt><decl><specifier>private</specifier> <type><name>Button</name></type> <name>completeButton</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>private</specifier> <type><name>Button</name></type> <name>incompleteButton</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>completionState</name></decl>;</decl_stmt>

	<comment type="block" format="javadoc">/**
	 * Create a new instance of the receiver.
	 */</comment>
	<constructor><specifier>public</specifier> <name>CompletionConfigurationArea</name><parameter_list>()</parameter_list> <block>{
		<expr_stmt><expr><call><name>super</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	}</block></constructor>

	<comment type="block">/* (non-Javadoc)
	 * @see org.eclipse.ui.internal.provisional.views.markers.api.FilterConfigurationArea#apply(org.eclipse.ui.internal.provisional.views.markers.api.MarkerFieldFilter)
	 */</comment>
	<function><specifier>public</specifier> <type><name>void</name></type> <name>apply</name><parameter_list>(<parameter><decl><type><name>MarkerFieldFilter</name></type> <name>filter</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><operator>(</operator><operator>(</operator><name>CompletionFieldFilter</name><operator>)</operator> <name>filter</name><operator>)</operator><operator>.</operator><call><name>setCompletion</name><argument_list>(<argument><expr><name>completionState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	}</block></function>

	<comment type="block">/*
	 * (non-Javadoc)
	 * 
	 * @see org.eclipse.ui.internal.provisional.views.markers.api.FilterConfigurationArea#createContents(org.eclipse.swt.widgets.Composite)
	 */</comment>
	<function><specifier>public</specifier> <type><name>void</name></type> <name>createContents</name><parameter_list>(<parameter><decl><type><name>Composite</name></type> <name>parent</name></decl></parameter>)</parameter_list> <block>{

		<decl_stmt><decl><type><name>GridLayout</name></type> <name>layout</name> <init>= <expr><operator>new</operator> <call><name>GridLayout</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name><name>layout</name><operator>.</operator><name>marginHeight</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>layout</name><operator>.</operator><name>marginWidth</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>parent</name><operator>.</operator><name>setLayout</name></name><argument_list>(<argument><expr><name>layout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>completeButton</name> <operator>=</operator> <operator>new</operator> <call><name>Button</name><argument_list>(<argument><expr><name>parent</name></expr></argument>, <argument><expr><name><name>SWT</name><operator>.</operator><name>CHECK</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>completeButton</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><name><name>MarkerMessages</name><operator>.</operator><name>filtersDialog_statusComplete</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>completeButton</name><operator>.</operator><name>addSelectionListener</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>SelectionAdapter</name></super><argument_list>()</argument_list> <block>{
			<comment type="block">/*
			 * (non-Javadoc)
			 * 
			 * @see org.eclipse.swt.events.SelectionListener#widgetSelected(org.eclipse.swt.events.SelectionEvent)
			 */</comment>
			<function><specifier>public</specifier> <type><name>void</name></type> <name>widgetSelected</name><parameter_list>(<parameter><decl><type><name>SelectionEvent</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
				<expr_stmt><expr><call><name>updateCompletion</name><argument_list>(<argument><expr><name><name>CompletionFieldFilter</name><operator>.</operator><name>COMPLETED</name></name></expr></argument>,
						<argument><expr><call><name><name>completeButton</name><operator>.</operator><name>getSelection</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			}</block></function>
		}</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>incompleteButton</name> <operator>=</operator> <operator>new</operator> <call><name>Button</name><argument_list>(<argument><expr><name>parent</name></expr></argument>, <argument><expr><name><name>SWT</name><operator>.</operator><name>CHECK</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>incompleteButton</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><name><name>MarkerMessages</name><operator>.</operator><name>filtersDialog_statusIncomplete</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>incompleteButton</name><operator>.</operator><name>addSelectionListener</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>SelectionAdapter</name></super><argument_list>()</argument_list> <block>{
			<comment type="block">/*
			 * (non-Javadoc)
			 * 
			 * @see org.eclipse.swt.events.SelectionListener#widgetSelected(org.eclipse.swt.events.SelectionEvent)
			 */</comment>
			<function><specifier>public</specifier> <type><name>void</name></type> <name>widgetSelected</name><parameter_list>(<parameter><decl><type><name>SelectionEvent</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
				<expr_stmt><expr><call><name>updateCompletion</name><argument_list>(<argument><expr><name><name>CompletionFieldFilter</name><operator>.</operator><name>NOT_COMPLETED</name></name></expr></argument>,
						<argument><expr><call><name><name>incompleteButton</name><operator>.</operator><name>getSelection</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			}</block></function>
		}</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Update the completion value based on the constant and the selection
	 * value.
	 * 
	 * @param constant
	 * @param enabled
	 */</comment>
	<function><type><name>void</name></type> <name>updateCompletion</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>constant</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>enabled</name></decl></parameter>)</parameter_list> <block>{

		<if>if <condition>(<expr><name>enabled</name></expr>)</condition><then>
			<block type="pseudo"><expr_stmt><expr><name>completionState</name> <operator>=</operator> <name>constant</name> <operator>|</operator> <name>completionState</name></expr>;</expr_stmt></block></then>
		<else>else
			<block type="pseudo"><expr_stmt><expr><name>completionState</name> <operator>=</operator> <name>constant</name> <operator>^</operator> <name>completionState</name></expr>;</expr_stmt></block></else></if>

	}</block></function>

	<comment type="block">/*
	 * (non-Javadoc)
	 * 
	 * @see org.eclipse.ui.internal.provisional.views.markers.api.FilterConfigurationArea#initialize(org.eclipse.ui.internal.provisional.views.markers.api.MarkerFieldFilter)
	 */</comment>
	<function><specifier>public</specifier> <type><name>void</name></type> <name>initialize</name><parameter_list>(<parameter><decl><type><name>MarkerFieldFilter</name></type> <name>filter</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><name>completionState</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>CompletionFieldFilter</name><operator>)</operator> <name>filter</name><operator>)</operator><operator>.</operator><call><name>getCompletion</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name><name>completeButton</name>
				<operator>.</operator><name>setSelection</name></name><argument_list>(<argument><expr><operator>(</operator><name><name>CompletionFieldFilter</name><operator>.</operator><name>COMPLETED</name></name> <operator>&amp;</operator> <name>completionState</name><operator>)</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>incompleteButton</name>
				<operator>.</operator><name>setSelection</name></name><argument_list>(<argument><expr><operator>(</operator><name><name>CompletionFieldFilter</name><operator>.</operator><name>NOT_COMPLETED</name></name> <operator>&amp;</operator> <name>completionState</name><operator>)</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	}</block></function>
	
	<comment type="block">/* (non-Javadoc)
	 * @see org.eclipse.ui.internal.provisional.views.markers.api.FilterConfigurationArea#getTitle()
	 */</comment>
	<function><specifier>public</specifier> <type><name>String</name></type> <name>getTitle</name><parameter_list>()</parameter_list> <block>{
		<return>return <expr><name><name>MarkerMessages</name><operator>.</operator><name>completion_description</name></name></expr>;</return>
	}</block></function>

}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="org.eclipse.ui.ide.markers.compatibility/src/org/eclipse/ui/ide/markers/compatibility/internal/CompletionFieldFilter.java" hash="70ca117e89c82ec792ed7fd6a1b611d87761d2ee"><comment type="block" format="javadoc">/*******************************************************************************
 * Copyright (c) 2007 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     IBM Corporation - initial API and implementation
 ******************************************************************************/</comment>
<package>package <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>ide</name><operator>.</operator><name>markers</name><operator>.</operator><name>compatibility</name><operator>.</operator><name>internal</name></name>;</package>

<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>core</name><operator>.</operator><name>resources</name><operator>.</operator><name>IMarker</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>IMemento</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>ide</name><operator>.</operator><name>markers</name><operator>.</operator><name>compatibility</name><operator>.</operator><name>api</name><operator>.</operator><name>MarkerFieldFilter</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>ide</name><operator>.</operator><name>markers</name><operator>.</operator><name>compatibility</name><operator>.</operator><name>api</name><operator>.</operator><name>MarkerItem</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>ide</name><operator>.</operator><name>markers</name><operator>.</operator><name>compatibility</name><operator>.</operator><name>api</name><operator>.</operator><name>internal</name><operator>.</operator><name>ProblemFilter</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>ide</name><operator>.</operator><name>markers</name><operator>.</operator><name>compatibility</name><operator>.</operator><name>api</name><operator>.</operator><name>internal</name><operator>.</operator><name>TaskFilter</name></name>;</import>

<comment type="block" format="javadoc">/**
 * CompletionFieldFilter is the field filter for marker fields.
 * 
 * @since 3.4
 * 
 */</comment>
<class><specifier>public</specifier> class <name>CompletionFieldFilter</name> <super><extends>extends <name>CompatibilityFieldFilter</name></extends></super> <block>{

	<decl_stmt><decl><type><specifier>final</specifier> <specifier>static</specifier> <name>int</name></type> <name>COMPLETED</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>final</specifier> <specifier>static</specifier> <name>int</name></type> <name>NOT_COMPLETED</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><name>int</name></type> <name>ALL_SELECTED</name> <init>= <expr><name>COMPLETED</name> <operator>+</operator> <name>NOT_COMPLETED</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>private</specifier> <type><name>int</name></type> <name>completion</name> <init>= <expr><name>ALL_SELECTED</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>COMPLETION_ATTRIBUTE</name> <init>= <expr><literal type="string">"completion"</literal></expr></init></decl>;</decl_stmt> <comment type="line">//$NON-NLS-1$</comment>

	<comment type="block" format="javadoc">/**
	 * Create a new instance of the receiver.
	 */</comment>
	<constructor><specifier>public</specifier> <name>CompletionFieldFilter</name><parameter_list>()</parameter_list> <block>{
		<expr_stmt><expr><call><name>super</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	}</block></constructor>

	<comment type="block">/* (non-Javadoc)
	 * @see org.eclipse.ui.internal.provisional.views.markers.api.MarkerFieldFilter#loadSettings(org.eclipse.ui.IMemento)
	 */</comment>
	<function><specifier>public</specifier> <type><name>void</name></type> <name>loadSettings</name><parameter_list>(<parameter><decl><type><name>IMemento</name></type> <name>memento</name></decl></parameter>)</parameter_list> <block>{
		<decl_stmt><decl><type><name>Integer</name></type> <name>completionValue</name> <init>= <expr><call><name><name>memento</name><operator>.</operator><name>getInteger</name></name><argument_list>(<argument><expr><name>COMPLETION_ATTRIBUTE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if>if <condition>(<expr><name>completionValue</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then>
			<block type="pseudo"><return>return;</return></block></then></if>
		<expr_stmt><expr><name>completion</name> <operator>=</operator> <call><name><name>completionValue</name><operator>.</operator><name>intValue</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	}</block></function>
	
	<comment type="block">/* (non-Javadoc)
	 * @see org.eclipse.ui.internal.provisional.views.markers.CompatibilityFieldFilter#loadLegacySettings(org.eclipse.ui.IMemento)
	 */</comment>
	<function><specifier>public</specifier> <type><name>void</name></type> <name>loadLegacySettings</name><parameter_list>(<parameter><decl><type><name>IMemento</name></type> <name>memento</name></decl></parameter>)</parameter_list> <block>{
		<decl_stmt><decl><type><name>String</name></type> <name>setting</name> <init>= <expr><call><name><name>memento</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>TaskFilter</name><operator>.</operator><name>TAG_DONE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<if>if <condition>(<expr><name>setting</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
			<expr_stmt><expr><name>completion</name> <operator>=</operator> <ternary><condition><expr><call><name><name>Boolean</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><name>setting</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>booleanValue</name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><name>COMPLETED</name></expr> </then><else>: <expr><name>NOT_COMPLETED</name></expr></else></ternary></expr>;</expr_stmt>
		}</block></then></if>
		
	}</block></function>
	
	<comment type="block">/* (non-Javadoc)
	 * @see org.eclipse.ui.internal.views.markers.CompatibilityFieldFilter#initialize(org.eclipse.ui.views.markers.internal.ProblemFilter)
	 */</comment>
	<function><specifier>public</specifier> <type><name>void</name></type> <name>initialize</name><parameter_list>(<parameter><decl><type><name>ProblemFilter</name></type> <name>problemFilter</name></decl></parameter>)</parameter_list> <block>{
		<comment type="line">//Problem filters have no completion value</comment>
		
	}</block></function>

	<comment type="block">/* (non-Javadoc)
	 * @see org.eclipse.ui.internal.provisional.views.markers.api.MarkerFieldFilter#saveSettings(org.eclipse.ui.IMemento)
	 */</comment>
	<function><specifier>public</specifier> <type><name>void</name></type> <name>saveSettings</name><parameter_list>(<parameter><decl><type><name>IMemento</name></type> <name>memento</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><call><name><name>memento</name><operator>.</operator><name>putInteger</name></name><argument_list>(<argument><expr><name>COMPLETION_ATTRIBUTE</name></expr></argument>, <argument><expr><name>completion</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	}</block></function>

	<comment type="block">/*
	 * (non-Javadoc)
	 * 
	 * @see org.eclipse.ui.internal.provisional.views.markers.api.MarkerFieldFilter#select(org.eclipse.ui.internal.provisional.views.markers.api.MarkerItem)
	 */</comment>
	<function><specifier>public</specifier> <type><name>boolean</name></type> <name>select</name><parameter_list>(<parameter><decl><type><name>MarkerItem</name></type> <name>item</name></decl></parameter>)</parameter_list> <block>{

		<if>if <condition>(<expr><name>completion</name> <operator>==</operator> <name>ALL_SELECTED</name></expr>)</condition><then>
			<block type="pseudo"><return>return <expr><literal type="boolean">true</literal></expr>;</return></block></then></if>

		<if>if <condition>(<expr><call><name><name>item</name><operator>.</operator><name>getAttributeValue</name></name><argument_list>(<argument><expr><name><name>IMarker</name><operator>.</operator><name>USER_EDITABLE</name></name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
			<if>if <condition>(<expr><call><name><name>item</name><operator>.</operator><name>getAttributeValue</name></name><argument_list>(<argument><expr><name><name>IMarker</name><operator>.</operator><name>DONE</name></name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>)</condition><then>
				<block type="pseudo"><return>return <expr><operator>(</operator><name>completion</name> <operator>&amp;</operator> <name>COMPLETED</name><operator>)</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</return></block></then></if>
			<return>return <expr><operator>(</operator><name>completion</name> <operator>&amp;</operator> <name>NOT_COMPLETED</name><operator>)</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</return>
		}</block></then></if>

		<return>return <expr><literal type="boolean">false</literal></expr>;</return>

	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Get the completion settings.
	 * @return int 
	 * @see #COMPLETED
	 * @see #NOT_COMPLETED
	 */</comment>
	<function><type><name>int</name></type> <name>getCompletion</name><parameter_list>()</parameter_list> <block>{
		<return>return <expr><name>completion</name></expr>;</return>
	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Set the completion settings.
	 * @param completion the completion value
	 * @see #COMPLETED
	 * @see #NOT_COMPLETED
	 */</comment>
	<function><type><name>void</name></type> <name>setCompletion</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>completion</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>completion</name></name> <operator>=</operator> <name>completion</name></expr>;</expr_stmt>
	}</block></function>
	
	<comment type="block">/* (non-Javadoc)
	 * @see org.eclipse.ui.internal.provisional.views.markers.api.MarkerFieldFilter#populateWorkingCopy(org.eclipse.ui.internal.provisional.views.markers.api.MarkerFieldFilter)
	 */</comment>
	<function><specifier>public</specifier> <type><name>void</name></type> <name>populateWorkingCopy</name><parameter_list>(<parameter><decl><type><name>MarkerFieldFilter</name></type> <name>copy</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>populateWorkingCopy</name></name><argument_list>(<argument><expr><name>copy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><operator>(</operator><operator>(</operator><name>CompletionFieldFilter</name><operator>)</operator><name>copy</name><operator>)</operator><operator>.</operator><call><name>setCompletion</name><argument_list>(<argument><expr><call><name>getCompletion</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>

}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="org.eclipse.ui.ide.markers.compatibility/src/org/eclipse/ui/ide/markers/compatibility/internal/DeleteHandler.java" hash="3e403b204818b77df8eae4a584101f370307a6f0"><comment type="block" format="javadoc">/*******************************************************************************
 * Copyright (c) 2007 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     IBM Corporation - initial API and implementation
 ******************************************************************************/</comment>
<package>package <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>ide</name><operator>.</operator><name>markers</name><operator>.</operator><name>compatibility</name><operator>.</operator><name>internal</name></name>;</package>

<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>core</name><operator>.</operator><name>commands</name><operator>.</operator><name>ExecutionEvent</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>core</name><operator>.</operator><name>commands</name><operator>.</operator><name>ExecutionException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>core</name><operator>.</operator><name>resources</name><operator>.</operator><name>IMarker</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>core</name><operator>.</operator><name>runtime</name><operator>.</operator><name>CoreException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>ide</name><operator>.</operator><name>markers</name><operator>.</operator><name>compatibility</name><operator>.</operator><name>api</name><operator>.</operator><name>MarkerViewHandler</name></name>;</import>

<comment type="block" format="javadoc">/**
 * DeleteHandler is the handler for the deletion of a marker.
 * 
 * @since 3.4
 * 
 */</comment>
<class><specifier>public</specifier> class <name>DeleteHandler</name> <super><extends>extends <name>MarkerViewHandler</name></extends></super> <block>{

	<comment type="block">/*
	 * (non-Javadoc)
	 * 
	 * @see org.eclipse.core.commands.IHandler#execute(org.eclipse.core.commands.ExecutionEvent)
	 */</comment>
	<function><specifier>public</specifier> <type><name>Object</name></type> <name>execute</name><parameter_list>(<parameter><decl><type><name>ExecutionEvent</name></type> <name>event</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>ExecutionException</name></expr></argument></throws> <block>{

		<decl_stmt><decl><type><specifier>final</specifier> <name><name>IMarker</name><index>[]</index></name></type> <name>selected</name> <init>= <expr><call><name>getSelectedMarkers</name><argument_list>(<argument><expr><name>event</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>selected</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
			<try>try <block>{
				<expr_stmt><expr><name><name>selected</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>delete</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>CoreException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
				<expr_stmt><expr><call><name><name>MarkerSupportInternalUtilities</name><operator>.</operator><name>handle</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<throw>throw <expr><operator>new</operator> <call><name>ExecutionException</name><argument_list>(<argument><expr><call><name><name>e</name><operator>.</operator><name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
			}</block></catch></try>
		}</block></for>
		<return>return <expr><name>this</name></expr>;</return>
	}</block></function>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="org.eclipse.ui.ide.markers.compatibility/src/org/eclipse/ui/ide/markers/compatibility/internal/ContentsContribution.java" hash="e7d3646f1ba31ff1ee00ba73c3c3252312829369"><package>package <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>ide</name><operator>.</operator><name>markers</name><operator>.</operator><name>compatibility</name><operator>.</operator><name>internal</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Collection</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>jface</name><operator>.</operator><name>action</name><operator>.</operator><name>ContributionItem</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>jface</name><operator>.</operator><name>action</name><operator>.</operator><name>IContributionItem</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>jface</name><operator>.</operator><name>action</name><operator>.</operator><name>Separator</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>swt</name><operator>.</operator><name>SWT</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>swt</name><operator>.</operator><name>widgets</name><operator>.</operator><name>Event</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>swt</name><operator>.</operator><name>widgets</name><operator>.</operator><name>Listener</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>swt</name><operator>.</operator><name>widgets</name><operator>.</operator><name>Menu</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>swt</name><operator>.</operator><name>widgets</name><operator>.</operator><name>MenuItem</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>ide</name><operator>.</operator><name>markers</name><operator>.</operator><name>compatibility</name><operator>.</operator><name>api</name><operator>.</operator><name>internal</name><operator>.</operator><name>MarkerMessages</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>ide</name><operator>.</operator><name>markers</name><operator>.</operator><name>compatibility</name><operator>.</operator><name>api</name><operator>.</operator><name>internal</name><operator>.</operator><name>MarkerSupportRegistry</name></name>;</import>

<comment type="block" format="javadoc">/**
 * ContentsContribution is the class that defines the content selection
 * contribution for the {@link ExtendedMarkersView}.
 * 
 * @since 3.4
 * 
 */</comment>
<class><specifier>public</specifier> class <name>ContentsContribution</name> <super><extends>extends <name>MarkersContribution</name></extends></super> <block>{

	<comment type="block" format="javadoc">/**
	 * Create a new instance of the receiver.
	 */</comment>
	<constructor><specifier>public</specifier> <name>ContentsContribution</name><parameter_list>()</parameter_list> <block>{
		<expr_stmt><expr><call><name>super</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	}</block></constructor>

	<comment type="block">/*
	 * (non-Javadoc)
	 * 
	 * @see org.eclipse.ui.actions.CompoundContributionItem#getContributionItems()
	 */</comment>
	<function><specifier>protected</specifier> <type><name><name>IContributionItem</name><index>[]</index></name></type> <name>getContributionItems</name><parameter_list>()</parameter_list> <block>{

		<decl_stmt><decl><type><name>ExtendedMarkersView</name></type> <name>view</name> <init>= <expr><call><name>getView</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name><name>String</name><index>[]</index></name></type> <name>generatorIds</name> <init>= <expr><call><name><name>view</name><operator>.</operator><name>getGeneratorIds</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

		<decl_stmt><decl><type><name>Collection</name></type> <name>items</name> <init>= <expr><operator>new</operator> <call><name>ArrayList</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>generatorIds</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
			<decl_stmt><decl><type><specifier>final</specifier> <name>MarkerContentGenerator</name></type> <name>generator</name> <init>= <expr><call><name><name>MarkerSupportRegistry</name>
					<operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getGenerator</name><argument_list>(<argument><expr><name><name>generatorIds</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			
			<if>if<condition>(<expr><name>generator</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then><block>{
				<expr_stmt><expr><call><name><name>view</name><operator>.</operator><name>logInvalidGenerator</name></name><argument_list>(<argument><expr><name><name>generatorIds</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<continue>continue;</continue>
			}</block></then></if>
				
			
			<expr_stmt><expr><call><name><name>items</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>ContributionItem</name></super><argument_list>()</argument_list> <block>{

				<comment type="block">/*
				 * (non-Javadoc)
				 * 
				 * @see org.eclipse.jface.action.ContributionItem#fill(org.eclipse.swt.widgets.Menu,
				 *      int)
				 */</comment>
				<function><specifier>public</specifier> <type><name>void</name></type> <name>fill</name><parameter_list>(<parameter><decl><type><name>Menu</name></type> <name>menu</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>index</name></decl></parameter>)</parameter_list> <block>{
					<decl_stmt><decl><type><name>MenuItem</name></type> <name>item</name> <init>= <expr><operator>new</operator> <call><name>MenuItem</name><argument_list>(<argument><expr><name>menu</name></expr></argument>, <argument><expr><name><name>SWT</name><operator>.</operator><name>RADIO</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<expr_stmt><expr><call><name><name>item</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><call><name><name>generator</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<decl_stmt><decl><type><name>ExtendedMarkersView</name></type> <name>view</name> <init>= <expr><call><name>getView</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
					<expr_stmt><expr><call><name><name>item</name><operator>.</operator><name>addListener</name></name><argument_list>(<argument><expr><name><name>SWT</name><operator>.</operator><name>Selection</name></name></expr></argument>, <argument><expr><call><name>getMenuItemListener</name><argument_list>(
							<argument><expr><name>generator</name></expr></argument>, <argument><expr><name>view</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<if>if <condition>(<expr><name>view</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>view</name><operator>.</operator><name>isShowing</name></name><argument_list>(<argument><expr><name>generator</name></expr></argument>)</argument_list></call></expr>)</condition><then>
						<block type="pseudo"><expr_stmt><expr><call><name><name>item</name><operator>.</operator><name>setSelection</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
				}</block></function>

				<comment type="block" format="javadoc">/**
				 * Create a menu listener for the generator and the view.
				 * 
				 * @param generator
				 * @param view
				 * @return Listener
				 */</comment>
				<function><specifier>private</specifier> <type><name>Listener</name></type> <name>getMenuItemListener</name><parameter_list>(
						<parameter><decl><type><specifier>final</specifier> <name>MarkerContentGenerator</name></type> <name>generator</name></decl></parameter>,
						<parameter><decl><type><specifier>final</specifier> <name>ExtendedMarkersView</name></type> <name>view</name></decl></parameter>)</parameter_list> <block>{
					<return>return <expr><operator>new</operator> <class><super><name>Listener</name></super><argument_list>()</argument_list> <block>{
						<comment type="block">/*
						 * (non-Javadoc)
						 * 
						 * @see org.eclipse.swt.widgets.Listener#handleEvent(org.eclipse.swt.widgets.Event)
						 */</comment>
						<function><specifier>public</specifier> <type><name>void</name></type> <name>handleEvent</name><parameter_list>(<parameter><decl><type><name>Event</name></type> <name>event</name></decl></parameter>)</parameter_list> <block>{
							<if>if <condition>(<expr><name>view</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then>
								<block type="pseudo"><expr_stmt><expr><call><name><name>view</name><operator>.</operator><name>setContentGenerator</name></name><argument_list>(<argument><expr><name>generator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
						}</block></function>
					}</block></class></expr>;</return>
				}</block></function>
			}</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></for>

		<expr_stmt><expr><call><name><name>items</name><operator>.</operator><name>add</name></name><argument_list>( <argument><expr><operator>new</operator> <call><name>Separator</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>items</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name>getFiltersDialogContribution</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name><name>IContributionItem</name><index>[]</index></name></type> <name>contributionItems</name> <init>= <expr><operator>new</operator> <name><name>IContributionItem</name><index>[<expr><call><name><name>items</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>items</name><operator>.</operator><name>toArray</name></name><argument_list>(<argument><expr><name>contributionItems</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>contributionItems</name></expr>;</return>
	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Get the filter item for the contribution dialog.
	 * 
	 * @return ContributionItem
	 */</comment>
	<function><specifier>private</specifier> <type><name>ContributionItem</name></type> <name>getFiltersDialogContribution</name><parameter_list>()</parameter_list> <block>{
		<return>return <expr><operator>new</operator> <class><super><name>ContributionItem</name></super><argument_list>()</argument_list> <block>{
			<comment type="block">/*
			 * (non-Javadoc)
			 * 
			 * @see org.eclipse.jface.action.ContributionItem#fill(org.eclipse.swt.widgets.Menu,
			 *      int)
			 */</comment>
			<function><specifier>public</specifier> <type><name>void</name></type> <name>fill</name><parameter_list>(<parameter><decl><type><name>Menu</name></type> <name>menu</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>index</name></decl></parameter>)</parameter_list> <block>{
				<decl_stmt><decl><type><name>MenuItem</name></type> <name>item</name> <init>= <expr><operator>new</operator> <call><name>MenuItem</name><argument_list>(<argument><expr><name>menu</name></expr></argument>, <argument><expr><name><name>SWT</name><operator>.</operator><name>NONE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><call><name><name>item</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><name><name>MarkerMessages</name><operator>.</operator><name>configureFiltersCommand_title</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>item</name><operator>.</operator><name>addListener</name></name><argument_list>(<argument><expr><name><name>SWT</name><operator>.</operator><name>Selection</name></name></expr></argument>, <argument><expr><operator>new</operator> <class><super><name>Listener</name></super><argument_list>()</argument_list> <block>{
					<comment type="block">/*
					 * (non-Javadoc)
					 * 
					 * @see org.eclipse.swt.widgets.Listener#handleEvent(org.eclipse.swt.widgets.Event)
					 */</comment>
					<function><specifier>public</specifier> <type><name>void</name></type> <name>handleEvent</name><parameter_list>(<parameter><decl><type><name>Event</name></type> <name>event</name></decl></parameter>)</parameter_list> <block>{
						<expr_stmt><expr><call><name>getView</name><argument_list>()</argument_list></call><operator>.</operator><call><name>openFiltersDialog</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
					}</block></function>
				}</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></function>

		}</block></class></expr>;</return>
	}</block></function>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="org.eclipse.ui.ide.markers.compatibility/src/org/eclipse/ui/ide/markers/compatibility/internal/DeleteCompletedHandler.java" hash="1a1d02867cfe6eef325cba0b83e6878a7f3074ec"><comment type="block" format="javadoc">/*******************************************************************************
 * Copyright (c) 2007 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     IBM Corporation - initial API and implementation
 ******************************************************************************/</comment>
<package>package <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>ide</name><operator>.</operator><name>markers</name><operator>.</operator><name>compatibility</name><operator>.</operator><name>internal</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>core</name><operator>.</operator><name>commands</name><operator>.</operator><name>ExecutionEvent</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>core</name><operator>.</operator><name>commands</name><operator>.</operator><name>operations</name><operator>.</operator><name>IUndoableOperation</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>core</name><operator>.</operator><name>resources</name><operator>.</operator><name>IMarker</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>jface</name><operator>.</operator><name>dialogs</name><operator>.</operator><name>MessageDialog</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>osgi</name><operator>.</operator><name>util</name><operator>.</operator><name>NLS</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>ide</name><operator>.</operator><name>markers</name><operator>.</operator><name>compatibility</name><operator>.</operator><name>api</name><operator>.</operator><name>MarkerItem</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>ide</name><operator>.</operator><name>markers</name><operator>.</operator><name>compatibility</name><operator>.</operator><name>api</name><operator>.</operator><name>MarkerViewHandler</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>ide</name><operator>.</operator><name>markers</name><operator>.</operator><name>compatibility</name><operator>.</operator><name>api</name><operator>.</operator><name>internal</name><operator>.</operator><name>MarkerMessages</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>ide</name><operator>.</operator><name>undo</name><operator>.</operator><name>DeleteMarkersOperation</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>ide</name><operator>.</operator><name>undo</name><operator>.</operator><name>WorkspaceUndoUtil</name></name>;</import>

<comment type="block" format="javadoc">/**
 * DeleteCompletedHandler is the handler for the deletion of completed
 * tasks.
 * @since 3.4
 *
 */</comment>
<class><specifier>public</specifier> class <name>DeleteCompletedHandler</name> <super><extends>extends <name>MarkerViewHandler</name></extends></super> <block>{

	<comment type="block">/*
	 * (non-Javadoc)
	 * 
	 * @see org.eclipse.core.commands.IHandler#execute(org.eclipse.core.commands.ExecutionEvent)
	 */</comment>
	<function><specifier>public</specifier> <type><name>Object</name></type> <name>execute</name><parameter_list>(<parameter><decl><type><name>ExecutionEvent</name></type> <name>event</name></decl></parameter>)</parameter_list> <block>{

		<decl_stmt><decl><type><name>ExtendedMarkersView</name></type> <name>view</name> <init>= <expr><call><name>getView</name><argument_list>(<argument><expr><name>event</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if>if <condition>(<expr><name>view</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then>
			<block type="pseudo"><return>return <expr><name>this</name></expr>;</return></block></then></if>

		<decl_stmt><decl><type><specifier>final</specifier> <name>List</name></type> <name>completed</name> <init>= <expr><call><name>getCompletedTasks</name><argument_list>(<argument><expr><name>view</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<comment type="line">// Check if there is anything to do</comment>
		<if>if <condition>(<expr><call><name><name>completed</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
			<expr_stmt><expr><call><name><name>MessageDialog</name><operator>.</operator><name>openInformation</name></name><argument_list>(<argument><expr><call><name><name>view</name><operator>.</operator><name>getSite</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getShell</name><argument_list>()</argument_list></call></expr></argument>,
					<argument><expr><name><name>MarkerMessages</name><operator>.</operator><name>deleteCompletedTasks_dialogTitle</name></name></expr></argument>,
					<argument><expr><name><name>MarkerMessages</name><operator>.</operator><name>deleteCompletedTasks_noneCompleted</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><name>this</name></expr>;</return>
		}</block></then></if>
		<decl_stmt><decl><type><name>String</name></type> <name>message</name></decl>;</decl_stmt>
		<if>if <condition>(<expr><call><name><name>completed</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then> <block>{
			<expr_stmt><expr><name>message</name> <operator>=</operator> <name><name>MarkerMessages</name><operator>.</operator><name>deleteCompletedTasks_permanentSingular</name></name></expr>;</expr_stmt>
		}</block></then> <else>else <block>{
			<expr_stmt><expr><name>message</name> <operator>=</operator> <call><name><name>NLS</name><operator>.</operator><name>bind</name></name><argument_list>(
					<argument><expr><name><name>MarkerMessages</name><operator>.</operator><name>deleteCompletedTasks_permanentPlural</name></name></expr></argument>, <argument><expr><call><name><name>String</name>
							<operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><call><name><name>completed</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></else></if>
		<comment type="line">// Verify.</comment>
		<if>if <condition>(<expr><operator>!</operator><call><name><name>MessageDialog</name><operator>.</operator><name>openConfirm</name></name><argument_list>(<argument><expr><call><name><name>view</name><operator>.</operator><name>getSite</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getShell</name><argument_list>()</argument_list></call></expr></argument>,
				<argument><expr><name><name>MarkerMessages</name><operator>.</operator><name>deleteCompletedTasks_dialogTitle</name></name></expr></argument>, <argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
			<return>return <expr><name>view</name></expr>;</return>
		}</block></then></if>

		<decl_stmt><decl><type><name><name>IMarker</name><index>[]</index></name></type> <name>markers</name> <init>= <expr><operator>new</operator> <name><name>IMarker</name><index>[<expr><call><name><name>completed</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>completed</name><operator>.</operator><name>toArray</name></name><argument_list>(<argument><expr><name>markers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<decl_stmt><decl><type><name>IUndoableOperation</name></type> <name>op</name> <init>= <expr><operator>new</operator> <call><name>DeleteMarkersOperation</name><argument_list>(<argument><expr><name>markers</name></expr></argument>,
				<argument><expr><name><name>MarkerMessages</name><operator>.</operator><name>deleteCompletedAction_title</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>execute</name><argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><name><name>MarkerMessages</name><operator>.</operator><name>deleteCompletedTasks_errorMessage</name></name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>,
				<argument><expr><call><name><name>WorkspaceUndoUtil</name><operator>.</operator><name>getUIInfoAdapter</name></name><argument_list>(<argument><expr><call><name><name>view</name><operator>.</operator><name>getSite</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getShell</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<return>return <expr><name>this</name></expr>;</return>

	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Get the list of completed tasks from the view.
	 * 
	 * @param view
	 * @return List of {@link IMarker}
	 */</comment>
	<function><specifier>private</specifier> <type><name>List</name></type> <name>getCompletedTasks</name><parameter_list>(<parameter><decl><type><name>ExtendedMarkersView</name></type> <name>view</name></decl></parameter>)</parameter_list> <block>{

		<decl_stmt><decl><type><name>List</name></type> <name>completed</name> <init>= <expr><operator>new</operator> <call><name>ArrayList</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name><name>MarkerItem</name><index>[]</index></name></type> <name>items</name> <init>= <expr><call><name><name>view</name><operator>.</operator><name>getAllConcreteItems</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

		<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>items</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
			<decl_stmt><decl><type><name>MarkerItem</name></type> <name>markerItem</name> <init>= <expr><name><name>items</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
			<if>if <condition>(<expr><call><name><name>markerItem</name><operator>.</operator><name>getAttributeValue</name></name><argument_list>(<argument><expr><name><name>IMarker</name><operator>.</operator><name>DONE</name></name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call>
					<operator>&amp;&amp;</operator> <call><name><name>markerItem</name><operator>.</operator><name>getMarker</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
				<expr_stmt><expr><call><name><name>completed</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>markerItem</name><operator>.</operator><name>getMarker</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>
		}</block></for>

		<return>return <expr><name>completed</name></expr>;</return>
	}</block></function>

}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="org.eclipse.ui.ide.markers.compatibility/src/org/eclipse/ui/ide/markers/compatibility/internal/EditablePropertyTester.java" hash="97a1ebcfebfbfc7d23e4d8f0cc9d94d4abc65252"><package>package <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>ide</name><operator>.</operator><name>markers</name><operator>.</operator><name>compatibility</name><operator>.</operator><name>internal</name></name>;</package>

<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>core</name><operator>.</operator><name>expressions</name><operator>.</operator><name>PropertyTester</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>core</name><operator>.</operator><name>resources</name><operator>.</operator><name>IMarker</name></name>;</import>

<comment type="block" format="javadoc">/**
 * EditablePropertyTester is a property tester for the editable property of the
 * selected marker.
 * 
 * @since 3.4
 * 
 */</comment>
<class><specifier>public</specifier> class <name>EditablePropertyTester</name> <super><extends>extends <name>PropertyTester</name></extends></super> <block>{

	<decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>Object</name></type> <name>EDITABLE</name> <init>= <expr><literal type="string">"editable"</literal></expr></init></decl>;</decl_stmt> <comment type="line">//$NON-NLS-1$</comment>

	<comment type="block" format="javadoc">/**
	 * Create a new instance of the receiver.
	 */</comment>
	<constructor><specifier>public</specifier> <name>EditablePropertyTester</name><parameter_list>()</parameter_list> <block>{
		<expr_stmt><expr><call><name>super</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	}</block></constructor>

	<comment type="block">/* (non-Javadoc)
	 * @see org.eclipse.core.expressions.IPropertyTester#test(java.lang.Object, java.lang.String, java.lang.Object[], java.lang.Object)
	 */</comment>
	<function><specifier>public</specifier> <type><name>boolean</name></type> <name>test</name><parameter_list>(<parameter><decl><type><name>Object</name></type> <name>receiver</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>property</name></decl></parameter>, <parameter><decl><type><name><name>Object</name><index>[]</index></name></type> <name>args</name></decl></parameter>,
			<parameter><decl><type><name>Object</name></type> <name>expectedValue</name></decl></parameter>)</parameter_list> <block>{
		<if>if <condition>(<expr><call><name><name>property</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>EDITABLE</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
			<decl_stmt><decl><type><name>IMarker</name></type> <name>marker</name> <init>= <expr><operator>(</operator><operator>(</operator><name>MarkerEntry</name><operator>)</operator> <name>receiver</name><operator>)</operator><operator>.</operator><call><name>getMarker</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
			<if>if <condition>(<expr><name>marker</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then>
				<block type="pseudo"><return>return <expr><call><name><name>marker</name><operator>.</operator><name>getAttribute</name></name><argument_list>(<argument><expr><name><name>IMarker</name><operator>.</operator><name>USER_EDITABLE</name></name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</return></block></then></if>
		}</block></then></if>
		<return>return <expr><literal type="boolean">false</literal></expr>;</return>
	}</block></function>

}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="org.eclipse.ui.ide.markers.compatibility/src/org/eclipse/ui/ide/markers/compatibility/internal/DescriptionConfigurationArea.java" hash="fb8406a0d0279b4939ec960fd3a0157953174f40"><package>package <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>ide</name><operator>.</operator><name>markers</name><operator>.</operator><name>compatibility</name><operator>.</operator><name>internal</name></name>;</package>

<comment type="block" format="javadoc">/*******************************************************************************
 * Copyright (c) 2007 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     IBM Corporation - initial API and implementation
 ******************************************************************************/</comment>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>jface</name><operator>.</operator><name>dialogs</name><operator>.</operator><name>Dialog</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>jface</name><operator>.</operator><name>resource</name><operator>.</operator><name>JFaceResources</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>swt</name><operator>.</operator><name>SWT</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>swt</name><operator>.</operator><name>events</name><operator>.</operator><name>TraverseEvent</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>swt</name><operator>.</operator><name>events</name><operator>.</operator><name>TraverseListener</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>swt</name><operator>.</operator><name>graphics</name><operator>.</operator><name>FontMetrics</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>swt</name><operator>.</operator><name>graphics</name><operator>.</operator><name>GC</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>swt</name><operator>.</operator><name>layout</name><operator>.</operator><name>GridData</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>swt</name><operator>.</operator><name>layout</name><operator>.</operator><name>GridLayout</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>swt</name><operator>.</operator><name>widgets</name><operator>.</operator><name>Combo</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>swt</name><operator>.</operator><name>widgets</name><operator>.</operator><name>Composite</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>swt</name><operator>.</operator><name>widgets</name><operator>.</operator><name>Label</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>swt</name><operator>.</operator><name>widgets</name><operator>.</operator><name>Text</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>ide</name><operator>.</operator><name>markers</name><operator>.</operator><name>compatibility</name><operator>.</operator><name>api</name><operator>.</operator><name>FilterConfigurationArea</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>ide</name><operator>.</operator><name>markers</name><operator>.</operator><name>compatibility</name><operator>.</operator><name>api</name><operator>.</operator><name>MarkerFieldFilter</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>ide</name><operator>.</operator><name>markers</name><operator>.</operator><name>compatibility</name><operator>.</operator><name>api</name><operator>.</operator><name>MarkerSupportConstants</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>ide</name><operator>.</operator><name>markers</name><operator>.</operator><name>compatibility</name><operator>.</operator><name>api</name><operator>.</operator><name>internal</name><operator>.</operator><name>MarkerMessages</name></name>;</import>

<comment type="block" format="javadoc">/**
 * DescriptionConfigurationArea is the configuration area for description
 * configuration fields.
 * 
 */</comment>
<class><specifier>public</specifier> class <name>DescriptionConfigurationArea</name> <super><extends>extends <name>FilterConfigurationArea</name></extends></super> <block>{

	<decl_stmt><decl><specifier>private</specifier> <type><name>Combo</name></type> <name>descriptionCombo</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>private</specifier> <type><name>Text</name></type> <name>descriptionText</name></decl>;</decl_stmt>

	<comment type="block" format="javadoc">/**
	 * Create new instance of the receiver.
	 */</comment>
	<constructor><specifier>public</specifier> <name>DescriptionConfigurationArea</name><parameter_list>()</parameter_list> <block>{
		<expr_stmt><expr><call><name>super</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	}</block></constructor>

	<comment type="block">/*
	 * (non-Javadoc)
	 * 
	 * @see org.eclipse.ui.internal.provisional.views.markers.api.FilterConfigurationArea#apply(org.eclipse.ui.internal.provisional.views.markers.api.MarkerFieldFilter)
	 */</comment>
	<function><specifier>public</specifier> <type><name>void</name></type> <name>apply</name><parameter_list>(<parameter><decl><type><name>MarkerFieldFilter</name></type> <name>filter</name></decl></parameter>)</parameter_list> <block>{
		<decl_stmt><decl><type><name>DescriptionFieldFilter</name></type> <name>desc</name> <init>= <expr><operator>(</operator><name>DescriptionFieldFilter</name><operator>)</operator> <name>filter</name></expr></init></decl>;</decl_stmt>
		<if>if <condition>(<expr><call><name><name>descriptionCombo</name><operator>.</operator><name>getSelectionIndex</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then>
			<block type="pseudo"><expr_stmt><expr><call><name><name>desc</name><operator>.</operator><name>setContainsModifier</name></name><argument_list>(<argument><expr><name><name>MarkerSupportConstants</name><operator>.</operator><name>CONTAINS_KEY</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
		<else>else
			<block type="pseudo"><expr_stmt><expr><call><name><name>desc</name>
					<operator>.</operator><name>setContainsModifier</name></name><argument_list>(<argument><expr><name><name>MarkerSupportConstants</name><operator>.</operator><name>DOES_NOT_CONTAIN_KEY</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>
		<expr_stmt><expr><call><name><name>desc</name><operator>.</operator><name>setContainsText</name></name><argument_list>(<argument><expr><call><name><name>descriptionText</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	}</block></function>

	<comment type="block">/*
	 * (non-Javadoc)
	 * 
	 * @see org.eclipse.ui.internal.provisional.views.markers.api.FilterConfigurationArea#createContents(org.eclipse.swt.widgets.Composite)
	 */</comment>
	<function><specifier>public</specifier> <type><name>void</name></type> <name>createContents</name><parameter_list>(<parameter><decl><type><name>Composite</name></type> <name>parent</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><call><name>createDescriptionGroup</name><argument_list>(<argument><expr><name>parent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<comment type="block">/*
	 * (non-Javadoc)
	 * 
	 * @see org.eclipse.ui.internal.provisional.views.markers.api.FilterConfigurationArea#initialize(org.eclipse.ui.internal.provisional.views.markers.api.MarkerFieldFilter)
	 */</comment>
	<function><specifier>public</specifier> <type><name>void</name></type> <name>initialize</name><parameter_list>(<parameter><decl><type><name>MarkerFieldFilter</name></type> <name>filter</name></decl></parameter>)</parameter_list> <block>{
		<decl_stmt><decl><type><name>DescriptionFieldFilter</name></type> <name>desc</name> <init>= <expr><operator>(</operator><name>DescriptionFieldFilter</name><operator>)</operator> <name>filter</name></expr></init></decl>;</decl_stmt>
		<if>if <condition>(<expr><call><name><name>desc</name><operator>.</operator><name>getContainsModifier</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(
				<argument><expr><name><name>MarkerSupportConstants</name><operator>.</operator><name>CONTAINS_KEY</name></name></expr></argument>)</argument_list></call></expr>)</condition><then>
			<block type="pseudo"><expr_stmt><expr><call><name><name>descriptionCombo</name><operator>.</operator><name>select</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
		<else>else
			<block type="pseudo"><expr_stmt><expr><call><name><name>descriptionCombo</name><operator>.</operator><name>select</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>

		<expr_stmt><expr><call><name><name>descriptionText</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><call><name><name>desc</name><operator>.</operator><name>getContainsText</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Create the group for the description filter.
	 * 
	 * @param parent
	 */</comment>
	<function><specifier>private</specifier> <type><name>void</name></type> <name>createDescriptionGroup</name><parameter_list>(<parameter><decl><type><name>Composite</name></type> <name>parent</name></decl></parameter>)</parameter_list> <block>{

		<decl_stmt><decl><type><name>Composite</name></type> <name>descriptionComposite</name> <init>= <expr><operator>new</operator> <call><name>Composite</name><argument_list>(<argument><expr><name>parent</name></expr></argument>, <argument><expr><name><name>SWT</name><operator>.</operator><name>NONE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>descriptionComposite</name><operator>.</operator><name>setLayout</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>GridLayout</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>descriptionComposite</name><operator>.</operator><name>setLayoutData</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>GridData</name><argument_list>(
				<argument><expr><name><name>GridData</name><operator>.</operator><name>FILL_HORIZONTAL</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<decl_stmt><decl><type><name>Label</name></type> <name>descriptionLabel</name> <init>= <expr><operator>new</operator> <call><name>Label</name><argument_list>(<argument><expr><name>descriptionComposite</name></expr></argument>, <argument><expr><name><name>SWT</name><operator>.</operator><name>NONE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>descriptionLabel</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><name><name>MarkerMessages</name><operator>.</operator><name>filtersDialog_descriptionLabel</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>descriptionCombo</name> <operator>=</operator> <operator>new</operator> <call><name>Combo</name><argument_list>(<argument><expr><name>descriptionComposite</name></expr></argument>, <argument><expr><name><name>SWT</name><operator>.</operator><name>READ_ONLY</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>descriptionCombo</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name><name>MarkerMessages</name><operator>.</operator><name>filtersDialog_contains</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>descriptionCombo</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name><name>MarkerMessages</name><operator>.</operator><name>filtersDialog_doesNotContain</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="line">// Prevent Esc and Return from closing the dialog when the combo is</comment>
		<comment type="line">// active.</comment>
		<expr_stmt><expr><call><name><name>descriptionCombo</name><operator>.</operator><name>addTraverseListener</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>TraverseListener</name></super><argument_list>()</argument_list> <block>{
			<function><specifier>public</specifier> <type><name>void</name></type> <name>keyTraversed</name><parameter_list>(<parameter><decl><type><name>TraverseEvent</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
				<if>if <condition>(<expr><name><name>e</name><operator>.</operator><name>detail</name></name> <operator>==</operator> <name><name>SWT</name><operator>.</operator><name>TRAVERSE_ESCAPE</name></name>
						<operator>||</operator> <name><name>e</name><operator>.</operator><name>detail</name></name> <operator>==</operator> <name><name>SWT</name><operator>.</operator><name>TRAVERSE_RETURN</name></name></expr>)</condition><then> <block>{
					<expr_stmt><expr><name><name>e</name><operator>.</operator><name>doit</name></name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
				}</block></then></if>
			}</block></function>
		}</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<decl_stmt><decl><type><name>GC</name></type> <name>gc</name> <init>= <expr><operator>new</operator> <call><name>GC</name><argument_list>(<argument><expr><name>descriptionComposite</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>gc</name><operator>.</operator><name>setFont</name></name><argument_list>(<argument><expr><call><name><name>JFaceResources</name><operator>.</operator><name>getDialogFont</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>FontMetrics</name></type> <name>fontMetrics</name> <init>= <expr><call><name><name>gc</name><operator>.</operator><name>getFontMetrics</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>gc</name><operator>.</operator><name>dispose</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>descriptionText</name> <operator>=</operator> <operator>new</operator> <call><name>Text</name><argument_list>(<argument><expr><name>descriptionComposite</name></expr></argument>, <argument><expr><name><name>SWT</name><operator>.</operator><name>SINGLE</name></name>
				<operator>|</operator> <name><name>SWT</name><operator>.</operator><name>BORDER</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>GridData</name></type> <name>data</name> <init>= <expr><operator>new</operator> <call><name>GridData</name><argument_list>(<argument><expr><name><name>GridData</name><operator>.</operator><name>FILL_HORIZONTAL</name></name>
				<operator>|</operator> <name><name>GridData</name><operator>.</operator><name>GRAB_HORIZONTAL</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name><name>data</name><operator>.</operator><name>widthHint</name></name> <operator>=</operator> <call><name><name>Dialog</name><operator>.</operator><name>convertWidthInCharsToPixels</name></name><argument_list>(<argument><expr><name>fontMetrics</name></expr></argument>, <argument><expr><literal type="number">25</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>descriptionText</name><operator>.</operator><name>setLayoutData</name></name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>

}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="org.eclipse.ui.ide.markers.compatibility/src/org/eclipse/ui/ide/markers/compatibility/internal/DescriptionFieldFilter.java" hash="67dd4f74cfcdf66baf66908ca678c1f05cf4a18a"><comment type="block" format="javadoc">/*******************************************************************************
 * Copyright (c) 2007 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     IBM Corporation - initial API and implementation
 ******************************************************************************/</comment>
<package>package <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>ide</name><operator>.</operator><name>markers</name><operator>.</operator><name>compatibility</name><operator>.</operator><name>internal</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>IMemento</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>ide</name><operator>.</operator><name>markers</name><operator>.</operator><name>compatibility</name><operator>.</operator><name>api</name><operator>.</operator><name>MarkerFieldFilter</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>ide</name><operator>.</operator><name>markers</name><operator>.</operator><name>compatibility</name><operator>.</operator><name>api</name><operator>.</operator><name>MarkerItem</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>ide</name><operator>.</operator><name>markers</name><operator>.</operator><name>compatibility</name><operator>.</operator><name>api</name><operator>.</operator><name>MarkerSupportConstants</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>ide</name><operator>.</operator><name>markers</name><operator>.</operator><name>compatibility</name><operator>.</operator><name>api</name><operator>.</operator><name>internal</name><operator>.</operator><name>ProblemFilter</name></name>;</import>

<comment type="block" format="javadoc">/**
 * DescriptionFieldFilter is the filter for descriptions.
 * 
 * @since 3.4
 * 
 */</comment>
<class><specifier>public</specifier> class <name>DescriptionFieldFilter</name> <super><extends>extends <name>CompatibilityFieldFilter</name></extends></super> <block>{

	<decl_stmt><decl><specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>TAG_CONTAINS_MODIFIER</name> <init>= <expr><literal type="string">"containsModifier"</literal></expr></init></decl>;</decl_stmt> <comment type="line">//$NON-NLS-1$</comment>
	<decl_stmt><decl><specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>TAG_CONTAINS_TEXT</name> <init>= <expr><literal type="string">"containsText"</literal></expr></init></decl>;</decl_stmt> <comment type="line">//$NON-NLS-1$</comment>

	<decl_stmt><decl><type><name>String</name></type> <name>containsModifier</name> <init>= <expr><name><name>MarkerSupportConstants</name><operator>.</operator><name>CONTAINS_KEY</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>String</name></type> <name>containsText</name> <init>= <expr><name><name>MarkerSupportConstants</name><operator>.</operator><name>EMPTY_STRING</name></name></expr></init></decl>;</decl_stmt>

	<comment type="block" format="javadoc">/**
	 * Create a new instance of the receiver.
	 */</comment>
	<constructor><specifier>public</specifier> <name>DescriptionFieldFilter</name><parameter_list>()</parameter_list> <block>{
		<expr_stmt><expr><call><name>super</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	}</block></constructor>

	<comment type="block">/*
	 * (non-Javadoc)
	 * 
	 * @see org.eclipse.ui.internal.provisional.views.markers.api.MarkerFieldFilter#loadSettings(org.eclipse.ui.IMemento)
	 */</comment>
	<function><specifier>public</specifier> <type><name>void</name></type> <name>loadSettings</name><parameter_list>(<parameter><decl><type><name>IMemento</name></type> <name>memento</name></decl></parameter>)</parameter_list> <block>{
		<decl_stmt><decl><type><name>String</name></type> <name>modifier</name> <init>= <expr><call><name><name>memento</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name>TAG_CONTAINS_MODIFIER</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if>if <condition>(<expr><name>modifier</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then>
			<block type="pseudo"><return>return;</return></block></then></if>
		<decl_stmt><decl><type><name>String</name></type> <name>contains</name> <init>= <expr><call><name><name>memento</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name>TAG_CONTAINS_TEXT</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if>if <condition>(<expr><name>contains</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then>
			<block type="pseudo"><return>return;</return></block></then></if>
		<expr_stmt><expr><name>containsText</name> <operator>=</operator> <name>contains</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>containsModifier</name> <operator>=</operator> <name>modifier</name></expr>;</expr_stmt>

	}</block></function>

	<comment type="block">/*
	 * (non-Javadoc)
	 * 
	 * @see org.eclipse.ui.internal.provisional.views.markers.CompatibilityFieldFilter#loadLegacySettings(org.eclipse.ui.IMemento)
	 */</comment>
	<function><specifier>public</specifier> <type><name>void</name></type> <name>loadLegacySettings</name><parameter_list>(<parameter><decl><type><name>IMemento</name></type> <name>memento</name></decl></parameter>)</parameter_list> <block>{
		<decl_stmt><decl><type><name>String</name></type> <name>setting</name> <init>= <expr><call><name><name>memento</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>ProblemFilter</name><operator>.</operator><name>TAG_CONTAINS</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<if>if <condition>(<expr><name>setting</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
			<expr_stmt><expr><name>containsModifier</name> <operator>=</operator> <ternary><condition><expr><call><name><name>Boolean</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><name>setting</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>booleanValue</name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><name><name>MarkerSupportConstants</name><operator>.</operator><name>CONTAINS_KEY</name></name></expr>
					</then><else>: <expr><name><name>MarkerSupportConstants</name><operator>.</operator><name>DOES_NOT_CONTAIN_KEY</name></name></expr></else></ternary></expr>;</expr_stmt>

		}</block></then></if>

		<expr_stmt><expr><name>setting</name> <operator>=</operator> <call><name><name>memento</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>ProblemFilter</name><operator>.</operator><name>TAG_DESCRIPTION</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if>if <condition>(<expr><name>setting</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
			<expr_stmt><expr><name>containsText</name> <operator>=</operator> <operator>new</operator> <call><name>String</name><argument_list>(<argument><expr><name>setting</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>
	}</block></function>

	<comment type="block">/*
	 * (non-Javadoc)
	 * 
	 * @see org.eclipse.ui.internal.provisional.views.markers.api.MarkerFieldFilter#saveSettings(org.eclipse.ui.IMemento)
	 */</comment>
	<function><specifier>public</specifier> <type><name>void</name></type> <name>saveSettings</name><parameter_list>(<parameter><decl><type><name>IMemento</name></type> <name>memento</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><call><name><name>memento</name><operator>.</operator><name>putString</name></name><argument_list>(<argument><expr><name>TAG_CONTAINS_MODIFIER</name></expr></argument>, <argument><expr><name>containsModifier</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>memento</name><operator>.</operator><name>putString</name></name><argument_list>(<argument><expr><name>TAG_CONTAINS_TEXT</name></expr></argument>, <argument><expr><name>containsText</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<comment type="block">/*
	 * (non-Javadoc)
	 * 
	 * @see org.eclipse.ui.internal.provisional.views.markers.api.MarkerFieldFilter#select(org.eclipse.ui.internal.provisional.views.markers.api.MarkerItem)
	 */</comment>
	<function><specifier>public</specifier> <type><name>boolean</name></type> <name>select</name><parameter_list>(<parameter><decl><type><name>MarkerItem</name></type> <name>item</name></decl></parameter>)</parameter_list> <block>{
		<if>if <condition>(<expr><call><name><name>containsText</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then>
			<block type="pseudo"><return>return <expr><literal type="boolean">true</literal></expr>;</return></block></then></if>

		<decl_stmt><decl><type><name>String</name></type> <name>value</name> <init>= <expr><call><name>getField</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getValue</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if>if <condition>(<expr><call><name><name>containsModifier</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>MarkerSupportConstants</name><operator>.</operator><name>CONTAINS_KEY</name></name></expr></argument>)</argument_list></call></expr>)</condition><then>
			<block type="pseudo"><return>return <expr><call><name><name>value</name><operator>.</operator><name>indexOf</name></name><argument_list>(<argument><expr><name>containsText</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</return></block></then></if>
		<return>return <expr><call><name><name>value</name><operator>.</operator><name>indexOf</name></name><argument_list>(<argument><expr><name>containsText</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>;</return>

	}</block></function>

	<comment type="block">/*
	 * (non-Javadoc)
	 * 
	 * @see org.eclipse.ui.internal.provisional.views.markers.api.MarkerFieldFilter#populateWorkingCopy(org.eclipse.ui.internal.provisional.views.markers.api.MarkerFieldFilter)
	 */</comment>
	<function><specifier>public</specifier> <type><name>void</name></type> <name>populateWorkingCopy</name><parameter_list>(<parameter><decl><type><name>MarkerFieldFilter</name></type> <name>copy</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>populateWorkingCopy</name></name><argument_list>(<argument><expr><name>copy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>DescriptionFieldFilter</name></type> <name>clone</name> <init>= <expr><operator>(</operator><name>DescriptionFieldFilter</name><operator>)</operator> <name>copy</name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name><name>clone</name><operator>.</operator><name>containsModifier</name></name> <operator>=</operator> <name><name>this</name><operator>.</operator><name>containsModifier</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>clone</name><operator>.</operator><name>containsText</name></name> <operator>=</operator> <name><name>this</name><operator>.</operator><name>containsText</name></name></expr>;</expr_stmt>
	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Return the contains modifier.
	 * 
	 * @return One of {@link MarkerSupportConstants#CONTAINS_KEY} or
	 *         {@link MarkerSupportConstants#DOES_NOT_CONTAIN_KEY}
	 */</comment>
	<function><specifier>public</specifier> <type><name>String</name></type> <name>getContainsModifier</name><parameter_list>()</parameter_list> <block>{
		<return>return <expr><name>containsModifier</name></expr>;</return>
	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Set the contains modifier.
	 * 
	 * @param containsString
	 *            One of {@link MarkerSupportConstants#CONTAINS_KEY} or
	 *            {@link MarkerSupportConstants#DOES_NOT_CONTAIN_KEY}
	 */</comment>
	<function><specifier>public</specifier> <type><name>void</name></type> <name>setContainsModifier</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>containsString</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>containsModifier</name></name> <operator>=</operator> <name>containsString</name></expr>;</expr_stmt>
	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Return the text to apply the containsModifier to.
	 * 
	 * @return String
	 */</comment>
	<function><specifier>public</specifier> <type><name>String</name></type> <name>getContainsText</name><parameter_list>()</parameter_list> <block>{
		<return>return <expr><name>containsText</name></expr>;</return>
	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Set the text to apply the containsModifier to.
	 * 
	 * @param containsText
	 *            String
	 */</comment>
	<function><specifier>public</specifier> <type><name>void</name></type> <name>setContainsText</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>containsText</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>containsText</name></name> <operator>=</operator> <name>containsText</name></expr>;</expr_stmt>
	}</block></function>

	<comment type="block">/*
	 * (non-Javadoc)
	 * 
	 * @see org.eclipse.ui.internal.provisional.views.markers.api.MarkerFieldFilter#initialize(java.util.Map)
	 */</comment>
	<function><specifier>public</specifier> <type><name>void</name></type> <name>initialize</name><parameter_list>(<parameter><decl><type><name>Map</name></type> <name>values</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>initialize</name></name><argument_list>(<argument><expr><name>values</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if>if <condition>(<expr><call><name><name>values</name><operator>.</operator><name>containsKey</name></name><argument_list>(<argument><expr><name><name>MarkerSupportConstants</name><operator>.</operator><name>CONTAINS_KEY</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
			<expr_stmt><expr><call><name>setContainsText</name><argument_list>(<argument><expr><operator>(</operator><name>String</name><operator>)</operator> <call><name><name>values</name>
					<operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>MarkerSupportConstants</name><operator>.</operator><name>CONTAINS_KEY</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>setContainsModifier</name><argument_list>(<argument><expr><name><name>MarkerSupportConstants</name><operator>.</operator><name>CONTAINS_KEY</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then> <elseif>else <if>if <condition>(<expr><call><name><name>values</name>
				<operator>.</operator><name>containsKey</name></name><argument_list>(<argument><expr><name><name>MarkerSupportConstants</name><operator>.</operator><name>DOES_NOT_CONTAIN_KEY</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
			<expr_stmt><expr><call><name>setContainsText</name><argument_list>(<argument><expr><operator>(</operator><name>String</name><operator>)</operator> <call><name><name>values</name>
					<operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>MarkerSupportConstants</name><operator>.</operator><name>DOES_NOT_CONTAIN_KEY</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>setContainsModifier</name><argument_list>(<argument><expr><name><name>MarkerSupportConstants</name><operator>.</operator><name>DOES_NOT_CONTAIN_KEY</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if></elseif></if>
	}</block></function>

	<comment type="block">/*
	 * (non-Javadoc)
	 * 
	 * @see org.eclipse.ui.internal.views.markers.CompatibilityFieldFilter#initialize(org.eclipse.ui.views.markers.internal.ProblemFilter)
	 */</comment>
	<function><specifier>public</specifier> <type><name>void</name></type> <name>initialize</name><parameter_list>(<parameter><decl><type><name>ProblemFilter</name></type> <name>problemFilter</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><name>containsModifier</name> <operator>=</operator> <ternary><condition><expr><call><name><name>problemFilter</name><operator>.</operator><name>getContains</name></name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><name><name>MarkerSupportConstants</name><operator>.</operator><name>CONTAINS_KEY</name></name></expr>
				</then><else>: <expr><name><name>MarkerSupportConstants</name><operator>.</operator><name>DOES_NOT_CONTAIN_KEY</name></name></expr></else></ternary></expr>;</expr_stmt>
		<expr_stmt><expr><name>containsText</name> <operator>=</operator> <call><name><name>problemFilter</name><operator>.</operator><name>getDescription</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	}</block></function>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="org.eclipse.ui.ide.markers.compatibility/src/org/eclipse/ui/ide/markers/compatibility/internal/FileMarkerPropertyTester.java" hash="cc81621023b5f0771bf3e803677eab1645adf251"><comment type="block" format="javadoc">/*******************************************************************************
 * Copyright (c) 2007 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     IBM Corporation - initial API and implementation
 ******************************************************************************/</comment>

<package>package <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>ide</name><operator>.</operator><name>markers</name><operator>.</operator><name>compatibility</name><operator>.</operator><name>internal</name></name>;</package>

<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>core</name><operator>.</operator><name>expressions</name><operator>.</operator><name>PropertyTester</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>core</name><operator>.</operator><name>resources</name><operator>.</operator><name>IResource</name></name>;</import>

<comment type="block" format="javadoc">/**
 * FileMarkerPropertyTester is a property tester for a marker entry to see if it
 * is a marker that has a file behind it.
 * 
 * @since 3.4
 * 
 */</comment>
<class><specifier>public</specifier> class <name>FileMarkerPropertyTester</name> <super><extends>extends <name>PropertyTester</name></extends></super> <block>{

	<decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>Object</name></type> <name>FILE_MARKER</name> <init>= <expr><literal type="string">"fileMarker"</literal></expr></init></decl>;</decl_stmt> <comment type="line">//$NON-NLS-1$</comment>

	<comment type="block" format="javadoc">/**
	 * Create a new instance of the receiver.
	 */</comment>
	<constructor><specifier>public</specifier> <name>FileMarkerPropertyTester</name><parameter_list>()</parameter_list> <block>{
		<expr_stmt><expr><call><name>super</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	}</block></constructor>

	<comment type="block">/* (non-Javadoc)
	 * @see org.eclipse.core.expressions.IPropertyTester#test(java.lang.Object, java.lang.String, java.lang.Object[], java.lang.Object)
	 */</comment>
	<function><specifier>public</specifier> <type><name>boolean</name></type> <name>test</name><parameter_list>(<parameter><decl><type><name>Object</name></type> <name>receiver</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>property</name></decl></parameter>, <parameter><decl><type><name><name>Object</name><index>[]</index></name></type> <name>args</name></decl></parameter>,
			<parameter><decl><type><name>Object</name></type> <name>expectedValue</name></decl></parameter>)</parameter_list> <block>{
		<if>if <condition>(<expr><call><name><name>property</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>FILE_MARKER</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
			<if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>MarkerEntry</name><operator>)</operator> <name>receiver</name><operator>)</operator><operator>.</operator><call><name>getMarker</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getResource</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>IResource</name><operator>.</operator><name>FILE</name></name></expr>)</condition><then>
				<block type="pseudo"><return>return <expr><literal type="boolean">true</literal></expr>;</return></block></then></if>
		}</block></then></if>
		<return>return <expr><literal type="boolean">false</literal></expr>;</return>
	}</block></function>

}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="org.eclipse.ui.ide.markers.compatibility/src/org/eclipse/ui/ide/markers/compatibility/internal/FiltersContribution.java" hash="e8118270ed85e95a821f7470b8d9e6a0fb80280e"><comment type="block" format="javadoc">/*******************************************************************************
 * Copyright (c) 2007 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     IBM Corporation - initial API and implementation
 ******************************************************************************/</comment>

<package>package <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>ide</name><operator>.</operator><name>markers</name><operator>.</operator><name>compatibility</name><operator>.</operator><name>internal</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Collection</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Iterator</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>jface</name><operator>.</operator><name>action</name><operator>.</operator><name>ContributionItem</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>jface</name><operator>.</operator><name>action</name><operator>.</operator><name>IContributionItem</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>jface</name><operator>.</operator><name>action</name><operator>.</operator><name>Separator</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>swt</name><operator>.</operator><name>SWT</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>swt</name><operator>.</operator><name>widgets</name><operator>.</operator><name>Event</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>swt</name><operator>.</operator><name>widgets</name><operator>.</operator><name>Listener</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>swt</name><operator>.</operator><name>widgets</name><operator>.</operator><name>Menu</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>swt</name><operator>.</operator><name>widgets</name><operator>.</operator><name>MenuItem</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>ide</name><operator>.</operator><name>markers</name><operator>.</operator><name>compatibility</name><operator>.</operator><name>api</name><operator>.</operator><name>internal</name><operator>.</operator><name>MarkerMessages</name></name>;</import>

<comment type="block" format="javadoc">/**
 * FiltersContribution is the contribution for the filters menu.
 * 
 * @since 3.4
 * 
 */</comment>
<class><specifier>public</specifier> class <name>FiltersContribution</name> <super><extends>extends <name>MarkersContribution</name></extends></super> <block>{

	<comment type="block">/*
	 * (non-Javadoc)
	 * 
	 * @see org.eclipse.ui.actions.CompoundContributionItem#getContributionItems()
	 */</comment>
	<function><specifier>protected</specifier> <type><name><name>IContributionItem</name><index>[]</index></name></type> <name>getContributionItems</name><parameter_list>()</parameter_list> <block>{

		<decl_stmt><decl><type><name>Collection</name></type> <name>groups</name> <init>= <expr><call><name>getView</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getAllFilters</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

		<if>if <condition>(<expr><call><name><name>groups</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then>
			<block type="pseudo"><return>return <expr><operator>new</operator> <name><name>IContributionItem</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</return></block></then></if>

		<decl_stmt><decl><type><name>Iterator</name></type> <name>groupsIterator</name> <init>= <expr><call><name><name>groups</name><operator>.</operator><name>iterator</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name><name>IContributionItem</name><index>[]</index></name></type> <name>items</name> <init>= <expr><operator>new</operator> <name><name>IContributionItem</name><index>[<expr><call><name><name>groups</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>groups</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
			<decl_stmt><decl><type><specifier>final</specifier> <name>MarkerFieldFilterGroup</name></type> <name>group</name> <init>= <expr><operator>(</operator><name>MarkerFieldFilterGroup</name><operator>)</operator> <call><name><name>groupsIterator</name>
					<operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><name><name>items</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>new</operator> <class><super><name>ContributionItem</name></super><argument_list>()</argument_list> <block>{

				<comment type="block">/*
				 * (non-Javadoc)
				 * 
				 * @see org.eclipse.jface.action.ContributionItem#fill(org.eclipse.swt.widgets.Menu,
				 *      int)
				 */</comment>
				<function><specifier>public</specifier> <type><name>void</name></type> <name>fill</name><parameter_list>(<parameter><decl><type><name>Menu</name></type> <name>menu</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>index</name></decl></parameter>)</parameter_list> <block>{
					<decl_stmt><decl><type><name>MenuItem</name></type> <name>item</name> <init>= <expr><operator>new</operator> <call><name>MenuItem</name><argument_list>(<argument><expr><name>menu</name></expr></argument>, <argument><expr><name><name>SWT</name><operator>.</operator><name>CHECK</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<expr_stmt><expr><call><name><name>item</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><call><name><name>group</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<decl_stmt><decl><type><name>ExtendedMarkersView</name></type> <name>view</name> <init>= <expr><call><name>getView</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
					<expr_stmt><expr><call><name><name>item</name><operator>.</operator><name>addListener</name></name><argument_list>(<argument><expr><name><name>SWT</name><operator>.</operator><name>Selection</name></name></expr></argument>, <argument><expr><call><name>getMenuItemListener</name><argument_list>(<argument><expr><name>group</name></expr></argument>,
							<argument><expr><name>view</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					<if>if <condition>(<expr><name>view</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>view</name><operator>.</operator><name>isEnabled</name></name><argument_list>(<argument><expr><name>group</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
						<expr_stmt><expr><call><name><name>item</name><operator>.</operator><name>setSelection</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></then></if>
				}</block></function>

				<comment type="block" format="javadoc">/**
				 * Return the menu item listener for selection of a filter.
				 * 
				 * @param group
				 * @param view
				 * @return Listener
				 */</comment>
				<function><specifier>private</specifier> <type><name>Listener</name></type> <name>getMenuItemListener</name><parameter_list>(
						<parameter><decl><type><specifier>final</specifier> <name>MarkerFieldFilterGroup</name></type> <name>group</name></decl></parameter>,
						<parameter><decl><type><specifier>final</specifier> <name>ExtendedMarkersView</name></type> <name>view</name></decl></parameter>)</parameter_list> <block>{
					<return>return <expr><operator>new</operator> <class><super><name>Listener</name></super><argument_list>()</argument_list> <block>{
						<comment type="block">/*
						 * (non-Javadoc)
						 * 
						 * @see org.eclipse.swt.widgets.Listener#handleEvent(org.eclipse.swt.widgets.Event)
						 */</comment>
						<function><specifier>public</specifier> <type><name>void</name></type> <name>handleEvent</name><parameter_list>(<parameter><decl><type><name>Event</name></type> <name>event</name></decl></parameter>)</parameter_list> <block>{
							<if>if <condition>(<expr><name>view</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then>
								<block type="pseudo"><expr_stmt><expr><call><name><name>view</name><operator>.</operator><name>toggleFilter</name></name><argument_list>(<argument><expr><name>group</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
						}</block></function>
					}</block></class></expr>;</return>
				}</block></function>
			}</block></class></expr>;</expr_stmt>
		}</block></for>

		<expr_stmt><expr><name><name>items</name><index>[<expr><call><name><name>groups</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>]</index></name> <operator>=</operator> <operator>new</operator> <call><name>Separator</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>items</name><index>[<expr><call><name><name>groups</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>getShowAllContribution</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

		<return>return <expr><name>items</name></expr>;</return>

	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Return the show all contribution.
	 * 
	 * @return IContributionItem
	 */</comment>
	<function><specifier>private</specifier> <type><name>IContributionItem</name></type> <name>getShowAllContribution</name><parameter_list>()</parameter_list> <block>{
		<return>return <expr><operator>new</operator> <class><super><name>ContributionItem</name></super><argument_list>()</argument_list> <block>{
			<comment type="block">/*
			 * (non-Javadoc)
			 * 
			 * @see org.eclipse.jface.action.ContributionItem#fill(org.eclipse.swt.widgets.Menu,
			 *      int)
			 */</comment>
			<function><specifier>public</specifier> <type><name>void</name></type> <name>fill</name><parameter_list>(<parameter><decl><type><name>Menu</name></type> <name>menu</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>index</name></decl></parameter>)</parameter_list> <block>{
				<decl_stmt><decl><type><name>MenuItem</name></type> <name>item</name> <init>= <expr><operator>new</operator> <call><name>MenuItem</name><argument_list>(<argument><expr><name>menu</name></expr></argument>, <argument><expr><name><name>SWT</name><operator>.</operator><name>CHECK</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><call><name><name>item</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><name><name>MarkerMessages</name><operator>.</operator><name>MarkerFilter_showAllCommand_title</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>item</name><operator>.</operator><name>setSelection</name></name><argument_list>(<argument><expr><call><name>noFiltersSelected</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<expr_stmt><expr><call><name><name>item</name><operator>.</operator><name>addListener</name></name><argument_list>(<argument><expr><name><name>SWT</name><operator>.</operator><name>Selection</name></name></expr></argument>, <argument><expr><operator>new</operator> <class><super><name>Listener</name></super><argument_list>()</argument_list> <block>{
					<comment type="block">/*
					 * (non-Javadoc)
					 * 
					 * @see org.eclipse.swt.widgets.Listener#handleEvent(org.eclipse.swt.widgets.Event)
					 */</comment>
					<function><specifier>public</specifier> <type><name>void</name></type> <name>handleEvent</name><parameter_list>(<parameter><decl><type><name>Event</name></type> <name>event</name></decl></parameter>)</parameter_list> <block>{
						<expr_stmt><expr><call><name>getView</name><argument_list>()</argument_list></call><operator>.</operator><call><name>disableAllFilters</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
					}</block></function>
				}</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></function>

			<comment type="block" format="javadoc">/**
			 * Return whether or not any filters are selected.
			 * 
			 * @return boolean &lt;code&gt;true&lt;/code&gt; if none of the current
			 *         filters are selected.
			 */</comment>
			<function><specifier>private</specifier> <type><name>boolean</name></type> <name>noFiltersSelected</name><parameter_list>()</parameter_list> <block>{
				<decl_stmt><decl><type><name>Iterator</name></type> <name>groupsIterator</name> <init>= <expr><call><name>getView</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getAllFilters</name><argument_list>()</argument_list></call><operator>.</operator><call><name>iterator</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
				<while>while <condition>(<expr><call><name><name>groupsIterator</name><operator>.</operator><name>hasNext</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
					<decl_stmt><decl><type><name>MarkerFieldFilterGroup</name></type> <name>group</name> <init>= <expr><operator>(</operator><name>MarkerFieldFilterGroup</name><operator>)</operator> <call><name><name>groupsIterator</name>
							<operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
					<if>if <condition>(<expr><call><name><name>group</name><operator>.</operator><name>isEnabled</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
						<block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr>;</return></block></then></if>
				}</block></while>
				<return>return <expr><literal type="boolean">true</literal></expr>;</return>
			}</block></function>

		}</block></class></expr>;</return>
	}</block></function>

}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="org.eclipse.ui.ide.markers.compatibility/src/org/eclipse/ui/ide/markers/compatibility/internal/GroupFilterConfigurationArea.java" hash="68cc801d9a6400250d407158f294bf2115423250"><comment type="block" format="javadoc">/*******************************************************************************
 * Copyright (c) 2007 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     IBM Corporation - initial API and implementation
 ******************************************************************************/</comment>

<package>package <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>ide</name><operator>.</operator><name>markers</name><operator>.</operator><name>compatibility</name><operator>.</operator><name>internal</name></name>;</package>

<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>ide</name><operator>.</operator><name>markers</name><operator>.</operator><name>compatibility</name><operator>.</operator><name>api</name><operator>.</operator><name>FilterConfigurationArea</name></name>;</import>

<comment type="block" format="javadoc">/**
 * GroupFilterConfigurationArea is the FilterConfigurationArea for the special case
 * group level settings for a {@link MarkerFieldFilterGroup}
 * @since 3.4
 *
 */</comment>
<class><specifier>abstract</specifier> class <name>GroupFilterConfigurationArea</name> <super><extends>extends <name>FilterConfigurationArea</name></extends></super> <block>{
	
	<comment type="block" format="javadoc">/**
	 * Apply to the group
	 * @param group
	 */</comment>
	<function_decl><specifier>public</specifier> <specifier>abstract</specifier> <type><name>void</name></type> <name>applyToGroup</name><parameter_list>(<parameter><decl><type><name>MarkerFieldFilterGroup</name></type> <name>group</name></decl></parameter>)</parameter_list>;</function_decl>
	
	<comment type="block" format="javadoc">/**
	 * Initialise from the group
	 * @param group
	 */</comment>
	<function_decl><specifier>public</specifier> <specifier>abstract</specifier> <type><name>void</name></type> <name>initializeFromGroup</name><parameter_list>(<parameter><decl><type><name>MarkerFieldFilterGroup</name></type> <name>group</name></decl></parameter>)</parameter_list>;</function_decl>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="org.eclipse.ui.ide.markers.compatibility/src/org/eclipse/ui/ide/markers/compatibility/internal/GroupsContribution.java" hash="4d4ec4ba841ab5395e27ff60436f4de97213c96b"><comment type="block" format="javadoc">/*******************************************************************************
 * Copyright (c) 2007 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     IBM Corporation - initial API and implementation
 ******************************************************************************/</comment>
<package>package <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>ide</name><operator>.</operator><name>markers</name><operator>.</operator><name>compatibility</name><operator>.</operator><name>internal</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Collection</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Iterator</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>jface</name><operator>.</operator><name>action</name><operator>.</operator><name>ContributionItem</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>jface</name><operator>.</operator><name>action</name><operator>.</operator><name>IContributionItem</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>swt</name><operator>.</operator><name>SWT</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>swt</name><operator>.</operator><name>widgets</name><operator>.</operator><name>Event</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>swt</name><operator>.</operator><name>widgets</name><operator>.</operator><name>Listener</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>swt</name><operator>.</operator><name>widgets</name><operator>.</operator><name>Menu</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>swt</name><operator>.</operator><name>widgets</name><operator>.</operator><name>MenuItem</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>ide</name><operator>.</operator><name>markers</name><operator>.</operator><name>compatibility</name><operator>.</operator><name>api</name><operator>.</operator><name>internal</name><operator>.</operator><name>MarkerGroup</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>ide</name><operator>.</operator><name>markers</name><operator>.</operator><name>compatibility</name><operator>.</operator><name>api</name><operator>.</operator><name>internal</name><operator>.</operator><name>MarkerMessages</name></name>;</import>

<comment type="block" format="javadoc">/**
 * GroupsContribution is the contribution for the marker groupings.
 * 
 * @since 3.4
 * 
 */</comment>
<class><specifier>public</specifier> class <name>GroupsContribution</name> <super><extends>extends <name>MarkersContribution</name></extends></super> <block>{

	<comment type="block" format="javadoc">/**
	 * Create a new instance of the receiver.
	 */</comment>
	<constructor><specifier>public</specifier> <name>GroupsContribution</name><parameter_list>()</parameter_list> <block>{
		<expr_stmt><expr><call><name>super</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	}</block></constructor>

	<comment type="block">/*
	 * (non-Javadoc)
	 * 
	 * @see org.eclipse.ui.actions.CompoundContributionItem#getContributionItems()
	 */</comment>
	<function><specifier>protected</specifier> <type><name><name>IContributionItem</name><index>[]</index></name></type> <name>getContributionItems</name><parameter_list>()</parameter_list> <block>{

		<decl_stmt><decl><type><name>Collection</name></type> <name>groups</name> <init>= <expr><call><name>getView</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getBuilder</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getGenerator</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getMarkerGroups</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

		<if>if <condition>(<expr><call><name><name>groups</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
			<block type="pseudo"><return>return <expr><operator>new</operator> <name><name>IContributionItem</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</return></block></then></if>

		<decl_stmt><decl><type><name>Iterator</name></type> <name>groupsIterator</name> <init>= <expr><call><name><name>groups</name><operator>.</operator><name>iterator</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name><name>IContributionItem</name><index>[]</index></name></type> <name>items</name> <init>= <expr><operator>new</operator> <name><name>IContributionItem</name><index>[<expr><call><name><name>groups</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

		<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>items</name><operator>.</operator><name>length</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
			<decl_stmt><decl><type><specifier>final</specifier> <name>MarkerGroup</name></type> <name>group</name> <init>= <expr><operator>(</operator><name>MarkerGroup</name><operator>)</operator> <call><name><name>groupsIterator</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><name><name>items</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>getContributionItem</name><argument_list>(<argument><expr><name>group</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></for>

		<expr_stmt><expr><name><name>items</name><index>[<expr><name><name>items</name><operator>.</operator><name>length</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>getContributionItem</name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>items</name></expr>;</return>

	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Return the IContributionItem for group.
	 * 
	 * @param group
	 * @return IContributionItem
	 */</comment>
	<function><specifier>private</specifier> <type><name>IContributionItem</name></type> <name>getContributionItem</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>MarkerGroup</name></type> <name>group</name></decl></parameter>)</parameter_list> <block>{
		<return>return <expr><operator>new</operator> <class><super><name>ContributionItem</name></super><argument_list>()</argument_list> <block>{

			<comment type="block">/*
			 * (non-Javadoc)
			 * 
			 * @see org.eclipse.jface.action.ContributionItem#fill(org.eclipse.swt.widgets.Menu,
			 *      int)
			 */</comment>
			<function><specifier>public</specifier> <type><name>void</name></type> <name>fill</name><parameter_list>(<parameter><decl><type><name>Menu</name></type> <name>menu</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>index</name></decl></parameter>)</parameter_list> <block>{
				<decl_stmt><decl><type><name>MenuItem</name></type> <name>item</name> <init>= <expr><operator>new</operator> <call><name>MenuItem</name><argument_list>(<argument><expr><name>menu</name></expr></argument>, <argument><expr><name><name>SWT</name><operator>.</operator><name>RADIO</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><call><name><name>item</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><ternary><condition><expr><name>group</name> <operator>==</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><name><name>MarkerMessages</name><operator>.</operator><name>ProblemView_None</name></name></expr>
						</then><else>: <expr><call><name><name>group</name><operator>.</operator><name>getMarkerField</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getColumnHeaderText</name><argument_list>()</argument_list></call></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<decl_stmt><decl><type><name>ExtendedMarkersView</name></type> <name>view</name> <init>= <expr><call><name>getView</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><call><name><name>item</name><operator>.</operator><name>addListener</name></name><argument_list>(<argument><expr><name><name>SWT</name><operator>.</operator><name>Selection</name></name></expr></argument>,
						<argument><expr><call><name>getMenuItemListener</name><argument_list>(<argument><expr><name>group</name></expr></argument>, <argument><expr><name>view</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<if>if <condition>(<expr><name>view</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
					<if>if <condition>(<expr><name>group</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then>
						<block type="pseudo"><expr_stmt><expr><call><name><name>item</name><operator>.</operator><name>setSelection</name></name><argument_list>(<argument><expr><call><name><name>view</name><operator>.</operator><name>getCategoryGroup</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
					<else>else
						<block type="pseudo"><expr_stmt><expr><call><name><name>item</name>
								<operator>.</operator><name>setSelection</name></name><argument_list>(<argument><expr><call><name><name>group</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><call><name><name>view</name>
										<operator>.</operator><name>getCategoryGroup</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>
				}</block></then></if>

			}</block></function>

			<comment type="block" format="javadoc">/**
			 * Return the menu item listener for selection of a filter.
			 * 
			 * @param group
			 * @param view
			 * @return Listener
			 */</comment>
			<function><specifier>private</specifier> <type><name>Listener</name></type> <name>getMenuItemListener</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>MarkerGroup</name></type> <name>group</name></decl></parameter>,
					<parameter><decl><type><specifier>final</specifier> <name>ExtendedMarkersView</name></type> <name>view</name></decl></parameter>)</parameter_list> <block>{
				<return>return <expr><operator>new</operator> <class><super><name>Listener</name></super><argument_list>()</argument_list> <block>{
					<comment type="block">/*
					 * (non-Javadoc)
					 * 
					 * @see org.eclipse.swt.widgets.Listener#handleEvent(org.eclipse.swt.widgets.Event)
					 */</comment>
					<function><specifier>public</specifier> <type><name>void</name></type> <name>handleEvent</name><parameter_list>(<parameter><decl><type><name>Event</name></type> <name>event</name></decl></parameter>)</parameter_list> <block>{

						<decl_stmt><decl><type><name>MenuItem</name></type> <name>item</name> <init>= <expr><operator>(</operator><name>MenuItem</name><operator>)</operator> <name><name>event</name><operator>.</operator><name>widget</name></name></expr></init></decl>;</decl_stmt>

						<if>if <condition>(<expr><call><name><name>item</name><operator>.</operator><name>getSelection</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <name>view</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then>
							<block type="pseudo"><expr_stmt><expr><call><name><name>view</name><operator>.</operator><name>setCategoryGroup</name></name><argument_list>(<argument><expr><name>group</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
					}</block></function>
				}</block></class></expr>;</return>
			}</block></function>
		}</block></class></expr>;</return>
	}</block></function>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="org.eclipse.ui.ide.markers.compatibility/src/org/eclipse/ui/ide/markers/compatibility/internal/MarkCompletedHandler.java" hash="ddb22d183d254facf91f46304df512a9e8a0d8cc"><comment type="block" format="javadoc">/*******************************************************************************
 * Copyright (c) 2007 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     IBM Corporation - initial API and implementation
 ******************************************************************************/</comment>
<package>package <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>ide</name><operator>.</operator><name>markers</name><operator>.</operator><name>compatibility</name><operator>.</operator><name>internal</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashMap</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>core</name><operator>.</operator><name>commands</name><operator>.</operator><name>ExecutionEvent</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>core</name><operator>.</operator><name>commands</name><operator>.</operator><name>operations</name><operator>.</operator><name>IUndoableOperation</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>core</name><operator>.</operator><name>resources</name><operator>.</operator><name>IMarker</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>ide</name><operator>.</operator><name>markers</name><operator>.</operator><name>compatibility</name><operator>.</operator><name>api</name><operator>.</operator><name>MarkerViewHandler</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>ide</name><operator>.</operator><name>markers</name><operator>.</operator><name>compatibility</name><operator>.</operator><name>api</name><operator>.</operator><name>internal</name><operator>.</operator><name>MarkerMessages</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>ide</name><operator>.</operator><name>undo</name><operator>.</operator><name>UpdateMarkersOperation</name></name>;</import>

<comment type="block" format="javadoc">/**
 * MarkCompletedHandler is the handler for marking the current selection as
 * completed.
 * 
 * @since 3.4
 * 
 */</comment>
<class><specifier>public</specifier> class <name>MarkCompletedHandler</name> <super><extends>extends <name>MarkerViewHandler</name></extends></super> <block>{

	<comment type="block">/*
	 * (non-Javadoc)
	 * 
	 * @see org.eclipse.core.commands.IHandler#execute(org.eclipse.core.commands.ExecutionEvent)
	 */</comment>
	<function><specifier>public</specifier> <type><name>Object</name></type> <name>execute</name><parameter_list>(<parameter><decl><type><name>ExecutionEvent</name></type> <name>event</name></decl></parameter>)</parameter_list> <block>{

		<decl_stmt><decl><type><name><name>IMarker</name><index>[]</index></name></type> <name>markers</name> <init>= <expr><call><name>getSelectedMarkers</name><argument_list>(<argument><expr><name>event</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if>if<condition>(<expr><name><name>markers</name><operator>.</operator><name>length</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then>
			<block type="pseudo"><return>return <expr><name>this</name></expr>;</return></block></then></if>
		
		<decl_stmt><decl><type><name>Map</name></type> <name>attrs</name> <init>= <expr><operator>new</operator> <call><name>HashMap</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>attrs</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>IMarker</name><operator>.</operator><name>DONE</name></name></expr></argument>, <argument><expr><name><name>Boolean</name><operator>.</operator><name>TRUE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>IUndoableOperation</name></type> <name>op</name> <init>= <expr><operator>new</operator> <call><name>UpdateMarkersOperation</name><argument_list>(<argument><expr><name>markers</name></expr></argument>, <argument><expr><name>attrs</name></expr></argument>,
				<argument><expr><name><name>MarkerMessages</name><operator>.</operator><name>markCompletedAction_title</name></name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>execute</name><argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><name><name>MarkerMessages</name><operator>.</operator><name>markCompletedAction_title</name></name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>this</name></expr>;</return>
	}</block></function>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="org.eclipse.ui.ide.markers.compatibility/src/org/eclipse/ui/ide/markers/compatibility/internal/MarkerCategory.java" hash="bccd1020e76cf6855a5481ca94764d9198e37183"><comment type="block" format="javadoc">/*******************************************************************************
 * Copyright (c) 2007 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     IBM Corporation - initial API and implementation
 ******************************************************************************/</comment>

<package>package <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>ide</name><operator>.</operator><name>markers</name><operator>.</operator><name>compatibility</name><operator>.</operator><name>internal</name></name>;</package>

<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>core</name><operator>.</operator><name>resources</name><operator>.</operator><name>IMarker</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>osgi</name><operator>.</operator><name>util</name><operator>.</operator><name>NLS</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>ide</name><operator>.</operator><name>markers</name><operator>.</operator><name>compatibility</name><operator>.</operator><name>api</name><operator>.</operator><name>MarkerItem</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>ide</name><operator>.</operator><name>markers</name><operator>.</operator><name>compatibility</name><operator>.</operator><name>api</name><operator>.</operator><name>internal</name><operator>.</operator><name>MarkerMessages</name></name>;</import>

<class>class <name>MarkerCategory</name> <super><extends>extends <name>MarkerItem</name></extends></super> <block>{

	<decl_stmt><decl><type><name>int</name></type> <name>start</name></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>int</name></type> <name>end</name></decl>;</decl_stmt>

	<decl_stmt><decl><specifier>private</specifier> <type><name><name>MarkerEntry</name><index>[]</index></name></type> <name>children</name></decl>;</decl_stmt>

	<decl_stmt><decl><specifier>private</specifier> <type><name>String</name></type> <name>name</name></decl>;</decl_stmt>

	<decl_stmt><decl><specifier>private</specifier> <type><name>CachedMarkerBuilder</name></type> <name>cachedMarkerBuilder</name></decl>;</decl_stmt>

	<decl_stmt><decl><specifier>private</specifier> <type><name>int</name></type> <name>severity</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

	<comment type="block" format="javadoc">/**
	 * Create a new instance of the receiver that has the markers between
	 * startIndex and endIndex showing.
	 * 
	 * @param cachedMarkerBuilder
	 * @param startIndex
	 * @param endIndex
	 *            the builder used to generate the children lazily.
	 */</comment>
	<constructor><name>MarkerCategory</name><parameter_list>(<parameter><decl><type><name>CachedMarkerBuilder</name></type> <name>cachedMarkerBuilder</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>startIndex</name></decl></parameter>,
			<parameter><decl><type><name>int</name></type> <name>endIndex</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>categoryName</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>cachedMarkerBuilder</name></name> <operator>=</operator> <name>cachedMarkerBuilder</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>start</name> <operator>=</operator> <name>startIndex</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>end</name> <operator>=</operator> <name>endIndex</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>name</name> <operator>=</operator> <name>categoryName</name></expr>;</expr_stmt>
	}</block></constructor>

	<comment type="block">/*
	 * (non-Javadoc)
	 * 
	 * @see org.eclipse.ui.views.markers.internal.MarkerNode#getChildren()
	 */</comment>
	<function><specifier>public</specifier> <type><name><name>MarkerItem</name><index>[]</index></name></type> <name>getChildren</name><parameter_list>()</parameter_list> <block>{

		<if>if <condition>(<expr><name>children</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{

			<comment type="line">// Return nothing while a build is going on as this could be</comment>
			<comment type="line">// stale</comment>
			<if>if <condition>(<expr><call><name><name>this</name><operator>.</operator><name>cachedMarkerBuilder</name><operator>.</operator><name>isBuilding</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
				<return>return <expr><name><name>MarkerSupportInternalUtilities</name><operator>.</operator><name>EMPTY_MARKER_ITEM_ARRAY</name></name></expr>;</return>
			}</block></then></if>

			<decl_stmt><decl><type><name><name>MarkerItem</name><index>[]</index></name></type> <name>allMarkers</name> <init>= <expr><call><name><name>cachedMarkerBuilder</name><operator>.</operator><name>getMarkerEntries</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

			<decl_stmt><decl><type><name>int</name></type> <name>totalSize</name> <init>= <expr><call><name>getTotalSize</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><name>children</name> <operator>=</operator> <operator>new</operator> <name><name>MarkerEntry</name><index>[<expr><name>totalSize</name></expr>]</index></name></expr>;</expr_stmt>

			<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>arraycopy</name></name><argument_list>(<argument><expr><name>allMarkers</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>children</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>totalSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>children</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
				<expr_stmt><expr><name><name>children</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>setCategory</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></for>
		}</block></then></if>
		<return>return <expr><name>children</name></expr>;</return>

	}</block></function>

	<comment type="block">/*
	 * (non-Javadoc)
	 * 
	 * @see org.eclipse.ui.views.markers.internal.MarkerNode#getParent()
	 */</comment>
	<function><specifier>public</specifier> <type><name>MarkerItem</name></type> <name>getParent</name><parameter_list>()</parameter_list> <block>{
		<return>return <expr><literal type="null">null</literal></expr>;</return>
	}</block></function>

	<comment type="block">/*
	 * (non-Javadoc)
	 * 
	 * @see org.eclipse.ui.views.markers.internal.MarkerNode#getDescription()
	 */</comment>
	<function><specifier>public</specifier> <type><name>String</name></type> <name>getDescription</name><parameter_list>()</parameter_list> <block>{

		<decl_stmt><decl><type><name>int</name></type> <name>size</name> <init>= <expr><call><name>getTotalSize</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>limit</name> <init>= <expr><call><name><name>MarkerSupportInternalUtilities</name><operator>.</operator><name>getMarkerLimit</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

		<if>if <condition>(<expr><name>limit</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>size</name> <operator>&gt;</operator> <name>limit</name></expr>)</condition><then> <block>{
			<return>return <expr><call><name><name>NLS</name><operator>.</operator><name>bind</name></name><argument_list>(<argument><expr><name><name>MarkerMessages</name><operator>.</operator><name>Category_Limit_Label</name></name></expr></argument>,
					<argument><expr><operator>new</operator> <name><name>Object</name><index>[]</index></name> <block>{
							<expr><name>name</name></expr>,
							<expr><call><name><name>String</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><call><name><name>MarkerSupportInternalUtilities</name>
									<operator>.</operator><name>getMarkerLimit</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>,
							<expr><call><name><name>String</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><call><name>getTotalSize</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr> }</block></expr></argument>)</argument_list></call></expr>;</return>

		}</block></then></if>
		<if>if <condition>(<expr><name>size</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then>
			<block type="pseudo"><return>return <expr><call><name><name>NLS</name><operator>.</operator><name>bind</name></name><argument_list>(<argument><expr><name><name>MarkerMessages</name><operator>.</operator><name>Category_One_Item_Label</name></name></expr></argument>,
					<argument><expr><operator>new</operator> <name><name>Object</name><index>[]</index></name> <block>{ <expr><name>name</name></expr> }</block></expr></argument>)</argument_list></call></expr>;</return></block></then></if>

		<return>return <expr><call><name><name>NLS</name><operator>.</operator><name>bind</name></name><argument_list>(<argument><expr><name><name>MarkerMessages</name><operator>.</operator><name>Category_Label</name></name></expr></argument>, <argument><expr><operator>new</operator> <name><name>Object</name><index>[]</index></name> <block>{ <expr><name>name</name></expr>,
				<expr><call><name><name>String</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr> }</block></expr></argument>)</argument_list></call></expr>;</return>

	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Get the total size of the receiver.
	 * 
	 * @return int
	 */</comment>
	<function><type><name>int</name></type> <name>getTotalSize</name><parameter_list>()</parameter_list> <block>{
		<return>return <expr><name>end</name> <operator>-</operator> <name>start</name> <operator>+</operator> <literal type="number">1</literal></expr>;</return>
	}</block></function>

	<comment type="block">/*
	 * (non-Javadoc)
	 * 
	 * @see org.eclipse.ui.views.markers.internal.MarkerNode#isConcrete()
	 */</comment>
	<function><specifier>public</specifier> <type><name>boolean</name></type> <name>isConcrete</name><parameter_list>()</parameter_list> <block>{
		<return>return <expr><literal type="boolean">false</literal></expr>;</return>
	}</block></function>

	<comment type="block">/*
	 * (non-Javadoc)
	 * 
	 * @see org.eclipse.ui.views.markers.internal.MarkerNode#getConcreteRepresentative()
	 */</comment>
	<function><specifier>public</specifier> <type><name>MarkerEntry</name></type> <name>getConcreteRepresentative</name><parameter_list>()</parameter_list> <block>{
		<return>return <expr><call><name><name>cachedMarkerBuilder</name><operator>.</operator><name>getMarkerEntries</name></name><argument_list>()</argument_list></call><index>[<expr><name>start</name></expr>]</index></expr>;</return>
	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Return the name of the receiver.
	 * 
	 * @return String
	 */</comment>
	<function><specifier>public</specifier> <type><name>String</name></type> <name>getName</name><parameter_list>()</parameter_list> <block>{
		<return>return <expr><name>name</name></expr>;</return>
	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Get the highest severity in the receiver.
	 * @return int
	 */</comment>
	<function><type><name>int</name></type> <name>getHighestSeverity</name><parameter_list>()</parameter_list> <block>{
		<if>if<condition>(<expr><name>severity</name>  <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><then>
			<block type="pseudo"><return>return <expr><name>severity</name></expr>;</return></block></then></if>
		<expr_stmt><expr><name>severity</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt><comment type="line">//Reset to info</comment>
		<decl_stmt><decl><type><name><name>MarkerItem</name><index>[]</index></name></type> <name>contents</name> <init>= <expr><call><name>getChildren</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>contents</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
			<if>if<condition>(<expr><name><name>contents</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>isConcrete</name><argument_list>()</argument_list></call></expr>)</condition><then><block>{
				<decl_stmt><decl><type><name>int</name></type> <name>elementSeverity</name> <init>= <expr><name><name>contents</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>getAttributeValue</name><argument_list>(<argument><expr><name><name>IMarker</name><operator>.</operator><name>SEVERITY</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<if>if<condition>(<expr><name>elementSeverity</name> <operator>&gt;</operator> <name>severity</name></expr>)</condition><then>
					<block type="pseudo"><expr_stmt><expr><name>severity</name> <operator>=</operator> <name>elementSeverity</name></expr>;</expr_stmt></block></then></if>
				<if>if<condition>(<expr><name>severity</name> <operator>==</operator> <name><name>IMarker</name><operator>.</operator><name>SEVERITY_ERROR</name></name></expr>)</condition><then><comment type="line">//As bad as it gets</comment>
					<block type="pseudo"><return>return <expr><name>severity</name></expr>;</return></block></then></if>
			}</block></then></if>			
		}</block></for>
		<return>return <expr><name>severity</name></expr>;</return>
	}</block></function>

}</block></class></unit>

<unit revision="0.9.5" language="Java" filename="org.eclipse.ui.ide.markers.compatibility/src/org/eclipse/ui/ide/markers/compatibility/internal/MarkerColumnLabelProvider.java" hash="759131df4102d434cb42f750a55cecadfb3ee5a8"><comment type="block" format="javadoc">/*******************************************************************************
 * Copyright (c) 2007 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     IBM Corporation - initial API and implementation
 *******************************************************************************/</comment>

<package>package <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>ide</name><operator>.</operator><name>markers</name><operator>.</operator><name>compatibility</name><operator>.</operator><name>internal</name></name>;</package>

<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>core</name><operator>.</operator><name>resources</name><operator>.</operator><name>IMarker</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>jface</name><operator>.</operator><name>dialogs</name><operator>.</operator><name>Dialog</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>jface</name><operator>.</operator><name>fieldassist</name><operator>.</operator><name>FieldDecorationRegistry</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>jface</name><operator>.</operator><name>resource</name><operator>.</operator><name>ImageDescriptor</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>jface</name><operator>.</operator><name>resource</name><operator>.</operator><name>JFaceResources</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>jface</name><operator>.</operator><name>resource</name><operator>.</operator><name>LocalResourceManager</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>jface</name><operator>.</operator><name>resource</name><operator>.</operator><name>ResourceManager</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>jface</name><operator>.</operator><name>viewers</name><operator>.</operator><name>ColumnLabelProvider</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>jface</name><operator>.</operator><name>viewers</name><operator>.</operator><name>DecorationOverlayIcon</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>jface</name><operator>.</operator><name>viewers</name><operator>.</operator><name>IDecoration</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>swt</name><operator>.</operator><name>graphics</name><operator>.</operator><name>Image</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>ide</name><operator>.</operator><name>IDE</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>ide</name><operator>.</operator><name>markers</name><operator>.</operator><name>compatibility</name><operator>.</operator><name>api</name><operator>.</operator><name>MarkerField</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>ide</name><operator>.</operator><name>markers</name><operator>.</operator><name>compatibility</name><operator>.</operator><name>api</name><operator>.</operator><name>MarkerItem</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>internal</name><operator>.</operator><name>ide</name><operator>.</operator><name>IDEInternalWorkbenchImages</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>internal</name><operator>.</operator><name>ide</name><operator>.</operator><name>IDEWorkbenchPlugin</name></name>;</import>

<comment type="block" format="javadoc">/**
 * The MarkerColumnLabelProvider is a label provider for an individual column.
 * 
 * @since 3.4
 * 
 */</comment>
<class><specifier>public</specifier> class <name>MarkerColumnLabelProvider</name> <super><extends>extends <name>ColumnLabelProvider</name></extends></super> <block>{

	<decl_stmt><decl><type><name>MarkerField</name></type> <name>field</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>private</specifier> <type><name>boolean</name></type> <name>showAnnotations</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>private</specifier> <type><name>ResourceManager</name></type> <name>imageManager</name></decl>;</decl_stmt>

	<comment type="block" format="javadoc">/**
	 * Create a MarkerViewLabelProvider on a field.
	 * 
	 * @param field
	 * @param decorate
	 *            &lt;code&gt;true&lt;/code&gt; if annotations are to be shown.
	 */</comment>
	<constructor><name>MarkerColumnLabelProvider</name><parameter_list>(<parameter><decl><type><name>MarkerField</name></type> <name>field</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>decorate</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><call><name><name>FieldDecorationRegistry</name><operator>.</operator><name>getDefault</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>field</name></name> <operator>=</operator> <name>field</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>showAnnotations</name></name> <operator>=</operator> <name>decorate</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>imageManager</name> <operator>=</operator> <operator>new</operator> <call><name>LocalResourceManager</name><argument_list>(<argument><expr><call><name><name>JFaceResources</name><operator>.</operator><name>getResources</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></constructor>

	<comment type="block">/*
	 * (non-Javadoc)
	 * 
	 * @see org.eclipse.jface.viewers.ColumnLabelProvider#getText(java.lang.Object)
	 */</comment>
	<function><specifier>public</specifier> <type><name>String</name></type> <name>getText</name><parameter_list>(<parameter><decl><type><name>Object</name></type> <name>element</name></decl></parameter>)</parameter_list> <block>{
		<return>return <expr><call><name><name>field</name><operator>.</operator><name>getValue</name></name><argument_list>(<argument><expr><operator>(</operator><name>MarkerItem</name><operator>)</operator> <name>element</name></expr></argument>)</argument_list></call></expr>;</return>
	}</block></function>

	<comment type="block">/*
	 * (non-Javadoc)
	 * 
	 * @see org.eclipse.jface.viewers.ColumnLabelProvider#getImage(java.lang.Object)
	 */</comment>
	<function><specifier>public</specifier> <type><name>Image</name></type> <name>getImage</name><parameter_list>(<parameter><decl><type><name>Object</name></type> <name>element</name></decl></parameter>)</parameter_list> <block>{

		<comment type="line">// if (showAnnotations &amp;&amp; element instanceof MarkerEntry) {</comment>
		<comment type="line">// MarkerItem item = (MarkerItem) element;</comment>
		<comment type="line">// IMarker marker = item.getMarker();</comment>
		<comment type="line">// if (marker != null) {</comment>
		<comment type="line">// String contextId = IDE.getMarkerHelpRegistry().getHelp(marker);</comment>
		<comment type="line">//</comment>
		<comment type="line">// if (contextId != null)</comment>
		<comment type="line">// return JFaceResources.getImage(Dialog.DLG_IMG_HELP);</comment>
		<comment type="line">// }</comment>
		<comment type="line">// }</comment>

		<decl_stmt><decl><type><name>MarkerItem</name></type> <name>item</name> <init>= <expr><operator>(</operator><name>MarkerItem</name><operator>)</operator> <name>element</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>Image</name></type> <name>image</name> <init>= <expr><call><name><name>field</name><operator>.</operator><name>getImage</name></name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name><name>ImageDescriptor</name><index>[]</index></name></type> <name>descriptors</name> <init>= <expr><operator>new</operator> <name><name>ImageDescriptor</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<if>if <condition>(<expr><name>showAnnotations</name> <operator>&amp;&amp;</operator> <call><name><name>item</name><operator>.</operator><name>isConcrete</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
			<decl_stmt><decl><type><name>IMarker</name></type> <name>marker</name> <init>= <expr><call><name><name>item</name><operator>.</operator><name>getMarker</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
			<comment type="line">// If there is no image get the full image rather than the decorated</comment>
			<comment type="line">// one</comment>
			<if>if <condition>(<expr><name>marker</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
				<decl_stmt><decl><type><name>String</name></type> <name>contextId</name> <init>= <expr><call><name><name>IDE</name><operator>.</operator><name>getMarkerHelpRegistry</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getHelp</name><argument_list>(<argument><expr><name>marker</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<if>if <condition>(<expr><name>contextId</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
					<if>if <condition>(<expr><name>image</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then>
						<block type="pseudo"><expr_stmt><expr><name>image</name> <operator>=</operator> <call><name><name>JFaceResources</name><operator>.</operator><name>getImage</name></name><argument_list>(<argument><expr><name><name>Dialog</name><operator>.</operator><name>DLG_IMG_HELP</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
					<else>else
						<block type="pseudo"><expr_stmt><expr><name><name>descriptors</name><index>[<expr><name><name>IDecoration</name><operator>.</operator><name>TOP_RIGHT</name></name></expr>]</index></name> <operator>=</operator> <call><name><name>IDEWorkbenchPlugin</name>
								<operator>.</operator><name>getIDEImageDescriptor</name></name><argument_list>(<argument><expr><name><name>MarkerSupportInternalUtilities</name><operator>.</operator><name>IMG_MARKERS_HELP_DECORATION_PATH</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>
				}</block></then></if>
				<if>if <condition>(<expr><call><name><name>IDE</name><operator>.</operator><name>getMarkerHelpRegistry</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>hasResolutions</name><argument_list>(<argument><expr><name>marker</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
					<if>if <condition>(<expr><name>image</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then>
						<block type="pseudo"><expr_stmt><expr><name>image</name> <operator>=</operator> <call><name><name>imageManager</name>
								<operator>.</operator><name>createImage</name></name><argument_list>(<argument><expr><call><name><name>IDEInternalWorkbenchImages</name>
										<operator>.</operator><name>getImageDescriptor</name></name><argument_list>(<argument><expr><name><name>IDEInternalWorkbenchImages</name><operator>.</operator><name>IMG_ELCL_QUICK_FIX_ENABLED</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
					<else>else
						<block type="pseudo"><expr_stmt><expr><name><name>descriptors</name><index>[<expr><name><name>IDecoration</name><operator>.</operator><name>BOTTOM_RIGHT</name></name></expr>]</index></name> <operator>=</operator> <call><name><name>IDEWorkbenchPlugin</name>
						<operator>.</operator><name>getIDEImageDescriptor</name></name><argument_list>(<argument><expr><name><name>MarkerSupportInternalUtilities</name><operator>.</operator><name>IMG_MARKERS_QUICK_FIX_DECORATION_PATH</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>
				}</block></then></if>

				<if>if <condition>(<expr><name><name>descriptors</name><index>[<expr><name><name>IDecoration</name><operator>.</operator><name>TOP_RIGHT</name></name></expr>]</index></name> <operator>!=</operator> <literal type="null">null</literal>
						<operator>||</operator> <name><name>descriptors</name><index>[<expr><name><name>IDecoration</name><operator>.</operator><name>BOTTOM_RIGHT</name></name></expr>]</index></name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then>
					<block type="pseudo"><expr_stmt><expr><name>image</name> <operator>=</operator> <call><name><name>imageManager</name><operator>.</operator><name>createImage</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>DecorationOverlayIcon</name><argument_list>(
							<argument><expr><name>image</name></expr></argument>, <argument><expr><name>descriptors</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
			}</block></then></if>
		}</block></then></if>
		<return>return <expr><name>image</name></expr>;</return>
	}</block></function>

	<comment type="block">/*
	 * (non-Javadoc)
	 * 
	 * @see org.eclipse.jface.viewers.BaseLabelProvider#dispose()
	 */</comment>
	<function><specifier>public</specifier> <type><name>void</name></type> <name>dispose</name><parameter_list>()</parameter_list> <block>{
		<expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>dispose</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>imageManager</name><operator>.</operator><name>dispose</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	}</block></function>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="org.eclipse.ui.ide.markers.compatibility/src/org/eclipse/ui/ide/markers/compatibility/internal/CachedMarkerBuilder.java" hash="a54ded359e00e8bf866428b458b3a089f2594b04"><comment type="block" format="javadoc">/*******************************************************************************
 * Copyright (c) 2000, 2007 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     IBM Corporation - initial API and implementation
 *******************************************************************************/</comment>
<package>package <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>ide</name><operator>.</operator><name>markers</name><operator>.</operator><name>compatibility</name><operator>.</operator><name>internal</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>StringReader</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>StringWriter</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>reflect</name><operator>.</operator><name>InvocationTargetException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Arrays</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Collection</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashSet</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Iterator</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>core</name><operator>.</operator><name>resources</name><operator>.</operator><name>IMarker</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>core</name><operator>.</operator><name>resources</name><operator>.</operator><name>IResource</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>core</name><operator>.</operator><name>resources</name><operator>.</operator><name>IResourceChangeEvent</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>core</name><operator>.</operator><name>resources</name><operator>.</operator><name>IResourceChangeListener</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>core</name><operator>.</operator><name>resources</name><operator>.</operator><name>ResourcesPlugin</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>core</name><operator>.</operator><name>resources</name><operator>.</operator><name>mapping</name><operator>.</operator><name>ResourceMapping</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>core</name><operator>.</operator><name>resources</name><operator>.</operator><name>mapping</name><operator>.</operator><name>ResourceMappingContext</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>core</name><operator>.</operator><name>resources</name><operator>.</operator><name>mapping</name><operator>.</operator><name>ResourceTraversal</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>core</name><operator>.</operator><name>runtime</name><operator>.</operator><name>CoreException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>core</name><operator>.</operator><name>runtime</name><operator>.</operator><name>IConfigurationElement</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>core</name><operator>.</operator><name>runtime</name><operator>.</operator><name>IProgressMonitor</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>core</name><operator>.</operator><name>runtime</name><operator>.</operator><name>IStatus</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>core</name><operator>.</operator><name>runtime</name><operator>.</operator><name>NullProgressMonitor</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>core</name><operator>.</operator><name>runtime</name><operator>.</operator><name>Status</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>core</name><operator>.</operator><name>runtime</name><operator>.</operator><name>SubProgressMonitor</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>core</name><operator>.</operator><name>runtime</name><operator>.</operator><name>jobs</name><operator>.</operator><name>Job</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>jface</name><operator>.</operator><name>operation</name><operator>.</operator><name>IRunnableWithProgress</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>jface</name><operator>.</operator><name>preference</name><operator>.</operator><name>IPreferenceStore</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>jface</name><operator>.</operator><name>util</name><operator>.</operator><name>IPropertyChangeListener</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>jface</name><operator>.</operator><name>util</name><operator>.</operator><name>PropertyChangeEvent</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>IMemento</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>IPageLayout</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>PlatformUI</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>WorkbenchException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>XMLMemento</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>ide</name><operator>.</operator><name>markers</name><operator>.</operator><name>compatibility</name><operator>.</operator><name>api</name><operator>.</operator><name>FilterConfigurationArea</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>ide</name><operator>.</operator><name>markers</name><operator>.</operator><name>compatibility</name><operator>.</operator><name>api</name><operator>.</operator><name>MarkerField</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>ide</name><operator>.</operator><name>markers</name><operator>.</operator><name>compatibility</name><operator>.</operator><name>api</name><operator>.</operator><name>MarkerItem</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>internal</name><operator>.</operator><name>ide</name><operator>.</operator><name>IDEInternalPreferences</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>internal</name><operator>.</operator><name>ide</name><operator>.</operator><name>IDEWorkbenchPlugin</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>internal</name><operator>.</operator><name>ide</name><operator>.</operator><name>StatusUtil</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>progress</name><operator>.</operator><name>IWorkbenchSiteProgressService</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>statushandlers</name><operator>.</operator><name>StatusManager</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>views</name><operator>.</operator><name>markers</name><operator>.</operator><name>internal</name><operator>.</operator><name>MarkerMessages</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>views</name><operator>.</operator><name>markers</name><operator>.</operator><name>internal</name><operator>.</operator><name>MarkerSupportRegistry</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>views</name><operator>.</operator><name>markers</name><operator>.</operator><name>internal</name><operator>.</operator><name>MarkerType</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>views</name><operator>.</operator><name>markers</name><operator>.</operator><name>internal</name><operator>.</operator><name>ProblemFilter</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>views</name><operator>.</operator><name>markers</name><operator>.</operator><name>internal</name><operator>.</operator><name>Util</name></name>;</import>

<comment type="block" format="javadoc">/**
 * The CachedMarkerBuilder is the object that generates the list of markers from
 * a generator.
 * 
 * @since 3.4
 * 
 */</comment>
<class><specifier>public</specifier> class <name>CachedMarkerBuilder</name> <block>{

	<decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name><name>MarkerCategory</name><index>[]</index></name></type> <name>EMPTY_CATEGORY_ARRAY</name> <init>= <expr><operator>new</operator> <name><name>MarkerCategory</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name><name>MarkerEntry</name><index>[]</index></name></type> <name>EMPTY_ENTRY_ARRAY</name> <init>= <expr><operator>new</operator> <name><name>MarkerEntry</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>SHORT_DELAY</name> <init>= <expr><literal type="number">100</literal></expr></init></decl>;</decl_stmt><comment type="line">// The 100 ms short delay for</comment>
	<comment type="line">// scheduling</comment>

	<decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>TIME_OUT</name> <init>= <expr><literal type="number">30000</literal></expr></init></decl>;</decl_stmt><comment type="line">// The 30s long delay to run</comment>

	<decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>TAG_FILTERS_SECTION</name> <init>= <expr><literal type="string">"filterGroups"</literal></expr></init></decl>;</decl_stmt> <comment type="line">//$NON-NLS-1$</comment>
	<decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>TAG_GROUP_ENTRY</name> <init>= <expr><literal type="string">"filterGroup"</literal></expr></init></decl>;</decl_stmt> <comment type="line">//$NON-NLS-1$</comment>
	<decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>TAG_AND</name> <init>= <expr><literal type="string">"andFilters"</literal></expr></init></decl>;</decl_stmt> <comment type="line">//$NON-NLS-1$</comment>
	<decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>TAG_CATEGORY_GROUP</name> <init>= <expr><literal type="string">"categoryGroup"</literal></expr></init></decl>;</decl_stmt> <comment type="line">//$NON-NLS-1$</comment>
	<decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>VALUE_NONE</name> <init>= <expr><literal type="string">"none"</literal></expr></init></decl>;</decl_stmt> <comment type="line">//$NON-NLS-1$</comment>
	<decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>TAG_LEGACY_FILTER_ENTRY</name> <init>= <expr><literal type="string">"filter"</literal></expr></init></decl>;</decl_stmt> <comment type="line">//$NON-NLS-1$</comment>

	<decl_stmt><decl><specifier>private</specifier> <type><name>boolean</name></type> <name>building</name> <init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt><comment type="line">// Start with nothing until we have</comment>
	<comment type="line">// something</comment>

	<decl_stmt><decl><specifier>private</specifier> <type><name><name>MarkerCategory</name><index>[]</index></name></type> <name>categories</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>private</specifier> <type><name>MarkerMap</name></type> <name>currentMap</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><specifier>private</specifier> <type><name>MarkerContentGenerator</name></type> <name>generator</name></decl>;</decl_stmt> <comment type="line">// The MarkerContentGenerator we</comment>
	<comment type="line">// are</comment>
	<comment type="line">// building for</comment>

	<decl_stmt><decl><specifier>private</specifier> <type><name>Job</name></type> <name>markerProcessJob</name></decl>;</decl_stmt>

	<decl_stmt><decl><specifier>private</specifier> <type><name>IWorkbenchSiteProgressService</name></type> <name>progressService</name></decl>;</decl_stmt>

	<decl_stmt><decl><specifier>private</specifier> <type><name>Job</name></type> <name>updateJob</name></decl>;</decl_stmt>

	<decl_stmt><decl><specifier>private</specifier> <type><name>MarkerGroup</name></type> <name>categoryGroup</name></decl>;</decl_stmt>

	<decl_stmt><decl><specifier>private</specifier> <type><name>Collection</name></type> <name>enabledFilters</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>private</specifier> <type><name>Collection</name></type> <name>filters</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>private</specifier> <type><name><name>IResource</name><index>[]</index></name></type> <name>focusResources</name> <init>= <expr><name><name>MarkerSupportInternalUtilities</name><operator>.</operator><name>EMPTY_RESOURCE_ARRAY</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>private</specifier> <type><name><name>MarkerField</name><index>[]</index></name></type> <name>visibleFields</name></decl>;</decl_stmt>

	<decl_stmt><decl><specifier>private</specifier> <type><name>boolean</name></type> <name>andFilters</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>private</specifier> <type><name>MarkerComparator</name></type> <name>comparator</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>private</specifier> <type><name>IMemento</name></type> <name>memento</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>private</specifier> <type><name>String</name></type> <name>viewId</name></decl>;</decl_stmt>

	<comment type="line">// The time the build started. A -1 indicates no build in progress.</comment>
	<decl_stmt><decl><specifier>private</specifier> <type><name>long</name></type> <name>preBuildTime</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

	<comment type="line">// without a builder update</comment>

	<comment type="block" format="javadoc">/**
	 * Create a new instance of the receiver. Update using the updateJob.
	 * 
	 * @param contentGenerator
	 * @param id
	 *            id of the view we are building for
	 */</comment>
	<constructor><name>CachedMarkerBuilder</name><parameter_list>(<parameter><decl><type><name>MarkerContentGenerator</name></type> <name>contentGenerator</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>id</name></decl></parameter>,
			<parameter><decl><type><name>IMemento</name></type> <name>memento</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>generator</name></name> <operator>=</operator> <name>contentGenerator</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>viewId</name></name> <operator>=</operator> <name>id</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>initialiseVisibleFields</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>initializePreferenceListener</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>memento</name></name> <operator>=</operator> <name>memento</name></expr>;</expr_stmt>
		<if>if <condition>(<expr><name>memento</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then>
			<block type="pseudo"><expr_stmt><expr><call><name>setDefaultCategoryGroup</name><argument_list>(<argument><expr><name>contentGenerator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
		<else>else <block>{
			<comment type="line">// Set up the category group if it has been set or set a default.</comment>
			<decl_stmt><decl><type><name>String</name></type> <name>categoryGroupID</name> <init>= <expr><call><name><name>memento</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name>TAG_CATEGORY_GROUP</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<if>if <condition>(<expr><name>categoryGroupID</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then>
				<block type="pseudo"><expr_stmt><expr><call><name>setDefaultCategoryGroup</name><argument_list>(<argument><expr><name>contentGenerator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
			<else>else <block>{
				<if>if <condition>(<expr><call><name><name>categoryGroupID</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>VALUE_NONE</name></expr></argument>)</argument_list></call></expr>)</condition><then>
					<block type="pseudo"><expr_stmt><expr><name><name>this</name><operator>.</operator><name>categoryGroup</name></name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt></block></then>
				<else>else <block>{
					<decl_stmt><decl><type><name>MarkerGroup</name></type> <name>newGroup</name> <init>= <expr><call><name><name>contentGenerator</name>
							<operator>.</operator><name>getMarkerGroup</name></name><argument_list>(<argument><expr><name>categoryGroupID</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<if>if <condition>(<expr><name>newGroup</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then>
						<block type="pseudo"><expr_stmt><expr><call><name>setDefaultCategoryGroup</name><argument_list>(<argument><expr><name>contentGenerator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
					<else>else
						<block type="pseudo"><expr_stmt><expr><name><name>this</name><operator>.</operator><name>categoryGroup</name></name> <operator>=</operator> <name>newGroup</name></expr>;</expr_stmt></block></else></if>
				}</block></else></if>
			}</block></else></if>
		}</block></else></if>

		<expr_stmt><expr><call><name>createMarkerProcessJob</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<comment type="line">// Hook up to the resource changes after all widget have been created</comment>
		<expr_stmt><expr><call><name><name>ResourcesPlugin</name><operator>.</operator><name>getWorkspace</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>addResourceChangeListener</name><argument_list>(
				<argument><expr><call><name>getUpdateListener</name><argument_list>()</argument_list></call></expr></argument>,
				<argument><expr><name><name>IResourceChangeEvent</name><operator>.</operator><name>POST_CHANGE</name></name>
						<operator>|</operator> <name><name>IResourceChangeEvent</name><operator>.</operator><name>PRE_BUILD</name></name>
						<operator>|</operator> <name><name>IResourceChangeEvent</name><operator>.</operator><name>POST_BUILD</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	}</block></constructor>

	<comment type="block" format="javadoc">/**
	 * Create a preference listener for any preference updates.
	 */</comment>
	<function><specifier>private</specifier> <type><name>void</name></type> <name>initializePreferenceListener</name><parameter_list>()</parameter_list> <block>{
		<expr_stmt><expr><call><name><name>IDEWorkbenchPlugin</name><operator>.</operator><name>getDefault</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getPreferenceStore</name><argument_list>()</argument_list></call>
				<operator>.</operator><call><name>addPropertyChangeListener</name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>IPropertyChangeListener</name></super><argument_list>()</argument_list> <block>{
					<comment type="block">/*
					 * (non-Javadoc)
					 * 
					 * @see org.eclipse.jface.util.IPropertyChangeListener#propertyChange(org.eclipse.jface.util.PropertyChangeEvent)
					 */</comment>
					<function><specifier>public</specifier> <type><name>void</name></type> <name>propertyChange</name><parameter_list>(<parameter><decl><type><name>PropertyChangeEvent</name></type> <name>event</name></decl></parameter>)</parameter_list> <block>{
						<if>if<condition>(<expr><call><name><name>event</name><operator>.</operator><name>getProperty</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><call><name>getMementoPreferenceName</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then><block>{
							<expr_stmt><expr><call><name>rebuildFilters</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
						}</block></then></if>
							

					}</block></function>
				}</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Rebuild the list of filters
	 */</comment>
	<function><specifier>protected</specifier> <type><name>void</name></type> <name>rebuildFilters</name><parameter_list>()</parameter_list> <block>{
		<expr_stmt><expr><name>filters</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>enabledFilters</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>scheduleMarkerUpdate</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		
	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Add the resources in resourceMapping to the resourceCollection
	 * 
	 * @param resourceCollection
	 * @param resourceMapping
	 */</comment>
	<function><specifier>private</specifier> <type><name>void</name></type> <name>addResources</name><parameter_list>(<parameter><decl><type><name>Collection</name></type> <name>resourceCollection</name></decl></parameter>,
			<parameter><decl><type><name>ResourceMapping</name></type> <name>resourceMapping</name></decl></parameter>)</parameter_list> <block>{

		<try>try <block>{
			<decl_stmt><decl><type><name><name>ResourceTraversal</name><index>[]</index></name></type> <name>traversals</name> <init>= <expr><call><name><name>resourceMapping</name><operator>.</operator><name>getTraversals</name></name><argument_list>(
					<argument><expr><name><name>ResourceMappingContext</name><operator>.</operator><name>LOCAL_CONTEXT</name></name></expr></argument>,
					<argument><expr><operator>new</operator> <call><name>NullProgressMonitor</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>traversals</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
				<decl_stmt><decl><type><name>ResourceTraversal</name></type> <name>traversal</name> <init>= <expr><name><name>traversals</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name><name>IResource</name><index>[]</index></name></type> <name>result</name> <init>= <expr><call><name><name>traversal</name><operator>.</operator><name>getResources</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
				<for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>result</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{
					<expr_stmt><expr><call><name><name>resourceCollection</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name><name>result</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></for>
			}</block></for>
		}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>CoreException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
			<expr_stmt><expr><call><name><name>MarkerSupportInternalUtilities</name><operator>.</operator><name>handle</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></catch></try>

	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Return whether the filters are being ANDed or ORed.
	 * 
	 * @return boolean
	 */</comment>
	<function><type><name>boolean</name></type> <name>andFilters</name><parameter_list>()</parameter_list> <block>{
		<return>return <expr><name>andFilters</name></expr>;</return>
	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Build all of the markers in the receiver.
	 * 
	 * @param monitor
	 */</comment>
	<function><type><name>void</name></type> <name>buildAllMarkers</name><parameter_list>(<parameter><decl><type><name>IProgressMonitor</name></type> <name>monitor</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><name>building</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>MarkerMap</name></type> <name>newMarkers</name></decl>;</decl_stmt>
		<try>try <block>{

			<expr_stmt><expr><call><name><name>monitor</name><operator>.</operator><name>beginTask</name></name><argument_list>(<argument><expr><name><name>MarkerMessages</name><operator>.</operator><name>MarkerView_19</name></name></expr></argument>, <argument><expr><literal type="number">60</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><call><name><name>monitor</name><operator>.</operator><name>subTask</name></name><argument_list>(<argument><expr><name><name>MarkerMessages</name><operator>.</operator><name>MarkerView_waiting_on_changes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<if>if <condition>(<expr><call><name><name>monitor</name><operator>.</operator><name>isCanceled</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
				<block type="pseudo"><return>return;</return></block></then></if>

			<expr_stmt><expr><call><name><name>monitor</name><operator>.</operator><name>subTask</name></name><argument_list>(<argument><expr><name><name>MarkerMessages</name><operator>.</operator><name>MarkerView_searching_for_markers</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<decl_stmt><decl><type><name>SubProgressMonitor</name></type> <name>subMonitor</name> <init>= <expr><operator>new</operator> <call><name>SubProgressMonitor</name><argument_list>(<argument><expr><name>monitor</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><name>newMarkers</name> <operator>=</operator> <call><name><name>generator</name><operator>.</operator><name>generateFilteredMarkers</name></name><argument_list>(<argument><expr><name>subMonitor</name></expr></argument>,
					<argument><expr><call><name>andFilters</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>focusResources</name></expr></argument>, <argument><expr><call><name>getEnabledFilters</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<if>if <condition>(<expr><call><name><name>monitor</name><operator>.</operator><name>isCanceled</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
				<block type="pseudo"><return>return;</return></block></then></if>

			<expr_stmt><expr><call><name>sortAndMakeCategories</name><argument_list>(<argument><expr><operator>new</operator> <call><name>SubProgressMonitor</name><argument_list>(<argument><expr><name>monitor</name></expr></argument>, <argument><expr><literal type="number">30</literal></expr></argument>)</argument_list></call></expr></argument>,
					<argument><expr><name>newMarkers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>monitor</name><operator>.</operator><name>done</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		}</block> <finally>finally <block>{
			<expr_stmt><expr><name>building</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
		}</block></finally></try>

	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Break the marker up into categories
	 * 
	 * @param markers
	 * @param start
	 *            the start index in the markers
	 * @param end
	 *            the last index to check
	 * @param sortIndex -
	 *            the parent of the field
	 * @return MarkerCategory[] or &lt;code&gt;null&lt;/code&gt; if we are at the bottom
	 *         of the tree
	 */</comment>
	<function><type><name><name>MarkerCategory</name><index>[]</index></name></type> <name>buildHierarchy</name><parameter_list>(<parameter><decl><type><name>MarkerMap</name></type> <name>markers</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>start</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>end</name></decl></parameter>,
			<parameter><decl><type><name>int</name></type> <name>sortIndex</name></decl></parameter>)</parameter_list> <block>{
		<decl_stmt><decl><type><name>MarkerComparator</name></type> <name>sorter</name> <init>= <expr><call><name>getComparator</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

		<if>if <condition>(<expr><name>sortIndex</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
			<return>return <expr><literal type="null">null</literal></expr>;</return><comment type="line">// Are we out of categories?</comment>
		}</block></then></if>

		<decl_stmt><decl><type><name>Collection</name></type> <name>categories</name> <init>= <expr><operator>new</operator> <call><name>ArrayList</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

		<decl_stmt><decl><type><name>Object</name></type> <name>previous</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>categoryStart</name> <init>= <expr><name>start</name></expr></init></decl>;</decl_stmt>

		<decl_stmt><decl><type><name><name>Object</name><index>[]</index></name></type> <name>elements</name> <init>= <expr><call><name><name>markers</name><operator>.</operator><name>toArray</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

		<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name>start</name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>end</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{

			<if>if <condition>(<expr><name>previous</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
				<comment type="line">// Are we at a category boundary?</comment>
				<if>if <condition>(<expr><call><name><name>sorter</name><operator>.</operator><name>compareCategory</name></name><argument_list>(<argument><expr><name>previous</name></expr></argument>, <argument><expr><name><name>elements</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
					<expr_stmt><expr><call><name><name>categories</name>
							<operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>MarkerCategory</name><argument_list>(
									<argument><expr><name>this</name></expr></argument>,
									<argument><expr><name>categoryStart</name></expr></argument>,
									<argument><expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>,
									<argument><expr><call><name>getCategoryGroup</name><argument_list>()</argument_list></call>
											<operator>.</operator><call><name>getMarkerField</name><argument_list>()</argument_list></call>
											<operator>.</operator><call><name>getValue</name><argument_list>(
													<argument><expr><call><name><name>markers</name>
															<operator>.</operator><name>elementAt</name></name><argument_list>(<argument><expr><name>categoryStart</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name>categoryStart</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
				}</block></then></if>
			}</block></then></if>
			<expr_stmt><expr><name>previous</name> <operator>=</operator> <name><name>elements</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

		}</block></for>

		<if>if <condition>(<expr><name>end</name> <operator>&gt;=</operator> <name>categoryStart</name></expr>)</condition><then> <block>{
			<expr_stmt><expr><call><name><name>categories</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>MarkerCategory</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>categoryStart</name></expr></argument>, <argument><expr><name>end</name></expr></argument>,
					<argument><expr><call><name>getCategoryGroup</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getMarkerField</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getValue</name><argument_list>(
							<argument><expr><call><name><name>markers</name><operator>.</operator><name>elementAt</name></name><argument_list>(<argument><expr><name>categoryStart</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>

		<decl_stmt><decl><type><name><name>MarkerCategory</name><index>[]</index></name></type> <name>nodes</name> <init>= <expr><operator>new</operator> <name><name>MarkerCategory</name><index>[<expr><call><name><name>categories</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>categories</name><operator>.</operator><name>toArray</name></name><argument_list>(<argument><expr><name>nodes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>nodes</name></expr>;</return>

	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Cancel the pending jobs in the receiver.
	 */</comment>
	<function><specifier>private</specifier> <type><name>void</name></type> <name>cancelJobs</name><parameter_list>()</parameter_list> <block>{
		<expr_stmt><expr><call><name><name>markerProcessJob</name><operator>.</operator><name>cancel</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>updateJob</name><operator>.</operator><name>cancel</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Return a collection of all of the configuration fields for this generator
	 * 
	 * @return Collection of {@link FilterConfigurationArea}
	 */</comment>
	<function><type><name>Collection</name></type> <name>createFilterConfigurationFields</name><parameter_list>()</parameter_list> <block>{
		<decl_stmt><decl><type><name>Collection</name></type> <name>result</name> <init>= <expr><operator>new</operator> <call><name>ArrayList</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>visibleFields</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
			<decl_stmt><decl><type><name>FilterConfigurationArea</name></type> <name>area</name> <init>= <expr><name><name>visibleFields</name><index>[<expr><name>i</name></expr>]</index></name>
					<operator>.</operator><call><name>generateFilterArea</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
			<if>if <condition>(<expr><name>area</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then>
				<block type="pseudo"><expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>area</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>

		}</block></for>
		<return>return <expr><name>result</name></expr>;</return>
	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Create the job for updating the markers.
	 */</comment>
	<function><specifier>private</specifier> <type><name>void</name></type> <name>createMarkerProcessJob</name><parameter_list>()</parameter_list> <block>{
		<expr_stmt><expr><name>markerProcessJob</name> <operator>=</operator> <operator>new</operator> <class><super><name>Job</name></super><argument_list>(<argument><expr><name><name>MarkerMessages</name><operator>.</operator><name>MarkerView_processUpdates</name></name></expr></argument>)</argument_list> <block>{
			<comment type="block">/*
			 * (non-Javadoc)
			 * 
			 * @see org.eclipse.core.runtime.jobs.Job#belongsTo(java.lang.Object)
			 */</comment>
			<function><specifier>public</specifier> <type><name>boolean</name></type> <name>belongsTo</name><parameter_list>(<parameter><decl><type><name>Object</name></type> <name>family</name></decl></parameter>)</parameter_list> <block>{
				<return>return <expr><name><name>MarkerContentGenerator</name><operator>.</operator><name>CACHE_UPDATE_FAMILY</name></name> <operator>==</operator> <name>family</name></expr>;</return>
			}</block></function>

			<comment type="block">/*
			 * (non-Javadoc)
			 * 
			 * @see org.eclipse.core.runtime.jobs.Job#run(org.eclipse.core.runtime.IProgressMonitor)
			 */</comment>
			<function><specifier>protected</specifier> <type><name>IStatus</name></type> <name>run</name><parameter_list>(<parameter><decl><type><name>IProgressMonitor</name></type> <name>monitor</name></decl></parameter>)</parameter_list> <block>{
				<expr_stmt><expr><call><name><name>updateJob</name><operator>.</operator><name>cancel</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>buildAllMarkers</name><argument_list>(<argument><expr><name>monitor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>updateJob</name><operator>.</operator><name>schedule</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				<return>return <expr><name><name>Status</name><operator>.</operator><name>OK_STATUS</name></name></expr>;</return>
			}</block></function>

			<comment type="block">/*
			 * (non-Javadoc)
			 * 
			 * @see org.eclipse.ui.progress.WorkbenchJob#shouldRun()
			 */</comment>
			<function><specifier>public</specifier> <type><name>boolean</name></type> <name>shouldRun</name><parameter_list>()</parameter_list> <block>{

				<comment type="line">// Hold off while everything is active</comment>
				<if>if <condition>(<expr><name>preBuildTime</name> <operator>&gt;</operator> <literal type="number">0</literal>
						<operator>&amp;&amp;</operator> <call><name><name>System</name><operator>.</operator><name>currentTimeMillis</name></name><argument_list>()</argument_list></call> <operator>-</operator> <name>preBuildTime</name> <operator>&lt;</operator> <name>TIME_OUT</name></expr>)</condition><then>
					<block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr>;</return></block></then></if>

				<comment type="line">// Clear it if we are past the time out.</comment>
				<expr_stmt><expr><name>preBuildTime</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
				<comment type="line">// Do not run if the change came in before there is a viewer</comment>
				<return>return <expr><call><name><name>PlatformUI</name><operator>.</operator><name>isWorkbenchRunning</name></name><argument_list>()</argument_list></call></expr>;</return>
			}</block></function>
		}</block></class></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>markerProcessJob</name><operator>.</operator><name>setSystem</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Disable all of the filters in the receiver.
	 */</comment>
	<function><type><name>void</name></type> <name>disableAllFilters</name><parameter_list>()</parameter_list> <block>{
		<decl_stmt><decl><type><name>Collection</name></type> <name>allFilters</name> <init>= <expr><call><name>getEnabledFilters</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>Iterator</name></type> <name>enabled</name> <init>= <expr><call><name><name>allFilters</name><operator>.</operator><name>iterator</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<while>while <condition>(<expr><call><name><name>enabled</name><operator>.</operator><name>hasNext</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
			<decl_stmt><decl><type><name>MarkerFieldFilterGroup</name></type> <name>group</name> <init>= <expr><operator>(</operator><name>MarkerFieldFilterGroup</name><operator>)</operator> <call><name><name>enabled</name>
					<operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name><name>group</name><operator>.</operator><name>setEnabled</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></while>
		<expr_stmt><expr><call><name><name>allFilters</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>writeFiltersPreference</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>scheduleMarkerUpdate</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Return all of the filters for the receiver.
	 * 
	 * @return Collection of MarkerFieldFilterGroup
	 */</comment>
	<function><type><name>Collection</name></type> <name>getAllFilters</name><parameter_list>()</parameter_list> <block>{
		<if>if <condition>(<expr><name>filters</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
			<expr_stmt><expr><name>filters</name> <operator>=</operator> <operator>new</operator> <call><name>ArrayList</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<decl_stmt><decl><type><name><name>IConfigurationElement</name><index>[]</index></name></type> <name>filterReferences</name> <init>= <expr><call><name><name>generator</name>
					<operator>.</operator><name>getFilterReferences</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
			<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>filterReferences</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
				<expr_stmt><expr><call><name><name>filters</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>MarkerFieldFilterGroup</name><argument_list>(<argument><expr><name><name>filterReferences</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,
						<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></for>

			<comment type="line">// Honour the deprecated problemFilters</comment>
			<if>if <condition>(<expr><call><name><name>viewId</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>IPageLayout</name><operator>.</operator><name>ID_PROBLEM_VIEW</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
				<decl_stmt><decl><type><name>Iterator</name></type> <name>problemFilters</name> <init>= <expr><call><name><name>MarkerSupportRegistry</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call>
						<operator>.</operator><call><name>getRegisteredFilters</name><argument_list>()</argument_list></call><operator>.</operator><call><name>iterator</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
				<while>while <condition>(<expr><call><name><name>problemFilters</name><operator>.</operator><name>hasNext</name></name><argument_list>()</argument_list></call></expr>)</condition>
					<block type="pseudo"><expr_stmt><expr><call><name><name>filters</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>CompatibilityMarkerFieldFilterGroup</name><argument_list>(
							<argument><expr><operator>(</operator><name>ProblemFilter</name><operator>)</operator> <call><name><name>problemFilters</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></while>
			}</block></then></if>

			<comment type="line">// Apply the last settings</comment>
			<expr_stmt><expr><call><name>loadFiltersPreference</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

		}</block></then></if>
		<return>return <expr><name>filters</name></expr>;</return>
	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Return the categories for the receiver.
	 * 
	 * @return MarkerCategory[] or &lt;code&gt;null&lt;/code&gt; if there are no
	 *         categories.
	 */</comment>
	<function><type><name><name>MarkerCategory</name><index>[]</index></name></type> <name>getCategories</name><parameter_list>()</parameter_list> <block>{
		<if>if <condition>(<expr><name>building</name></expr>)</condition><then> <block>{
			<return>return <expr><literal type="null">null</literal></expr>;</return>
		}</block></then></if>
		<return>return <expr><name>categories</name></expr>;</return>
	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Return the group used to generate categories.
	 * 
	 * @return MarkerGroup or &lt;code&gt;null&lt;/code&gt;.
	 */</comment>
	<function><type><name>MarkerGroup</name></type> <name>getCategoryGroup</name><parameter_list>()</parameter_list> <block>{

		<return>return <expr><name>categoryGroup</name></expr>;</return>
	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Return a new instance of the receiver with the field
	 * 
	 * @return MarkerComparator
	 */</comment>
	<function><type><name>MarkerComparator</name></type> <name>getComparator</name><parameter_list>()</parameter_list> <block>{

		<if>if <condition>(<expr><name>comparator</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
			<decl_stmt><decl><type><name>MarkerField</name></type> <name>field</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
			<if>if <condition>(<expr><call><name>getCategoryGroup</name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then>
				<block type="pseudo"><expr_stmt><expr><name>field</name> <operator>=</operator> <call><name>getCategoryGroup</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getMarkerField</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></then></if>
			<expr_stmt><expr><name>comparator</name> <operator>=</operator> <operator>new</operator> <call><name>MarkerComparator</name><argument_list>(<argument><expr><name>field</name></expr></argument>, <argument><expr><call><name><name>generator</name><operator>.</operator><name>getAllFields</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>comparator</name><operator>.</operator><name>restore</name></name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>memento</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>
		<return>return <expr><name>comparator</name></expr>;</return>
	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Return the elements in the adapter.
	 * 
	 * @return Object[]
	 */</comment>
	<function><type><name><name>MarkerItem</name><index>[]</index></name></type> <name>getElements</name><parameter_list>()</parameter_list> <block>{

		<if>if <condition>(<expr><call><name>refreshingMarkers</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
			<return>return <expr><name><name>MarkerSupportInternalUtilities</name><operator>.</operator><name>EMPTY_MARKER_ITEM_ARRAY</name></name></expr>;</return>
		}</block></then></if>
		<if>if <condition>(<expr><call><name>isShowingHierarchy</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <name>categories</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
			<return>return <expr><name>categories</name></expr>;</return>
		}</block></then></if>
		<return>return <expr><call><name><name>currentMap</name><operator>.</operator><name>toArray</name></name><argument_list>()</argument_list></call></expr>;</return>
	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Return the currently enabled filters.
	 * 
	 * @return Collection of MarkerFieldFilterGroup
	 */</comment>
	<function><type><name>Collection</name></type> <name>getEnabledFilters</name><parameter_list>()</parameter_list> <block>{
		<if>if <condition>(<expr><name>enabledFilters</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
			<expr_stmt><expr><name>enabledFilters</name> <operator>=</operator> <operator>new</operator> <call><name>HashSet</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<decl_stmt><decl><type><name>Iterator</name></type> <name>filtersIterator</name> <init>= <expr><call><name>getAllFilters</name><argument_list>()</argument_list></call><operator>.</operator><call><name>iterator</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
			<while>while <condition>(<expr><call><name><name>filtersIterator</name><operator>.</operator><name>hasNext</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
				<decl_stmt><decl><type><name>MarkerFieldFilterGroup</name></type> <name>next</name> <init>= <expr><operator>(</operator><name>MarkerFieldFilterGroup</name><operator>)</operator> <call><name><name>filtersIterator</name>
						<operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
				<if>if <condition>(<expr><call><name><name>next</name><operator>.</operator><name>isEnabled</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
					<block type="pseudo"><expr_stmt><expr><call><name><name>enabledFilters</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
			}</block></while>
		}</block></then></if>
		<return>return <expr><name>enabledFilters</name></expr>;</return>
	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Return the generator for the receiver.
	 * 
	 * @return MarkerContentGenerator
	 */</comment>
	<function><type><name>MarkerContentGenerator</name></type> <name>getGenerator</name><parameter_list>()</parameter_list> <block>{
		<return>return <expr><name>generator</name></expr>;</return>
	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Get the name of the filters preference for the receiver,
	 * 
	 * @return String
	 */</comment>
	<function><specifier>private</specifier> <type><name>String</name></type> <name>getLegacyFiltersPreferenceName</name><parameter_list>()</parameter_list> <block>{

		<if>if <condition>(<expr><call><name><name>viewId</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>IPageLayout</name><operator>.</operator><name>ID_BOOKMARKS</name></name></expr></argument>)</argument_list></call></expr>)</condition><then>
			<block type="pseudo"><return>return <expr><name><name>IDEInternalPreferences</name><operator>.</operator><name>BOOKMARKS_FILTERS</name></name></expr>;</return></block></then></if>
		<if>if <condition>(<expr><call><name><name>viewId</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>IPageLayout</name><operator>.</operator><name>ID_TASK_LIST</name></name></expr></argument>)</argument_list></call></expr>)</condition><then>
			<block type="pseudo"><return>return <expr><name><name>IDEInternalPreferences</name><operator>.</operator><name>TASKS_FILTERS</name></name></expr>;</return></block></then></if>
		<return>return <expr><name><name>IDEInternalPreferences</name><operator>.</operator><name>PROBLEMS_FILTERS</name></name></expr>;</return>

	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Get the raw list of marker entries.
	 * 
	 * @return list of MarkerEntry
	 */</comment>
	<function><type><name><name>MarkerEntry</name><index>[]</index></name></type> <name>getMarkerEntries</name><parameter_list>()</parameter_list> <block>{
		<if>if <condition>(<expr><call><name>refreshingMarkers</name><argument_list>()</argument_list></call></expr>)</condition><then>
			<block type="pseudo"><return>return <expr><name>EMPTY_ENTRY_ARRAY</name></expr>;</return></block></then></if>

		<return>return <expr><call><name><name>currentMap</name><operator>.</operator><name>toArray</name></name><argument_list>()</argument_list></call></expr>;</return>
	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Get the MarkerItem that matches marker.
	 * 
	 * @param marker
	 * @return MarkerItem or &lt;code&gt;null&lt;code&gt; if it cannot be found
	 */</comment>
	<function><type><name>MarkerItem</name></type> <name>getMarkerItem</name><parameter_list>(<parameter><decl><type><name>IMarker</name></type> <name>marker</name></decl></parameter>)</parameter_list> <block>{
		<if>if <condition>(<expr><call><name>refreshingMarkers</name><argument_list>()</argument_list></call></expr>)</condition><then>
			<block type="pseudo"><return>return <expr><literal type="null">null</literal></expr>;</return></block></then></if>
		<return>return <expr><call><name><name>currentMap</name><operator>.</operator><name>getMarkerItem</name></name><argument_list>(<argument><expr><name>marker</name></expr></argument>)</argument_list></call></expr>;</return>
	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Get the name for the preferences for the receiver.
	 * 
	 * @return String
	 */</comment>
	<function><specifier>private</specifier> <type><name>String</name></type> <name>getMementoPreferenceName</name><parameter_list>()</parameter_list> <block>{
		<return>return <expr><call><name>getClass</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getName</name><argument_list>()</argument_list></call> <operator>+</operator> <name>viewId</name></expr>;</return>
	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Return the primary sort field
	 * 
	 * @return MarkerField
	 */</comment>
	<function><type><name>MarkerField</name></type> <name>getPrimarySortField</name><parameter_list>()</parameter_list> <block>{
		<return>return <expr><call><name>getComparator</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getPrimarySortField</name><argument_list>()</argument_list></call></expr>;</return>
	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Get the sort direction of field
	 * 
	 * @param field
	 * @return int one of {@link MarkerComparator#ASCENDING} or
	 *         {@link MarkerComparator#DESCENDING}
	 */</comment>
	<function><type><name>int</name></type> <name>getSortDirection</name><parameter_list>(<parameter><decl><type><name>MarkerField</name></type> <name>field</name></decl></parameter>)</parameter_list> <block>{
		<if>if <condition>(<expr><call><name>getComparator</name><argument_list>()</argument_list></call><operator>.</operator><call><name><name>descendingFields</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><name>field</name></expr></argument>)</argument_list></call></expr>)</condition><then>
			<block type="pseudo"><return>return <expr><name><name>MarkerComparator</name><operator>.</operator><name>DESCENDING</name></name></expr>;</return></block></then></if>
		<return>return <expr><name><name>MarkerComparator</name><operator>.</operator><name>ASCENDING</name></name></expr>;</return>
	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Return the total number of markers.
	 * 
	 * @return int
	 */</comment>
	<function><type><name>int</name></type> <name>getTotalMarkerCount</name><parameter_list>()</parameter_list> <block>{
		<decl_stmt><decl><type><name><name>MarkerItem</name><index>[]</index></name></type> <name>elements</name> <init>= <expr><call><name>getElements</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<if>if <condition>(<expr><name><name>elements</name><operator>.</operator><name>length</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>elements</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><call><name>isConcrete</name><argument_list>()</argument_list></call></expr>)</condition><then>
			<block type="pseudo"><return>return <expr><name><name>elements</name><operator>.</operator><name>length</name></name></expr>;</return></block></then></if>
		<decl_stmt><decl><type><name>int</name></type> <name>length</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
		<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>elements</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
			<expr_stmt><expr><name>length</name> <operator>+=</operator> <name><name>elements</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>getChildren</name><argument_list>()</argument_list></call><operator>.</operator><name>length</name></expr>;</expr_stmt>
		}</block></for>

		<return>return <expr><name>length</name></expr>;</return>
	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Return the resource listener for the builder
	 * 
	 * @return IResourceChangeListener
	 */</comment>
	<function><specifier>private</specifier> <type><name>IResourceChangeListener</name></type> <name>getUpdateListener</name><parameter_list>()</parameter_list> <block>{
		<return>return <expr><operator>new</operator> <class><super><name>IResourceChangeListener</name></super><argument_list>()</argument_list> <block>{

			<comment type="block" format="javadoc">/**
			 * Returns whether or not the given even contains marker deltas for
			 * this view.
			 * 
			 * @param event
			 *            the resource change event
			 * @return &lt;code&gt;true&lt;/code&gt; if the event contains at least one
			 *         relevant marker delta
			 * @since 3.3
			 */</comment>
			<function><specifier>private</specifier> <type><name>boolean</name></type> <name>hasMarkerDelta</name><parameter_list>(<parameter><decl><type><name>IResourceChangeEvent</name></type> <name>event</name></decl></parameter>)</parameter_list> <block>{
				<decl_stmt><decl><type><name>Iterator</name></type> <name>markerTypes</name> <init>= <expr><call><name><name>generator</name><operator>.</operator><name>getMarkerTypes</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>iterator</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
				<while>while <condition>(<expr><call><name><name>markerTypes</name><operator>.</operator><name>hasNext</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
					<decl_stmt><decl><type><name>MarkerType</name></type> <name>type</name> <init>= <expr><operator>(</operator><name>MarkerType</name><operator>)</operator> <call><name><name>markerTypes</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

					<if>if <condition>(<expr><call><name><name>event</name><operator>.</operator><name>findMarkerDeltas</name></name><argument_list>(<argument><expr><call><name><name>type</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call><operator>.</operator><name>length</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then>
						<block type="pseudo"><return>return <expr><literal type="boolean">true</literal></expr>;</return></block></then></if>

				}</block></while>
				<return>return <expr><literal type="boolean">false</literal></expr>;</return>
			}</block></function>

			<comment type="block">/*
			 * (non-Javadoc)
			 * 
			 * @see org.eclipse.core.resources.IResourceChangeListener#resourceChanged(org.eclipse.core.resources.IResourceChangeEvent)
			 */</comment>
			<function><specifier>public</specifier> <type><name>void</name></type> <name>resourceChanged</name><parameter_list>(<parameter><decl><type><name>IResourceChangeEvent</name></type> <name>event</name></decl></parameter>)</parameter_list> <block>{
				<if>if <condition>(<expr><operator>!</operator><call><name>hasMarkerDelta</name><argument_list>(<argument><expr><name>event</name></expr></argument>)</argument_list></call></expr>)</condition><then>
					<block type="pseudo"><return>return;</return></block></then></if>

				<if>if <condition>(<expr><call><name><name>event</name><operator>.</operator><name>getType</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>IResourceChangeEvent</name><operator>.</operator><name>PRE_BUILD</name></name></expr>)</condition><then> <block>{
					<expr_stmt><expr><call><name>preBuild</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
					<return>return;</return>
				}</block></then></if>

				<if>if <condition>(<expr><call><name><name>event</name><operator>.</operator><name>getType</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>IResourceChangeEvent</name><operator>.</operator><name>POST_BUILD</name></name></expr>)</condition><then> <block>{
					<expr_stmt><expr><call><name>postBuild</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>scheduleMarkerUpdate</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
					<return>return;</return>
				}</block></then></if>

				<comment type="line">// After 30 seconds do updates anyways</comment>
				<if>if <condition>(<expr><name>progressService</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then>
					<block type="pseudo"><expr_stmt><expr><call><name><name>markerProcessJob</name><operator>.</operator><name>schedule</name></name><argument_list>(<argument><expr><name>TIME_OUT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
				<else>else
					<block type="pseudo"><expr_stmt><expr><call><name><name>progressService</name><operator>.</operator><name>schedule</name></name><argument_list>(<argument><expr><name>markerProcessJob</name></expr></argument>, <argument><expr><name>TIME_OUT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>

			}</block></function>

		}</block></class></expr>;</return>
	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Get the fields that this content generator is displaying.
	 * 
	 * @return {@link MarkerField}[]
	 */</comment>
	<function><type><name><name>MarkerField</name><index>[]</index></name></type> <name>getVisibleFields</name><parameter_list>()</parameter_list> <block>{
		<return>return <expr><name>visibleFields</name></expr>;</return>
	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Return whether or not the receiver has markers without scheduling
	 * anything if it doesn't.
	 * 
	 * @return boolean &lt;code&gt;true&lt;/code&gt; if the markers have not been
	 *         calculated.
	 */</comment>
	<function><type><name>boolean</name></type> <name>hasNoMarkers</name><parameter_list>()</parameter_list> <block>{
		<return>return <expr><name>currentMap</name> <operator>==</operator> <literal type="null">null</literal></expr>;</return>
	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Initialise the visible fields based pm
	 */</comment>
	<function><specifier>private</specifier> <type><name>void</name></type> <name>initialiseVisibleFields</name><parameter_list>()</parameter_list> <block>{
		<decl_stmt><decl><type><name><name>MarkerField</name><index>[]</index></name></type> <name>initialFields</name> <init>= <expr><call><name>getGenerator</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getInitialVisible</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><name>visibleFields</name> <operator>=</operator> <operator>new</operator> <name><name>MarkerField</name><index>[<expr><name><name>initialFields</name><operator>.</operator><name>length</name></name></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>arraycopy</name></name><argument_list>(<argument><expr><name>initialFields</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>visibleFields</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
				<argument><expr><name><name>initialFields</name><operator>.</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Return whether or not the receiver is building.
	 * 
	 * @return boolean
	 */</comment>
	<function><type><name>boolean</name></type> <name>isBuilding</name><parameter_list>()</parameter_list> <block>{
		<return>return <expr><name>building</name></expr>;</return>
	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Return whether or not we are showing a hierarchy,.
	 * 
	 * @return &lt;code&gt;true&lt;/code&gt; if a hierarchy is being shown.
	 */</comment>
	<function><type><name>boolean</name></type> <name>isShowingHierarchy</name><parameter_list>()</parameter_list> <block>{
		<return>return <expr><name>categoryGroup</name> <operator>!=</operator> <literal type="null">null</literal></expr>;</return>
	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Load the settings from the memento.
	 * 
	 * @param memento
	 */</comment>
	<function><specifier>private</specifier> <type><name>void</name></type> <name>loadFilterSettings</name><parameter_list>(<parameter><decl><type><name>IMemento</name></type> <name>memento</name></decl></parameter>)</parameter_list> <block>{

		<if>if <condition>(<expr><name>memento</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then>
			<block type="pseudo"><return>return;</return></block></then></if>

		<decl_stmt><decl><type><name>Boolean</name></type> <name>andValue</name> <init>= <expr><call><name><name>memento</name><operator>.</operator><name>getBoolean</name></name><argument_list>(<argument><expr><name>TAG_AND</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if>if <condition>(<expr><name>andValue</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then>
			<block type="pseudo"><expr_stmt><expr><call><name>setAndFilters</name><argument_list>(<argument><expr><call><name><name>andValue</name><operator>.</operator><name>booleanValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
		<decl_stmt><decl><type><name>IMemento</name></type> <name><name>children</name><index>[]</index></name> <init>= <expr><call><name><name>memento</name><operator>.</operator><name>getChildren</name></name><argument_list>(<argument><expr><name>TAG_GROUP_ENTRY</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>children</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
			<decl_stmt><decl><type><name>IMemento</name></type> <name>child</name> <init>= <expr><name><name>children</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>String</name></type> <name>id</name> <init>= <expr><call><name><name>child</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>IMemento</name><operator>.</operator><name>TAG_ID</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<if>if <condition>(<expr><name>id</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then>
				<block type="pseudo"><continue>continue;</continue></block></then></if>
			<if>if <condition>(<expr><operator>!</operator><call><name>loadGroupWithID</name><argument_list>(<argument><expr><name>child</name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>)</condition><then>

				<comment type="line">// Did not find a match must have been added by the user</comment>
				<block type="pseudo"><expr_stmt><expr><call><name>loadUserFilter</name><argument_list>(<argument><expr><name>child</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
		}</block></for>

	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Load the filters defined in memento string.
	 * 
	 * @param mementoString
	 */</comment>
	<function><specifier>private</specifier> <type><name>void</name></type> <name>loadFiltersFrom</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>mementoString</name></decl></parameter>)</parameter_list> <block>{
		<if>if <condition>(<expr><call><name><name>mementoString</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>IPreferenceStore</name><operator>.</operator><name>STRING_DEFAULT_DEFAULT</name></name></expr></argument>)</argument_list></call></expr>)</condition><then>
			<block type="pseudo"><return>return;</return></block></then></if>

		<try>try <block>{
			<expr_stmt><expr><call><name>loadFilterSettings</name><argument_list>(<argument><expr><call><name><name>XMLMemento</name><operator>.</operator><name>createReadRoot</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>StringReader</name><argument_list>(
					<argument><expr><name>mementoString</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>WorkbenchException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
			<expr_stmt><expr><call><name><name>StatusManager</name><operator>.</operator><name>getManager</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>handle</name><argument_list>(<argument><expr><call><name><name>e</name><operator>.</operator><name>getStatus</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></catch></try>
	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Load the filters preference.
	 */</comment>
	<function><specifier>private</specifier> <type><name>void</name></type> <name>loadFiltersPreference</name><parameter_list>()</parameter_list> <block>{

		<expr_stmt><expr><call><name>loadFiltersFrom</name><argument_list>(<argument><expr><call><name><name>IDEWorkbenchPlugin</name><operator>.</operator><name>getDefault</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getPreferenceStore</name><argument_list>()</argument_list></call>
				<operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><call><name>getMementoPreferenceName</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<decl_stmt><decl><type><name>String</name></type> <name>legacyFilters</name> <init>= <expr><call><name>getLegacyFiltersPreferenceName</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>String</name></type> <name>migrationPreference</name> <init>= <expr><name>legacyFilters</name>
				<operator>+</operator> <name><name>MarkerSupportInternalUtilities</name><operator>.</operator><name>MIGRATE_PREFERENCE_CONSTANT</name></name></expr></init></decl>;</decl_stmt>

		<if>if <condition>(<expr><call><name><name>IDEWorkbenchPlugin</name><operator>.</operator><name>getDefault</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getPreferenceStore</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getBoolean</name><argument_list>(
				<argument><expr><name>migrationPreference</name></expr></argument>)</argument_list></call></expr>)</condition><then>
			<block type="pseudo"><return>return;</return></block></then></if><comment type="line">// Already migrated</comment>

		<comment type="line">// Load any defined in a pre 3.4 workbench</comment>
		<expr_stmt><expr><call><name>loadLegacyFiltersFrom</name><argument_list>(<argument><expr><call><name><name>IDEWorkbenchPlugin</name><operator>.</operator><name>getDefault</name></name><argument_list>()</argument_list></call>
				<operator>.</operator><call><name>getPreferenceStore</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><name>legacyFilters</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="line">// Mark as migrated</comment>
		<expr_stmt><expr><call><name><name>IDEWorkbenchPlugin</name><operator>.</operator><name>getDefault</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getPreferenceStore</name><argument_list>()</argument_list></call><operator>.</operator><call><name>setValue</name><argument_list>(
				<argument><expr><name>migrationPreference</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Load the group with id from the child if there is a matching system group
	 * registered.
	 * 
	 * @param child
	 * @param id
	 * @return &lt;code&gt;true&lt;/code&gt; if a matching group was found
	 */</comment>
	<function><specifier>private</specifier> <type><name>boolean</name></type> <name>loadGroupWithID</name><parameter_list>(<parameter><decl><type><name>IMemento</name></type> <name>child</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>id</name></decl></parameter>)</parameter_list> <block>{
		<decl_stmt><decl><type><name>Iterator</name></type> <name>groups</name> <init>= <expr><call><name>getAllFilters</name><argument_list>()</argument_list></call><operator>.</operator><call><name>iterator</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

		<while>while <condition>(<expr><call><name><name>groups</name><operator>.</operator><name>hasNext</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
			<decl_stmt><decl><type><name>MarkerFieldFilterGroup</name></type> <name>group</name> <init>= <expr><operator>(</operator><name>MarkerFieldFilterGroup</name><operator>)</operator> <call><name><name>groups</name>
					<operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
			<if>if <condition>(<expr><call><name><name>id</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><call><name><name>group</name><operator>.</operator><name>getID</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
				<expr_stmt><expr><call><name><name>group</name><operator>.</operator><name>loadSettings</name></name><argument_list>(<argument><expr><name>child</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<return>return <expr><literal type="boolean">true</literal></expr>;</return>
			}</block></then></if>
		}</block></while>
		<return>return <expr><literal type="boolean">false</literal></expr>;</return>
	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Load the legacy filter into the system.
	 * 
	 * @param child
	 */</comment>
	<function><specifier>private</specifier> <type><name>void</name></type> <name>loadLegacyFilter</name><parameter_list>(<parameter><decl><type><name>IMemento</name></type> <name>child</name></decl></parameter>)</parameter_list> <block>{
		<decl_stmt><decl><type><name>MarkerFieldFilterGroup</name></type> <name>newGroup</name> <init>= <expr><operator>new</operator> <call><name>MarkerFieldFilterGroup</name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>newGroup</name><operator>.</operator><name>legacyLoadSettings</name></name><argument_list>(<argument><expr><name>child</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>getAllFilters</name><argument_list>()</argument_list></call><operator>.</operator><call><name>add</name><argument_list>(<argument><expr><name>newGroup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Load the pre-3.4 filters.
	 * 
	 * @param mementoString
	 */</comment>
	<function><specifier>private</specifier> <type><name>void</name></type> <name>loadLegacyFiltersFrom</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>mementoString</name></decl></parameter>)</parameter_list> <block>{

		<if>if <condition>(<expr><call><name><name>mementoString</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>IPreferenceStore</name><operator>.</operator><name>STRING_DEFAULT_DEFAULT</name></name></expr></argument>)</argument_list></call></expr>)</condition><then>
			<block type="pseudo"><return>return;</return></block></then></if>
		<decl_stmt><decl><type><name>IMemento</name></type> <name>memento</name></decl>;</decl_stmt>
		<try>try <block>{
			<expr_stmt><expr><name>memento</name> <operator>=</operator> <call><name><name>XMLMemento</name>
					<operator>.</operator><name>createReadRoot</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>StringReader</name><argument_list>(<argument><expr><name>mementoString</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>restoreLegacyFilters</name><argument_list>(<argument><expr><name>memento</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>WorkbenchException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
			<expr_stmt><expr><call><name><name>StatusManager</name><operator>.</operator><name>getManager</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>handle</name><argument_list>(<argument><expr><call><name><name>e</name><operator>.</operator><name>getStatus</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return;</return>
		}</block></catch></try>

	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Load the user supplied filter
	 * 
	 * @param child
	 */</comment>
	<function><specifier>private</specifier> <type><name>void</name></type> <name>loadUserFilter</name><parameter_list>(<parameter><decl><type><name>IMemento</name></type> <name>child</name></decl></parameter>)</parameter_list> <block>{
		<decl_stmt><decl><type><name>MarkerFieldFilterGroup</name></type> <name>newGroup</name> <init>= <expr><operator>new</operator> <call><name>MarkerFieldFilterGroup</name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>newGroup</name><operator>.</operator><name>loadSettings</name></name><argument_list>(<argument><expr><name>child</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>getAllFilters</name><argument_list>()</argument_list></call><operator>.</operator><call><name>add</name><argument_list>(<argument><expr><name>newGroup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Post build has happened. Let it all run.
	 */</comment>
	<function><specifier>protected</specifier> <type><name>void</name></type> <name>postBuild</name><parameter_list>()</parameter_list> <block>{
		<expr_stmt><expr><name>preBuildTime</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

	}</block></function>

	<comment type="block" format="javadoc">/**
	 * We are in a pre build state. Do not update until the post build happens.
	 */</comment>
	<function><specifier>protected</specifier> <type><name>void</name></type> <name>preBuild</name><parameter_list>()</parameter_list> <block>{
		<expr_stmt><expr><name>preBuildTime</name> <operator>=</operator> <call><name><name>System</name><operator>.</operator><name>currentTimeMillis</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Refresh the sort order and categories of the receiver.
	 * 
	 * @param service
	 *            The service to run the operation in.
	 */</comment>
	<function><type><name>void</name></type> <name>refreshContents</name><parameter_list>(<parameter><decl><type><name>IWorkbenchSiteProgressService</name></type> <name>service</name></decl></parameter>)</parameter_list> <block>{
		<try>try <block>{
			<expr_stmt><expr><call><name><name>service</name><operator>.</operator><name>busyCursorWhile</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>IRunnableWithProgress</name></super><argument_list>()</argument_list> <block>{
				<comment type="block">/*
				 * (non-Javadoc)
				 * 
				 * @see org.eclipse.jface.operation.IRunnableWithProgress#run(org.eclipse.core.runtime.IProgressMonitor)
				 */</comment>
				<function><specifier>public</specifier> <type><name>void</name></type> <name>run</name><parameter_list>(<parameter><decl><type><name>IProgressMonitor</name></type> <name>monitor</name></decl></parameter>)</parameter_list> <block>{

					<comment type="line">// Let the build finish before trying to sort</comment>
					<if>if <condition>(<expr><call><name>refreshingMarkers</name><argument_list>()</argument_list></call></expr>)</condition><then>
						<block type="pseudo"><return>return;</return></block></then></if>
					<expr_stmt><expr><call><name>sortAndMakeCategories</name><argument_list>(<argument><expr><name>monitor</name></expr></argument>, <argument><expr><name>currentMap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></function>
			}</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>InvocationTargetException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
			<expr_stmt><expr><call><name><name>StatusManager</name><operator>.</operator><name>getManager</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>handle</name><argument_list>(
					<argument><expr><call><name><name>StatusUtil</name><operator>.</operator><name>newStatus</name></name><argument_list>(<argument><expr><name><name>IStatus</name><operator>.</operator><name>ERROR</name></name></expr></argument>,
							<argument><expr><call><name><name>e</name><operator>.</operator><name>getLocalizedMessage</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></catch> <catch>catch <parameter_list>(<parameter><decl><type><name>InterruptedException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
			<expr_stmt><expr><call><name><name>StatusManager</name><operator>.</operator><name>getManager</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>handle</name><argument_list>(
					<argument><expr><call><name><name>StatusUtil</name><operator>.</operator><name>newStatus</name></name><argument_list>(<argument><expr><name><name>IStatus</name><operator>.</operator><name>ERROR</name></name></expr></argument>,
							<argument><expr><call><name><name>e</name><operator>.</operator><name>getLocalizedMessage</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></catch></try>

	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Check if the markers are still being built. If so schedule an update.
	 * 
	 * @return &lt;code&gt;true&lt;/code&gt; if the map is empty.
	 */</comment>
	<function><specifier>private</specifier> <type><name>boolean</name></type> <name>refreshingMarkers</name><parameter_list>()</parameter_list> <block>{
		<if>if <condition>(<expr><name>currentMap</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{<comment type="line">// First time?</comment>
			<expr_stmt><expr><call><name>scheduleMarkerUpdate</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><literal type="boolean">true</literal></expr>;</return>
		}</block></then></if>
		<return>return <expr><name>building</name></expr>;</return>
	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Restore the pre-3.4 filters.
	 * 
	 * @param memento
	 */</comment>
	<function><specifier>private</specifier> <type><name>void</name></type> <name>restoreLegacyFilters</name><parameter_list>(<parameter><decl><type><name>IMemento</name></type> <name>memento</name></decl></parameter>)</parameter_list> <block>{

		<decl_stmt><decl><type><name><name>IMemento</name><index>[]</index></name></type> <name>sections</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
		<if>if <condition>(<expr><name>memento</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then>
			<block type="pseudo"><expr_stmt><expr><name>sections</name> <operator>=</operator> <call><name><name>memento</name><operator>.</operator><name>getChildren</name></name><argument_list>(<argument><expr><name>TAG_LEGACY_FILTER_ENTRY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>

		<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>sections</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
			<decl_stmt><decl><type><name>IMemento</name></type> <name>child</name> <init>= <expr><name><name>sections</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>String</name></type> <name>id</name> <init>= <expr><call><name><name>child</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>IMemento</name><operator>.</operator><name>TAG_ID</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<if>if <condition>(<expr><name>id</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then>
				<block type="pseudo"><continue>continue;</continue></block></then></if>
			<expr_stmt><expr><call><name>loadLegacyFilter</name><argument_list>(<argument><expr><name>child</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></for>

	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Save the state of the receiver to memento
	 * 
	 * @param memento
	 */</comment>
	<function><type><name>void</name></type> <name>saveState</name><parameter_list>(<parameter><decl><type><name>IMemento</name></type> <name>memento</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><call><name>getComparator</name><argument_list>()</argument_list></call><operator>.</operator><call><name>saveState</name><argument_list>(<argument><expr><name>memento</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if>if <condition>(<expr><name>categoryGroup</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then>
			<block type="pseudo"><expr_stmt><expr><call><name><name>memento</name><operator>.</operator><name>putString</name></name><argument_list>(<argument><expr><name>TAG_CATEGORY_GROUP</name></expr></argument>, <argument><expr><name>VALUE_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
		<else>else
			<block type="pseudo"><expr_stmt><expr><call><name><name>memento</name><operator>.</operator><name>putString</name></name><argument_list>(<argument><expr><name>TAG_CATEGORY_GROUP</name></expr></argument>, <argument><expr><call><name>getCategoryGroup</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getId</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>
	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Schedule an update of the markers with a delay.
	 * 
	 */</comment>
	<function><type><name>void</name></type> <name>scheduleMarkerUpdate</name><parameter_list>()</parameter_list> <block>{
		<expr_stmt><expr><call><name>cancelJobs</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>currentMap</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>building</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>progressService</name><operator>.</operator><name>schedule</name></name><argument_list>(<argument><expr><name>markerProcessJob</name></expr></argument>, <argument><expr><name>SHORT_DELAY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Set whether the filters are being ANDed or ORed.
	 * 
	 * @param and
	 */</comment>
	<function><type><name>void</name></type> <name>setAndFilters</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>and</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><name>andFilters</name> <operator>=</operator> <name>and</name></expr>;</expr_stmt>
	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Set the category group.
	 * 
	 * @param group
	 *            {@link MarkerGroup} or &lt;code&gt;null&lt;/code&gt;.
	 */</comment>
	<function><type><name>void</name></type> <name>setCategoryGroup</name><parameter_list>(<parameter><decl><type><name>MarkerGroup</name></type> <name>group</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>categoryGroup</name></name> <operator>=</operator> <name>group</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>comparator</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>scheduleMarkerUpdate</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Categorise by the default setting for contentGenerator.
	 * 
	 * @param contentGenerator
	 */</comment>
	<function><specifier>private</specifier> <type><name>void</name></type> <name>setDefaultCategoryGroup</name><parameter_list>(<parameter><decl><type><name>MarkerContentGenerator</name></type> <name>contentGenerator</name></decl></parameter>)</parameter_list> <block>{
		<decl_stmt><decl><type><name>String</name></type> <name>categoryName</name> <init>= <expr><call><name><name>contentGenerator</name><operator>.</operator><name>getCategoryName</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<if>if <condition>(<expr><name>categoryName</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
			<decl_stmt><decl><type><name>MarkerGroup</name></type> <name>group</name> <init>= <expr><call><name><name>contentGenerator</name><operator>.</operator><name>getMarkerGroup</name></name><argument_list>(<argument><expr><name>categoryName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<if>if <condition>(<expr><name>group</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then>
				<block type="pseudo"><expr_stmt><expr><name>categoryGroup</name> <operator>=</operator> <name>group</name></expr>;</expr_stmt></block></then></if>
		}</block></then></if>

	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Set the generator and update the contents.
	 * 
	 * @param generator
	 */</comment>
	<function><type><name>void</name></type> <name>setGenerator</name><parameter_list>(<parameter><decl><type><name>MarkerContentGenerator</name></type> <name>generator</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>generator</name></name> <operator>=</operator> <name>generator</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>scheduleMarkerUpdate</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Set the primary sort field for the receiver.
	 * 
	 * @param field
	 */</comment>
	<function><type><name>void</name></type> <name>setPrimarySortField</name><parameter_list>(<parameter><decl><type><name>MarkerField</name></type> <name>field</name></decl></parameter>)</parameter_list> <block>{

		<expr_stmt><expr><call><name>getComparator</name><argument_list>()</argument_list></call><operator>.</operator><call><name>setPrimarySortField</name><argument_list>(<argument><expr><name>field</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Set the progress service for the receiver.
	 * 
	 * @param service
	 */</comment>
	<function><type><name>void</name></type> <name>setProgressService</name><parameter_list>(<parameter><decl><type><name>IWorkbenchSiteProgressService</name></type> <name>service</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><name>progressService</name> <operator>=</operator> <name>service</name></expr>;</expr_stmt>
		<if>if <condition>(<expr><name>service</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
			<expr_stmt><expr><call><name><name>service</name><operator>.</operator><name>showBusyForFamily</name></name><argument_list>(<argument><expr><name><name>ResourcesPlugin</name><operator>.</operator><name>FAMILY_MANUAL_BUILD</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>service</name><operator>.</operator><name>showBusyForFamily</name></name><argument_list>(<argument><expr><name><name>ResourcesPlugin</name><operator>.</operator><name>FAMILY_AUTO_BUILD</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>service</name>
					<operator>.</operator><name>showBusyForFamily</name></name><argument_list>(<argument><expr><name><name>MarkerContentGenerator</name><operator>.</operator><name>CACHE_UPDATE_FAMILY</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>

	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Set the updateJob for the receiver.
	 * 
	 * @param job
	 */</comment>
	<function><type><name>void</name></type> <name>setUpdateJob</name><parameter_list>(<parameter><decl><type><name>Job</name></type> <name>job</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><name>updateJob</name> <operator>=</operator> <name>job</name></expr>;</expr_stmt>

	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Sort the newMarkers and build categories if required.
	 * 
	 * @param monitor
	 * @param newMarkers
	 */</comment>
	<function><type><name>void</name></type> <name>sortAndMakeCategories</name><parameter_list>(<parameter><decl><type><name>IProgressMonitor</name></type> <name>monitor</name></decl></parameter>, <parameter><decl><type><name>MarkerMap</name></type> <name>newMarkers</name></decl></parameter>)</parameter_list> <block>{

		<comment type="line">// Allow the keys to get regenerated</comment>
		<expr_stmt><expr><call><name><name>Arrays</name><operator>.</operator><name>sort</name></name><argument_list>(<argument><expr><call><name><name>newMarkers</name><operator>.</operator><name>toArray</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>getComparator</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name><name>monitor</name><operator>.</operator><name>worked</name></name><argument_list>(<argument><expr><literal type="number">50</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if>if <condition>(<expr><call><name><name>newMarkers</name><operator>.</operator><name>getSize</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
			<expr_stmt><expr><name>categories</name> <operator>=</operator> <name>EMPTY_CATEGORY_ARRAY</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>currentMap</name> <operator>=</operator> <name>newMarkers</name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>monitor</name><operator>.</operator><name>done</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<return>return;</return>
		}</block></then></if>

		<expr_stmt><expr><call><name><name>monitor</name><operator>.</operator><name>subTask</name></name><argument_list>(<argument><expr><name><name>MarkerMessages</name><operator>.</operator><name>MarkerView_queueing_updates</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if>if <condition>(<expr><call><name><name>monitor</name><operator>.</operator><name>isCanceled</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
			<block type="pseudo"><return>return;</return></block></then></if>

		<if>if <condition>(<expr><call><name>isShowingHierarchy</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
			<decl_stmt><decl><type><name><name>MarkerCategory</name><index>[]</index></name></type> <name>newCategories</name> <init>= <expr><call><name>buildHierarchy</name><argument_list>(<argument><expr><name>newMarkers</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
					<argument><expr><call><name><name>newMarkers</name><operator>.</operator><name>getSize</name></name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<if>if <condition>(<expr><call><name><name>monitor</name><operator>.</operator><name>isCanceled</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
				<block type="pseudo"><return>return;</return></block></then></if>
			<expr_stmt><expr><name>categories</name> <operator>=</operator> <name>newCategories</name></expr>;</expr_stmt>
		}</block></then></if>

		<expr_stmt><expr><call><name><name>monitor</name><operator>.</operator><name>worked</name></name><argument_list>(<argument><expr><literal type="number">50</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>currentMap</name> <operator>=</operator> <name>newMarkers</name></expr>;</expr_stmt>
	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Add group to the enabled filters.
	 * 
	 * @param group
	 */</comment>
	<function><type><name>void</name></type> <name>toggleFilter</name><parameter_list>(<parameter><decl><type><name>MarkerFieldFilterGroup</name></type> <name>group</name></decl></parameter>)</parameter_list> <block>{
		<decl_stmt><decl><type><name>Collection</name></type> <name>enabled</name> <init>= <expr><call><name>getEnabledFilters</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<if>if <condition>(<expr><call><name><name>enabled</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><name>group</name></expr></argument>)</argument_list></call></expr>)</condition><then> <comment type="line">// true if it was present</comment>
			<block type="pseudo"><expr_stmt><expr><call><name><name>group</name><operator>.</operator><name>setEnabled</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>

		<else>else <block>{
			<expr_stmt><expr><call><name><name>group</name><operator>.</operator><name>setEnabled</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>enabled</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>group</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></else></if>
		<expr_stmt><expr><call><name>writeFiltersPreference</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>scheduleMarkerUpdate</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Update the focus resources from list. If there is an update required
	 * return &lt;code&gt;true&lt;/code&gt;. This method assumes that there are filters
	 * on resources enabled.
	 * 
	 * @param elements
	 */</comment>
	<function><type><name>void</name></type> <name>updateFocusElements</name><parameter_list>(<parameter><decl><type><name><name>Object</name><index>[]</index></name></type> <name>elements</name></decl></parameter>)</parameter_list> <block>{
		<decl_stmt><decl><type><name>Collection</name></type> <name>resourceCollection</name> <init>= <expr><operator>new</operator> <call><name>ArrayList</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>elements</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
			<if>if <condition>(<expr><name><name>elements</name><index>[<expr><name>i</name></expr>]</index></name> <operator>instanceof</operator> <name>IResource</name></expr>)</condition><then> <block>{
				<expr_stmt><expr><call><name><name>resourceCollection</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name><name>elements</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then> <else>else <block>{
				<expr_stmt><expr><call><name>addResources</name><argument_list>(<argument><expr><name>resourceCollection</name></expr></argument>,
						<argument><expr><operator>(</operator><operator>(</operator><name>ResourceMapping</name><operator>)</operator> <name><name>elements</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></else></if>
		}</block></for>

		<expr_stmt><expr><name>focusResources</name> <operator>=</operator> <operator>new</operator> <name><name>IResource</name><index>[<expr><call><name><name>resourceCollection</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>resourceCollection</name><operator>.</operator><name>toArray</name></name><argument_list>(<argument><expr><name>focusResources</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Update the receiver for a change in selection.
	 * 
	 * @param newElements
	 */</comment>
	<function><type><name>void</name></type> <name>updateForNewSelection</name><parameter_list>(<parameter><decl><type><name><name>Object</name><index>[]</index></name></type> <name>newElements</name></decl></parameter>)</parameter_list> <block>{
		<if>if <condition>(<expr><call><name>updateNeeded</name><argument_list>(<argument><expr><name>newElements</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
			<expr_stmt><expr><call><name>updateFocusElements</name><argument_list>(<argument><expr><name>newElements</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>scheduleMarkerUpdate</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>

	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Update the receiver from the dialog.
	 * 
	 * @param dialog
	 */</comment>
	<function><type><name>void</name></type> <name>updateFrom</name><parameter_list>(<parameter><decl><type><name>FiltersConfigurationDialog</name></type> <name>dialog</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><call><name>setAndFilters</name><argument_list>(<argument><expr><call><name><name>dialog</name><operator>.</operator><name>andFilters</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>filters</name> <operator>=</operator> <call><name><name>dialog</name><operator>.</operator><name>getFilters</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>enabledFilters</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>writeFiltersPreference</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>scheduleMarkerUpdate</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Return whether or not the list contains a resource that will require
	 * regeneration.
	 * 
	 * @return boolean &lt;code&gt;true&lt;/code&gt; if regeneration is required.
	 */</comment>
	<function><type><name>boolean</name></type> <name>updateNeeded</name><parameter_list>(<parameter><decl><type><name><name>Object</name><index>[]</index></name></type> <name>newElements</name></decl></parameter>)</parameter_list> <block>{

		<decl_stmt><decl><type><name>Iterator</name></type> <name>filters</name> <init>= <expr><call><name>getEnabledFilters</name><argument_list>()</argument_list></call><operator>.</operator><call><name>iterator</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

		<while>while <condition>(<expr><call><name><name>filters</name><operator>.</operator><name>hasNext</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
			<decl_stmt><decl><type><name>MarkerFieldFilterGroup</name></type> <name>filter</name> <init>= <expr><operator>(</operator><name>MarkerFieldFilterGroup</name><operator>)</operator> <call><name><name>filters</name>
					<operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

			<decl_stmt><decl><type><name>int</name></type> <name>scope</name> <init>= <expr><call><name><name>filter</name><operator>.</operator><name>getScope</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
			<if>if <condition>(<expr><name>scope</name> <operator>==</operator> <name><name>MarkerFieldFilterGroup</name><operator>.</operator><name>ON_ANY</name></name>
					<operator>||</operator> <name>scope</name> <operator>==</operator> <name><name>MarkerFieldFilterGroup</name><operator>.</operator><name>ON_WORKING_SET</name></name></expr>)</condition><then>
				<block type="pseudo"><continue>continue;</continue></block></then></if>

			<if>if <condition>(<expr><name>newElements</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <name><name>newElements</name><operator>.</operator><name>length</name></name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition><then>
				<block type="pseudo"><continue>continue;</continue></block></then></if>

			<if>if <condition>(<expr><name><name>focusResources</name><operator>.</operator><name>length</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then>
				<block type="pseudo"><return>return <expr><literal type="boolean">true</literal></expr>;</return></block></then></if> <comment type="line">// We had nothing now we have something</comment>

			<if>if <condition>(<expr><call><name><name>Arrays</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>focusResources</name></expr></argument>, <argument><expr><name>newElements</name></expr></argument>)</argument_list></call></expr>)</condition><then>
				<block type="pseudo"><continue>continue;</continue></block></then></if>

			<if>if <condition>(<expr><name>scope</name> <operator>==</operator> <name><name>MarkerFieldFilterGroup</name><operator>.</operator><name>ON_ANY_IN_SAME_CONTAINER</name></name></expr>)</condition><then> <block>{
				<decl_stmt><decl><type><name>Collection</name></type> <name>oldProjects</name> <init>= <expr><call><name><name>MarkerFieldFilterGroup</name>
						<operator>.</operator><name>getProjectsAsCollection</name></name><argument_list>(<argument><expr><name>focusResources</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>Collection</name></type> <name>newProjects</name> <init>= <expr><call><name><name>MarkerFieldFilterGroup</name>
						<operator>.</operator><name>getProjectsAsCollection</name></name><argument_list>(<argument><expr><name>newElements</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

				<if>if <condition>(<expr><call><name><name>oldProjects</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <call><name><name>newProjects</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call>
						<operator>&amp;&amp;</operator> <call><name><name>newProjects</name><operator>.</operator><name>containsAll</name></name><argument_list>(<argument><expr><name>oldProjects</name></expr></argument>)</argument_list></call></expr>)</condition><then>
					<block type="pseudo"><continue>continue;</continue></block></then></if>
				<return>return <expr><literal type="boolean">true</literal></expr>;</return><comment type="line">// Something must be different</comment>
			}</block></then></if>
			<return>return <expr><literal type="boolean">true</literal></expr>;</return>
		}</block></while>

		<return>return <expr><literal type="boolean">false</literal></expr>;</return>
	}</block></function>

	<comment type="block" format="javadoc">/**
	 * 
	 */</comment>
	<function><specifier>private</specifier> <type><name>void</name></type> <name>writeFiltersPreference</name><parameter_list>()</parameter_list> <block>{
		<decl_stmt><decl><type><name>XMLMemento</name></type> <name>memento</name> <init>= <expr><call><name><name>XMLMemento</name><operator>.</operator><name>createWriteRoot</name></name><argument_list>(<argument><expr><name>TAG_FILTERS_SECTION</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>writeFiltersSettings</name><argument_list>(<argument><expr><name>memento</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<decl_stmt><decl><type><name>StringWriter</name></type> <name>writer</name> <init>= <expr><operator>new</operator> <call><name>StringWriter</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<try>try <block>{
			<expr_stmt><expr><call><name><name>memento</name><operator>.</operator><name>save</name></name><argument_list>(<argument><expr><name>writer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
			<expr_stmt><expr><call><name><name>IDEWorkbenchPlugin</name><operator>.</operator><name>getDefault</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getLog</name><argument_list>()</argument_list></call><operator>.</operator><call><name>log</name><argument_list>(<argument><expr><call><name><name>Util</name><operator>.</operator><name>errorStatus</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></catch></try>

		<expr_stmt><expr><call><name><name>IDEWorkbenchPlugin</name><operator>.</operator><name>getDefault</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getPreferenceStore</name><argument_list>()</argument_list></call><operator>.</operator><call><name>putValue</name><argument_list>(
				<argument><expr><call><name>getMementoPreferenceName</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>writer</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>IDEWorkbenchPlugin</name><operator>.</operator><name>getDefault</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>savePluginPreferences</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Write the settings for the filters to the memento.
	 * 
	 * @param memento
	 */</comment>
	<function><specifier>private</specifier> <type><name>void</name></type> <name>writeFiltersSettings</name><parameter_list>(<parameter><decl><type><name>XMLMemento</name></type> <name>memento</name></decl></parameter>)</parameter_list> <block>{

		<expr_stmt><expr><call><name><name>memento</name><operator>.</operator><name>putBoolean</name></name><argument_list>(<argument><expr><name>TAG_AND</name></expr></argument>, <argument><expr><name>andFilters</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<decl_stmt><decl><type><name>Iterator</name></type> <name>groups</name> <init>= <expr><call><name>getAllFilters</name><argument_list>()</argument_list></call><operator>.</operator><call><name>iterator</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<while>while <condition>(<expr><call><name><name>groups</name><operator>.</operator><name>hasNext</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
			<decl_stmt><decl><type><name>MarkerFieldFilterGroup</name></type> <name>group</name> <init>= <expr><operator>(</operator><name>MarkerFieldFilterGroup</name><operator>)</operator> <call><name><name>groups</name>
					<operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>IMemento</name></type> <name>child</name> <init>= <expr><call><name><name>memento</name>
					<operator>.</operator><name>createChild</name></name><argument_list>(<argument><expr><name>TAG_GROUP_ENTRY</name></expr></argument>, <argument><expr><call><name><name>group</name><operator>.</operator><name>getID</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name><name>group</name><operator>.</operator><name>saveFilterSettings</name></name><argument_list>(<argument><expr><name>child</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></while>

	}</block></function>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="org.eclipse.ui.ide.markers.compatibility/src/org/eclipse/ui/ide/markers/compatibility/internal/FiltersConfigurationDialog.java" hash="1a79ff609c4aa781cfc241ef1cb11f911c5305b9"><comment type="block" format="javadoc">/*******************************************************************************
 * Copyright (c) 2007,2008 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     IBM Corporation - initial API and implementation
 *     Remy Chi Jian Suen &lt;remy.suen@gmail.com&gt; 
 * 			- Fix for Bug 214443 Problem view filter created even if I hit Cancel
 ******************************************************************************/</comment>

<package>package <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>ide</name><operator>.</operator><name>markers</name><operator>.</operator><name>compatibility</name><operator>.</operator><name>internal</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Collection</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Iterator</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>jface</name><operator>.</operator><name>dialogs</name><operator>.</operator><name>Dialog</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>jface</name><operator>.</operator><name>dialogs</name><operator>.</operator><name>IDialogConstants</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>jface</name><operator>.</operator><name>dialogs</name><operator>.</operator><name>IDialogSettings</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>jface</name><operator>.</operator><name>dialogs</name><operator>.</operator><name>IInputValidator</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>jface</name><operator>.</operator><name>dialogs</name><operator>.</operator><name>InputDialog</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>jface</name><operator>.</operator><name>dialogs</name><operator>.</operator><name>MessageDialogWithToggle</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>jface</name><operator>.</operator><name>viewers</name><operator>.</operator><name>CheckboxTableViewer</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>jface</name><operator>.</operator><name>viewers</name><operator>.</operator><name>ISelection</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>jface</name><operator>.</operator><name>viewers</name><operator>.</operator><name>ISelectionChangedListener</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>jface</name><operator>.</operator><name>viewers</name><operator>.</operator><name>IStructuredContentProvider</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>jface</name><operator>.</operator><name>viewers</name><operator>.</operator><name>IStructuredSelection</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>jface</name><operator>.</operator><name>viewers</name><operator>.</operator><name>LabelProvider</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>jface</name><operator>.</operator><name>viewers</name><operator>.</operator><name>SelectionChangedEvent</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>jface</name><operator>.</operator><name>viewers</name><operator>.</operator><name>StructuredSelection</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>jface</name><operator>.</operator><name>viewers</name><operator>.</operator><name>Viewer</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>jface</name><operator>.</operator><name>window</name><operator>.</operator><name>IShellProvider</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>jface</name><operator>.</operator><name>window</name><operator>.</operator><name>Window</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>osgi</name><operator>.</operator><name>util</name><operator>.</operator><name>NLS</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>swt</name><operator>.</operator><name>SWT</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>swt</name><operator>.</operator><name>events</name><operator>.</operator><name>DisposeEvent</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>swt</name><operator>.</operator><name>events</name><operator>.</operator><name>DisposeListener</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>swt</name><operator>.</operator><name>events</name><operator>.</operator><name>SelectionAdapter</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>swt</name><operator>.</operator><name>events</name><operator>.</operator><name>SelectionEvent</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>swt</name><operator>.</operator><name>layout</name><operator>.</operator><name>GridData</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>swt</name><operator>.</operator><name>layout</name><operator>.</operator><name>GridLayout</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>swt</name><operator>.</operator><name>widgets</name><operator>.</operator><name>Button</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>swt</name><operator>.</operator><name>widgets</name><operator>.</operator><name>Composite</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>swt</name><operator>.</operator><name>widgets</name><operator>.</operator><name>Control</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>swt</name><operator>.</operator><name>widgets</name><operator>.</operator><name>Label</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>forms</name><operator>.</operator><name>events</name><operator>.</operator><name>ExpansionEvent</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>forms</name><operator>.</operator><name>events</name><operator>.</operator><name>IExpansionListener</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>forms</name><operator>.</operator><name>widgets</name><operator>.</operator><name>ExpandableComposite</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>forms</name><operator>.</operator><name>widgets</name><operator>.</operator><name>FormToolkit</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>forms</name><operator>.</operator><name>widgets</name><operator>.</operator><name>ScrolledForm</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>ide</name><operator>.</operator><name>markers</name><operator>.</operator><name>compatibility</name><operator>.</operator><name>api</name><operator>.</operator><name>FilterConfigurationArea</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>ide</name><operator>.</operator><name>markers</name><operator>.</operator><name>compatibility</name><operator>.</operator><name>api</name><operator>.</operator><name>internal</name><operator>.</operator><name>MarkerMessages</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>internal</name><operator>.</operator><name>ide</name><operator>.</operator><name>IDEInternalPreferences</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>internal</name><operator>.</operator><name>ide</name><operator>.</operator><name>IDEWorkbenchPlugin</name></name>;</import>

<comment type="block" format="javadoc">/**
 * FiltersConfigurationDialog is the dialog for configuring the filters for the
 * 
 * @since 3.3
 * 
 */</comment>
<class><specifier>public</specifier> class <name>FiltersConfigurationDialog</name> <super><extends>extends <name>Dialog</name></extends></super> <block>{

	<decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>SELECTED_FILTER_GROUP</name> <init>= <expr><literal type="string">"SELECTED_FILTER_GROUP"</literal></expr></init></decl>;</decl_stmt> <comment type="line">//$NON-NLS-1$</comment>

	<decl_stmt><decl><specifier>private</specifier> <type><name>Collection</name></type> <name>filterGroups</name></decl>;</decl_stmt>

	<decl_stmt><decl><specifier>private</specifier> <type><name>CheckboxTableViewer</name></type> <name>filtersList</name></decl>;</decl_stmt>

	<decl_stmt><decl><specifier>private</specifier> <type><name>GroupFilterConfigurationArea</name></type> <name>scopeArea</name> <init>= <expr><operator>new</operator> <call><name>ScopeArea</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><specifier>private</specifier> <type><name>MarkerFieldFilterGroup</name></type> <name>selectedFilterGroup</name></decl>;</decl_stmt>

	<decl_stmt><decl><specifier>private</specifier> <type><name>ScrolledForm</name></type> <name>form</name></decl>;</decl_stmt>

	<decl_stmt><decl><specifier>private</specifier> <type><name>CachedMarkerBuilder</name></type> <name>builder</name></decl>;</decl_stmt>

	<decl_stmt><decl><specifier>private</specifier> <type><name>Collection</name></type> <name>filterAreas</name></decl>;</decl_stmt>

	<decl_stmt><decl><specifier>private</specifier> <type><name>boolean</name></type> <name>andFilters</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><specifier>private</specifier> <type><name>Button</name></type> <name>removeButton</name></decl>;</decl_stmt>

	<decl_stmt><decl><specifier>private</specifier> <type><name>ArrayList</name></type> <name>browsedFilters</name> <init>= <expr><operator>new</operator> <call><name>ArrayList</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="block" format="javadoc">/**
	 * Create a new instance of the receiver on builder.
	 * 
	 * @param parentShell
	 * @param builder
	 *            The {@link CachedMarkerBuilder} to apply this to
	 */</comment>
	<constructor><specifier>public</specifier> <name>FiltersConfigurationDialog</name><parameter_list>(<parameter><decl><type><name>IShellProvider</name></type> <name>parentShell</name></decl></parameter>,
			<parameter><decl><type><name>CachedMarkerBuilder</name></type> <name>builder</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>parentShell</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>filterGroups</name> <operator>=</operator> <call><name>makeWorkingCopy</name><argument_list>(<argument><expr><call><name><name>builder</name><operator>.</operator><name>getAllFilters</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>builder</name></name> <operator>=</operator> <name>builder</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>andFilters</name> <operator>=</operator> <call><name><name>builder</name><operator>.</operator><name>andFilters</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	}</block></constructor>

	<comment type="block" format="javadoc">/**
	 * Return whether or not to AND the filters
	 * 
	 * @return boolean
	 */</comment>
	<function><type><name>boolean</name></type> <name>andFilters</name><parameter_list>()</parameter_list> <block>{
		<return>return <expr><name>andFilters</name></expr>;</return>
	}</block></function>

	<comment type="block">/*
	 * (non-Javadoc)
	 * 
	 * @see org.eclipse.jface.dialogs.Dialog#close()
	 */</comment>
	<function><specifier>public</specifier> <type><name>boolean</name></type> <name>close</name><parameter_list>()</parameter_list> <block>{
		<expr_stmt><expr><call><name>saveDialogSettings</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><call><name><name>super</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</return>
	}</block></function>

	<comment type="block">/*
	 * (non-Javadoc)
	 * 
	 * @see org.eclipse.jface.dialogs.Dialog#createDialogArea(org.eclipse.swt.widgets.Composite)
	 */</comment>
	<function><specifier>protected</specifier> <type><name>Control</name></type> <name>createDialogArea</name><parameter_list>(<parameter><decl><type><name>Composite</name></type> <name>parent</name></decl></parameter>)</parameter_list> <block>{

		<expr_stmt><expr><call><name><name>parent</name><operator>.</operator><name>getShell</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>setText</name><argument_list>(<argument><expr><name><name>MarkerMessages</name><operator>.</operator><name>configureFiltersDialog_title</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<decl_stmt><decl><type><name>Composite</name></type> <name>top</name> <init>= <expr><operator>(</operator><name>Composite</name><operator>)</operator> <call><name><name>super</name><operator>.</operator><name>createDialogArea</name></name><argument_list>(<argument><expr><name>parent</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>initializeDialogUnits</name><argument_list>(<argument><expr><name>top</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<decl_stmt><decl><type><name>GridLayout</name></type> <name>layout</name> <init>= <expr><operator>new</operator> <call><name>GridLayout</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name><name>layout</name><operator>.</operator><name>numColumns</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>layout</name><operator>.</operator><name>makeColumnsEqualWidth</name></name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>top</name><operator>.</operator><name>setLayout</name></name><argument_list>(<argument><expr><name>layout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>createFilterSelectionArea</name><argument_list>(<argument><expr><name>top</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<decl_stmt><decl><type><specifier>final</specifier> <name>FormToolkit</name></type> <name>toolkit</name> <init>= <expr><operator>new</operator> <call><name>FormToolkit</name><argument_list>(<argument><expr><call><name><name>top</name><operator>.</operator><name>getDisplay</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>parent</name><operator>.</operator><name>addDisposeListener</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>DisposeListener</name></super><argument_list>()</argument_list> <block>{

			<function><specifier>public</specifier> <type><name>void</name></type> <name>widgetDisposed</name><parameter_list>(<parameter><decl><type><name>DisposeEvent</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
				<expr_stmt><expr><call><name><name>toolkit</name><operator>.</operator><name>dispose</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

			}</block></function>
		}</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>form</name> <operator>=</operator> <call><name><name>toolkit</name><operator>.</operator><name>createScrolledForm</name></name><argument_list>(<argument><expr><name>top</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>form</name><operator>.</operator><name>setBackground</name></name><argument_list>(<argument><expr><call><name><name>parent</name><operator>.</operator><name>getBackground</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<decl_stmt><decl><type><name>GridData</name></type> <name>data</name> <init>= <expr><operator>new</operator> <call><name>GridData</name><argument_list>(<argument><expr><name><name>SWT</name><operator>.</operator><name>FILL</name></name></expr></argument>, <argument><expr><name><name>SWT</name><operator>.</operator><name>FILL</name></name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>form</name><operator>.</operator><name>setLayoutData</name></name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>form</name><operator>.</operator><name>getBody</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>setLayout</name><argument_list>(<argument><expr><operator>new</operator> <call><name>GridLayout</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>filterAreas</name> <operator>=</operator> <call><name><name>builder</name><operator>.</operator><name>createFilterConfigurationFields</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>createFieldArea</name><argument_list>(<argument><expr><name>toolkit</name></expr></argument>, <argument><expr><name>form</name></expr></argument>, <argument><expr><name>scopeArea</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>Iterator</name></type> <name>areas</name> <init>= <expr><call><name><name>filterAreas</name><operator>.</operator><name>iterator</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

		<while>while <condition>(<expr><call><name><name>areas</name><operator>.</operator><name>hasNext</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
			<expr_stmt><expr><call><name>createFieldArea</name><argument_list>(<argument><expr><name>toolkit</name></expr></argument>, <argument><expr><name>form</name></expr></argument>, <argument><expr><operator>(</operator><name>FilterConfigurationArea</name><operator>)</operator> <call><name><name>areas</name>
					<operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></while>

		<if>if <condition>(<expr><call><name><name>filterGroups</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
			<block type="pseudo"><expr_stmt><expr><call><name>setFieldsEnabled</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
		<else>else
			<block type="pseudo"><expr_stmt><expr><call><name>loadDialogSettings</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></else></if>

		<expr_stmt><expr><call><name>applyDialogFont</name><argument_list>(<argument><expr><name>top</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>top</name></expr>;</return>
	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Create a field area in the form for the FilterConfigurationArea
	 * 
	 * @param toolkit
	 * @param form
	 * @param area
	 * @param expand
	 *            &lt;code&gt;true&lt;/code&gt; if the area should be expanded by default
	 */</comment>
	<function><specifier>private</specifier> <type><name>void</name></type> <name>createFieldArea</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>FormToolkit</name></type> <name>toolkit</name></decl></parameter>,
			<parameter><decl><type><specifier>final</specifier> <name>ScrolledForm</name></type> <name>form</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>FilterConfigurationArea</name></type> <name>area</name></decl></parameter>,
			<parameter><decl><type><name>boolean</name></type> <name>expand</name></decl></parameter>)</parameter_list> <block>{
		<decl_stmt><decl><type><specifier>final</specifier> <name>ExpandableComposite</name></type> <name>expandable</name> <init>= <expr><call><name><name>toolkit</name>
				<operator>.</operator><name>createExpandableComposite</name></name><argument_list>(<argument><expr><call><name><name>form</name><operator>.</operator><name>getBody</name></name><argument_list>()</argument_list></call></expr></argument>,
						<argument><expr><name><name>ExpandableComposite</name><operator>.</operator><name>TWISTIE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>expandable</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><call><name><name>area</name><operator>.</operator><name>getTitle</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>expandable</name><operator>.</operator><name>setBackground</name></name><argument_list>(<argument><expr><call><name><name>form</name><operator>.</operator><name>getBackground</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>expandable</name><operator>.</operator><name>setLayout</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>GridLayout</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>expandable</name><operator>.</operator><name>setLayoutData</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>GridData</name><argument_list>(<argument><expr><name><name>SWT</name><operator>.</operator><name>FILL</name></name></expr></argument>, <argument><expr><name><name>SWT</name><operator>.</operator><name>NONE</name></name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>expandable</name><operator>.</operator><name>addExpansionListener</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>IExpansionListener</name></super><argument_list>()</argument_list> <block>{
			<comment type="block">/*
			 * (non-Javadoc)
			 * 
			 * @see org.eclipse.ui.forms.events.IExpansionListener#expansionStateChanged(org.eclipse.ui.forms.events.ExpansionEvent)
			 */</comment>
			<function><specifier>public</specifier> <type><name>void</name></type> <name>expansionStateChanged</name><parameter_list>(<parameter><decl><type><name>ExpansionEvent</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
				<expr_stmt><expr><call><name><name>expandable</name><operator>.</operator><name>getParent</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>layout</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			}</block></function>

			<comment type="block">/*
			 * (non-Javadoc)
			 * 
			 * @see org.eclipse.ui.forms.events.IExpansionListener#expansionStateChanging(org.eclipse.ui.forms.events.ExpansionEvent)
			 */</comment>
			<function><specifier>public</specifier> <type><name>void</name></type> <name>expansionStateChanging</name><parameter_list>(<parameter><decl><type><name>ExpansionEvent</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{

			}</block></function>
		}</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<decl_stmt><decl><type><name>Composite</name></type> <name>sectionClient</name> <init>= <expr><call><name><name>toolkit</name><operator>.</operator><name>createComposite</name></name><argument_list>(<argument><expr><name>expandable</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>sectionClient</name><operator>.</operator><name>setLayout</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>GridLayout</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>sectionClient</name><operator>.</operator><name>setLayoutData</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>GridData</name><argument_list>(<argument><expr><name><name>SWT</name><operator>.</operator><name>FILL</name></name></expr></argument>, <argument><expr><name><name>SWT</name><operator>.</operator><name>NONE</name></name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>,
				<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>sectionClient</name><operator>.</operator><name>setBackground</name></name><argument_list>(<argument><expr><call><name><name>form</name><operator>.</operator><name>getBackground</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>area</name><operator>.</operator><name>createContents</name></name><argument_list>(<argument><expr><name>sectionClient</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>expandable</name><operator>.</operator><name>setClient</name></name><argument_list>(<argument><expr><name>sectionClient</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>expandable</name><operator>.</operator><name>setExpanded</name></name><argument_list>(<argument><expr><name>expand</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Create the area for selecting the filters and enabling/disabling them.
	 * 
	 * @param top
	 */</comment>
	<function><specifier>private</specifier> <type><name>void</name></type> <name>createFilterSelectionArea</name><parameter_list>(<parameter><decl><type><name>Composite</name></type> <name>top</name></decl></parameter>)</parameter_list> <block>{

		<decl_stmt><decl><type><name>Composite</name></type> <name>filtersComposite</name> <init>= <expr><operator>new</operator> <call><name>Composite</name><argument_list>(<argument><expr><name>top</name></expr></argument>, <argument><expr><name><name>SWT</name><operator>.</operator><name>NONE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>filtersComposite</name><operator>.</operator><name>setLayout</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>GridLayout</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>filtersComposite</name><operator>.</operator><name>setLayoutData</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>GridData</name><argument_list>(<argument><expr><name><name>SWT</name><operator>.</operator><name>FILL</name></name></expr></argument>, <argument><expr><name><name>SWT</name><operator>.</operator><name>FILL</name></name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>,
				<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<decl_stmt><decl><type><name>Label</name></type> <name>title</name> <init>= <expr><operator>new</operator> <call><name>Label</name><argument_list>(<argument><expr><name>filtersComposite</name></expr></argument>, <argument><expr><name><name>SWT</name><operator>.</operator><name>NONE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>title</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><name><name>MarkerMessages</name><operator>.</operator><name>filtersDialog_entriesTitle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>GridData</name></type> <name>titleData</name> <init>= <expr><operator>new</operator> <call><name>GridData</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name><name>titleData</name><operator>.</operator><name>horizontalSpan</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>title</name><operator>.</operator><name>setLayoutData</name></name><argument_list>(<argument><expr><name>titleData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>filtersList</name> <operator>=</operator> <call><name><name>CheckboxTableViewer</name><operator>.</operator><name>newCheckList</name></name><argument_list>(<argument><expr><name>filtersComposite</name></expr></argument>,
				<argument><expr><name><name>SWT</name><operator>.</operator><name>BORDER</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>filtersList</name><operator>.</operator><name>setContentProvider</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>IStructuredContentProvider</name></super><argument_list>()</argument_list> <block>{
			<comment type="block">/*
			 * (non-Javadoc)
			 * 
			 * @see org.eclipse.jface.viewers.IContentProvider#dispose()
			 */</comment>
			<function><specifier>public</specifier> <type><name>void</name></type> <name>dispose</name><parameter_list>()</parameter_list> <block>{
				<comment type="line">// Do nothing</comment>
			}</block></function>

			<comment type="block">/*
			 * (non-Javadoc)
			 * 
			 * @see org.eclipse.jface.viewers.IStructuredContentProvider#getElements(java.lang.Object)
			 */</comment>
			<function><specifier>public</specifier> <type><name><name>Object</name><index>[]</index></name></type> <name>getElements</name><parameter_list>(<parameter><decl><type><name>Object</name></type> <name>inputElement</name></decl></parameter>)</parameter_list> <block>{
				<return>return <expr><call><name><name>filterGroups</name><operator>.</operator><name>toArray</name></name><argument_list>()</argument_list></call></expr>;</return>
			}</block></function>

			<comment type="block">/*
			 * (non-Javadoc)
			 * 
			 * @see org.eclipse.jface.viewers.IContentProvider#inputChanged(org.eclipse.jface.viewers.Viewer,
			 *      java.lang.Object, java.lang.Object)
			 */</comment>
			<function><specifier>public</specifier> <type><name>void</name></type> <name>inputChanged</name><parameter_list>(<parameter><decl><type><name>Viewer</name></type> <name>viewer</name></decl></parameter>, <parameter><decl><type><name>Object</name></type> <name>oldInput</name></decl></parameter>,
					<parameter><decl><type><name>Object</name></type> <name>newInput</name></decl></parameter>)</parameter_list> <block>{
				<comment type="line">// Do nothing</comment>
			}</block></function>
		}</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name><name>filtersList</name><operator>.</operator><name>setLabelProvider</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>LabelProvider</name></super><argument_list>()</argument_list> <block>{
			<comment type="block">/*
			 * (non-Javadoc)
			 * 
			 * @see org.eclipse.jface.viewers.ILabelProvider#getText(java.lang.Object)
			 */</comment>
			<function><specifier>public</specifier> <type><name>String</name></type> <name>getText</name><parameter_list>(<parameter><decl><type><name>Object</name></type> <name>element</name></decl></parameter>)</parameter_list> <block>{
				<return>return <expr><operator>(</operator><operator>(</operator><name>MarkerFieldFilterGroup</name><operator>)</operator> <name>element</name><operator>)</operator><operator>.</operator><call><name>getName</name><argument_list>()</argument_list></call></expr>;</return>
			}</block></function>
		}</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if>if <condition>(<expr><name>selectedFilterGroup</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then>
			<block type="pseudo"><expr_stmt><expr><call><name><name>filtersList</name><operator>.</operator><name>setSelection</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>StructuredSelection</name><argument_list>(
					<argument><expr><name>selectedFilterGroup</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>

		<expr_stmt><expr><call><name><name>filtersList</name>
				<operator>.</operator><name>addSelectionChangedListener</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>ISelectionChangedListener</name></super><argument_list>()</argument_list> <block>{

					<comment type="block">/*
					 * (non-Javadoc)
					 * 
					 * @see org.eclipse.jface.viewers.ISelectionChangedListener#selectionChanged(org.eclipse.jface.viewers.SelectionChangedEvent)
					 */</comment>
					<function><specifier>public</specifier> <type><name>void</name></type> <name>selectionChanged</name><parameter_list>(<parameter><decl><type><name>SelectionChangedEvent</name></type> <name>event</name></decl></parameter>)</parameter_list> <block>{
						<expr_stmt><expr><call><name>setSelectedFilter</name><argument_list>(<argument><expr><call>(<name>MarkerFieldFilterGroup</name>) <argument_list>(<argument><expr><operator>(</operator><name>IStructuredSelection</name><operator>)</operator> <call><name><name>event</name>
								<operator>.</operator><name>getSelection</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>getFirstElement</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					}</block></function>
				}</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name><name>filtersList</name><operator>.</operator><name>setInput</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<decl_stmt><decl><type><name>Iterator</name></type> <name>filterIterator</name> <init>= <expr><call><name><name>filterGroups</name><operator>.</operator><name>iterator</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<while>while <condition>(<expr><call><name><name>filterIterator</name><operator>.</operator><name>hasNext</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
			<decl_stmt><decl><type><name>MarkerFieldFilterGroup</name></type> <name>group</name> <init>= <expr><operator>(</operator><name>MarkerFieldFilterGroup</name><operator>)</operator> <call><name><name>filterIterator</name>
					<operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name><name>filtersList</name><operator>.</operator><name>setChecked</name></name><argument_list>(<argument><expr><name>group</name></expr></argument>, <argument><expr><call><name><name>group</name><operator>.</operator><name>isEnabled</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></while>

		<decl_stmt><decl><type><name>GridData</name></type> <name>listData</name> <init>= <expr><operator>new</operator> <call><name>GridData</name><argument_list>(<argument><expr><name><name>SWT</name><operator>.</operator><name>FILL</name></name></expr></argument>, <argument><expr><name><name>SWT</name><operator>.</operator><name>FILL</name></name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name><name>listData</name><operator>.</operator><name>widthHint</name></name> <operator>=</operator> <call><name>convertHorizontalDLUsToPixels</name><argument_list>(<argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>filtersList</name><operator>.</operator><name>getControl</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>setLayoutData</name><argument_list>(<argument><expr><name>listData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<decl_stmt><decl><type><name>Composite</name></type> <name>buttons</name> <init>= <expr><operator>new</operator> <call><name>Composite</name><argument_list>(<argument><expr><name>filtersComposite</name></expr></argument>, <argument><expr><name><name>SWT</name><operator>.</operator><name>NONE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>GridLayout</name></type> <name>buttonLayout</name> <init>= <expr><operator>new</operator> <call><name>GridLayout</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name><name>buttonLayout</name><operator>.</operator><name>marginWidth</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>buttons</name><operator>.</operator><name>setLayout</name></name><argument_list>(<argument><expr><name>buttonLayout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>GridData</name></type> <name>buttonsData</name> <init>= <expr><operator>new</operator> <call><name>GridData</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name><name>buttonsData</name><operator>.</operator><name>verticalAlignment</name></name> <operator>=</operator> <name><name>GridData</name><operator>.</operator><name>BEGINNING</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>buttons</name><operator>.</operator><name>setLayoutData</name></name><argument_list>(<argument><expr><name>buttonsData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<decl_stmt><decl><type><name>Button</name></type> <name>addNew</name> <init>= <expr><operator>new</operator> <call><name>Button</name><argument_list>(<argument><expr><name>buttons</name></expr></argument>, <argument><expr><name><name>SWT</name><operator>.</operator><name>PUSH</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>addNew</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><name><name>MarkerMessages</name><operator>.</operator><name>MarkerFilter_addFilterName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>addNew</name><operator>.</operator><name>addSelectionListener</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>SelectionAdapter</name></super><argument_list>()</argument_list> <block>{
			<function><specifier>public</specifier> <type><name>void</name></type> <name>widgetSelected</name><parameter_list>(<parameter><decl><type><name>SelectionEvent</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
				<decl_stmt><decl><type><name>InputDialog</name></type> <name>newDialog</name> <init>= <expr><operator>new</operator> <call><name>InputDialog</name><argument_list>(<argument><expr><call><name>getShell</name><argument_list>()</argument_list></call></expr></argument>,
						<argument><expr><name><name>MarkerMessages</name><operator>.</operator><name>MarkerFilterDialog_title</name></name></expr></argument>,
						<argument><expr><name><name>MarkerMessages</name><operator>.</operator><name>MarkerFilterDialog_message</name></name></expr></argument>,
						<argument><expr><name><name>MarkerMessages</name><operator>.</operator><name>MarkerFilter_newFilterName</name></name></expr></argument>,
						<argument><expr><operator>new</operator> <class><super><name>IInputValidator</name></super><argument_list>()</argument_list> <block>{
							<comment type="block">/*
							 * (non-Javadoc)
							 * 
							 * @see org.eclipse.jface.dialogs.IInputValidator#isValid(java.lang.String)
							 */</comment>
							<function><specifier>public</specifier> <type><name>String</name></type> <name>isValid</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>newText</name></decl></parameter>)</parameter_list> <block>{
								<if>if <condition>(<expr><call><name><name>newText</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then>
									<block type="pseudo"><return>return <expr><name><name>MarkerMessages</name><operator>.</operator><name>MarkerFilterDialog_emptyMessage</name></name></expr>;</return></block></then></if>
								<decl_stmt><decl><type><name>Iterator</name></type> <name>filterIterator</name> <init>= <expr><call><name><name>filterGroups</name>
										<operator>.</operator><name>iterator</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
								<while>while <condition>(<expr><call><name><name>filterIterator</name><operator>.</operator><name>hasNext</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
									<if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>MarkerFieldFilterGroup</name><operator>)</operator> <call><name><name>filterIterator</name>
											<operator>.</operator><name>next</name></name><argument_list>()</argument_list></call><operator>)</operator><operator>.</operator><call><name>getName</name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name>newText</name></expr></argument>)</argument_list></call></expr>)</condition><then>
										<block type="pseudo"><return>return <expr><call><name><name>NLS</name>
												<operator>.</operator><name>bind</name></name><argument_list>(
														<argument><expr><name><name>MarkerMessages</name><operator>.</operator><name>filtersDialog_conflictingName</name></name></expr></argument>,
														<argument><expr><name>newText</name></expr></argument>)</argument_list></call></expr>;</return></block></then></if>
								}</block></while>

								<return>return <expr><literal type="null">null</literal></expr>;</return>
							}</block></function>
						}</block></class></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<if>if <condition>(<expr><name><name>Window</name><operator>.</operator><name>OK</name></name> <operator>==</operator> <call><name><name>newDialog</name><operator>.</operator><name>open</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
					<decl_stmt><decl><type><name>String</name></type> <name>newName</name> <init>= <expr><call><name><name>newDialog</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
					<if>if <condition>(<expr><name>newName</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
						<expr_stmt><expr><call><name>createNewFilter</name><argument_list>(<argument><expr><name>newName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></then></if>
				}</block></then></if>
			}</block></function>
		}</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>setButtonLayoutData</name><argument_list>(<argument><expr><name>addNew</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>removeButton</name> <operator>=</operator> <operator>new</operator> <call><name>Button</name><argument_list>(<argument><expr><name>buttons</name></expr></argument>, <argument><expr><name><name>SWT</name><operator>.</operator><name>PUSH</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>removeButton</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><name><name>MarkerMessages</name><operator>.</operator><name>MarkerFilter_deleteSelectedName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>removeButton</name><operator>.</operator><name>addSelectionListener</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>SelectionAdapter</name></super><argument_list>()</argument_list> <block>{
			<function><specifier>public</specifier> <type><name>void</name></type> <name>widgetSelected</name><parameter_list>(<parameter><decl><type><name>SelectionEvent</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
				<expr_stmt><expr><call><name>removeFilters</name><argument_list>(<argument><expr><call><name><name>filtersList</name><operator>.</operator><name>getSelection</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></function>
		}</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>setButtonLayoutData</name><argument_list>(<argument><expr><name>removeButton</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<decl_stmt><decl><type><name>Button</name></type> <name>andButton</name> <init>= <expr><operator>new</operator> <call><name>Button</name><argument_list>(<argument><expr><name>filtersComposite</name></expr></argument>, <argument><expr><name><name>SWT</name><operator>.</operator><name>RADIO</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>GridData</name></type> <name>data</name> <init>= <expr><operator>new</operator> <call><name>GridData</name><argument_list>(<argument><expr><name><name>GridData</name><operator>.</operator><name>FILL_HORIZONTAL</name></name></expr></argument>, <argument><expr><name><name>SWT</name><operator>.</operator><name>NONE</name></name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>,
				<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name><name>data</name><operator>.</operator><name>horizontalSpan</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>andButton</name><operator>.</operator><name>setLayoutData</name></name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>andButton</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><name><name>MarkerMessages</name><operator>.</operator><name>AND_Title</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>andButton</name><operator>.</operator><name>setSelection</name></name><argument_list>(<argument><expr><name>andFilters</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>andButton</name><operator>.</operator><name>addSelectionListener</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>SelectionAdapter</name></super><argument_list>()</argument_list> <block>{

			<comment type="block">/*
			 * (non-Javadoc)
			 * 
			 * @see org.eclipse.swt.events.SelectionAdapter#widgetSelected(org.eclipse.swt.events.SelectionEvent)
			 */</comment>
			<function><specifier>public</specifier> <type><name>void</name></type> <name>widgetSelected</name><parameter_list>(<parameter><decl><type><name>SelectionEvent</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
				<expr_stmt><expr><name>andFilters</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
			}</block></function>
		}</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<decl_stmt><decl><type><name>Button</name></type> <name>orButton</name> <init>= <expr><operator>new</operator> <call><name>Button</name><argument_list>(<argument><expr><name>filtersComposite</name></expr></argument>, <argument><expr><name><name>SWT</name><operator>.</operator><name>RADIO</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name>data</name> <operator>=</operator> <operator>new</operator> <call><name>GridData</name><argument_list>(<argument><expr><name><name>GridData</name><operator>.</operator><name>FILL_HORIZONTAL</name></name></expr></argument>, <argument><expr><name><name>SWT</name><operator>.</operator><name>NONE</name></name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>data</name><operator>.</operator><name>horizontalSpan</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>orButton</name><operator>.</operator><name>setLayoutData</name></name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>orButton</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><name><name>MarkerMessages</name><operator>.</operator><name>OR_Title</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>orButton</name><operator>.</operator><name>setSelection</name></name><argument_list>(<argument><expr><operator>!</operator><name>andFilters</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>orButton</name><operator>.</operator><name>addSelectionListener</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>SelectionAdapter</name></super><argument_list>()</argument_list> <block>{

			<comment type="block">/*
			 * (non-Javadoc)
			 * 
			 * @see org.eclipse.swt.events.SelectionAdapter#widgetSelected(org.eclipse.swt.events.SelectionEvent)
			 */</comment>
			<function><specifier>public</specifier> <type><name>void</name></type> <name>widgetSelected</name><parameter_list>(<parameter><decl><type><name>SelectionEvent</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
				<expr_stmt><expr><name>andFilters</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
			}</block></function>
		}</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Create a new filter called newName
	 * 
	 * @param newName
	 */</comment>
	<function><specifier>private</specifier> <type><name>void</name></type> <name>createNewFilter</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>newName</name></decl></parameter>)</parameter_list> <block>{
		<decl_stmt><decl><type><name>MarkerFieldFilterGroup</name></type> <name>group</name> <init>= <expr><operator>new</operator> <call><name>MarkerFieldFilterGroup</name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>builder</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>group</name><operator>.</operator><name>setName</name></name><argument_list>(<argument><expr><name>newName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>filterGroups</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>group</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>filtersList</name><operator>.</operator><name>refresh</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>filtersList</name><operator>.</operator><name>setSelection</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>StructuredSelection</name><argument_list>(<argument><expr><name>group</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>filtersList</name><operator>.</operator><name>setChecked</name></name><argument_list>(<argument><expr><name>group</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>browsedFilters</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>group</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Return the dialog settings for the receiver.
	 * 
	 * @return IDialogSettings
	 */</comment>
	<function><specifier>private</specifier> <type><name>IDialogSettings</name></type> <name>getDialogSettings</name><parameter_list>()</parameter_list> <block>{
		<decl_stmt><decl><type><name>IDialogSettings</name></type> <name>settings</name> <init>= <expr><call><name><name>IDEWorkbenchPlugin</name><operator>.</operator><name>getDefault</name></name><argument_list>()</argument_list></call>
				<operator>.</operator><call><name>getDialogSettings</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getSection</name><argument_list>(<argument><expr><call><name><name>this</name><operator>.</operator><name>getClass</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getName</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<if>if <condition>(<expr><name>settings</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
			<expr_stmt><expr><name>settings</name> <operator>=</operator> <call><name><name>IDEWorkbenchPlugin</name><operator>.</operator><name>getDefault</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getDialogSettings</name><argument_list>()</argument_list></call>
					<operator>.</operator><call><name>addNewSection</name><argument_list>(<argument><expr><call><name><name>this</name><operator>.</operator><name>getClass</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getName</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>

		<return>return <expr><name>settings</name></expr>;</return>
	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Return the filter groups modified by the receiver.
	 * 
	 * @return Collection of {@link MarkerFieldFilterGroup}
	 */</comment>
	<function><type><name>Collection</name></type> <name>getFilters</name><parameter_list>()</parameter_list> <block>{
		<return>return <expr><name>filterGroups</name></expr>;</return>
	}</block></function>

	<comment type="block">/*
	 * (non-Javadoc)
	 * 
	 * @see org.eclipse.jface.dialogs.Dialog#isResizable()
	 */</comment>
	<function><specifier>protected</specifier> <type><name>boolean</name></type> <name>isResizable</name><parameter_list>()</parameter_list> <block>{
		<return>return <expr><literal type="boolean">true</literal></expr>;</return>
	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Load the dialog settings.
	 */</comment>
	<function><specifier>private</specifier> <type><name>void</name></type> <name>loadDialogSettings</name><parameter_list>()</parameter_list> <block>{
		<decl_stmt><decl><type><name>IDialogSettings</name></type> <name>settings</name> <init>= <expr><call><name>getDialogSettings</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

		<decl_stmt><decl><type><name>String</name></type> <name>selection</name> <init>= <expr><call><name><name>settings</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>SELECTED_FILTER_GROUP</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<if>if <condition>(<expr><name>selection</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
			<decl_stmt><decl><type><name>Iterator</name></type> <name>groups</name> <init>= <expr><call><name><name>filterGroups</name><operator>.</operator><name>iterator</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
			<while>while <condition>(<expr><call><name><name>groups</name><operator>.</operator><name>hasNext</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
				<decl_stmt><decl><type><name>MarkerFieldFilterGroup</name></type> <name>group</name> <init>= <expr><operator>(</operator><name>MarkerFieldFilterGroup</name><operator>)</operator> <call><name><name>groups</name>
						<operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
				<if>if <condition>(<expr><call><name><name>group</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name>selection</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
					<expr_stmt><expr><call><name><name>filtersList</name><operator>.</operator><name>setSelection</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>StructuredSelection</name><argument_list>(<argument><expr><name>group</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<return>return;</return>
				}</block></then></if>
			}</block></while>
		}</block></then></if>

		<comment type="line">// If there is no initial selection make one</comment>
		<expr_stmt><expr><call><name><name>filtersList</name><operator>.</operator><name>setSelection</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>StructuredSelection</name><argument_list>(<argument><expr><call><name><name>filterGroups</name>
				<operator>.</operator><name>iterator</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>next</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Make a working copy of the groups.
	 * 
	 * @param groups
	 * @return Collection of MarkerFieldFilterGroup
	 */</comment>
	<function><specifier>private</specifier> <type><name>Collection</name></type> <name>makeWorkingCopy</name><parameter_list>(<parameter><decl><type><name>Collection</name></type> <name>groups</name></decl></parameter>)</parameter_list> <block>{
		<decl_stmt><decl><type><name>Iterator</name></type> <name>initialFiltersIterator</name> <init>= <expr><call><name><name>groups</name><operator>.</operator><name>iterator</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>Collection</name></type> <name>returnFilters</name> <init>= <expr><operator>new</operator> <call><name>ArrayList</name><argument_list>(<argument><expr><call><name><name>groups</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<while>while <condition>(<expr><call><name><name>initialFiltersIterator</name><operator>.</operator><name>hasNext</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
			<decl_stmt><decl><type><name>MarkerFieldFilterGroup</name></type> <name>group</name> <init>= <expr><operator>(</operator><name>MarkerFieldFilterGroup</name><operator>)</operator> <call><name><name>initialFiltersIterator</name>
					<operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>MarkerFieldFilterGroup</name></type> <name>copy</name> <init>= <expr><call><name><name>group</name><operator>.</operator><name>makeWorkingCopy</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
			<if>if <condition>(<expr><name>copy</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then>
				<block type="pseudo"><expr_stmt><expr><call><name><name>returnFilters</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>copy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
		}</block></while>
		<return>return <expr><name>returnFilters</name></expr>;</return>
	}</block></function>

	<comment type="block">/*
	 * (non-Javadoc)
	 * 
	 * @see org.eclipse.jface.dialogs.Dialog#okPressed()
	 */</comment>
	<function><specifier>protected</specifier> <type><name>void</name></type> <name>okPressed</name><parameter_list>()</parameter_list> <block>{

		<if>if <condition>(<expr><operator>!</operator><call><name>shouldContinue</name><argument_list>()</argument_list></call></expr>)</condition><then>
			<block type="pseudo"><return>return;</return></block></then></if>

		<decl_stmt><decl><type><name>Iterator</name></type> <name>filterGroupIterator</name> <init>= <expr><call><name><name>filterGroups</name><operator>.</operator><name>iterator</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<while>while <condition>(<expr><call><name><name>filterGroupIterator</name><operator>.</operator><name>hasNext</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
			<decl_stmt><decl><type><name>MarkerFieldFilterGroup</name></type> <name>group</name> <init>= <expr><operator>(</operator><name>MarkerFieldFilterGroup</name><operator>)</operator> <call><name><name>filterGroupIterator</name>
					<operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name><name>group</name><operator>.</operator><name>setEnabled</name></name><argument_list>(<argument><expr><call><name><name>filtersList</name><operator>.</operator><name>getChecked</name></name><argument_list>(<argument><expr><name>group</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></while>
		<if>if <condition>(<expr><name>selectedFilterGroup</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{

			<expr_stmt><expr><call><name><name>scopeArea</name><operator>.</operator><name>applyToGroup</name></name><argument_list>(<argument><expr><name>selectedFilterGroup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<decl_stmt><decl><type><name>Iterator</name></type> <name>areas</name> <init>= <expr><call><name><name>filterAreas</name><operator>.</operator><name>iterator</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
			<while>while <condition>(<expr><call><name><name>areas</name><operator>.</operator><name>hasNext</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
				<decl_stmt><decl><type><name>FilterConfigurationArea</name></type> <name>area</name> <init>= <expr><operator>(</operator><name>FilterConfigurationArea</name><operator>)</operator> <call><name><name>areas</name>
						<operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

				<comment type="line">// Handle the internal special cases</comment>
				<if>if <condition>(<expr><name>area</name> <operator>instanceof</operator> <name>GroupFilterConfigurationArea</name></expr>)</condition><then>
					<block type="pseudo"><expr_stmt><expr><operator>(</operator><operator>(</operator><name>GroupFilterConfigurationArea</name><operator>)</operator> <name>area</name><operator>)</operator>
							<operator>.</operator><call><name>applyToGroup</name><argument_list>(<argument><expr><name>selectedFilterGroup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
				<expr_stmt><expr><call><name><name>area</name><operator>.</operator><name>apply</name></name><argument_list>(<argument><expr><call><name><name>selectedFilterGroup</name><operator>.</operator><name>getFilter</name></name><argument_list>(<argument><expr><call><name><name>area</name><operator>.</operator><name>getField</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></while>
		}</block></then></if>

		<expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>okPressed</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Return whether or not deselected elements should have been selected.
	 * 
	 * @return boolean
	 */</comment>
	<function><specifier>private</specifier> <type><name>boolean</name></type> <name>shouldContinue</name><parameter_list>()</parameter_list> <block>{
		<decl_stmt><decl><type><name>Iterator</name></type> <name>browsed</name> <init>= <expr><call><name><name>browsedFilters</name><operator>.</operator><name>iterator</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

		<while>while <condition>(<expr><call><name><name>browsed</name><operator>.</operator><name>hasNext</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
			<if>if <condition>(<expr><operator>!</operator><call><name><name>filtersList</name><operator>.</operator><name>getChecked</name></name><argument_list>(<argument><expr><call><name><name>browsed</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
					<operator>&amp;&amp;</operator> <call><name><name>IDEWorkbenchPlugin</name>
							<operator>.</operator><name>getDefault</name></name><argument_list>()</argument_list></call>
							<operator>.</operator><call><name>getPreferenceStore</name><argument_list>()</argument_list></call>
							<operator>.</operator><call><name>getBoolean</name><argument_list>(
									<argument><expr><name><name>IDEInternalPreferences</name><operator>.</operator><name>PROMPT_FOR_UNSELECTED_FILTERS</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
				<decl_stmt><decl><type><name>MessageDialogWithToggle</name></type> <name>dialog</name> <init>= <expr><call><name><name>MessageDialogWithToggle</name>
						<operator>.</operator><name>openYesNoQuestion</name></name><argument_list>(
								<argument><expr><call><name>getShell</name><argument_list>()</argument_list></call></expr></argument>,
								<argument><expr><name><name>MarkerMessages</name><operator>.</operator><name>filtersDialogDeselectedFiltersTitle</name></name></expr></argument>,
								<argument><expr><name><name>MarkerMessages</name><operator>.</operator><name>filtersDialogDeselectedFiltersMessage</name></name></expr></argument>,
								<argument><expr><name><name>MarkerMessages</name><operator>.</operator><name>filtersDialogDoNotAsk</name></name></expr></argument>,
								<argument><expr><literal type="boolean">false</literal></expr></argument>,
								<argument><expr><call><name><name>IDEWorkbenchPlugin</name><operator>.</operator><name>getDefault</name></name><argument_list>()</argument_list></call>
										<operator>.</operator><call><name>getPreferenceStore</name><argument_list>()</argument_list></call></expr></argument>,
								<argument><expr><name><name>IDEInternalPreferences</name><operator>.</operator><name>PROMPT_FOR_UNSELECTED_FILTERS</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<return>return <expr><call><name><name>dialog</name><operator>.</operator><name>getReturnCode</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>IDialogConstants</name><operator>.</operator><name>YES_ID</name></name></expr>;</return>
			}</block></then></if>
		}</block></while>
		<return>return <expr><literal type="boolean">true</literal></expr>;</return>
	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Remove the filters in selection.
	 * 
	 * @param selection
	 */</comment>
	<function><specifier>private</specifier> <type><name>void</name></type> <name>removeFilters</name><parameter_list>(<parameter><decl><type><name>ISelection</name></type> <name>selection</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><call><name><name>filterGroups</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>IStructuredSelection</name><operator>)</operator> <name>selection</name><operator>)</operator>
				<operator>.</operator><call><name>getFirstElement</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>filtersList</name><operator>.</operator><name>refresh</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Save the dialog settings for the receiver.
	 */</comment>
	<function><specifier>private</specifier> <type><name>void</name></type> <name>saveDialogSettings</name><parameter_list>()</parameter_list> <block>{
		<decl_stmt><decl><type><name>IDialogSettings</name></type> <name>settings</name> <init>= <expr><call><name>getDialogSettings</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

		<if>if <condition>(<expr><name>selectedFilterGroup</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then>
			<block type="pseudo"><expr_stmt><expr><call><name><name>settings</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>SELECTED_FILTER_GROUP</name></expr></argument>, <argument><expr><call><name><name>selectedFilterGroup</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>

	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Set the control and all of it's visibility state to visible.
	 * 
	 * @param visible
	 * @param control
	 */</comment>
	<function><specifier>private</specifier> <type><name>void</name></type> <name>setEnabled</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>visible</name></decl></parameter>, <parameter><decl><type><name>Control</name></type> <name>control</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><call><name><name>control</name><operator>.</operator><name>setEnabled</name></name><argument_list>(<argument><expr><name>visible</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if>if <condition>(<expr><name>control</name> <operator>instanceof</operator> <name>Composite</name></expr>)</condition><then> <block>{
			<decl_stmt><decl><type><name><name>Control</name><index>[]</index></name></type> <name>children</name> <init>= <expr><operator>(</operator><operator>(</operator><name>Composite</name><operator>)</operator> <name>control</name><operator>)</operator><operator>.</operator><call><name>getChildren</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
			<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>children</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
				<expr_stmt><expr><call><name>setEnabled</name><argument_list>(<argument><expr><name>visible</name></expr></argument>, <argument><expr><name><name>children</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></for>
		}</block></then></if>
	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Set the enablement state of the fields to enabled.
	 */</comment>
	<function><specifier>private</specifier> <type><name>void</name></type> <name>setFieldsEnabled</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>visible</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><call><name>setEnabled</name><argument_list>(<argument><expr><name>visible</name></expr></argument>, <argument><expr><name>form</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Set the filter that is being worked on.
	 * 
	 * @param markerFieldFilterGroup
	 */</comment>
	<function><specifier>private</specifier> <type><name>void</name></type> <name>setSelectedFilter</name><parameter_list>(<parameter><decl><type><name>MarkerFieldFilterGroup</name></type> <name>markerFieldFilterGroup</name></decl></parameter>)</parameter_list> <block>{

		<expr_stmt><expr><call><name><name>removeButton</name>
				<operator>.</operator><name>setEnabled</name></name><argument_list>(<argument><expr><operator>!</operator><operator>(</operator><name>markerFieldFilterGroup</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <call><name><name>markerFieldFilterGroup</name>
						<operator>.</operator><name>isSystem</name></name><argument_list>()</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<decl_stmt><decl><type><name>MarkerFieldFilterGroup</name></type> <name>old</name> <init>= <expr><name>selectedFilterGroup</name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name>selectedFilterGroup</name> <operator>=</operator> <name>markerFieldFilterGroup</name></expr>;</expr_stmt>
		<if>if <condition>(<expr><name>old</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then>
			<block type="pseudo"><expr_stmt><expr><call><name><name>scopeArea</name><operator>.</operator><name>applyToGroup</name></name><argument_list>(<argument><expr><name>old</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>

		<if>if <condition>(<expr><name>selectedFilterGroup</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
			<expr_stmt><expr><call><name>setFieldsEnabled</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return;</return>
		}</block></then></if>

		<if>if <condition>(<expr><name>markerFieldFilterGroup</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then>
			<block type="pseudo"><expr_stmt><expr><call><name><name>browsedFilters</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>markerFieldFilterGroup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>

		<expr_stmt><expr><call><name>setFieldsEnabled</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>scopeArea</name><operator>.</operator><name>initializeFromGroup</name></name><argument_list>(<argument><expr><name>selectedFilterGroup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>Iterator</name></type> <name>areas</name> <init>= <expr><call><name><name>filterAreas</name><operator>.</operator><name>iterator</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<while>while <condition>(<expr><call><name><name>areas</name><operator>.</operator><name>hasNext</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
			<decl_stmt><decl><type><name>FilterConfigurationArea</name></type> <name>area</name> <init>= <expr><operator>(</operator><name>FilterConfigurationArea</name><operator>)</operator> <call><name><name>areas</name>
					<operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
			<if>if <condition>(<expr><name>old</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
				<if>if <condition>(<expr><name>area</name> <operator>instanceof</operator> <name>GroupFilterConfigurationArea</name></expr>)</condition><then>
					<block type="pseudo"><expr_stmt><expr><operator>(</operator><operator>(</operator><name>GroupFilterConfigurationArea</name><operator>)</operator> <name>area</name><operator>)</operator><operator>.</operator><call><name>applyToGroup</name><argument_list>(<argument><expr><name>old</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
				<expr_stmt><expr><call><name><name>area</name><operator>.</operator><name>apply</name></name><argument_list>(<argument><expr><call><name><name>old</name><operator>.</operator><name>getFilter</name></name><argument_list>(<argument><expr><call><name><name>area</name><operator>.</operator><name>getField</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>
			<if>if <condition>(<expr><name>area</name> <operator>instanceof</operator> <name>GroupFilterConfigurationArea</name></expr>)</condition><then>
				<block type="pseudo"><expr_stmt><expr><operator>(</operator><operator>(</operator><name>GroupFilterConfigurationArea</name><operator>)</operator> <name>area</name><operator>)</operator>
						<operator>.</operator><call><name>initializeFromGroup</name><argument_list>(<argument><expr><name>selectedFilterGroup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
			<expr_stmt><expr><call><name><name>area</name><operator>.</operator><name>initialize</name></name><argument_list>(<argument><expr><call><name><name>selectedFilterGroup</name><operator>.</operator><name>getFilter</name></name><argument_list>(<argument><expr><call><name><name>area</name><operator>.</operator><name>getField</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></while>
	}</block></function>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="org.eclipse.ui.ide.markers.compatibility/src/org/eclipse/ui/ide/markers/compatibility/internal/MarkerComparator.java" hash="5d831094b10476e9168978b82d02c198a8d41181"><comment type="block" format="javadoc">/*******************************************************************************
 * Copyright (c) 2007 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     IBM Corporation - initial API and implementation
 ******************************************************************************/</comment>

<package>package <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>ide</name><operator>.</operator><name>markers</name><operator>.</operator><name>compatibility</name><operator>.</operator><name>internal</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Comparator</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashSet</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Iterator</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>IMemento</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>ide</name><operator>.</operator><name>markers</name><operator>.</operator><name>compatibility</name><operator>.</operator><name>api</name><operator>.</operator><name>MarkerField</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>ide</name><operator>.</operator><name>markers</name><operator>.</operator><name>compatibility</name><operator>.</operator><name>api</name><operator>.</operator><name>MarkerItem</name></name>;</import>

<comment type="block" format="javadoc">/**
 * The MarkerComparator is the class that handles the comparison of markers for
 * a specific content provider.
 * 
 * @since 3.4
 * 
 */</comment>
<class>class <name>MarkerComparator</name> <super><implements>implements <name>Comparator</name></implements></super> <block>{

	<decl_stmt><decl><specifier>private</specifier> <type><name>MarkerField</name></type> <name>category</name></decl>;</decl_stmt>
	
	<comment type="line">//These fields are in sort order</comment>
	<decl_stmt><decl><specifier>private</specifier> <type><name><name>MarkerField</name><index>[]</index></name></type> <name>fields</name></decl>;</decl_stmt>
	<comment type="block" format="javadoc">/**
	 * Constant to indicate an ascending sort direction.
	 */</comment>
	<decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>ASCENDING</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<comment type="block" format="javadoc">/**
	 * Constant to indicate an descending sort direction.
	 */</comment>
	<decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>DESCENDING</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>PRIMARY_SORT_FIELD_TAG</name> <init>= <expr><literal type="string">"PRIMARY_SORT_FIELD"</literal></expr></init></decl>;</decl_stmt> <comment type="line">//$NON-NLS-1$</comment>

	<decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>DESCENDING_FIELDS</name> <init>= <expr><literal type="string">"DESCENDING_FIELDS"</literal></expr></init></decl>;</decl_stmt> <comment type="line">//$NON-NLS-1$</comment>

	<comment type="line">// The fields with reversed direction</comment>
	<decl_stmt><decl><type><name>HashSet</name></type> <name>descendingFields</name> <init>= <expr><operator>new</operator> <call><name>HashSet</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="block" format="javadoc">/**
	 * Create a new instance of the receiver categorised by categoryField
	 * 
	 * @param categoryField
	 *            May be &lt;code&gt;null/&lt;code&gt;
	 * @param mainFields in order of compare significance
	 */</comment>
	<constructor><specifier>public</specifier> <name>MarkerComparator</name><parameter_list>(<parameter><decl><type><name>MarkerField</name></type> <name>categoryField</name></decl></parameter>, <parameter><decl><type><name><name>MarkerField</name><index>[]</index></name></type> <name>mainFields</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><name>category</name> <operator>=</operator> <name>categoryField</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>fields</name> <operator>=</operator> <name>mainFields</name></expr>;</expr_stmt>
	}</block></constructor>

	<comment type="block" format="javadoc">/**
	 * Compare the two objects to see if they have the same category value
	 * 
	 * @param object1
	 * @param object2
	 * @return int
	 * @see Comparable#compareTo(Object)
	 */</comment>
	<function><specifier>public</specifier> <type><name>int</name></type> <name>compareCategory</name><parameter_list>(<parameter><decl><type><name>Object</name></type> <name>object1</name></decl></parameter>, <parameter><decl><type><name>Object</name></type> <name>object2</name></decl></parameter>)</parameter_list> <block>{
		<if>if <condition>(<expr><name>category</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then>
			<block type="pseudo"><return>return <expr><literal type="number">0</literal></expr>;</return></block></then></if>
		<return>return <expr><call><name><name>category</name><operator>.</operator><name>compare</name></name><argument_list>(<argument><expr><operator>(</operator><name>MarkerItem</name><operator>)</operator> <name>object1</name></expr></argument>, <argument><expr><operator>(</operator><name>MarkerItem</name><operator>)</operator> <name>object2</name></expr></argument>)</argument_list></call></expr>;</return>
	}</block></function>

	<comment type="block">/*
	 * (non-Javadoc)
	 * 
	 * @see java.util.Comparator#compare(java.lang.Object, java.lang.Object)
	 */</comment>
	<function><specifier>public</specifier> <type><name>int</name></type> <name>compare</name><parameter_list>(<parameter><decl><type><name>Object</name></type> <name>arg0</name></decl></parameter>, <parameter><decl><type><name>Object</name></type> <name>arg1</name></decl></parameter>)</parameter_list> <block>{

		<decl_stmt><decl><type><name>MarkerItem</name></type> <name>item0</name> <init>= <expr><operator>(</operator><name>MarkerItem</name><operator>)</operator> <name>arg0</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>MarkerItem</name></type> <name>item1</name> <init>= <expr><operator>(</operator><name>MarkerItem</name><operator>)</operator> <name>arg1</name></expr></init></decl>;</decl_stmt>
		
		<comment type="line">//Sort by category first</comment>
		<if>if<condition>(<expr><name>category</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then><block>{
			<decl_stmt><decl><type><name>int</name></type> <name>value</name> <init>= <expr><call><name><name>category</name><operator>.</operator><name>compare</name></name><argument_list>(<argument><expr><name>item0</name></expr></argument>, <argument><expr><name>item1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<if>if<condition>(<expr><name>value</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><then>
				<block type="pseudo"><return>return <expr><name>value</name></expr>;</return></block></then></if>
		}</block></then></if>
			
		<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>fields</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{

			<decl_stmt><decl><type><name>int</name></type> <name>value</name></decl>;</decl_stmt>
			<if>if <condition>(<expr><call><name><name>descendingFields</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><name><name>fields</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><then>
				<block type="pseudo"><expr_stmt><expr><name>value</name> <operator>=</operator> <name><name>fields</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>compare</name><argument_list>(<argument><expr><name>item1</name></expr></argument>, <argument><expr><name>item0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
			<else>else
				<block type="pseudo"><expr_stmt><expr><name>value</name> <operator>=</operator> <name><name>fields</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>compare</name><argument_list>(<argument><expr><name>item0</name></expr></argument>, <argument><expr><name>item1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>
			<if>if <condition>(<expr><name>value</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then>
				<block type="pseudo"><continue>continue;</continue></block></then></if>
			<return>return <expr><name>value</name></expr>;</return>
		}</block></for>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Switch the priority of the field from ascending to descending or vice
	 * versa.
	 * 
	 * @param field
	 */</comment>
	<function><specifier>public</specifier> <type><name>void</name></type> <name>reversePriority</name><parameter_list>(<parameter><decl><type><name>MarkerField</name></type> <name>field</name></decl></parameter>)</parameter_list> <block>{
		<if>if <condition>(<expr><call><name><name>descendingFields</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><name>field</name></expr></argument>)</argument_list></call></expr>)</condition><then>
			<block type="pseudo"><return>return;</return></block></then></if>
		<expr_stmt><expr><call><name><name>descendingFields</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>field</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Set field to be the first sort field.
	 * 
	 * @param field
	 */</comment>
	<function><type><name>void</name></type> <name>setPrimarySortField</name><parameter_list>(<parameter><decl><type><name>MarkerField</name></type> <name>field</name></decl></parameter>)</parameter_list> <block>{
		<if>if <condition>(<expr><name><name>fields</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>field</name></expr>)</condition><then> <block>{
			<expr_stmt><expr><call><name>reversePriority</name><argument_list>(<argument><expr><name>field</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return;</return>
		}</block></then></if>
		<decl_stmt><decl><type><name>int</name></type> <name>insertionIndex</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name><name>MarkerField</name><index>[]</index></name></type> <name>newFields</name> <init>= <expr><operator>new</operator> <name><name>MarkerField</name><index>[<expr><name><name>fields</name><operator>.</operator><name>length</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><name><name>newFields</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>field</name></expr>;</expr_stmt>
		<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>newFields</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
			<if>if <condition>(<expr><name><name>fields</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>field</name></expr>)</condition><then>
				<block type="pseudo"><continue>continue;</continue></block></then></if>
			<expr_stmt><expr><name><name>newFields</name><index>[<expr><name>insertionIndex</name></expr>]</index></name> <operator>=</operator> <name><name>fields</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
			<expr_stmt><expr><name>insertionIndex</name><operator>++</operator></expr>;</expr_stmt>
		}</block></for>

		<expr_stmt><expr><name>fields</name> <operator>=</operator> <name>newFields</name></expr>;</expr_stmt>

	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Restore the receiver's state from memento.
	 * 
	 * @param memento
	 */</comment>
	<function><type><name>void</name></type> <name>restore</name><parameter_list>(<parameter><decl><type><name>IMemento</name></type> <name>memento</name></decl></parameter>)</parameter_list> <block>{
		<if>if<condition>(<expr><name>memento</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then>
			<block type="pseudo"><return>return;</return></block></then></if>
		
		<decl_stmt><decl><type><name>String</name></type> <name>primaryField</name> <init>= <expr><call><name><name>memento</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name>PRIMARY_SORT_FIELD_TAG</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if>if <condition>(<expr><name>primaryField</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <call><name><name>primaryField</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>fields</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><call><name>getId</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then>
			<block type="pseudo"><return>return;</return></block></then></if>
		<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>fields</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
			<if>if <condition>(<expr><name><name>fields</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>getId</name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name>primaryField</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
				<expr_stmt><expr><call><name>setPrimarySortField</name><argument_list>(<argument><expr><name><name>fields</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			}</block></then></if>
		}</block></for>
		<decl_stmt><decl><type><name><name>IMemento</name><index>[]</index></name></type> <name>descending</name> <init>= <expr><call><name><name>memento</name><operator>.</operator><name>getChildren</name></name><argument_list>(<argument><expr><name>DESCENDING_FIELDS</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		
		<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>fields</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
			<for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>descending</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{
				<if>if<condition>(<expr><name><name>descending</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><call><name>getID</name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name><name>fields</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>getId</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then><block>{
					<expr_stmt><expr><call><name><name>descendingFields</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name><name>fields</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<continue>continue;</continue>
				}</block></then></if>
				
			}</block></for>
		}</block></for>

	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Save the current sort field in the memento.
	 * @param memento
	 */</comment>
	<function><type><name>void</name></type> <name>saveState</name><parameter_list>(<parameter><decl><type><name>IMemento</name></type> <name>memento</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><call><name><name>memento</name><operator>.</operator><name>putString</name></name><argument_list>(<argument><expr><name>PRIMARY_SORT_FIELD_TAG</name></expr></argument>, <argument><expr><name><name>fields</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><call><name>getId</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>Iterator</name></type> <name>descendingIterator</name> <init>= <expr><call><name><name>descendingFields</name><operator>.</operator><name>iterator</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<while>while<condition>(<expr><call><name><name>descendingIterator</name><operator>.</operator><name>hasNext</name></name><argument_list>()</argument_list></call></expr>)</condition><block>{
			<expr_stmt><expr><call><name><name>memento</name><operator>.</operator><name>createChild</name></name><argument_list>(<argument><expr><name>DESCENDING_FIELDS</name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>MarkerField</name><operator>)</operator><call><name><name>descendingIterator</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call><operator>)</operator><operator>.</operator><call><name>getId</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></while>
		
	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Get the field that is the main sort field
	 * @return MarkerField
	 */</comment>
	<function><type><name>MarkerField</name></type> <name>getPrimarySortField</name><parameter_list>()</parameter_list> <block>{
		<return>return <expr><name><name>fields</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</return>
	}</block></function>

}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="org.eclipse.ui.ide.markers.compatibility/src/org/eclipse/ui/ide/markers/compatibility/internal/MarkerCompletionField.java" hash="758a71496b871413d8a2a522c4aeaa32bdfc2fba"><comment type="block" format="javadoc">/*******************************************************************************
 * Copyright (c) 2007 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     IBM Corporation - initial API and implementation
 ******************************************************************************/</comment>
<package>package <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>ide</name><operator>.</operator><name>markers</name><operator>.</operator><name>compatibility</name><operator>.</operator><name>internal</name></name>;</package>

<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>core</name><operator>.</operator><name>resources</name><operator>.</operator><name>IMarker</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>core</name><operator>.</operator><name>runtime</name><operator>.</operator><name>CoreException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>jface</name><operator>.</operator><name>viewers</name><operator>.</operator><name>CellEditor</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>jface</name><operator>.</operator><name>viewers</name><operator>.</operator><name>CheckboxCellEditor</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>jface</name><operator>.</operator><name>viewers</name><operator>.</operator><name>ColumnViewer</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>jface</name><operator>.</operator><name>viewers</name><operator>.</operator><name>EditingSupport</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>swt</name><operator>.</operator><name>graphics</name><operator>.</operator><name>Image</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>swt</name><operator>.</operator><name>widgets</name><operator>.</operator><name>Composite</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>swt</name><operator>.</operator><name>widgets</name><operator>.</operator><name>Control</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>ide</name><operator>.</operator><name>markers</name><operator>.</operator><name>compatibility</name><operator>.</operator><name>api</name><operator>.</operator><name>MarkerField</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>ide</name><operator>.</operator><name>markers</name><operator>.</operator><name>compatibility</name><operator>.</operator><name>api</name><operator>.</operator><name>MarkerItem</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>ide</name><operator>.</operator><name>markers</name><operator>.</operator><name>compatibility</name><operator>.</operator><name>api</name><operator>.</operator><name>MarkerSupportConstants</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>ide</name><operator>.</operator><name>markers</name><operator>.</operator><name>compatibility</name><operator>.</operator><name>api</name><operator>.</operator><name>internal</name><operator>.</operator><name>MarkerMessages</name></name>;</import>

<comment type="block" format="javadoc">/**
 * MarkerCompletionField is the class that specifies the completion entry.
 * 
 * @since 3.4
 * 
 */</comment>
<class><specifier>public</specifier> class <name>MarkerCompletionField</name> <super><extends>extends <name>MarkerField</name></extends></super> <block>{

	<decl_stmt><decl><specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>COMPLETE_IMAGE_PATH</name> <init>= <expr><literal type="string">"$nl$/icons/full/obj16/complete_tsk.gif"</literal></expr></init></decl>;</decl_stmt> <comment type="line">//$NON-NLS-1$</comment>

	<decl_stmt><decl><specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>INCOMPLETE_IMAGE_PATH</name> <init>= <expr><literal type="string">"$nl$/icons/full/obj16/incomplete_tsk.gif"</literal></expr></init></decl>;</decl_stmt> <comment type="line">//$NON-NLS-1$</comment>

	<decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>DONE</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>NOT_DONE</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>UNDEFINED</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<class><specifier>private</specifier> class <name>CompletionEditingSupport</name> <super><extends>extends <name>EditingSupport</name></extends></super> <block>{

		<decl_stmt><decl><specifier>private</specifier> <type><name>CheckboxCellEditor</name></type> <name>editor</name></decl>;</decl_stmt>

		<comment type="block" format="javadoc">/**
		 * Create a new instance of the receiver.
		 * 
		 * @param viewer
		 */</comment>
		<constructor><specifier>public</specifier> <name>CompletionEditingSupport</name><parameter_list>(<parameter><decl><type><name>ColumnViewer</name></type> <name>viewer</name></decl></parameter>)</parameter_list> <block>{
			<expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>viewer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>this</name><operator>.</operator><name>editor</name></name> <operator>=</operator> <operator>new</operator> <call><name>CheckboxCellEditor</name><argument_list>(<argument><expr><operator>(</operator><name>Composite</name><operator>)</operator> <call><name><name>viewer</name>
					<operator>.</operator><name>getControl</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></constructor>

		<comment type="block">/*
		 * (non-Javadoc)
		 * 
		 * @see org.eclipse.jface.viewers.EditingSupport#canEdit(java.lang.Object)
		 */</comment>
		<function><specifier>protected</specifier> <type><name>boolean</name></type> <name>canEdit</name><parameter_list>(<parameter><decl><type><name>Object</name></type> <name>element</name></decl></parameter>)</parameter_list> <block>{
			<if>if <condition>(<expr><name>element</name> <operator>instanceof</operator> <name>MarkerEntry</name></expr>)</condition><then>
				<block type="pseudo"><return>return <expr><operator>(</operator><operator>(</operator><name>MarkerEntry</name><operator>)</operator> <name>element</name><operator>)</operator><operator>.</operator><call><name>getAttributeValue</name><argument_list>(
						<argument><expr><name><name>IMarker</name><operator>.</operator><name>USER_EDITABLE</name></name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</return></block></then></if>
			<return>return <expr><literal type="boolean">false</literal></expr>;</return>
		}</block></function>

		<comment type="block">/*
		 * (non-Javadoc)
		 * 
		 * @see org.eclipse.jface.viewers.EditingSupport#getCellEditor(java.lang.Object)
		 */</comment>
		<function><specifier>protected</specifier> <type><name>CellEditor</name></type> <name>getCellEditor</name><parameter_list>(<parameter><decl><type><name>Object</name></type> <name>element</name></decl></parameter>)</parameter_list> <block>{
			<return>return <expr><name>editor</name></expr>;</return>
		}</block></function>

		<comment type="block">/*
		 * (non-Javadoc)
		 * 
		 * @see org.eclipse.jface.viewers.EditingSupport#getValue(java.lang.Object)
		 */</comment>
		<function><specifier>protected</specifier> <type><name>Object</name></type> <name>getValue</name><parameter_list>(<parameter><decl><type><name>Object</name></type> <name>element</name></decl></parameter>)</parameter_list> <block>{
			<return>return <expr><operator>new</operator> <call><name>Boolean</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>MarkerEntry</name><operator>)</operator> <name>element</name><operator>)</operator><operator>.</operator><call><name>getAttributeValue</name><argument_list>(<argument><expr><name><name>IMarker</name><operator>.</operator><name>DONE</name></name></expr></argument>,
					<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
		}</block></function>

		<comment type="block">/*
		 * (non-Javadoc)
		 * 
		 * @see org.eclipse.jface.viewers.EditingSupport#setValue(java.lang.Object,
		 *      java.lang.Object)
		 */</comment>
		<function><specifier>protected</specifier> <type><name>void</name></type> <name>setValue</name><parameter_list>(<parameter><decl><type><name>Object</name></type> <name>element</name></decl></parameter>, <parameter><decl><type><name>Object</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{
			<decl_stmt><decl><type><name>MarkerEntry</name></type> <name>entry</name> <init>= <expr><operator>(</operator><name>MarkerEntry</name><operator>)</operator> <name>element</name></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>Boolean</name></type> <name>booleanValue</name> <init>= <expr><operator>(</operator><name>Boolean</name><operator>)</operator> <name>value</name></expr></init></decl>;</decl_stmt> 
			<try>try <block>{
				<expr_stmt><expr><call><name><name>entry</name><operator>.</operator><name>getMarker</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>setAttribute</name><argument_list>(<argument><expr><name><name>IMarker</name><operator>.</operator><name>DONE</name></name></expr></argument>, <argument><expr><call><name><name>booleanValue</name><operator>.</operator><name>booleanValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>CoreException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
				<expr_stmt><expr><call><name><name>MarkerSupportInternalUtilities</name><operator>.</operator><name>handle</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></catch></try>

		}</block></function>
	}</block></class>

	<comment type="block" format="javadoc">/**
	 * Create a new instance of the receiver.
	 */</comment>
	<constructor><specifier>public</specifier> <name>MarkerCompletionField</name><parameter_list>()</parameter_list> <block>{
		<expr_stmt><expr><call><name>super</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	}</block></constructor>

	<comment type="block">/*
	 * (non-Javadoc)
	 * 
	 * @see org.eclipse.ui.internal.provisional.views.markers.api.MarkerField#getDefaultColumnWidth(org.eclipse.swt.widgets.Control)
	 */</comment>
	<function><specifier>public</specifier> <type><name>int</name></type> <name>getDefaultColumnWidth</name><parameter_list>(<parameter><decl><type><name>Control</name></type> <name>control</name></decl></parameter>)</parameter_list> <block>{
		<return>return <expr><literal type="number">40</literal></expr>;</return>
	}</block></function>

	<comment type="block">/*
	 * (non-Javadoc)
	 * 
	 * @see org.eclipse.ui.internal.provisional.views.markers.MarkerField#getColumnHeaderText()
	 */</comment>
	<function><specifier>public</specifier> <type><name>String</name></type> <name>getColumnHeaderText</name><parameter_list>()</parameter_list> <block>{
		<return>return <expr><name><name>MarkerSupportConstants</name><operator>.</operator><name>EMPTY_STRING</name></name></expr>;</return>
	}</block></function>

	<comment type="block">/*
	 * (non-Javadoc)
	 * 
	 * @see org.eclipse.ui.internal.provisional.views.markers.MarkerField#getValue(org.eclipse.ui.internal.provisional.views.markers.MarkerItem)
	 */</comment>
	<function><specifier>public</specifier> <type><name>String</name></type> <name>getValue</name><parameter_list>(<parameter><decl><type><name>MarkerItem</name></type> <name>item</name></decl></parameter>)</parameter_list> <block>{
		<return>return <expr><name><name>MarkerSupportConstants</name><operator>.</operator><name>EMPTY_STRING</name></name></expr>;</return>
	}</block></function>

	<comment type="block">/*
	 * (non-Javadoc)
	 * 
	 * @see org.eclipse.ui.internal.provisional.views.markers.MarkerField#getImage(org.eclipse.ui.internal.provisional.views.markers.MarkerItem)
	 */</comment>
	<function><specifier>public</specifier> <type><name>Image</name></type> <name>getImage</name><parameter_list>(<parameter><decl><type><name>MarkerItem</name></type> <name>item</name></decl></parameter>)</parameter_list> <block>{

		<switch>switch <condition>(<expr><call><name>getDoneConstant</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{
		<case>case <expr><name>DONE</name></expr>:</case>
			<return>return <expr><call><name>getCompleteImage</name><argument_list>()</argument_list></call></expr>;</return>
		<case>case <expr><name>NOT_DONE</name></expr>:</case>
			<return>return <expr><call><name><name>MarkerSupportInternalUtilities</name>
					<operator>.</operator><name>createImage</name></name><argument_list>(<argument><expr><name>INCOMPLETE_IMAGE_PATH</name></expr></argument>)</argument_list></call></expr>;</return>
		<default>default:</default>
			<return>return <expr><literal type="null">null</literal></expr>;</return>
		}</block></switch>
	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Return the constant that indicates whether or not the receiver is done
	 * 
	 * @param item
	 * @return 1 if it is done, 0 if it not and -1 if it cannot be determined.
	 */</comment>
	<function><specifier>private</specifier> <type><name>int</name></type> <name>getDoneConstant</name><parameter_list>(<parameter><decl><type><name>MarkerItem</name></type> <name>item</name></decl></parameter>)</parameter_list> <block>{

		<decl_stmt><decl><type><name>int</name></type> <name>done</name> <init>= <expr><name>UNDEFINED</name></expr></init></decl>;</decl_stmt>

		<if>if <condition>(<expr><call><name><name>item</name><operator>.</operator><name>isConcrete</name></name><argument_list>()</argument_list></call>
				<operator>&amp;&amp;</operator> <call><name><name>item</name><operator>.</operator><name>getAttributeValue</name></name><argument_list>(<argument><expr><name><name>IMarker</name><operator>.</operator><name>USER_EDITABLE</name></name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
			<expr_stmt><expr><name>done</name> <operator>=</operator> <name>NOT_DONE</name></expr>;</expr_stmt>
			<if>if <condition>(<expr><call><name><name>item</name><operator>.</operator><name>getAttributeValue</name></name><argument_list>(<argument><expr><name><name>IMarker</name><operator>.</operator><name>DONE</name></name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
				<expr_stmt><expr><name>done</name> <operator>=</operator> <name>DONE</name></expr>;</expr_stmt>
			}</block></then></if>
		}</block></then></if>
		<return>return <expr><name>done</name></expr>;</return>
	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Return the image for task completion.
	 * 
	 * @return Image
	 */</comment>
	<function><specifier>private</specifier> <type><name>Image</name></type> <name>getCompleteImage</name><parameter_list>()</parameter_list> <block>{
		<return>return <expr><call><name><name>MarkerSupportInternalUtilities</name><operator>.</operator><name>createImage</name></name><argument_list>(<argument><expr><name>COMPLETE_IMAGE_PATH</name></expr></argument>)</argument_list></call></expr>;</return>
	}</block></function>

	<comment type="block">/*
	 * (non-Javadoc)
	 * 
	 * @see org.eclipse.ui.internal.provisional.views.markers.api.MarkerField#getColumnTooltipText()
	 */</comment>
	<function><specifier>public</specifier> <type><name>String</name></type> <name>getColumnTooltipText</name><parameter_list>()</parameter_list> <block>{
		<return>return <expr><name><name>MarkerMessages</name><operator>.</operator><name>completion_description</name></name></expr>;</return>
	}</block></function>

	<comment type="block">/*
	 * (non-Javadoc)
	 * 
	 * @see org.eclipse.ui.internal.provisional.views.markers.api.MarkerField#compare(org.eclipse.ui.internal.provisional.views.markers.api.MarkerItem,
	 *      org.eclipse.ui.internal.provisional.views.markers.api.MarkerItem)
	 */</comment>
	<function><specifier>public</specifier> <type><name>int</name></type> <name>compare</name><parameter_list>(<parameter><decl><type><name>MarkerItem</name></type> <name>item1</name></decl></parameter>, <parameter><decl><type><name>MarkerItem</name></type> <name>item2</name></decl></parameter>)</parameter_list> <block>{
		<return>return <expr><call><name>getDoneConstant</name><argument_list>(<argument><expr><name>item2</name></expr></argument>)</argument_list></call> <operator>-</operator> <call><name>getDoneConstant</name><argument_list>(<argument><expr><name>item1</name></expr></argument>)</argument_list></call></expr>;</return>
	}</block></function>

	<comment type="block">/*
	 * (non-Javadoc)
	 * 
	 * @see org.eclipse.ui.internal.provisional.views.markers.api.MarkerField#getEditingSupport(org.eclipse.jface.viewers.ColumnViewer)
	 */</comment>
	<function><specifier>public</specifier> <type><name>EditingSupport</name></type> <name>getEditingSupport</name><parameter_list>(<parameter><decl><type><name>ColumnViewer</name></type> <name>viewer</name></decl></parameter>)</parameter_list> <block>{

		<return>return <expr><operator>new</operator> <call><name>CompletionEditingSupport</name><argument_list>(<argument><expr><name>viewer</name></expr></argument>)</argument_list></call></expr>;</return>
	}</block></function>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="org.eclipse.ui.ide.markers.compatibility/src/org/eclipse/ui/ide/markers/compatibility/internal/MarkerCreationTimeField.java" hash="0a879eca470cc1202e4fad89fa4126ed389c1a1f"><comment type="block" format="javadoc">/*******************************************************************************
 * Copyright (c) 2007 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     IBM Corporation - initial API and implementation
 ******************************************************************************/</comment>

<package>package <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>ide</name><operator>.</operator><name>markers</name><operator>.</operator><name>compatibility</name><operator>.</operator><name>internal</name></name>;</package>

<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>ide</name><operator>.</operator><name>markers</name><operator>.</operator><name>compatibility</name><operator>.</operator><name>api</name><operator>.</operator><name>MarkerField</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>ide</name><operator>.</operator><name>markers</name><operator>.</operator><name>compatibility</name><operator>.</operator><name>api</name><operator>.</operator><name>MarkerItem</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>ide</name><operator>.</operator><name>markers</name><operator>.</operator><name>compatibility</name><operator>.</operator><name>api</name><operator>.</operator><name>MarkerSupportConstants</name></name>;</import>


<comment type="block" format="javadoc">/**
 * MarkerCreationTimeField is the field that shows the creation time of a field.
 * 
 * @since 3.4
 * 
 */</comment>
<class><specifier>public</specifier> class <name>MarkerCreationTimeField</name> <super><extends>extends <name>MarkerField</name></extends></super> <block>{


	<comment type="block">/*
	 * (non-Javadoc)
	 * 
	 * @see org.eclipse.ui.internal.provisional.views.markers.MarkerField#getValue(org.eclipse.ui.internal.provisional.views.markers.MarkerItem)
	 */</comment>
	<function><specifier>public</specifier> <type><name>String</name></type> <name>getValue</name><parameter_list>(<parameter><decl><type><name>MarkerItem</name></type> <name>item</name></decl></parameter>)</parameter_list> <block>{
		<decl_stmt><decl><type><name>long</name></type> <name>creationTime</name> <init>= <expr><call><name><name>item</name><operator>.</operator><name>getCreationTime</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<if>if <condition>(<expr><name>creationTime</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><then>
			<block type="pseudo"><return>return <expr><name><name>MarkerSupportConstants</name><operator>.</operator><name>EMPTY_STRING</name></name></expr>;</return></block></then></if>
		<return>return <expr><call><name><name>String</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><name>creationTime</name></expr></argument>)</argument_list></call></expr>;</return>

	}</block></function>
	
	<comment type="block">/* (non-Javadoc)
	 * @see org.eclipse.ui.internal.provisional.views.markers.MarkerField#compare(org.eclipse.ui.internal.provisional.views.markers.MarkerItem, org.eclipse.ui.internal.provisional.views.markers.MarkerItem)
	 */</comment>
	<function><specifier>public</specifier> <type><name>int</name></type> <name>compare</name><parameter_list>(<parameter><decl><type><name>MarkerItem</name></type> <name>item1</name></decl></parameter>, <parameter><decl><type><name>MarkerItem</name></type> <name>item2</name></decl></parameter>)</parameter_list> <block>{
		<return>return <expr><call>(<name>int</name>) <argument_list>(<argument><expr><call><name><name>item1</name><operator>.</operator><name>getCreationTime</name></name><argument_list>()</argument_list></call> <operator>-</operator> <call><name><name>item2</name><operator>.</operator><name>getCreationTime</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
	}</block></function>

}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="org.eclipse.ui.ide.markers.compatibility/src/org/eclipse/ui/ide/markers/compatibility/internal/MarkerCopyHandler.java" hash="cfa2644bcb69df272d727361a533c37ed19a7d08"><comment type="block" format="javadoc">/*******************************************************************************
 * Copyright (c) 2007 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     IBM Corporation - initial API and implementation
 ******************************************************************************/</comment>
<package>package <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>ide</name><operator>.</operator><name>markers</name><operator>.</operator><name>compatibility</name><operator>.</operator><name>internal</name></name>;</package>

<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>core</name><operator>.</operator><name>commands</name><operator>.</operator><name>ExecutionEvent</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>core</name><operator>.</operator><name>resources</name><operator>.</operator><name>IMarker</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>swt</name><operator>.</operator><name>dnd</name><operator>.</operator><name>TextTransfer</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>swt</name><operator>.</operator><name>dnd</name><operator>.</operator><name>Transfer</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>ide</name><operator>.</operator><name>markers</name><operator>.</operator><name>compatibility</name><operator>.</operator><name>api</name><operator>.</operator><name>MarkerField</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>ide</name><operator>.</operator><name>markers</name><operator>.</operator><name>compatibility</name><operator>.</operator><name>api</name><operator>.</operator><name>MarkerViewHandler</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>part</name><operator>.</operator><name>MarkerTransfer</name></name>;</import>

<comment type="block" format="javadoc">/**
 * MarkerCopyHandler is the handler for the copy action when the markers view is
 * selected.
 * 
 * @since 3.4
 * 
 */</comment>
<class><specifier>public</specifier> class <name>MarkerCopyHandler</name> <super><extends>extends <name>MarkerViewHandler</name></extends></super>  <block>{

	<comment type="block">/*
	 * (non-Javadoc)
	 * 
	 * @see org.eclipse.core.commands.IHandler#execute(org.eclipse.core.commands.ExecutionEvent)
	 */</comment>
	<function><specifier>public</specifier> <type><name>Object</name></type> <name>execute</name><parameter_list>(<parameter><decl><type><name>ExecutionEvent</name></type> <name>event</name></decl></parameter>)</parameter_list> <block>{
		<decl_stmt><decl><type><name>ExtendedMarkersView</name></type> <name>view</name> <init>= <expr><call><name>getView</name><argument_list>(<argument><expr><name>event</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if>if <condition>(<expr><name>view</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then>
			<block type="pseudo"><return>return <expr><literal type="null">null</literal></expr>;</return></block></then></if>

		<expr_stmt><expr><call><name>setClipboard</name><argument_list>(<argument><expr><name>view</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>this</name></expr>;</return>
	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Set the workbench clipboard for the markers.
	 * 
	 * @param view
	 */</comment>
	<function><specifier>private</specifier> <type><name>void</name></type> <name>setClipboard</name><parameter_list>(<parameter><decl><type><name>ExtendedMarkersView</name></type> <name>view</name></decl></parameter>)</parameter_list> <block>{

		<decl_stmt><decl><type><name><name>IMarker</name><index>[]</index></name></type> <name>markers</name> <init>= <expr><call><name><name>view</name><operator>.</operator><name>getSelectedMarkers</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

		<decl_stmt><decl><type><name>String</name></type> <name>markerReport</name> <init>= <expr><call><name>createMarkerReport</name><argument_list>(<argument><expr><name>view</name></expr></argument>, <argument><expr><name>markers</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<comment type="line">// Place the markers on the clipboard</comment>
		<decl_stmt><decl><type><name><name>Object</name><index>[]</index></name></type> <name>data</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name><name>Transfer</name><index>[]</index></name></type> <name>transferTypes</name></decl>;</decl_stmt>
		<if>if <condition>(<expr><name>markerReport</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
			<expr_stmt><expr><name>data</name> <operator>=</operator> <operator>new</operator> <name><name>Object</name><index>[]</index></name> <block>{ <expr><name>markers</name></expr> }</block></expr>;</expr_stmt>
			<expr_stmt><expr><name>transferTypes</name> <operator>=</operator> <operator>new</operator> <name><name>Transfer</name><index>[]</index></name> <block>{ <expr><call><name><name>MarkerTransfer</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call></expr> }</block></expr>;</expr_stmt>
		}</block></then> <else>else <block>{
			<expr_stmt><expr><name>data</name> <operator>=</operator> <operator>new</operator> <name><name>Object</name><index>[]</index></name> <block>{ <expr><name>markers</name></expr>, <expr><name>markerReport</name></expr> }</block></expr>;</expr_stmt>
			<expr_stmt><expr><name>transferTypes</name> <operator>=</operator> <operator>new</operator> <name><name>Transfer</name><index>[]</index></name> <block>{ <expr><call><name><name>MarkerTransfer</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call></expr>,
					<expr><call><name><name>TextTransfer</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call></expr> }</block></expr>;</expr_stmt>
		}</block></else></if>

		<expr_stmt><expr><call><name><name>view</name><operator>.</operator><name>getClipboard</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>setContents</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>transferTypes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Creates a plain-text report of the selected markers based on predefined
	 * properties.
	 * 
	 * @param view the view being copied
	 * @param markers
	 * @return the marker report
	 */</comment>
	<function><type><name>String</name></type> <name>createMarkerReport</name><parameter_list>(<parameter><decl><type><name>ExtendedMarkersView</name></type> <name>view</name></decl></parameter>, <parameter><decl><type><name><name>IMarker</name><index>[]</index></name></type> <name>markers</name></decl></parameter>)</parameter_list> <block>{
		<decl_stmt><decl><type><name>StringBuffer</name></type> <name>report</name> <init>= <expr><operator>new</operator> <call><name>StringBuffer</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

		 <decl_stmt><decl><type><name><name>MarkerField</name><index>[]</index></name></type> <name>fields</name> <init>= <expr><call><name><name>view</name><operator>.</operator><name>getVisibleFields</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		
		<comment type="line">// create header</comment>
		<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>fields</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
			<expr_stmt><expr><call><name><name>report</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><name><name>fields</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>getColumnHeaderText</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if>if <condition>(<expr><name>i</name> <operator>==</operator> <name><name>fields</name><operator>.</operator><name>length</name></name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition><then> <block>{
				<expr_stmt><expr><call><name><name>report</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><name><name>Character</name><operator>.</operator><name>LINE_SEPARATOR</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then> <else>else <block>{
				<expr_stmt><expr><call><name><name>report</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="char">'\t'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></else></if>
		}</block></for>

		<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>markers</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
			
			<for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>fields</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{
				<expr_stmt><expr><call><name><name>report</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><name><name>fields</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><call><name>getMarkerValue</name><argument_list>(<argument><expr><name><name>markers</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if>if <condition>(<expr><name>j</name> <operator>==</operator> <name><name>fields</name><operator>.</operator><name>length</name></name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition><then> <block>{
					<expr_stmt><expr><call><name><name>report</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><name><name>Character</name><operator>.</operator><name>LINE_SEPARATOR</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then> <else>else <block>{
					<expr_stmt><expr><call><name><name>report</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="char">'\t'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></else></if>
			}</block></for>
		}</block></for>

		<return>return <expr><call><name><name>report</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr>;</return>
	}</block></function>

}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="org.eclipse.ui.ide.markers.compatibility/src/org/eclipse/ui/ide/markers/compatibility/internal/MarkerDescriptionField.java" hash="5eea0d5231bd5ac7075e62e5ba980741943f6739"><package>package <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>ide</name><operator>.</operator><name>markers</name><operator>.</operator><name>compatibility</name><operator>.</operator><name>internal</name></name>;</package>

<comment type="block" format="javadoc">/*******************************************************************************
 * Copyright (c) 2007 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     IBM Corporation - initial API and implementation
 ******************************************************************************/</comment>

<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>core</name><operator>.</operator><name>resources</name><operator>.</operator><name>IMarker</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>core</name><operator>.</operator><name>runtime</name><operator>.</operator><name>CoreException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>jface</name><operator>.</operator><name>viewers</name><operator>.</operator><name>CellEditor</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>jface</name><operator>.</operator><name>viewers</name><operator>.</operator><name>ColumnViewer</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>jface</name><operator>.</operator><name>viewers</name><operator>.</operator><name>EditingSupport</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>jface</name><operator>.</operator><name>viewers</name><operator>.</operator><name>TextCellEditor</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>swt</name><operator>.</operator><name>widgets</name><operator>.</operator><name>Composite</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>swt</name><operator>.</operator><name>widgets</name><operator>.</operator><name>Control</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>ide</name><operator>.</operator><name>markers</name><operator>.</operator><name>compatibility</name><operator>.</operator><name>api</name><operator>.</operator><name>MarkerField</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>ide</name><operator>.</operator><name>markers</name><operator>.</operator><name>compatibility</name><operator>.</operator><name>api</name><operator>.</operator><name>MarkerItem</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>ide</name><operator>.</operator><name>markers</name><operator>.</operator><name>compatibility</name><operator>.</operator><name>api</name><operator>.</operator><name>MarkerSupportConstants</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>ibm</name><operator>.</operator><name>icu</name><operator>.</operator><name>text</name><operator>.</operator><name>CollationKey</name></name>;</import>

<comment type="block" format="javadoc">/**
 * MarkerDescriptionField is the field for showing the description of a marker.
 * 
 * @since 3.4
 * 
 */</comment>
<class><specifier>public</specifier> class <name>MarkerDescriptionField</name> <super><extends>extends <name>MarkerField</name></extends></super> <block>{

	<class><specifier>private</specifier> class <name>DescriptionEditingSupport</name> <super><extends>extends <name>EditingSupport</name></extends></super> <block>{

		<decl_stmt><decl><specifier>private</specifier> <type><name>TextCellEditor</name></type> <name>editor</name></decl>;</decl_stmt>

		<comment type="block" format="javadoc">/**
		 * Create a new instance of the receiver.
		 * 
		 * @param viewer
		 */</comment>
		<constructor><specifier>public</specifier> <name>DescriptionEditingSupport</name><parameter_list>(<parameter><decl><type><name>ColumnViewer</name></type> <name>viewer</name></decl></parameter>)</parameter_list> <block>{
			<expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>viewer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>this</name><operator>.</operator><name>editor</name></name> <operator>=</operator> <operator>new</operator> <call><name>TextCellEditor</name><argument_list>(<argument><expr><operator>(</operator><name>Composite</name><operator>)</operator> <call><name><name>viewer</name><operator>.</operator><name>getControl</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></constructor>

		<comment type="block">/*
		 * (non-Javadoc)
		 * 
		 * @see org.eclipse.jface.viewers.EditingSupport#canEdit(java.lang.Object)
		 */</comment>
		<function><specifier>protected</specifier> <type><name>boolean</name></type> <name>canEdit</name><parameter_list>(<parameter><decl><type><name>Object</name></type> <name>element</name></decl></parameter>)</parameter_list> <block>{
			<if>if <condition>(<expr><name>element</name> <operator>instanceof</operator> <name>MarkerEntry</name></expr>)</condition><then> <block>{

				<decl_stmt><decl><type><name>MarkerEntry</name></type> <name>entry</name> <init>= <expr><operator>(</operator><name>MarkerEntry</name><operator>)</operator> <name>element</name></expr></init></decl>;</decl_stmt>
				<comment type="line">// Bookmarks are a special case</comment>
				<try>try <block>{
					<if>if <condition>(<expr><call><name><name>entry</name><operator>.</operator><name>getMarker</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal>
							<operator>&amp;&amp;</operator> <call><name><name>entry</name><operator>.</operator><name>getMarker</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>isSubtypeOf</name><argument_list>(<argument><expr><name><name>IMarker</name><operator>.</operator><name>BOOKMARK</name></name></expr></argument>)</argument_list></call></expr>)</condition><then>
						<block type="pseudo"><return>return <expr><literal type="boolean">true</literal></expr>;</return></block></then></if>
				}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>CoreException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
					<expr_stmt><expr><call><name><name>MarkerSupportInternalUtilities</name><operator>.</operator><name>handle</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<return>return <expr><literal type="boolean">false</literal></expr>;</return>
				}</block></catch></try>
				<return>return <expr><call><name><name>entry</name><operator>.</operator><name>getAttributeValue</name></name><argument_list>(<argument><expr><name><name>IMarker</name><operator>.</operator><name>USER_EDITABLE</name></name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</return>
			}</block></then></if>
			<return>return <expr><literal type="boolean">false</literal></expr>;</return>
		}</block></function>

		<comment type="block">/*
		 * (non-Javadoc)
		 * 
		 * @see org.eclipse.jface.viewers.EditingSupport#getCellEditor(java.lang.Object)
		 */</comment>
		<function><specifier>protected</specifier> <type><name>CellEditor</name></type> <name>getCellEditor</name><parameter_list>(<parameter><decl><type><name>Object</name></type> <name>element</name></decl></parameter>)</parameter_list> <block>{
			<return>return <expr><name>editor</name></expr>;</return>
		}</block></function>

		<comment type="block">/*
		 * (non-Javadoc)
		 * 
		 * @see org.eclipse.jface.viewers.EditingSupport#getValue(java.lang.Object)
		 */</comment>
		<function><specifier>protected</specifier> <type><name>Object</name></type> <name>getValue</name><parameter_list>(<parameter><decl><type><name>Object</name></type> <name>element</name></decl></parameter>)</parameter_list> <block>{
			<return>return <expr><operator>(</operator><operator>(</operator><name>MarkerEntry</name><operator>)</operator> <name>element</name><operator>)</operator><operator>.</operator><call><name>getAttributeValue</name><argument_list>(<argument><expr><name><name>IMarker</name><operator>.</operator><name>MESSAGE</name></name></expr></argument>,
					<argument><expr><name><name>MarkerSupportConstants</name><operator>.</operator><name>EMPTY_STRING</name></name></expr></argument>)</argument_list></call></expr>;</return>
		}</block></function>

		<comment type="block">/*
		 * (non-Javadoc)
		 * 
		 * @see org.eclipse.jface.viewers.EditingSupport#setValue(java.lang.Object,
		 *      java.lang.Object)
		 */</comment>
		<function><specifier>protected</specifier> <type><name>void</name></type> <name>setValue</name><parameter_list>(<parameter><decl><type><name>Object</name></type> <name>element</name></decl></parameter>, <parameter><decl><type><name>Object</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{
			<decl_stmt><decl><type><name>MarkerEntry</name></type> <name>entry</name> <init>= <expr><operator>(</operator><name>MarkerEntry</name><operator>)</operator> <name>element</name></expr></init></decl>;</decl_stmt>
			<try>try <block>{
				<expr_stmt><expr><call><name><name>entry</name><operator>.</operator><name>getMarker</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>setAttribute</name><argument_list>(<argument><expr><name><name>IMarker</name><operator>.</operator><name>MESSAGE</name></name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>CoreException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
				<expr_stmt><expr><call><name><name>MarkerSupportInternalUtilities</name><operator>.</operator><name>handle</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></catch></try>

		}</block></function>

	}</block></class>

	<comment type="block" format="javadoc">/**
	 * Create a new instance of the receiver.
	 */</comment>
	<constructor><specifier>public</specifier> <name>MarkerDescriptionField</name><parameter_list>()</parameter_list> <block>{
		<expr_stmt><expr><call><name>super</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	}</block></constructor>

	<comment type="block">/*
	 * (non-Javadoc)
	 * 
	 * @see org.eclipse.ui.internal.provisional.views.markers.MarkerField#compare(org.eclipse.ui.internal.provisional.views.markers.MarkerItem,
	 *      org.eclipse.ui.internal.provisional.views.markers.MarkerItem)
	 */</comment>
	<function><specifier>public</specifier> <type><name>int</name></type> <name>compare</name><parameter_list>(<parameter><decl><type><name>MarkerItem</name></type> <name>item1</name></decl></parameter>, <parameter><decl><type><name>MarkerItem</name></type> <name>item2</name></decl></parameter>)</parameter_list> <block>{
		<return>return <expr><call><name>getDescriptionKey</name><argument_list>(<argument><expr><name>item1</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>compareTo</name><argument_list>(<argument><expr><call><name>getDescriptionKey</name><argument_list>(<argument><expr><name>item2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
	}</block></function>

	<comment type="block">/*
	 * (non-Javadoc)
	 * 
	 * @see org.eclipse.ui.internal.provisional.views.markers.api.MarkerField#getDefaultColumnWidth(org.eclipse.swt.widgets.Control)
	 */</comment>
	<function><specifier>public</specifier> <type><name>int</name></type> <name>getDefaultColumnWidth</name><parameter_list>(<parameter><decl><type><name>Control</name></type> <name>control</name></decl></parameter>)</parameter_list> <block>{
		<return>return <expr><literal type="number">50</literal> <operator>*</operator> <call><name>getFontWidth</name><argument_list>(<argument><expr><name>control</name></expr></argument>)</argument_list></call></expr>;</return>
	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Return the collation key for the description.
	 * 
	 * @param element
	 * @return CollationKey
	 */</comment>
	<function><specifier>private</specifier> <type><name>CollationKey</name></type> <name>getDescriptionKey</name><parameter_list>(<parameter><decl><type><name>Object</name></type> <name>element</name></decl></parameter>)</parameter_list> <block>{
		<if>if <condition>(<expr><name>element</name> <operator>instanceof</operator> <name>MarkerEntry</name></expr>)</condition><then>
			<block type="pseudo"><return>return <expr><operator>(</operator><operator>(</operator><name>MarkerItem</name><operator>)</operator> <name>element</name><operator>)</operator><operator>.</operator><call><name>getCollationKey</name><argument_list>(<argument><expr><name><name>IMarker</name><operator>.</operator><name>MESSAGE</name></name></expr></argument>,
					<argument><expr><name><name>MarkerSupportConstants</name><operator>.</operator><name>EMPTY_STRING</name></name></expr></argument>)</argument_list></call></expr>;</return></block></then></if>
		<return>return <expr><name><name>MarkerSupportInternalUtilities</name><operator>.</operator><name>EMPTY_COLLATION_KEY</name></name></expr>;</return>
	}</block></function>

	<comment type="block">/*
	 * (non-Javadoc)
	 * 
	 * @see org.eclipse.ui.internal.provisional.views.markers.MarkerField#getValue(org.eclipse.ui.internal.provisional.views.markers.MarkerItem)
	 */</comment>
	<function><specifier>public</specifier> <type><name>String</name></type> <name>getValue</name><parameter_list>(<parameter><decl><type><name>MarkerItem</name></type> <name>item</name></decl></parameter>)</parameter_list> <block>{
		<return>return <expr><call><name><name>item</name><operator>.</operator><name>getAttributeValue</name></name><argument_list>(<argument><expr><name><name>IMarker</name><operator>.</operator><name>MESSAGE</name></name></expr></argument>,
				<argument><expr><name><name>MarkerSupportConstants</name><operator>.</operator><name>EMPTY_STRING</name></name></expr></argument>)</argument_list></call></expr>;</return>
	}</block></function>

	<comment type="block">/*
	 * (non-Javadoc)
	 * 
	 * @see org.eclipse.ui.internal.provisional.views.markers.api.MarkerField#getEditingSupport()
	 */</comment>
	<function><specifier>public</specifier> <type><name>EditingSupport</name></type> <name>getEditingSupport</name><parameter_list>(<parameter><decl><type><name>ColumnViewer</name></type> <name>viewer</name></decl></parameter>)</parameter_list> <block>{
		<return>return <expr><operator>new</operator> <call><name>DescriptionEditingSupport</name><argument_list>(<argument><expr><name>viewer</name></expr></argument>)</argument_list></call></expr>;</return>
	}</block></function>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="org.eclipse.ui.ide.markers.compatibility/src/org/eclipse/ui/ide/markers/compatibility/internal/MarkerEntry.java" hash="d6258176d4607667098cc1e2e9d8f9aa047f4841"><comment type="block" format="javadoc">/*******************************************************************************
 * Copyright (c) 2007 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     IBM Corporation - initial API and implementation
 ******************************************************************************/</comment>

<package>package <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>ide</name><operator>.</operator><name>markers</name><operator>.</operator><name>compatibility</name><operator>.</operator><name>internal</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashMap</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>core</name><operator>.</operator><name>resources</name><operator>.</operator><name>IMarker</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>core</name><operator>.</operator><name>runtime</name><operator>.</operator><name>CoreException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>core</name><operator>.</operator><name>runtime</name><operator>.</operator><name>IAdaptable</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>core</name><operator>.</operator><name>runtime</name><operator>.</operator><name>IPath</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>osgi</name><operator>.</operator><name>util</name><operator>.</operator><name>NLS</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>ide</name><operator>.</operator><name>markers</name><operator>.</operator><name>compatibility</name><operator>.</operator><name>api</name><operator>.</operator><name>MarkerItem</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>ide</name><operator>.</operator><name>markers</name><operator>.</operator><name>compatibility</name><operator>.</operator><name>api</name><operator>.</operator><name>MarkerSupportConstants</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>ide</name><operator>.</operator><name>markers</name><operator>.</operator><name>compatibility</name><operator>.</operator><name>api</name><operator>.</operator><name>MarkerViewUtil</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>ide</name><operator>.</operator><name>markers</name><operator>.</operator><name>compatibility</name><operator>.</operator><name>api</name><operator>.</operator><name>internal</name><operator>.</operator><name>MarkerMessages</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>ide</name><operator>.</operator><name>markers</name><operator>.</operator><name>compatibility</name><operator>.</operator><name>api</name><operator>.</operator><name>internal</name><operator>.</operator><name>MarkerTypesModel</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>ibm</name><operator>.</operator><name>icu</name><operator>.</operator><name>text</name><operator>.</operator><name>CollationKey</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>ibm</name><operator>.</operator><name>icu</name><operator>.</operator><name>text</name><operator>.</operator><name>Collator</name></name>;</import>

<comment type="block" format="javadoc">/**
 * The MarkerEntry is the class that wrappers an {@link IMarker} for display in
 * an {@link ExtendedMarkersView}.
 * 
 * @since 3.4
 * 
 */</comment>
<class><specifier>public</specifier> class <name>MarkerEntry</name> <super><extends>extends <name>MarkerItem</name></extends> <implements>implements <name>IAdaptable</name></implements></super> <block>{

	<comment type="line">// The key for the string we built for display</comment>
	<decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>Object</name></type> <name>LOCATION_STRING</name> <init>= <expr><literal type="string">"LOCATION_STRING"</literal></expr></init></decl>;</decl_stmt> <comment type="line">//$NON-NLS-1$</comment>
	<decl_stmt><decl><type><name>Map</name></type> <name>attributeCache</name> <init>= <expr><operator>new</operator> <call><name>HashMap</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>private</specifier> <type><name>MarkerCategory</name></type> <name>category</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Map</name></type> <name>collationKeys</name> <init>= <expr><operator>new</operator> <call><name>HashMap</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>private</specifier> <type><name>String</name></type> <name>folder</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>IMarker</name></type> <name>marker</name></decl>;</decl_stmt>

	<comment type="block" format="javadoc">/**
	 * Create a new instance of the receiver.
	 * 
	 * @param marker
	 */</comment>
	<constructor><specifier>public</specifier> <name>MarkerEntry</name><parameter_list>(<parameter><decl><type><name>IMarker</name></type> <name>marker</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>marker</name></name> <operator>=</operator> <name>marker</name></expr>;</expr_stmt>
	}</block></constructor>

	<comment type="block">/*
	 * (non-Javadoc)
	 * 
	 * @see org.eclipse.ui.internal.provisional.views.markers.MarkerItem#getAttributeValue(java.lang.String,
	 *      boolean)
	 */</comment>
	<function><specifier>public</specifier> <type><name>boolean</name></type> <name>getAttributeValue</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>attribute</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>defaultValue</name></decl></parameter>)</parameter_list> <block>{
		<decl_stmt><decl><type><name>boolean</name></type> <name>value</name></decl>;</decl_stmt>

		<if>if <condition>(<expr><call><name><name>attributeCache</name><operator>.</operator><name>containsKey</name></name><argument_list>(<argument><expr><name>attribute</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
			<decl_stmt><decl><type><name>Object</name></type> <name>cached</name> <init>= <expr><call><name><name>attributeCache</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>attribute</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<if>if <condition>(<expr><name>cached</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then>
				<block type="pseudo"><return>return <expr><name>defaultValue</name></expr>;</return></block></then></if>
			<expr_stmt><expr><name>value</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>Boolean</name><operator>)</operator> <name>cached</name><operator>)</operator><operator>.</operator><call><name>booleanValue</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		}</block></then> <else>else <block>{
			<expr_stmt><expr><name>value</name> <operator>=</operator> <call><name><name>marker</name><operator>.</operator><name>getAttribute</name></name><argument_list>(<argument><expr><name>attribute</name></expr></argument>, <argument><expr><name>defaultValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>attributeCache</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>attribute</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>Boolean</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></else></if>

		<return>return <expr><name>value</name></expr>;</return>
	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Get the value of the attribute in the enclosed marker.
	 * 
	 * @param attribute
	 * @param defaultValue
	 *            the defaultValue if the value is not set
	 * @return int
	 */</comment>
	<function><specifier>public</specifier> <type><name>int</name></type> <name>getAttributeValue</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>attribute</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>defaultValue</name></decl></parameter>)</parameter_list> <block>{
		<decl_stmt><decl><type><name>int</name></type> <name>value</name></decl>;</decl_stmt>
		<if>if <condition>(<expr><call><name><name>attributeCache</name><operator>.</operator><name>containsKey</name></name><argument_list>(<argument><expr><name>attribute</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
			<decl_stmt><decl><type><name>Object</name></type> <name>cached</name> <init>= <expr><call><name><name>attributeCache</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>attribute</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<if>if <condition>(<expr><name>cached</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then>
				<block type="pseudo"><return>return <expr><name>defaultValue</name></expr>;</return></block></then></if>
			<expr_stmt><expr><name>value</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>Integer</name><operator>)</operator> <name>cached</name><operator>)</operator><operator>.</operator><call><name>intValue</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		}</block></then> <else>else <block>{
			<expr_stmt><expr><name>value</name> <operator>=</operator> <call><name><name>marker</name><operator>.</operator><name>getAttribute</name></name><argument_list>(<argument><expr><name>attribute</name></expr></argument>, <argument><expr><name>defaultValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>attributeCache</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>attribute</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>Integer</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></else></if>

		<return>return <expr><name>value</name></expr>;</return>

	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Get the String value of the attribute in the enclosed marker.
	 * 
	 * @param attribute
	 * @param defaultValue
	 *            the defaultValue if the value is not set
	 * @return String
	 */</comment>
	<function><specifier>public</specifier> <type><name>String</name></type> <name>getAttributeValue</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>attribute</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>defaultValue</name></decl></parameter>)</parameter_list> <block>{

		<decl_stmt><decl><type><name>String</name></type> <name>value</name></decl>;</decl_stmt>

		<if>if <condition>(<expr><call><name><name>attributeCache</name><operator>.</operator><name>containsKey</name></name><argument_list>(<argument><expr><name>attribute</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
			<decl_stmt><decl><type><name>Object</name></type> <name>cached</name> <init>= <expr><call><name><name>attributeCache</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>attribute</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<if>if <condition>(<expr><name>cached</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then>
				<block type="pseudo"><return>return <expr><name>defaultValue</name></expr>;</return></block></then></if>
			<expr_stmt><expr><name>value</name> <operator>=</operator> <operator>(</operator><name>String</name><operator>)</operator> <name>cached</name></expr>;</expr_stmt>
		}</block></then> <else>else <block>{
			<expr_stmt><expr><name>value</name> <operator>=</operator> <call><name><name>marker</name><operator>.</operator><name>getAttribute</name></name><argument_list>(<argument><expr><name>attribute</name></expr></argument>, <argument><expr><name>defaultValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>attributeCache</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>attribute</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></else></if>
		<return>return <expr><name>value</name></expr>;</return>
	}</block></function>

	<comment type="block">/*
	 * (non-Javadoc)
	 * 
	 * @see org.eclipse.ui.provisional.views.markers.MarkerItem#getChildren()
	 */</comment>
	<function><specifier>public</specifier> <type><name><name>MarkerItem</name><index>[]</index></name></type> <name>getChildren</name><parameter_list>()</parameter_list> <block>{
		<return>return <expr><name><name>MarkerSupportInternalUtilities</name><operator>.</operator><name>EMPTY_MARKER_ITEM_ARRAY</name></name></expr>;</return>
	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Get the CollationKey for the string attribute.
	 * 
	 * @param attribute
	 * @param defaultValue
	 *            the defaultValue if the value is not set
	 * @return CollationKey
	 */</comment>
	<function><specifier>public</specifier> <type><name>CollationKey</name></type> <name>getCollationKey</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>attribute</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>defaultValue</name></decl></parameter>)</parameter_list> <block>{
		<if>if <condition>(<expr><call><name><name>collationKeys</name><operator>.</operator><name>containsKey</name></name><argument_list>(<argument><expr><name>attribute</name></expr></argument>)</argument_list></call></expr>)</condition><then>
			<block type="pseudo"><return>return <expr><operator>(</operator><name>CollationKey</name><operator>)</operator> <call><name><name>collationKeys</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>attribute</name></expr></argument>)</argument_list></call></expr>;</return></block></then></if>
		<decl_stmt><decl><type><name>String</name></type> <name>attributeValue</name> <init>= <expr><call><name>getAttributeValue</name><argument_list>(<argument><expr><name>attribute</name></expr></argument>, <argument><expr><name>defaultValue</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if>if <condition>(<expr><call><name><name>attributeValue</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then>
			<block type="pseudo"><return>return <expr><name><name>MarkerSupportInternalUtilities</name><operator>.</operator><name>EMPTY_COLLATION_KEY</name></name></expr>;</return></block></then></if>
		<decl_stmt><decl><type><name>CollationKey</name></type> <name>key</name> <init>= <expr><call><name><name>Collator</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getCollationKey</name><argument_list>(
				<argument><expr><name>attributeValue</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>collationKeys</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>attribute</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>key</name></expr>;</return>
	}</block></function>

	<comment type="block">/*
	 * (non-Javadoc)
	 * 
	 * @see org.eclipse.ui.provisional.views.markers.MarkerItem#getConcreteRepresentative()
	 */</comment>
	<function><specifier>public</specifier> <type><name>MarkerEntry</name></type> <name>getConcreteRepresentative</name><parameter_list>()</parameter_list> <block>{
		<return>return <expr><name>this</name></expr>;</return>
	}</block></function>

	<comment type="block">/*
	 * (non-Javadoc)
	 * 
	 * @see org.eclipse.ui.internal.provisional.views.markers.MarkerItem#getCreationTime()
	 */</comment>
	<function><specifier>public</specifier> <type><name>long</name></type> <name>getCreationTime</name><parameter_list>()</parameter_list> <block>{
		<try>try <block>{
			<return>return <expr><call><name><name>marker</name><operator>.</operator><name>getCreationTime</name></name><argument_list>()</argument_list></call></expr>;</return>
		}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>CoreException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
			<expr_stmt><expr><call><name><name>MarkerSupportInternalUtilities</name><operator>.</operator><name>handle</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
		}</block></catch></try>
	}</block></function>

	<comment type="block">/*
	 * (non-Javadoc)
	 * 
	 * @see org.eclipse.ui.provisional.views.markers.MarkerItem#getDescription()
	 */</comment>
	<function><specifier>public</specifier> <type><name>String</name></type> <name>getDescription</name><parameter_list>()</parameter_list> <block>{
		<return>return <expr><call><name>getAttributeValue</name><argument_list>(<argument><expr><name><name>IMarker</name><operator>.</operator><name>MESSAGE</name></name></expr></argument>,
				<argument><expr><name><name>MarkerSupportConstants</name><operator>.</operator><name>EMPTY_STRING</name></name></expr></argument>)</argument_list></call></expr>;</return>
	}</block></function>

	<comment type="block">/*
	 * (non-Javadoc)
	 * 
	 * @see org.eclipse.ui.internal.provisional.views.markers.MarkerItem#getID()
	 */</comment>
	<function><specifier>public</specifier> <type><name>long</name></type> <name>getID</name><parameter_list>()</parameter_list> <block>{
		<return>return <expr><call><name><name>marker</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr>;</return>
	}</block></function>

	<comment type="block">/*
	 * (non-Javadoc)
	 * 
	 * @see org.eclipse.ui.internal.provisional.views.markers.MarkerItem#getLocation()
	 */</comment>
	<function><specifier>public</specifier> <type><name>String</name></type> <name>getLocation</name><parameter_list>()</parameter_list> <block>{
		<if>if <condition>(<expr><call><name><name>attributeCache</name><operator>.</operator><name>containsKey</name></name><argument_list>(<argument><expr><name>LOCATION_STRING</name></expr></argument>)</argument_list></call></expr>)</condition><then> 
			<block type="pseudo"><return>return <expr><operator>(</operator><name>String</name><operator>)</operator> <call><name><name>attributeCache</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>LOCATION_STRING</name></expr></argument>)</argument_list></call></expr>;</return></block></then></if>
		
		<comment type="line">//Is the location override set?</comment>
		<decl_stmt><decl><type><name>String</name></type> <name>locationString</name> <init>= <expr><call><name>getAttributeValue</name><argument_list>(<argument><expr><name><name>IMarker</name><operator>.</operator><name>LOCATION</name></name></expr></argument>,
				<argument><expr><name><name>MarkerSupportConstants</name><operator>.</operator><name>EMPTY_STRING</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if>if <condition>(<expr><call><name><name>locationString</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{

			<expr_stmt><expr><call><name><name>attributeCache</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>LOCATION_STRING</name></expr></argument>, <argument><expr><name>locationString</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><name>locationString</name></expr>;</return>
		}</block></then></if>

		<comment type="line">// No override so use line number</comment>
		<decl_stmt><decl><type><name>int</name></type> <name>lineNumber</name> <init>= <expr><call><name>getAttributeValue</name><argument_list>(<argument><expr><name><name>IMarker</name><operator>.</operator><name>LINE_NUMBER</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>String</name></type> <name>lineNumberString</name></decl>;</decl_stmt>
		<if>if <condition>(<expr><name>lineNumber</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><then>
			<block type="pseudo"><expr_stmt><expr><name>lineNumberString</name> <operator>=</operator> <name><name>MarkerMessages</name><operator>.</operator><name>Unknown</name></name></expr>;</expr_stmt></block></then>
		<else>else
			<block type="pseudo"><expr_stmt><expr><name>lineNumberString</name> <operator>=</operator> <call><name><name>NLS</name><operator>.</operator><name>bind</name></name><argument_list>(<argument><expr><name><name>MarkerMessages</name><operator>.</operator><name>label_lineNumber</name></name></expr></argument>,
					<argument><expr><call><name><name>Integer</name><operator>.</operator><name>toString</name></name><argument_list>(<argument><expr><name>lineNumber</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>

		<expr_stmt><expr><call><name><name>attributeCache</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>LOCATION_STRING</name></expr></argument>, <argument><expr><name>lineNumberString</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>lineNumberString</name></expr>;</return>

	}</block></function>

	<comment type="block">/*
	 * (non-Javadoc)
	 * 
	 * @see org.eclipse.ui.internal.provisional.views.markers.api.MarkerItem#getMarker()
	 */</comment>
	<function><specifier>public</specifier> <type><name>IMarker</name></type> <name>getMarker</name><parameter_list>()</parameter_list> <block>{
		<return>return <expr><name>marker</name></expr>;</return>
	}</block></function>

	<comment type="block">/*
	 * (non-Javadoc)
	 * 
	 * @see org.eclipse.ui.internal.provisional.views.markers.MarkerItem#getMarkerTypeName()
	 */</comment>
	<function><specifier>public</specifier> <type><name>String</name></type> <name>getMarkerTypeName</name><parameter_list>()</parameter_list> <block>{
		<try>try <block>{
			<return>return <expr><call><name><name>MarkerTypesModel</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>(<argument><expr><call><name><name>marker</name><operator>.</operator><name>getType</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
					<operator>.</operator><call><name>getLabel</name><argument_list>()</argument_list></call></expr>;</return>
		}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>CoreException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
			<expr_stmt><expr><call><name><name>MarkerSupportInternalUtilities</name><operator>.</operator><name>handle</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><call><name><name>NLS</name><operator>.</operator><name>bind</name></name><argument_list>(<argument><expr><name><name>MarkerMessages</name><operator>.</operator><name>FieldMessage_WrongType</name></name></expr></argument>, <argument><expr><call><name><name>marker</name>
					<operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
		}</block></catch></try>
	}</block></function>

	<comment type="block">/*
	 * (non-Javadoc)
	 * 
	 * @see org.eclipse.ui.provisional.views.markers.MarkerItem#getParent()
	 */</comment>
	<function><specifier>public</specifier> <type><name>MarkerItem</name></type> <name>getParent</name><parameter_list>()</parameter_list> <block>{
		<return>return <expr><name>category</name></expr>;</return>
	}</block></function>

	<comment type="block">/*
	 * (non-Javadoc)
	 * 
	 * @see org.eclipse.ui.internal.provisional.views.markers.MarkerItem#getPath()
	 */</comment>
	<function><specifier>public</specifier> <type><name>String</name></type> <name>getPath</name><parameter_list>()</parameter_list> <block>{
		<if>if <condition>(<expr><name>folder</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
			<if>if <condition>(<expr><operator>!</operator><call><name><name>marker</name><operator>.</operator><name>exists</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
				<return>return <expr><call><name><name>super</name><operator>.</operator><name>getPath</name></name><argument_list>()</argument_list></call></expr>;</return>
			}</block></then></if>

			<comment type="line">// If the path attribute is set use it.</comment>
			<try>try <block>{
				<decl_stmt><decl><type><name>Object</name></type> <name>pathAttribute</name> <init>= <expr><call><name><name>marker</name>
						<operator>.</operator><name>getAttribute</name></name><argument_list>(<argument><expr><name><name>MarkerViewUtil</name><operator>.</operator><name>PATH_ATTRIBUTE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

				<if>if <condition>(<expr><name>pathAttribute</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
					<expr_stmt><expr><name>folder</name> <operator>=</operator> <call><name><name>pathAttribute</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
					<return>return <expr><name>folder</name></expr>;</return>
				}</block></then></if>
			}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>CoreException</name></type> <name>exception</name></decl></parameter>)</parameter_list> <block>{
				<comment type="line">// Log the exception and fall back.</comment>
				<expr_stmt><expr><call><name><name>MarkerSupportInternalUtilities</name><operator>.</operator><name>handle</name></name><argument_list>(<argument><expr><name>exception</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></catch></try>

			<decl_stmt><decl><type><name>IPath</name></type> <name>path</name> <init>= <expr><call><name><name>marker</name><operator>.</operator><name>getResource</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getFullPath</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><call><name><name>path</name><operator>.</operator><name>segmentCount</name></name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt> <comment type="line">// n is the number of segments</comment>
			<comment type="line">// in container, not path</comment>
			<if>if <condition>(<expr><name>n</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
				<return>return <expr><call><name><name>super</name><operator>.</operator><name>getPath</name></name><argument_list>()</argument_list></call></expr>;</return>
			}</block></then></if>
			<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
			<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{
				<expr_stmt><expr><name>len</name> <operator>+=</operator> <call><name><name>path</name><operator>.</operator><name>segment</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>length</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			}</block></for>
			<comment type="line">// account for /'s</comment>
			<if>if <condition>(<expr><name>n</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><then> <block>{
				<expr_stmt><expr><name>len</name> <operator>+=</operator> <name>n</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
			}</block></then></if>
			<decl_stmt><decl><type><name>StringBuffer</name></type> <name>sb</name> <init>= <expr><operator>new</operator> <call><name>StringBuffer</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{
				<if>if <condition>(<expr><name>i</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
					<expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then></if>
				<expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><call><name><name>path</name><operator>.</operator><name>segment</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></for>
			<expr_stmt><expr><name>folder</name> <operator>=</operator> <call><name><name>sb</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

		}</block></then></if>
		<return>return <expr><name>folder</name></expr>;</return>
	}</block></function>

	<comment type="block">/*
	 * (non-Javadoc)
	 * 
	 * @see org.eclipse.ui.provisional.views.markers.MarkerItem#isConcrete()
	 */</comment>
	<function><specifier>public</specifier> <type><name>boolean</name></type> <name>isConcrete</name><parameter_list>()</parameter_list> <block>{
		<return>return <expr><literal type="boolean">true</literal></expr>;</return>
	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Set the category to markerCategory.
	 * 
	 * @param markerCategory
	 */</comment>
	<function><specifier>public</specifier> <type><name>void</name></type> <name>setCategory</name><parameter_list>(<parameter><decl><type><name>MarkerCategory</name></type> <name>markerCategory</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><name>category</name> <operator>=</operator> <name>markerCategory</name></expr>;</expr_stmt>

	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Get the category of the receiver.
	 * 
	 * @return {@link MarkerCategory}
	 */</comment>
	<function><specifier>public</specifier> <type><name>MarkerCategory</name></type> <name>getCategory</name><parameter_list>()</parameter_list> <block>{
		<return>return <expr><name>category</name></expr>;</return>
	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Set the marker for the receiver.
	 * 
	 * @param marker
	 *            The marker to set.
	 */</comment>
	<function><specifier>public</specifier> <type><name>void</name></type> <name>setMarker</name><parameter_list>(<parameter><decl><type><name>IMarker</name></type> <name>marker</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>marker</name></name> <operator>=</operator> <name>marker</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>attributeCache</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<comment type="block">/*
	 * (non-Javadoc)
	 * 
	 * @see org.eclipse.core.runtime.IAdaptable#getAdapter(java.lang.Class)
	 */</comment>
	<function><specifier>public</specifier> <type><name>Object</name></type> <name>getAdapter</name><parameter_list>(<parameter><decl><type><name>Class</name></type> <name>adapter</name></decl></parameter>)</parameter_list> <block>{
		<if>if <condition>(<expr><call><name><name>adapter</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>IMarker</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr>)</condition><then>
			<block type="pseudo"><return>return <expr><name>marker</name></expr>;</return></block></then></if>
		<return>return <expr><literal type="null">null</literal></expr>;</return>
	}</block></function>

}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="org.eclipse.ui.ide.markers.compatibility/src/org/eclipse/ui/ide/markers/compatibility/internal/MarkerGoToHandler.java" hash="d224898473716f83cd4e6e50155ff33601b239ef"><package>package <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>ide</name><operator>.</operator><name>markers</name><operator>.</operator><name>compatibility</name><operator>.</operator><name>internal</name></name>;</package>
<comment type="block" format="javadoc">/*******************************************************************************
 * Copyright (c) 2007 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     IBM Corporation - initial API and implementation
 ******************************************************************************/</comment>

<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>core</name><operator>.</operator><name>commands</name><operator>.</operator><name>ExecutionEvent</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>ide</name><operator>.</operator><name>markers</name><operator>.</operator><name>compatibility</name><operator>.</operator><name>api</name><operator>.</operator><name>MarkerViewHandler</name></name>;</import>

<comment type="block" format="javadoc">/**
 * MarkerGoToHandler is the handler for the go to action.
 * @since 3.4
 *
 */</comment>
<class><specifier>public</specifier> class <name>MarkerGoToHandler</name> <super><extends>extends <name>MarkerViewHandler</name></extends></super> <block>{

	<comment type="block">/* (non-Javadoc)
	 * @see org.eclipse.core.commands.IHandler#execute(org.eclipse.core.commands.ExecutionEvent)
	 */</comment>
	<function><specifier>public</specifier> <type><name>Object</name></type> <name>execute</name><parameter_list>(<parameter><decl><type><name>ExecutionEvent</name></type> <name>event</name></decl></parameter>)</parameter_list>  <block>{
		<decl_stmt><decl><type><name>ExtendedMarkersView</name></type> <name>view</name> <init>= <expr><call><name>getView</name><argument_list>(<argument><expr><name>event</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if>if<condition>(<expr><name>view</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then>
			<block type="pseudo"><return>return <expr><name>this</name></expr>;</return></block></then></if>
		<expr_stmt><expr><call><name><name>view</name><operator>.</operator><name>openSelectedMarkers</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>this</name></expr>;</return>
	}</block></function>
	


}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="org.eclipse.ui.ide.markers.compatibility/src/org/eclipse/ui/ide/markers/compatibility/internal/MarkerHelpAdapterFactory.java" hash="f8c72c665504a785abd8bab717d1523443505ba4"><package>package <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>ide</name><operator>.</operator><name>markers</name><operator>.</operator><name>compatibility</name><operator>.</operator><name>internal</name></name>;</package>
<comment type="block" format="javadoc">/*******************************************************************************
 * Copyright (c) 2007 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     IBM Corporation - initial API and implementation
 ******************************************************************************/</comment>

<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>core</name><operator>.</operator><name>resources</name><operator>.</operator><name>IMarker</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>core</name><operator>.</operator><name>runtime</name><operator>.</operator><name>IAdapterFactory</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>help</name><operator>.</operator><name>HelpSystem</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>help</name><operator>.</operator><name>IContext</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>help</name><operator>.</operator><name>IContextProvider</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>PlatformUI</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>ide</name><operator>.</operator><name>IDE</name></name>;</import>

<comment type="block" format="javadoc">/**
 * MarkerHelpAdapterFactory is the adapter factory for the markerHelp.
 * @since 3.4
 *
 */</comment>
<class><specifier>public</specifier> class <name>MarkerHelpAdapterFactory</name> <super><implements>implements <name>IAdapterFactory</name></implements></super> <block>{

	<decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name><name>Class</name><index>[]</index></name></type> <name>classes</name> <init>= <expr><operator>new</operator> <name><name>Class</name><index>[]</index></name> <block>{<expr><name><name>IContextProvider</name><operator>.</operator><name>class</name></name></expr>}</block></expr></init></decl>;</decl_stmt>

	<function><specifier>public</specifier> <type><name>Object</name></type> <name>getAdapter</name><parameter_list>(<parameter><decl><type><name>Object</name></type> <name>adaptableObject</name></decl></parameter>, <parameter><decl><type><name>Class</name></type> <name>adapterType</name></decl></parameter>)</parameter_list> <block>{
		<if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>adaptableObject</name> <operator>instanceof</operator> <name>ExtendedMarkersView</name><operator>)</operator></expr>)</condition><then>
			<block type="pseudo"><return>return <expr><literal type="null">null</literal></expr>;</return></block></then></if>

		<decl_stmt><decl><type><specifier>final</specifier> <name>ExtendedMarkersView</name></type> <name>view</name> <init>= <expr><operator>(</operator><name>ExtendedMarkersView</name><operator>)</operator> <name>adaptableObject</name></expr></init></decl>;</decl_stmt>

		<return>return <expr><operator>new</operator> <class><super><name>IContextProvider</name></super><argument_list>()</argument_list><block>{

			<function><specifier>public</specifier> <type><name>int</name></type> <name>getContextChangeMask</name><parameter_list>()</parameter_list> <block>{
				<return>return <expr><name>SELECTION</name></expr>;</return>
			}</block></function>

			<function><specifier>public</specifier> <type><name>IContext</name></type> <name>getContext</name><parameter_list>(<parameter><decl><type><name>Object</name></type> <name>target</name></decl></parameter>)</parameter_list> <block>{
				<decl_stmt><decl><type><name>String</name></type> <name>contextId</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
				<comment type="line">// See if there is a context registered for the current selection</comment>
				<decl_stmt><decl><type><name><name>IMarker</name><index>[]</index></name></type> <name>markers</name> <init>= <expr><call><name><name>view</name><operator>.</operator><name>getSelectedMarkers</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
				<if>if<condition>(<expr><name><name>markers</name><operator>.</operator><name>length</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
					<expr_stmt><expr><name>contextId</name> <operator>=</operator> <call><name><name>IDE</name><operator>.</operator><name>getMarkerHelpRegistry</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getHelp</name><argument_list>(
							<argument><expr><name><name>markers</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then></if>

				<comment type="line">//TODO this needs to be migrated to the ide plug-in</comment>
				<if>if <condition>(<expr><name>contextId</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> 
					<block type="pseudo"><expr_stmt><expr><name>contextId</name> <operator>=</operator> <name><name>PlatformUI</name><operator>.</operator><name>PLUGIN_ID</name></name> <operator>+</operator> <literal type="string">".problem_view_context"</literal></expr>;</expr_stmt></block></then></if><comment type="line">//$NON-NLS-1$</comment>
				
				<return>return <expr><call><name><name>HelpSystem</name><operator>.</operator><name>getContext</name></name><argument_list>(<argument><expr><name>contextId</name></expr></argument>)</argument_list></call></expr>;</return>
			}</block></function>

			

			<comment type="block">/*
			 * (non-Javadoc)
			 * 
			 * @see org.eclipse.help.IContextProvider#getSearchExpression(java.lang.Object)
			 */</comment>
			<function><specifier>public</specifier> <type><name>String</name></type> <name>getSearchExpression</name><parameter_list>(<parameter><decl><type><name>Object</name></type> <name>target</name></decl></parameter>)</parameter_list> <block>{
				<return>return <expr><literal type="null">null</literal></expr>;</return>
			}</block></function>
		
		}</block></class></expr>;</return>
	}</block></function>

	<comment type="block">/* (non-Javadoc)
	 * @see org.eclipse.core.runtime.IAdapterFactory#getAdapterList()
	 */</comment>
	<function><specifier>public</specifier> <type><name><name>Class</name><index>[]</index></name></type> <name>getAdapterList</name><parameter_list>()</parameter_list> <block>{
		<return>return <expr><name>classes</name></expr>;</return>
	}</block></function>

}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="org.eclipse.ui.ide.markers.compatibility/src/org/eclipse/ui/ide/markers/compatibility/internal/MarkerIDField.java" hash="476a645aa776ed23c590048c8c47ddb22e35656e"><comment type="block" format="javadoc">/*******************************************************************************
 * Copyright (c) 2007 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     IBM Corporation - initial API and implementation
 ******************************************************************************/</comment>

<package>package <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>ide</name><operator>.</operator><name>markers</name><operator>.</operator><name>compatibility</name><operator>.</operator><name>internal</name></name>;</package>

<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>ide</name><operator>.</operator><name>markers</name><operator>.</operator><name>compatibility</name><operator>.</operator><name>api</name><operator>.</operator><name>MarkerField</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>ide</name><operator>.</operator><name>markers</name><operator>.</operator><name>compatibility</name><operator>.</operator><name>api</name><operator>.</operator><name>MarkerItem</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>ide</name><operator>.</operator><name>markers</name><operator>.</operator><name>compatibility</name><operator>.</operator><name>api</name><operator>.</operator><name>MarkerSupportConstants</name></name>;</import>


<comment type="block" format="javadoc">/**
 * @since 3.4
 * 
 */</comment>
<class><specifier>public</specifier> class <name>MarkerIDField</name> <super><extends>extends <name>MarkerField</name></extends></super> <block>{

	<comment type="block">/*
	 * (non-Javadoc)
	 * 
	 * @see org.eclipse.ui.internal.provisional.views.markers.MarkerField#getValue(org.eclipse.ui.internal.provisional.views.markers.MarkerItem)
	 */</comment>
	<function><specifier>public</specifier> <type><name>String</name></type> <name>getValue</name><parameter_list>(<parameter><decl><type><name>MarkerItem</name></type> <name>item</name></decl></parameter>)</parameter_list> <block>{
		<if>if <condition>(<expr><call><name><name>item</name><operator>.</operator><name>isConcrete</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
			<block type="pseudo"><return>return <expr><call><name><name>String</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><call><name><name>item</name><operator>.</operator><name>getID</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block></then></if>
		<return>return <expr><name><name>MarkerSupportConstants</name><operator>.</operator><name>EMPTY_STRING</name></name></expr>;</return>
	}</block></function>

	<comment type="block">/*
	 * (non-Javadoc)
	 * 
	 * @see org.eclipse.ui.internal.provisional.views.markers.MarkerField#compare(org.eclipse.ui.internal.provisional.views.markers.MarkerItem,
	 *      org.eclipse.ui.internal.provisional.views.markers.MarkerItem)
	 */</comment>
	<function><specifier>public</specifier> <type><name>int</name></type> <name>compare</name><parameter_list>(<parameter><decl><type><name>MarkerItem</name></type> <name>item1</name></decl></parameter>, <parameter><decl><type><name>MarkerItem</name></type> <name>item2</name></decl></parameter>)</parameter_list> <block>{
		<return>return <expr><call>(<name>int</name>) <argument_list>(<argument><expr><call><name><name>item1</name><operator>.</operator><name>getID</name></name><argument_list>()</argument_list></call> <operator>-</operator> <call><name><name>item2</name><operator>.</operator><name>getID</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
	}</block></function>

}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="org.eclipse.ui.ide.markers.compatibility/src/org/eclipse/ui/ide/markers/compatibility/internal/MarkerLocationField.java" hash="87e7255970c9e0f3631e5b7c6316cd14e217c0d6"><comment type="block" format="javadoc">/*******************************************************************************
 * Copyright (c) 2007 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     IBM Corporation - initial API and implementation
 ******************************************************************************/</comment>

<package>package <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>ide</name><operator>.</operator><name>markers</name><operator>.</operator><name>compatibility</name><operator>.</operator><name>internal</name></name>;</package>

<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>core</name><operator>.</operator><name>resources</name><operator>.</operator><name>IMarker</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>swt</name><operator>.</operator><name>widgets</name><operator>.</operator><name>Control</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>ide</name><operator>.</operator><name>markers</name><operator>.</operator><name>compatibility</name><operator>.</operator><name>api</name><operator>.</operator><name>MarkerField</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>ide</name><operator>.</operator><name>markers</name><operator>.</operator><name>compatibility</name><operator>.</operator><name>api</name><operator>.</operator><name>MarkerItem</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>ide</name><operator>.</operator><name>markers</name><operator>.</operator><name>compatibility</name><operator>.</operator><name>api</name><operator>.</operator><name>MarkerSupportConstants</name></name>;</import>

<comment type="block" format="javadoc">/**
 * MarkerLocationField is the field for the location field.
 * 
 * @since 3.4
 * 
 */</comment>
<class><specifier>public</specifier> class <name>MarkerLocationField</name> <super><extends>extends <name>MarkerField</name></extends></super> <block>{

	<comment type="block">/*
	 * (non-Javadoc)
	 * 
	 * @see org.eclipse.ui.internal.provisional.views.markers.MarkerField#getValue(org.eclipse.ui.internal.provisional.views.markers.MarkerItem)
	 */</comment>
	<function><specifier>public</specifier> <type><name>String</name></type> <name>getValue</name><parameter_list>(<parameter><decl><type><name>MarkerItem</name></type> <name>item</name></decl></parameter>)</parameter_list> <block>{
		<return>return <expr><call><name><name>item</name><operator>.</operator><name>getLocation</name></name><argument_list>()</argument_list></call></expr>;</return>
	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Get the number of characters that should be reserved for the receiver.
	 * 
	 * @param control
	 *            the control to scale from
	 * @return int
	 */</comment>
	<function><specifier>public</specifier> <type><name>int</name></type> <name>getDefaultColumnWidth</name><parameter_list>(<parameter><decl><type><name>Control</name></type> <name>control</name></decl></parameter>)</parameter_list> <block>{
		<return>return <expr><literal type="number">10</literal> <operator>*</operator> <call><name>getFontWidth</name><argument_list>(<argument><expr><name>control</name></expr></argument>)</argument_list></call></expr>;</return>
	}</block></function>

	<comment type="block">/*
	 * (non-Javadoc)
	 * 
	 * @see org.eclipse.ui.views.markers.MarkerField#compare(org.eclipse.ui.views.markers.MarkerItem,
	 *      org.eclipse.ui.views.markers.MarkerItem)
	 */</comment>
	<function><specifier>public</specifier> <type><name>int</name></type> <name>compare</name><parameter_list>(<parameter><decl><type><name>MarkerItem</name></type> <name>item1</name></decl></parameter>, <parameter><decl><type><name>MarkerItem</name></type> <name>item2</name></decl></parameter>)</parameter_list> <block>{

		<comment type="line">//See if location got overridden</comment>
		<decl_stmt><decl><type><name>String</name></type> <name>location1</name> <init>= <expr><call><name><name>item1</name><operator>.</operator><name>getAttributeValue</name></name><argument_list>(<argument><expr><name><name>IMarker</name><operator>.</operator><name>LOCATION</name></name></expr></argument>,
				<argument><expr><name><name>MarkerSupportConstants</name><operator>.</operator><name>EMPTY_STRING</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>String</name></type> <name>location2</name> <init>= <expr><call><name><name>item2</name><operator>.</operator><name>getAttributeValue</name></name><argument_list>(<argument><expr><name><name>IMarker</name><operator>.</operator><name>LOCATION</name></name></expr></argument>,
				<argument><expr><name><name>MarkerSupportConstants</name><operator>.</operator><name>EMPTY_STRING</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<if>if <condition>(<expr><call><name><name>location1</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <call><name><name>location2</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then>
			<block type="pseudo"><return>return <expr><call><name><name>item1</name><operator>.</operator><name>getAttributeValue</name></name><argument_list>(<argument><expr><name><name>IMarker</name><operator>.</operator><name>LINE_NUMBER</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call>
					<operator>-</operator> <call><name><name>item2</name><operator>.</operator><name>getAttributeValue</name></name><argument_list>(<argument><expr><name><name>IMarker</name><operator>.</operator><name>LINE_NUMBER</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return></block></then></if>

		<return>return <expr><call><name><name>location1</name><operator>.</operator><name>compareTo</name></name><argument_list>(<argument><expr><name>location2</name></expr></argument>)</argument_list></call></expr>;</return>

	}</block></function>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="org.eclipse.ui.ide.markers.compatibility/src/org/eclipse/ui/ide/markers/compatibility/internal/MarkerMap.java" hash="ca96e4184ed38362a56c93ca09d58ed378cc64cf"><comment type="block" format="javadoc">/*******************************************************************************
 * Copyright (c) 2007 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     IBM Corporation - initial API and implementation
 ******************************************************************************/</comment>

<package>package <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>ide</name><operator>.</operator><name>markers</name><operator>.</operator><name>compatibility</name><operator>.</operator><name>internal</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashMap</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>core</name><operator>.</operator><name>resources</name><operator>.</operator><name>IMarker</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>ide</name><operator>.</operator><name>markers</name><operator>.</operator><name>compatibility</name><operator>.</operator><name>api</name><operator>.</operator><name>MarkerItem</name></name>;</import>

<comment type="block" format="javadoc">/**
 * The MarkerMap is a helper class that manages the mapping between a set of
 * {@link IMarker} and thier {@link MarkerEntry} wrappers.
 * 
 * @since 3.4
 * 
 */</comment>
<class>class <name>MarkerMap</name> <block>{

	<decl_stmt><decl><specifier>static</specifier> <type><specifier>final</specifier> <name>MarkerMap</name></type> <name>EMPTY_MAP</name> <init>= <expr><operator>new</operator> <call><name>MarkerMap</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>private</specifier> <type><name><name>MarkerEntry</name><index>[]</index></name></type> <name>markers</name></decl>;</decl_stmt>

	<comment type="line">// markerToEntryMap is a lazily created map from the markers to thier</comment>
	<comment type="line">// corresponding entry</comment>
	<decl_stmt><decl><specifier>private</specifier> <type><name>Map</name></type> <name>markerToEntryMap</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>

	<comment type="block" format="javadoc">/**
	 * Creates an initially empty marker map
	 */</comment>
	<constructor><specifier>public</specifier> <name>MarkerMap</name><parameter_list>()</parameter_list> <block>{
		<expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><operator>new</operator> <name><name>MarkerEntry</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></constructor>

	<comment type="block" format="javadoc">/**
	 * Create an instance of the receiver from markers.
	 * 
	 * @param markers
	 */</comment>

	<constructor><specifier>public</specifier> <name>MarkerMap</name><parameter_list>(<parameter><decl><type><name><name>MarkerEntry</name><index>[]</index></name></type> <name>markers</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>markers</name></name> <operator>=</operator> <name>markers</name></expr>;</expr_stmt>
	}</block></constructor>

	<comment type="block" format="javadoc">/**
	 * Get the size of the entries
	 * 
	 * @return int
	 */</comment>
	<function><specifier>public</specifier> <type><name>int</name></type> <name>getSize</name><parameter_list>()</parameter_list> <block>{
		<return>return <expr><name><name>markers</name><operator>.</operator><name>length</name></name></expr>;</return>
	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Return the entries as an array.
	 * 
	 * @return MarkerEntry[]
	 */</comment>
	<function><specifier>public</specifier> <type><name><name>MarkerEntry</name><index>[]</index></name></type> <name>toArray</name><parameter_list>()</parameter_list> <block>{
		<return>return <expr><name>markers</name></expr>;</return>
	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Return the entry at index
	 * 
	 * @param index
	 * @return MarkerEntry
	 */</comment>
	<function><specifier>public</specifier> <type><name>MarkerEntry</name></type> <name>elementAt</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>index</name></decl></parameter>)</parameter_list> <block>{
		<return>return <expr><name><name>markers</name><index>[<expr><name>index</name></expr>]</index></name></expr>;</return>
	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Return the {@link MarkerItem} that maps to marker.
	 * 
	 * @param marker
	 * @return {@link MarkerItem}
	 */</comment>
	<function><specifier>public</specifier> <type><name>MarkerItem</name></type> <name>getMarkerItem</name><parameter_list>(<parameter><decl><type><name>IMarker</name></type> <name>marker</name></decl></parameter>)</parameter_list> <block>{
		<if>if <condition>(<expr><name>markerToEntryMap</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
			<expr_stmt><expr><name>markerToEntryMap</name> <operator>=</operator> <operator>new</operator> <call><name>HashMap</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>markers</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
				<decl_stmt><decl><type><name>IMarker</name></type> <name>nextMarker</name> <init>= <expr><name><name>markers</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>getMarker</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
				<if>if <condition>(<expr><name>nextMarker</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then>
					<block type="pseudo"><expr_stmt><expr><call><name><name>markerToEntryMap</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>nextMarker</name></expr></argument>, <argument><expr><name><name>markers</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
			}</block></for>
		}</block></then></if>

		<if>if <condition>(<expr><call><name><name>markerToEntryMap</name><operator>.</operator><name>containsKey</name></name><argument_list>(<argument><expr><name>marker</name></expr></argument>)</argument_list></call></expr>)</condition><then>
			<block type="pseudo"><return>return <expr><operator>(</operator><name>MarkerItem</name><operator>)</operator> <call><name><name>markerToEntryMap</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>marker</name></expr></argument>)</argument_list></call></expr>;</return></block></then></if>

		<return>return <expr><literal type="null">null</literal></expr>;</return>
	}</block></function>

}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="org.eclipse.ui.ide.markers.compatibility/src/org/eclipse/ui/ide/markers/compatibility/internal/ExtendedMarkersView.java" hash="efd253c693aae519cfa91c23084ab38808c657ad"><comment type="block" format="javadoc">/*******************************************************************************
 * Copyright (c) 2007 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     IBM Corporation - initial API and implementation
 ******************************************************************************/</comment>

<package>package <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>ide</name><operator>.</operator><name>markers</name><operator>.</operator><name>compatibility</name><operator>.</operator><name>internal</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Collection</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashSet</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Iterator</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>core</name><operator>.</operator><name>resources</name><operator>.</operator><name>IFile</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>core</name><operator>.</operator><name>resources</name><operator>.</operator><name>IMarker</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>core</name><operator>.</operator><name>resources</name><operator>.</operator><name>IResource</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>core</name><operator>.</operator><name>resources</name><operator>.</operator><name>mapping</name><operator>.</operator><name>ResourceMapping</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>core</name><operator>.</operator><name>runtime</name><operator>.</operator><name>CoreException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>core</name><operator>.</operator><name>runtime</name><operator>.</operator><name>IAdaptable</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>core</name><operator>.</operator><name>runtime</name><operator>.</operator><name>IAdapterFactory</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>core</name><operator>.</operator><name>runtime</name><operator>.</operator><name>IProgressMonitor</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>core</name><operator>.</operator><name>runtime</name><operator>.</operator><name>IStatus</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>core</name><operator>.</operator><name>runtime</name><operator>.</operator><name>Platform</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>core</name><operator>.</operator><name>runtime</name><operator>.</operator><name>Status</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>core</name><operator>.</operator><name>runtime</name><operator>.</operator><name>jobs</name><operator>.</operator><name>Job</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>jface</name><operator>.</operator><name>action</name><operator>.</operator><name>ContributionManager</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>jface</name><operator>.</operator><name>action</name><operator>.</operator><name>MenuManager</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>jface</name><operator>.</operator><name>util</name><operator>.</operator><name>IPropertyChangeListener</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>jface</name><operator>.</operator><name>util</name><operator>.</operator><name>OpenStrategy</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>jface</name><operator>.</operator><name>util</name><operator>.</operator><name>PropertyChangeEvent</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>jface</name><operator>.</operator><name>viewers</name><operator>.</operator><name>ColumnPixelData</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>jface</name><operator>.</operator><name>viewers</name><operator>.</operator><name>EditingSupport</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>jface</name><operator>.</operator><name>viewers</name><operator>.</operator><name>IOpenListener</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>jface</name><operator>.</operator><name>viewers</name><operator>.</operator><name>ISelection</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>jface</name><operator>.</operator><name>viewers</name><operator>.</operator><name>IStructuredSelection</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>jface</name><operator>.</operator><name>viewers</name><operator>.</operator><name>ITreeContentProvider</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>jface</name><operator>.</operator><name>viewers</name><operator>.</operator><name>OpenEvent</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>jface</name><operator>.</operator><name>viewers</name><operator>.</operator><name>StructuredSelection</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>jface</name><operator>.</operator><name>viewers</name><operator>.</operator><name>TableLayout</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>jface</name><operator>.</operator><name>viewers</name><operator>.</operator><name>TreeViewer</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>jface</name><operator>.</operator><name>viewers</name><operator>.</operator><name>TreeViewerColumn</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>jface</name><operator>.</operator><name>viewers</name><operator>.</operator><name>Viewer</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>jface</name><operator>.</operator><name>window</name><operator>.</operator><name>SameShellProvider</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>jface</name><operator>.</operator><name>window</name><operator>.</operator><name>Window</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>osgi</name><operator>.</operator><name>util</name><operator>.</operator><name>NLS</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>swt</name><operator>.</operator><name>SWT</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>swt</name><operator>.</operator><name>dnd</name><operator>.</operator><name>Clipboard</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>swt</name><operator>.</operator><name>events</name><operator>.</operator><name>HelpEvent</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>swt</name><operator>.</operator><name>events</name><operator>.</operator><name>HelpListener</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>swt</name><operator>.</operator><name>events</name><operator>.</operator><name>SelectionAdapter</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>swt</name><operator>.</operator><name>events</name><operator>.</operator><name>SelectionEvent</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>swt</name><operator>.</operator><name>events</name><operator>.</operator><name>SelectionListener</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>swt</name><operator>.</operator><name>events</name><operator>.</operator><name>TreeAdapter</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>swt</name><operator>.</operator><name>events</name><operator>.</operator><name>TreeEvent</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>swt</name><operator>.</operator><name>graphics</name><operator>.</operator><name>FontMetrics</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>swt</name><operator>.</operator><name>graphics</name><operator>.</operator><name>GC</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>swt</name><operator>.</operator><name>layout</name><operator>.</operator><name>FillLayout</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>swt</name><operator>.</operator><name>widgets</name><operator>.</operator><name>Composite</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>swt</name><operator>.</operator><name>widgets</name><operator>.</operator><name>Control</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>swt</name><operator>.</operator><name>widgets</name><operator>.</operator><name>Menu</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>swt</name><operator>.</operator><name>widgets</name><operator>.</operator><name>ScrollBar</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>swt</name><operator>.</operator><name>widgets</name><operator>.</operator><name>Scrollable</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>swt</name><operator>.</operator><name>widgets</name><operator>.</operator><name>Tree</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>swt</name><operator>.</operator><name>widgets</name><operator>.</operator><name>TreeColumn</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>IEditorInput</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>IEditorPart</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>IMemento</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>IPartListener2</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>ISelectionListener</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>IViewSite</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>IWorkbenchPage</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>IWorkbenchPart</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>IWorkbenchPartReference</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>PartInitException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>PlatformUI</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>contexts</name><operator>.</operator><name>IContext</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>ide</name><operator>.</operator><name>IDE</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>ide</name><operator>.</operator><name>ResourceUtil</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>ide</name><operator>.</operator><name>markers</name><operator>.</operator><name>compatibility</name><operator>.</operator><name>api</name><operator>.</operator><name>MarkerField</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>ide</name><operator>.</operator><name>markers</name><operator>.</operator><name>compatibility</name><operator>.</operator><name>api</name><operator>.</operator><name>MarkerItem</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>ide</name><operator>.</operator><name>markers</name><operator>.</operator><name>compatibility</name><operator>.</operator><name>api</name><operator>.</operator><name>MarkerSupportConstants</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>internal</name><operator>.</operator><name>ide</name><operator>.</operator><name>IDEInternalPreferences</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>internal</name><operator>.</operator><name>ide</name><operator>.</operator><name>IDEWorkbenchPlugin</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>internal</name><operator>.</operator><name>ide</name><operator>.</operator><name>StatusUtil</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>menus</name><operator>.</operator><name>IMenuService</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>part</name><operator>.</operator><name>ViewPart</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>progress</name><operator>.</operator><name>IWorkbenchSiteProgressService</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>progress</name><operator>.</operator><name>WorkbenchJob</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>statushandlers</name><operator>.</operator><name>StatusManager</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>views</name><operator>.</operator><name>markers</name><operator>.</operator><name>internal</name><operator>.</operator><name>MarkerMessages</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>views</name><operator>.</operator><name>markers</name><operator>.</operator><name>internal</name><operator>.</operator><name>MarkerSupportRegistry</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>views</name><operator>.</operator><name>tasklist</name><operator>.</operator><name>ITaskListResourceAdapter</name></name>;</import>

<comment type="block" format="javadoc">/**
 * The ExtendedMarkersView is the internal implementation of the view that shows
 * markers using the markerGenerators extension point.
 * 
 * The ExtendedMarkersView fully supports the markerSupport extension point and
 * is meant to be used as a view to complement them.
 * 
 * The markerContentGenerators to be used by the view can be specified by
 * appending a comma separated list of them after a colon in the class
 * specification of the view. If this list is left out the problems
 * markerContentProvider will be used.
 * 
 * @since 3.4
 * 
 */</comment>
<class><specifier>public</specifier> class <name>ExtendedMarkersView</name> <super><extends>extends <name>ViewPart</name></extends></super> <block>{

	<comment type="block" format="javadoc">/**
	 * MarkerSelectionEntry is a cache of the values for a marker entry.
	 * 
	 * @since 3.4
	 * 
	 */</comment>
	<class><specifier>final</specifier> class <name>MarkerSelectionEntry</name> <block>{

		<decl_stmt><decl><type><name><name>Object</name><index>[]</index></name></type> <name>cachedValues</name></decl>;</decl_stmt>

		<constructor><name>MarkerSelectionEntry</name><parameter_list>(<parameter><decl><type><name>MarkerItem</name></type> <name>item</name></decl></parameter>)</parameter_list> <block>{
			<decl_stmt><decl><type><name><name>MarkerField</name><index>[]</index></name></type> <name>fields</name> <init>= <expr><call><name><name>builder</name><operator>.</operator><name>getVisibleFields</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><name>cachedValues</name> <operator>=</operator> <operator>new</operator> <name><name>Object</name><index>[<expr><name><name>fields</name><operator>.</operator><name>length</name></name></expr>]</index></name></expr>;</expr_stmt>
			<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>fields</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
				<expr_stmt><expr><name><name>cachedValues</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>fields</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>getValue</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></for>
		}</block></constructor>

		<comment type="block" format="javadoc">/**
		 * Return whether or not the entry is equivalent to the cached state.
		 * 
		 * @param item
		 * @return boolean &lt;code&gt;true&lt;/code&gt; if they are equivalent
		 */</comment>
		<function><type><name>boolean</name></type> <name>isEquivalentTo</name><parameter_list>(<parameter><decl><type><name>MarkerItem</name></type> <name>item</name></decl></parameter>)</parameter_list> <block>{
			<decl_stmt><decl><type><name><name>MarkerField</name><index>[]</index></name></type> <name>fields</name> <init>= <expr><call><name><name>builder</name><operator>.</operator><name>getVisibleFields</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

			<if>if <condition>(<expr><name><name>cachedValues</name><operator>.</operator><name>length</name></name> <operator>!=</operator> <name><name>fields</name><operator>.</operator><name>length</name></name></expr>)</condition><then>
				<block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr>;</return></block></then></if>

			<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>fields</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
				<if>if <condition>(<expr><name><name>cachedValues</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name><name>fields</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>getValue</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>)</condition><then>
					<block type="pseudo"><continue>continue;</continue></block></then></if>
				<return>return <expr><literal type="boolean">false</literal></expr>;</return>
			}</block></for>
			<return>return <expr><literal type="boolean">true</literal></expr>;</return>
		}</block></function>

	}</block></class>

	<decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><name>int</name></type> <name>instanceCount</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>TAG_GENERATOR</name> <init>= <expr><literal type="string">"markerContentGenerator"</literal></expr></init></decl>;</decl_stmt> <comment type="line">//$NON-NLS-1$</comment>
	<decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>TAG_HORIZONTAL_POSITION</name> <init>= <expr><literal type="string">"horizontalPosition"</literal></expr></init></decl>;</decl_stmt> <comment type="line">//$NON-NLS-1$</comment>
	<decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>TAG_VERTICAL_POSITION</name> <init>= <expr><literal type="string">"verticalPosition"</literal></expr></init></decl>;</decl_stmt> <comment type="line">//$NON-NLS-1$</comment>
	<decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>MARKER_FIELD</name> <init>= <expr><literal type="string">"MARKER_FIELD"</literal></expr></init></decl>;</decl_stmt> <comment type="line">//$NON-NLS-1$</comment>

	<decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>TAG_EXPANDED</name> <init>= <expr><literal type="string">"expanded"</literal></expr></init></decl>;</decl_stmt> <comment type="line">//$NON-NLS-1$</comment>

	<decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>TAG_CATEGORY</name> <init>= <expr><literal type="string">"category"</literal></expr></init></decl>;</decl_stmt> <comment type="line">//$NON-NLS-1$</comment>

	<decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>TAG_PART_NAME</name> <init>= <expr><literal type="string">"partName"</literal></expr></init></decl>;</decl_stmt> <comment type="line">//$NON-NLS-1$</comment>
	<static>static <block>{
		<expr_stmt><expr><call><name><name>Platform</name><operator>.</operator><name>getAdapterManager</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>registerAdapters</name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>IAdapterFactory</name></super><argument_list>()</argument_list> <block>{

			<comment type="block">/*
			 * (non-Javadoc)
			 * 
			 * @see org.eclipse.core.runtime.IAdapterFactory#getAdapter(java.lang.Object,
			 *      java.lang.Class)
			 */</comment>
			<function><specifier>public</specifier> <type><name>Object</name></type> <name>getAdapter</name><parameter_list>(<parameter><decl><type><name>Object</name></type> <name>adaptableObject</name></decl></parameter>, <parameter><decl><type><name>Class</name></type> <name>adapterType</name></decl></parameter>)</parameter_list> <block>{
				<if>if <condition>(<expr><name>adapterType</name> <operator>==</operator> <name><name>IMarker</name><operator>.</operator><name>class</name></name>
						<operator>&amp;&amp;</operator> <name>adaptableObject</name> <operator>instanceof</operator> <name>MarkerEntry</name></expr>)</condition><then>
					<block type="pseudo"><return>return <expr><operator>(</operator><operator>(</operator><name>MarkerEntry</name><operator>)</operator> <name>adaptableObject</name><operator>)</operator><operator>.</operator><call><name>getMarker</name><argument_list>()</argument_list></call></expr>;</return></block></then></if>

				<return>return <expr><literal type="null">null</literal></expr>;</return>
			}</block></function>

			<comment type="block">/*
			 * (non-Javadoc)
			 * 
			 * @see org.eclipse.core.runtime.IAdapterFactory#getAdapterList()
			 */</comment>
			<function><specifier>public</specifier> <type><name><name>Class</name><index>[]</index></name></type> <name>getAdapterList</name><parameter_list>()</parameter_list> <block>{
				<return>return <expr><operator>new</operator> <name><name>Class</name><index>[]</index></name> <block>{ <expr><name><name>IMarker</name><operator>.</operator><name>class</name></name></expr> }</block></expr>;</return>
			}</block></function>
		}</block></class></expr></argument>, <argument><expr><name><name>MarkerEntry</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></static>

	<comment type="block" format="javadoc">/**
	 * Return the next secondary id.
	 * 
	 * @return String
	 */</comment>
	<function><specifier>static</specifier> <type><name>String</name></type> <name>newSecondaryID</name><parameter_list>()</parameter_list> <block>{
		<return>return <expr><call><name><name>String</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><name>instanceCount</name></expr></argument>)</argument_list></call></expr>;</return>
	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Open the supplied marker in an editor in page
	 * 
	 * @param marker
	 * @param page
	 */</comment>
	<function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>openMarkerInEditor</name><parameter_list>(<parameter><decl><type><name>IMarker</name></type> <name>marker</name></decl></parameter>, <parameter><decl><type><name>IWorkbenchPage</name></type> <name>page</name></decl></parameter>)</parameter_list> <block>{
		<comment type="line">// optimization: if the active editor has the same input as</comment>
		<comment type="line">// the</comment>
		<comment type="line">// selected marker then</comment>
		<comment type="line">// RevealMarkerAction would have been run and we only need</comment>
		<comment type="line">// to</comment>
		<comment type="line">// activate the editor</comment>
		<decl_stmt><decl><type><name>IEditorPart</name></type> <name>editor</name> <init>= <expr><call><name><name>page</name><operator>.</operator><name>getActiveEditor</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<if>if <condition>(<expr><name>editor</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
			<decl_stmt><decl><type><name>IEditorInput</name></type> <name>input</name> <init>= <expr><call><name><name>editor</name><operator>.</operator><name>getEditorInput</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>IFile</name></type> <name>file</name> <init>= <expr><call><name><name>ResourceUtil</name><operator>.</operator><name>getFile</name></name><argument_list>(<argument><expr><name>input</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<if>if <condition>(<expr><name>file</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
				<if>if <condition>(<expr><call><name><name>marker</name><operator>.</operator><name>getResource</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
					<expr_stmt><expr><call><name><name>page</name><operator>.</operator><name>activate</name></name><argument_list>(<argument><expr><name>editor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then></if>
			}</block></then></if>
		}</block></then></if>

		<if>if <condition>(<expr><name>marker</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>marker</name><operator>.</operator><name>getResource</name></name><argument_list>()</argument_list></call> <operator>instanceof</operator> <name>IFile</name></expr>)</condition><then> <block>{
			<try>try <block>{
				<expr_stmt><expr><call><name><name>IDE</name><operator>.</operator><name>openEditor</name></name><argument_list>(<argument><expr><name>page</name></expr></argument>, <argument><expr><name>marker</name></expr></argument>, <argument><expr><call><name><name>OpenStrategy</name><operator>.</operator><name>activateOnOpen</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>PartInitException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{

				<comment type="line">// Check for a nested CoreException</comment>
				<decl_stmt><decl><type><name>IStatus</name></type> <name>status</name> <init>= <expr><call><name><name>e</name><operator>.</operator><name>getStatus</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
				<if>if <condition>(<expr><name>status</name> <operator>!=</operator> <literal type="null">null</literal>
						<operator>&amp;&amp;</operator> <call><name><name>status</name><operator>.</operator><name>getException</name></name><argument_list>()</argument_list></call> <operator>instanceof</operator> <name>CoreException</name></expr>)</condition><then> <block>{
					<expr_stmt><expr><name>status</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>CoreException</name><operator>)</operator> <call><name><name>status</name><operator>.</operator><name>getException</name></name><argument_list>()</argument_list></call><operator>)</operator>
							<operator>.</operator><call><name>getStatus</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				}</block></then></if>

				<if>if <condition>(<expr><name>status</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then>
					<block type="pseudo"><expr_stmt><expr><call><name><name>StatusManager</name><operator>.</operator><name>getManager</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>handle</name><argument_list>(
							<argument><expr><call><name><name>StatusUtil</name><operator>.</operator><name>newStatus</name></name><argument_list>(<argument><expr><name><name>IStatus</name><operator>.</operator><name>ERROR</name></name></expr></argument>, <argument><expr><call><name><name>e</name><operator>.</operator><name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>,
									<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>StatusManager</name><operator>.</operator><name>SHOW</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>

				<else>else
					<block type="pseudo"><expr_stmt><expr><call><name><name>StatusManager</name><operator>.</operator><name>getManager</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>handle</name><argument_list>(<argument><expr><name>status</name></expr></argument>,
							<argument><expr><name><name>StatusManager</name><operator>.</operator><name>SHOW</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>

			}</block></catch></try>
		}</block></then></if>
	}</block></function>

	<decl_stmt><decl><specifier>private</specifier> <type><name>CachedMarkerBuilder</name></type> <name>builder</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Collection</name></type> <name>categoriesToExpand</name></decl>;</decl_stmt>

	<decl_stmt><decl><specifier>private</specifier> <type><name>Clipboard</name></type> <name>clipboard</name></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>Collection</name></type> <name>preservedSelection</name> <init>= <expr><operator>new</operator> <call><name>ArrayList</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><specifier>private</specifier> <type><name>Job</name></type> <name>updateJob</name></decl>;</decl_stmt>

	<decl_stmt><decl><specifier>private</specifier> <type><name>MarkersTreeViewer</name></type> <name>viewer</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>private</specifier> <type><name>IPropertyChangeListener</name></type> <name>preferenceListener</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>private</specifier> <type><name>ISelectionListener</name></type> <name>pageSelectionListener</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>private</specifier> <type><name>IPartListener2</name></type> <name>partListener</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>private</specifier> <type><name>IMemento</name></type> <name>memento</name></decl>;</decl_stmt>

	<decl_stmt><decl><specifier>private</specifier> <type><name><name>String</name><index>[]</index></name></type> <name>defaultGeneratorIds</name> <init>= <expr><operator>new</operator> <name><name>String</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

	<comment type="block" format="javadoc">/**
	 * Return a new instance of the receiver.
	 * 
	 * @param contentGeneratorId
	 *            the id of the generator to load.
	 */</comment>
	<constructor><specifier>public</specifier> <name>ExtendedMarkersView</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>contentGeneratorId</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><call><name>super</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>instanceCount</name><operator>++</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name>defaultGeneratorIds</name> <operator>=</operator> <operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{ <expr><name>contentGeneratorId</name></expr> }</block></expr>;</expr_stmt>
		<expr_stmt><expr><name>preferenceListener</name> <operator>=</operator> <operator>new</operator> <class><super><name>IPropertyChangeListener</name></super><argument_list>()</argument_list> <block>{
			<comment type="block">/*
			 * (non-Javadoc)
			 * 
			 * @see org.eclipse.jface.util.IPropertyChangeListener#propertyChange(org.eclipse.jface.util.PropertyChangeEvent)
			 */</comment>
			<function><specifier>public</specifier> <type><name>void</name></type> <name>propertyChange</name><parameter_list>(<parameter><decl><type><name>PropertyChangeEvent</name></type> <name>event</name></decl></parameter>)</parameter_list> <block>{
				<decl_stmt><decl><type><name>String</name></type> <name>propertyName</name> <init>= <expr><call><name><name>event</name><operator>.</operator><name>getProperty</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
				<if>if <condition>(<expr><call><name><name>propertyName</name>
						<operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>IDEInternalPreferences</name><operator>.</operator><name>USE_MARKER_LIMITS</name></name></expr></argument>)</argument_list></call>
						<operator>||</operator> <call><name><name>propertyName</name>
								<operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>IDEInternalPreferences</name><operator>.</operator><name>MARKER_LIMITS_VALUE</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
					<expr_stmt><expr><call><name><name>viewer</name><operator>.</operator><name>refresh</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>updateTitle</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				}</block></then></if>
			}</block></function>
		}</block></class></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>IDEWorkbenchPlugin</name><operator>.</operator><name>getDefault</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getPreferenceStore</name><argument_list>()</argument_list></call>
				<operator>.</operator><call><name>addPropertyChangeListener</name><argument_list>(<argument><expr><name>preferenceListener</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></constructor>

	<comment type="block" format="javadoc">/**
	 * Add all concrete {@link MarkerItem} elements associated with the receiver
	 * to allMarkers.
	 * 
	 * @param markerItem
	 * @param allMarkers
	 */</comment>
	<function><specifier>private</specifier> <type><name>void</name></type> <name>addAllConcreteItems</name><parameter_list>(<parameter><decl><type><name>MarkerItem</name></type> <name>markerItem</name></decl></parameter>,
			<parameter><decl><type><name>Collection</name></type> <name>allMarkers</name></decl></parameter>)</parameter_list> <block>{
		<if>if <condition>(<expr><call><name><name>markerItem</name><operator>.</operator><name>isConcrete</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
			<expr_stmt><expr><call><name><name>allMarkers</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>markerItem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return;</return>
		}</block></then></if>

		<decl_stmt><decl><type><name><name>MarkerItem</name><index>[]</index></name></type> <name>children</name> <init>= <expr><call><name><name>markerItem</name><operator>.</operator><name>getChildren</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>children</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
			<expr_stmt><expr><call><name>addAllConcreteItems</name><argument_list>(<argument><expr><name><name>children</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>allMarkers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></for>

	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Add the category to the list of expanded categories.
	 * 
	 * @param category
	 */</comment>
	<function><type><name>void</name></type> <name>addExpandedCategory</name><parameter_list>(<parameter><decl><type><name>MarkerCategory</name></type> <name>category</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><call><name>getCategoriesToExpand</name><argument_list>()</argument_list></call><operator>.</operator><call><name>add</name><argument_list>(<argument><expr><call><name><name>category</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Add all of the markers in markerItem recursively.
	 * 
	 * @param markerItem
	 * @param allMarkers
	 *            {@link Collection} of {@link IMarker}
	 */</comment>
	<function><specifier>private</specifier> <type><name>void</name></type> <name>addMarkers</name><parameter_list>(<parameter><decl><type><name>MarkerItem</name></type> <name>markerItem</name></decl></parameter>, <parameter><decl><type><name>Collection</name></type> <name>allMarkers</name></decl></parameter>)</parameter_list> <block>{
		<if>if <condition>(<expr><call><name><name>markerItem</name><operator>.</operator><name>getMarker</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then>
			<block type="pseudo"><expr_stmt><expr><call><name><name>allMarkers</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>markerItem</name><operator>.</operator><name>getMarker</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
		<decl_stmt><decl><type><name><name>MarkerItem</name><index>[]</index></name></type> <name>children</name> <init>= <expr><call><name><name>markerItem</name><operator>.</operator><name>getChildren</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>children</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
			<expr_stmt><expr><call><name>addMarkers</name><argument_list>(<argument><expr><name><name>children</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>allMarkers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		}</block></for>

	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Create the columns for the receiver.
	 * 
	 * @param currentColumns
	 *            the columns to refresh
	 */</comment>
	<function><specifier>private</specifier> <type><name>void</name></type> <name>createColumns</name><parameter_list>(<parameter><decl><type><name><name>TreeColumn</name><index>[]</index></name></type> <name>currentColumns</name></decl></parameter>)</parameter_list> <block>{

		<decl_stmt><decl><type><name>Tree</name></type> <name>tree</name> <init>= <expr><call><name><name>viewer</name><operator>.</operator><name>getTree</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>TableLayout</name></type> <name>layout</name> <init>= <expr><operator>new</operator> <call><name>TableLayout</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

		<decl_stmt><decl><type><name><name>MarkerField</name><index>[]</index></name></type> <name>fields</name> <init>= <expr><call><name><name>builder</name><operator>.</operator><name>getVisibleFields</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

		<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>fields</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
			<decl_stmt><decl><type><name>MarkerField</name></type> <name>markerField</name> <init>= <expr><name><name>fields</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

			<comment type="line">// Take into account the expansion indicator</comment>
			<decl_stmt><decl><type><name>int</name></type> <name>columnWidth</name> <init>= <expr><call><name><name>markerField</name><operator>.</operator><name>getDefaultColumnWidth</name></name><argument_list>(<argument><expr><name>tree</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

			<if>if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
				<comment type="line">// Compute and store a font metric</comment>
				<decl_stmt><decl><type><name>GC</name></type> <name>gc</name> <init>= <expr><operator>new</operator> <call><name>GC</name><argument_list>(<argument><expr><name>tree</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><call><name><name>gc</name><operator>.</operator><name>setFont</name></name><argument_list>(<argument><expr><call><name><name>tree</name><operator>.</operator><name>getFont</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<decl_stmt><decl><type><name>FontMetrics</name></type> <name>fontMetrics</name> <init>= <expr><call><name><name>gc</name><operator>.</operator><name>getFontMetrics</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><call><name><name>gc</name><operator>.</operator><name>dispose</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>columnWidth</name> <operator>=</operator> <call><name><name>Math</name><operator>.</operator><name>max</name></name><argument_list>(<argument><expr><name>columnWidth</name></expr></argument>, <argument><expr><call><name><name>fontMetrics</name>
						<operator>.</operator><name>getAverageCharWidth</name></name><argument_list>()</argument_list></call> <operator>*</operator> <literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>

			<expr_stmt><expr><call><name><name>layout</name><operator>.</operator><name>addColumnData</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>ColumnPixelData</name><argument_list>(<argument><expr><name>columnWidth</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<decl_stmt><decl><type><name>TreeViewerColumn</name></type> <name>column</name></decl>;</decl_stmt>
			<if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <name><name>currentColumns</name><operator>.</operator><name>length</name></name></expr>)</condition><then>
				<block type="pseudo"><expr_stmt><expr><name>column</name> <operator>=</operator> <operator>new</operator> <call><name>TreeViewerColumn</name><argument_list>(<argument><expr><name>viewer</name></expr></argument>, <argument><expr><name><name>currentColumns</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
			<else>else <block>{
				<expr_stmt><expr><name>column</name> <operator>=</operator> <operator>new</operator> <call><name>TreeViewerColumn</name><argument_list>(<argument><expr><name>viewer</name></expr></argument>, <argument><expr><name><name>SWT</name><operator>.</operator><name>NONE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>column</name><operator>.</operator><name>getColumn</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>setResizable</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>column</name><operator>.</operator><name>getColumn</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>setMoveable</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>column</name><operator>.</operator><name>getColumn</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>addSelectionListener</name><argument_list>(<argument><expr><call><name>getHeaderListener</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></else></if>

			<expr_stmt><expr><call><name><name>column</name><operator>.</operator><name>getColumn</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>setData</name><argument_list>(<argument><expr><name>MARKER_FIELD</name></expr></argument>, <argument><expr><name>markerField</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<comment type="line">// Show the help in the first column</comment>
			<expr_stmt><expr><call><name><name>column</name><operator>.</operator><name>setLabelProvider</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>MarkerColumnLabelProvider</name><argument_list>(<argument><expr><name>markerField</name></expr></argument>,
					<argument><expr><name>i</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>column</name><operator>.</operator><name>getColumn</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>setText</name><argument_list>(<argument><expr><call><name><name>markerField</name><operator>.</operator><name>getColumnHeaderText</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>column</name><operator>.</operator><name>getColumn</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>setToolTipText</name><argument_list>(
					<argument><expr><call><name><name>markerField</name><operator>.</operator><name>getColumnTooltipText</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>column</name><operator>.</operator><name>getColumn</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>setImage</name><argument_list>(<argument><expr><call><name><name>markerField</name><operator>.</operator><name>getColumnHeaderImage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<decl_stmt><decl><type><name>EditingSupport</name></type> <name>support</name> <init>= <expr><call><name><name>markerField</name><operator>.</operator><name>getEditingSupport</name></name><argument_list>(<argument><expr><name>viewer</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<if>if <condition>(<expr><name>support</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then>
				<block type="pseudo"><expr_stmt><expr><call><name><name>column</name><operator>.</operator><name>setEditingSupport</name></name><argument_list>(<argument><expr><name>support</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>

			<if>if <condition>(<expr><call><name><name>builder</name><operator>.</operator><name>getPrimarySortField</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name>markerField</name></expr></argument>)</argument_list></call></expr>)</condition><then>
				<block type="pseudo"><expr_stmt><expr><call><name>updateDirectionIndicator</name><argument_list>(<argument><expr><call><name><name>column</name><operator>.</operator><name>getColumn</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>markerField</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>

		}</block></for>

		<comment type="line">// Remove extra columns</comment>
		<if>if <condition>(<expr><name><name>currentColumns</name><operator>.</operator><name>length</name></name> <operator>&gt;</operator> <name><name>fields</name><operator>.</operator><name>length</name></name></expr>)</condition><then> <block>{
			<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name><name>fields</name><operator>.</operator><name>length</name></name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>currentColumns</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
				<expr_stmt><expr><name><name>currentColumns</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>dispose</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

			}</block></for>
		}</block></then></if>

		<expr_stmt><expr><call><name><name>viewer</name><operator>.</operator><name>getTree</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>setLayout</name><argument_list>(<argument><expr><name>layout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>tree</name><operator>.</operator><name>setLinesVisible</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>tree</name><operator>.</operator><name>setHeaderVisible</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>tree</name><operator>.</operator><name>layout</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	}</block></function>

	<comment type="block">/*
	 * (non-Javadoc)
	 * 
	 * @see org.eclipse.ui.part.WorkbenchPart#createPartControl(org.eclipse.swt.widgets.Composite)
	 */</comment>
	<function><specifier>public</specifier> <type><name>void</name></type> <name>createPartControl</name><parameter_list>(<parameter><decl><type><name>Composite</name></type> <name>parent</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><call><name><name>parent</name><operator>.</operator><name>setLayout</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>FillLayout</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>viewer</name> <operator>=</operator> <operator>new</operator> <call><name>MarkersTreeViewer</name><argument_list>(<argument><expr><operator>new</operator> <call><name>Tree</name><argument_list>(<argument><expr><name>parent</name></expr></argument>, <argument><expr><name><name>SWT</name><operator>.</operator><name>H_SCROLL</name></name>
				<operator>|</operator> <name><name>SWT</name><operator>.</operator><name>V_SCROLL</name></name> <operator>|</operator> <name><name>SWT</name><operator>.</operator><name>MULTI</name></name> <operator>|</operator> <name><name>SWT</name><operator>.</operator><name>FULL_SELECTION</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>viewer</name><operator>.</operator><name>getTree</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>setLinesVisible</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>viewer</name><operator>.</operator><name>setUseHashlookup</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>createColumns</name><argument_list>(<argument><expr><operator>new</operator> <name><name>TreeColumn</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name><name>viewer</name><operator>.</operator><name>setContentProvider</name></name><argument_list>(<argument><expr><call><name>getContentProvider</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>getSite</name><argument_list>()</argument_list></call><operator>.</operator><call><name>setSelectionProvider</name><argument_list>(<argument><expr><name>viewer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name><name>viewer</name><operator>.</operator><name>setInput</name></name><argument_list>(<argument><expr><name>builder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if>if <condition>(<expr><name>memento</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
			<decl_stmt><decl><type><name>Scrollable</name></type> <name>scrollable</name> <init>= <expr><operator>(</operator><name>Scrollable</name><operator>)</operator> <call><name><name>viewer</name><operator>.</operator><name>getControl</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>ScrollBar</name></type> <name>bar</name> <init>= <expr><call><name><name>scrollable</name><operator>.</operator><name>getVerticalBar</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
			<if>if <condition>(<expr><name>bar</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
				<decl_stmt><decl><type><name>Integer</name></type> <name>position</name> <init>= <expr><call><name><name>memento</name><operator>.</operator><name>getInteger</name></name><argument_list>(<argument><expr><name>TAG_VERTICAL_POSITION</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<if>if <condition>(<expr><name>position</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then>
					<block type="pseudo"><expr_stmt><expr><call><name><name>bar</name><operator>.</operator><name>setSelection</name></name><argument_list>(<argument><expr><call><name><name>position</name><operator>.</operator><name>intValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
			}</block></then></if>
			<expr_stmt><expr><name>bar</name> <operator>=</operator> <call><name><name>scrollable</name><operator>.</operator><name>getHorizontalBar</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<if>if <condition>(<expr><name>bar</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
				<decl_stmt><decl><type><name>Integer</name></type> <name>position</name> <init>= <expr><call><name><name>memento</name><operator>.</operator><name>getInteger</name></name><argument_list>(<argument><expr><name>TAG_HORIZONTAL_POSITION</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<if>if <condition>(<expr><name>position</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then>
					<block type="pseudo"><expr_stmt><expr><call><name><name>bar</name><operator>.</operator><name>setSelection</name></name><argument_list>(<argument><expr><call><name><name>position</name><operator>.</operator><name>intValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
			}</block></then></if>
		}</block></then></if>

		<comment type="line">// Initialise any selection based filtering</comment>
		<expr_stmt><expr><name>pageSelectionListener</name> <operator>=</operator> <call><name>getPageSelectionListener</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>getSite</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getPage</name><argument_list>()</argument_list></call><operator>.</operator><call><name>addPostSelectionListener</name><argument_list>(<argument><expr><name>pageSelectionListener</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>partListener</name> <operator>=</operator> <call><name>getPartListener</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>getSite</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getPage</name><argument_list>()</argument_list></call><operator>.</operator><call><name>addPartListener</name><argument_list>(<argument><expr><name>partListener</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name><name>pageSelectionListener</name><operator>.</operator><name>selectionChanged</name></name><argument_list>(<argument><expr><call><name>getSite</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getPage</name><argument_list>()</argument_list></call>
				<operator>.</operator><call><name>getActivePart</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>getSite</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getPage</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getSelection</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name><name>viewer</name><operator>.</operator><name>addOpenListener</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>IOpenListener</name></super><argument_list>()</argument_list> <block>{
			<function><specifier>public</specifier> <type><name>void</name></type> <name>open</name><parameter_list>(<parameter><decl><type><name>OpenEvent</name></type> <name>event</name></decl></parameter>)</parameter_list> <block>{
				<expr_stmt><expr><call><name>openSelectedMarkers</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			}</block></function>

		}</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name><name>viewer</name><operator>.</operator><name>getTree</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>addTreeListener</name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>TreeAdapter</name></super><argument_list>()</argument_list> <block>{
			<comment type="block">/*
			 * (non-Javadoc)
			 * 
			 * @see org.eclipse.swt.events.TreeAdapter#treeCollapsed(org.eclipse.swt.events.TreeEvent)
			 */</comment>
			<function><specifier>public</specifier> <type><name>void</name></type> <name>treeCollapsed</name><parameter_list>(<parameter><decl><type><name>TreeEvent</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
				<expr_stmt><expr><call><name>removeExpandedCategory</name><argument_list>(<argument><expr><operator>(</operator><name>MarkerCategory</name><operator>)</operator> <call><name><name>e</name><operator>.</operator><name>item</name><operator>.</operator><name>getData</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></function>

			<comment type="block">/*
			 * (non-Javadoc)
			 * 
			 * @see org.eclipse.swt.events.TreeAdapter#treeExpanded(org.eclipse.swt.events.TreeEvent)
			 */</comment>
			<function><specifier>public</specifier> <type><name>void</name></type> <name>treeExpanded</name><parameter_list>(<parameter><decl><type><name>TreeEvent</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
				<expr_stmt><expr><call><name>addExpandedCategory</name><argument_list>(<argument><expr><operator>(</operator><name>MarkerCategory</name><operator>)</operator> <call><name><name>e</name><operator>.</operator><name>item</name><operator>.</operator><name>getData</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></function>
		}</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="line">// Set help on the view itself</comment>
		<expr_stmt><expr><call><name><name>viewer</name><operator>.</operator><name>getControl</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>addHelpListener</name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>HelpListener</name></super><argument_list>()</argument_list> <block>{
			<comment type="block">/*
			 * (non-Javadoc)
			 * 
			 * @see org.eclipse.swt.events.HelpListener#helpRequested(org.eclipse.swt.events.HelpEvent)
			 */</comment>
			<function><specifier>public</specifier> <type><name>void</name></type> <name>helpRequested</name><parameter_list>(<parameter><decl><type><name>HelpEvent</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
				<decl_stmt><decl><type><name>Object</name></type> <name>provider</name> <init>= <expr><call><name>getAdapter</name><argument_list>(<argument><expr><name><name>IContextProvider</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<if>if <condition>(<expr><name>provider</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then>
					<block type="pseudo"><return>return;</return></block></then></if>

				<decl_stmt><decl><type><name>IContext</name></type> <name>context</name> <init>= <expr><operator>(</operator><operator>(</operator><name>IContextProvider</name><operator>)</operator> <name>provider</name><operator>)</operator>
						<operator>.</operator><call><name>getContext</name><argument_list>(<argument><expr><call><name><name>viewer</name><operator>.</operator><name>getControl</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><call><name><name>PlatformUI</name><operator>.</operator><name>getWorkbench</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getHelpSystem</name><argument_list>()</argument_list></call><operator>.</operator><call><name>displayHelp</name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></function>

		}</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>registerContextMenu</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Return a part listener for the receiver.
	 * 
	 * @return IPartListener2
	 */</comment>
	<function><specifier>private</specifier> <type><name>IPartListener2</name></type> <name>getPartListener</name><parameter_list>()</parameter_list> <block>{
		<return>return <expr><operator>new</operator> <class><super><name>IPartListener2</name></super><argument_list>()</argument_list> <block>{

			<comment type="block">/*
			 * (non-Javadoc)
			 * 
			 * @see org.eclipse.ui.IPartListener2#partActivated(org.eclipse.ui.IWorkbenchPartReference)
			 */</comment>
			<function><specifier>public</specifier> <type><name>void</name></type> <name>partActivated</name><parameter_list>(<parameter><decl><type><name>IWorkbenchPartReference</name></type> <name>partRef</name></decl></parameter>)</parameter_list> <block>{
				<comment type="line">// Do nothing by default</comment>

			}</block></function>

			<comment type="block">/*
			 * (non-Javadoc)
			 * 
			 * @see org.eclipse.ui.IPartListener2#partBroughtToTop(org.eclipse.ui.IWorkbenchPartReference)
			 */</comment>
			<function><specifier>public</specifier> <type><name>void</name></type> <name>partBroughtToTop</name><parameter_list>(<parameter><decl><type><name>IWorkbenchPartReference</name></type> <name>partRef</name></decl></parameter>)</parameter_list> <block>{
				<comment type="line">// Do nothing by default</comment>

			}</block></function>

			<comment type="block">/*
			 * (non-Javadoc)
			 * 
			 * @see org.eclipse.ui.IPartListener2#partClosed(org.eclipse.ui.IWorkbenchPartReference)
			 */</comment>
			<function><specifier>public</specifier> <type><name>void</name></type> <name>partClosed</name><parameter_list>(<parameter><decl><type><name>IWorkbenchPartReference</name></type> <name>partRef</name></decl></parameter>)</parameter_list> <block>{
				<comment type="line">// Do nothing by default</comment>

			}</block></function>

			<comment type="block">/*
			 * (non-Javadoc)
			 * 
			 * @see org.eclipse.ui.IPartListener2#partDeactivated(org.eclipse.ui.IWorkbenchPartReference)
			 */</comment>
			<function><specifier>public</specifier> <type><name>void</name></type> <name>partDeactivated</name><parameter_list>(<parameter><decl><type><name>IWorkbenchPartReference</name></type> <name>partRef</name></decl></parameter>)</parameter_list> <block>{
				<comment type="line">// Do nothing by default</comment>

			}</block></function>

			<comment type="block">/*
			 * (non-Javadoc)
			 * 
			 * @see org.eclipse.ui.IPartListener2#partHidden(org.eclipse.ui.IWorkbenchPartReference)
			 */</comment>
			<function><specifier>public</specifier> <type><name>void</name></type> <name>partHidden</name><parameter_list>(<parameter><decl><type><name>IWorkbenchPartReference</name></type> <name>partRef</name></decl></parameter>)</parameter_list> <block>{
				<comment type="line">// Do nothing by default</comment>

			}</block></function>

			<comment type="block">/*
			 * (non-Javadoc)
			 * 
			 * @see org.eclipse.ui.IPartListener2#partInputChanged(org.eclipse.ui.IWorkbenchPartReference)
			 */</comment>
			<function><specifier>public</specifier> <type><name>void</name></type> <name>partInputChanged</name><parameter_list>(<parameter><decl><type><name>IWorkbenchPartReference</name></type> <name>partRef</name></decl></parameter>)</parameter_list> <block>{
				<comment type="line">// Do nothing by default</comment>

			}</block></function>

			<comment type="block">/*
			 * (non-Javadoc)
			 * 
			 * @see org.eclipse.ui.IPartListener2#partOpened(org.eclipse.ui.IWorkbenchPartReference)
			 */</comment>
			<function><specifier>public</specifier> <type><name>void</name></type> <name>partOpened</name><parameter_list>(<parameter><decl><type><name>IWorkbenchPartReference</name></type> <name>partRef</name></decl></parameter>)</parameter_list> <block>{
				<comment type="line">// Do nothing by default</comment>

			}</block></function>

			<comment type="block">/*
			 * (non-Javadoc)
			 * 
			 * @see org.eclipse.ui.IPartListener2#partVisible(org.eclipse.ui.IWorkbenchPartReference)
			 */</comment>
			<function><specifier>public</specifier> <type><name>void</name></type> <name>partVisible</name><parameter_list>(<parameter><decl><type><name>IWorkbenchPartReference</name></type> <name>partRef</name></decl></parameter>)</parameter_list> <block>{
				<if>if <condition>(<expr><call><name><name>partRef</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(
						<argument><expr><call><name><name>ExtendedMarkersView</name><operator>.</operator><name>this</name><operator>.</operator><name>getSite</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getId</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
					<expr_stmt><expr><call><name><name>pageSelectionListener</name><operator>.</operator><name>selectionChanged</name></name><argument_list>(<argument><expr><call><name>getSite</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getPage</name><argument_list>()</argument_list></call>
							<operator>.</operator><call><name>getActivePart</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>getSite</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getPage</name><argument_list>()</argument_list></call>
							<operator>.</operator><call><name>getSelection</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then></if>

			}</block></function>

		}</block></class></expr>;</return>
	}</block></function>

	<function><specifier>public</specifier> <type><name>void</name></type> <name>dispose</name><parameter_list>()</parameter_list> <block>{
		<expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>dispose</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>updateJob</name><operator>.</operator><name>cancel</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>instanceCount</name><operator>--</operator></expr>;</expr_stmt>
		<if>if <condition>(<expr><name>clipboard</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then>
			<block type="pseudo"><expr_stmt><expr><call><name><name>clipboard</name><operator>.</operator><name>dispose</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></then></if>
		<expr_stmt><expr><call><name><name>IDEWorkbenchPlugin</name><operator>.</operator><name>getDefault</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getPreferenceStore</name><argument_list>()</argument_list></call>
				<operator>.</operator><call><name>removePropertyChangeListener</name><argument_list>(<argument><expr><name>preferenceListener</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>getSite</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getPage</name><argument_list>()</argument_list></call><operator>.</operator><call><name>removePostSelectionListener</name><argument_list>(<argument><expr><name>pageSelectionListener</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>getSite</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getPage</name><argument_list>()</argument_list></call><operator>.</operator><call><name>removePartListener</name><argument_list>(<argument><expr><name>partListener</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Return all of the marker items in the receiver that are concrete.
	 * 
	 * @return MarkerItem[]
	 */</comment>
	<function><type><name><name>MarkerItem</name><index>[]</index></name></type> <name>getAllConcreteItems</name><parameter_list>()</parameter_list> <block>{

		<decl_stmt><decl><type><name><name>MarkerItem</name><index>[]</index></name></type> <name>elements</name> <init>= <expr><call><name><name>builder</name><operator>.</operator><name>getElements</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>Collection</name></type> <name>allMarkers</name> <init>= <expr><operator>new</operator> <call><name>ArrayList</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>elements</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
			<expr_stmt><expr><call><name>addAllConcreteItems</name><argument_list>(<argument><expr><name><name>elements</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>allMarkers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		}</block></for>
		<decl_stmt><decl><type><name><name>MarkerItem</name><index>[]</index></name></type> <name>markers</name> <init>= <expr><operator>new</operator> <name><name>MarkerItem</name><index>[<expr><call><name><name>allMarkers</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>allMarkers</name><operator>.</operator><name>toArray</name></name><argument_list>(<argument><expr><name>markers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>markers</name></expr>;</return>
	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Get all of the filters for the receiver.
	 * 
	 * @return Collection of {@link MarkerFieldFilterGroup}
	 */</comment>
	<function><type><name>Collection</name></type> <name>getAllFilters</name><parameter_list>()</parameter_list> <block>{
		<return>return <expr><call><name><name>builder</name><operator>.</operator><name>getAllFilters</name></name><argument_list>()</argument_list></call></expr>;</return>
	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Return all of the markers in the receiver.
	 * 
	 * @return IMarker[]
	 */</comment>
	<function><type><name><name>IMarker</name><index>[]</index></name></type> <name>getAllMarkers</name><parameter_list>()</parameter_list> <block>{

		<decl_stmt><decl><type><name><name>MarkerItem</name><index>[]</index></name></type> <name>elements</name> <init>= <expr><call><name><name>builder</name><operator>.</operator><name>getElements</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>Collection</name></type> <name>allMarkers</name> <init>= <expr><operator>new</operator> <call><name>ArrayList</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>elements</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
			<expr_stmt><expr><call><name>addMarkers</name><argument_list>(<argument><expr><name><name>elements</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>allMarkers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		}</block></for>
		<decl_stmt><decl><type><name><name>IMarker</name><index>[]</index></name></type> <name>markers</name> <init>= <expr><operator>new</operator> <name><name>IMarker</name><index>[<expr><call><name><name>allMarkers</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>allMarkers</name><operator>.</operator><name>toArray</name></name><argument_list>(<argument><expr><name>markers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>markers</name></expr>;</return>

	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Return the group used for categorisation.
	 * 
	 * @return MarkerGroup
	 */</comment>
	<function><type><name>MarkerGroup</name></type> <name>getCategoryGroup</name><parameter_list>()</parameter_list> <block>{
		<return>return <expr><call><name><name>builder</name><operator>.</operator><name>getCategoryGroup</name></name><argument_list>()</argument_list></call></expr>;</return>
	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Return the clipboard for the receiver.
	 * 
	 * @return Clipboard
	 */</comment>
	<function><type><name>Clipboard</name></type> <name>getClipboard</name><parameter_list>()</parameter_list> <block>{
		<if>if <condition>(<expr><name>clipboard</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then>
			<block type="pseudo"><expr_stmt><expr><name>clipboard</name> <operator>=</operator> <operator>new</operator> <call><name>Clipboard</name><argument_list>(<argument><expr><call><name><name>viewer</name><operator>.</operator><name>getControl</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getDisplay</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
		<return>return <expr><name>clipboard</name></expr>;</return>
	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Return the content provider for the receiver.
	 * 
	 * @return ITreeContentProvider
	 * 
	 */</comment>
	<function><specifier>private</specifier> <type><name>ITreeContentProvider</name></type> <name>getContentProvider</name><parameter_list>()</parameter_list> <block>{
		<return>return <expr><operator>new</operator> <class><super><name>ITreeContentProvider</name></super><argument_list>()</argument_list> <block>{

			<comment type="block">/*
			 * (non-Javadoc)
			 * 
			 * @see org.eclipse.jface.viewers.IContentProvider#dispose()
			 */</comment>
			<function><specifier>public</specifier> <type><name>void</name></type> <name>dispose</name><parameter_list>()</parameter_list> <block>{

			}</block></function>

			<comment type="block">/*
			 * (non-Javadoc)
			 * 
			 * @see org.eclipse.jface.viewers.ILazyTreeContentProvider#updateChildCount(java.lang.Object,
			 *      int)
			 */</comment>
			<comment type="line">// public void updateChildCount(Object element, int</comment>
			<comment type="line">// currentChildCount) {</comment>
			<comment type="line">//</comment>
			<comment type="line">// int length;</comment>
			<comment type="line">// if (element instanceof MarkerItem)</comment>
			<comment type="line">// length = ((MarkerItem) element).getChildren().length;</comment>
			<comment type="line">// else</comment>
			<comment type="line">// // If it is not a MarkerItem it is the root</comment>
			<comment type="line">// length = ((CachedMarkerBuilder) element).getElements().length;</comment>
			<comment type="line">//</comment>
			<comment type="line">// int markerLimit = MarkerSupportInternalUtilities</comment>
			<comment type="line">// .getMarkerLimit();</comment>
			<comment type="line">// length = markerLimit &gt; 0 ? Math.min(length, markerLimit)</comment>
			<comment type="line">// : length;</comment>
			<comment type="line">// if (currentChildCount == length)</comment>
			<comment type="line">// return;</comment>
			<comment type="line">// viewer.setChildCount(element, length);</comment>
			<comment type="line">//</comment>
			<comment type="line">// }</comment>
			<comment type="block">/*
			 * (non-Javadoc)
			 * 
			 * @see org.eclipse.jface.viewers.ILazyTreeContentProvider#updateElement(java.lang.Object,
			 *      int)
			 */</comment>
			<comment type="line">// public void updateElement(Object parent, int index) {</comment>
			<comment type="line">// MarkerItem newItem;</comment>
			<comment type="line">//</comment>
			<comment type="line">// if (parent instanceof MarkerItem)</comment>
			<comment type="line">// newItem = ((MarkerItem) parent).getChildren()[index];</comment>
			<comment type="line">// else</comment>
			<comment type="line">// newItem = ((CachedMarkerBuilder) parent).getElements()[index];</comment>
			<comment type="line">//</comment>
			<comment type="line">// viewer.replace(parent, index, newItem);</comment>
			<comment type="line">// updateChildCount(newItem, -1);</comment>
			<comment type="line">//</comment>
			<comment type="line">// if (!newItem.isConcrete()</comment>
			<comment type="line">// &amp;&amp; categoriesToExpand</comment>
			<comment type="line">// .contains(((MarkerCategory) newItem).getName())) {</comment>
			<comment type="line">// viewer.expandToLevel(newItem, 1);</comment>
			<comment type="line">// categoriesToExpand.remove(newItem);</comment>
			<comment type="line">// }</comment>
			<comment type="line">//</comment>
			<comment type="line">// }</comment>
			<comment type="block">/*
			 * (non-Javadoc)
			 * 
			 * @see org.eclipse.jface.viewers.ITreeContentProvider#getChildren(java.lang.Object)
			 */</comment>
			<function><specifier>public</specifier> <type><name><name>Object</name><index>[]</index></name></type> <name>getChildren</name><parameter_list>(<parameter><decl><type><name>Object</name></type> <name>parentElement</name></decl></parameter>)</parameter_list> <block>{
				<decl_stmt><decl><type><name><name>MarkerItem</name><index>[]</index></name></type> <name>children</name> <init>= <expr><operator>(</operator><operator>(</operator><name>MarkerItem</name><operator>)</operator> <name>parentElement</name><operator>)</operator>
						<operator>.</operator><call><name>getChildren</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

				<return>return <expr><call><name>getLimitedChildren</name><argument_list>(<argument><expr><name>children</name></expr></argument>)</argument_list></call></expr>;</return>
			}</block></function>

			<comment type="block" format="javadoc">/**
			 * Get the children limited by the marker limits.
			 * 
			 * @param children
			 * @return Object[]
			 */</comment>
			<function><specifier>private</specifier> <type><name><name>Object</name><index>[]</index></name></type> <name>getLimitedChildren</name><parameter_list>(<parameter><decl><type><name><name>Object</name><index>[]</index></name></type> <name>children</name></decl></parameter>)</parameter_list> <block>{
				<decl_stmt><decl><type><name>int</name></type> <name>newLength</name> <init>= <expr><call><name><name>MarkerSupportInternalUtilities</name><operator>.</operator><name>getMarkerLimit</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
				<if>if <condition>(<expr><name>newLength</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>newLength</name> <operator>&lt;</operator> <name><name>children</name><operator>.</operator><name>length</name></name></expr>)</condition><then> <block>{
					<decl_stmt><decl><type><name><name>Object</name><index>[]</index></name></type> <name>newChildren</name> <init>= <expr><operator>new</operator> <name><name>Object</name><index>[<expr><name>newLength</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
					<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>arraycopy</name></name><argument_list>(<argument><expr><name>children</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>newChildren</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>newLength</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<return>return <expr><name>newChildren</name></expr>;</return>
				}</block></then></if>
				<return>return <expr><name>children</name></expr>;</return>
			}</block></function>

			<comment type="block">/*
			 * (non-Javadoc)
			 * 
			 * @see org.eclipse.jface.viewers.IStructuredContentProvider#getElements(java.lang.Object)
			 */</comment>
			<function><specifier>public</specifier> <type><name><name>Object</name><index>[]</index></name></type> <name>getElements</name><parameter_list>(<parameter><decl><type><name>Object</name></type> <name>inputElement</name></decl></parameter>)</parameter_list> <block>{

				<return>return <expr><call><name>getLimitedChildren</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>CachedMarkerBuilder</name><operator>)</operator> <name>inputElement</name><operator>)</operator>
						<operator>.</operator><call><name>getElements</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
			}</block></function>

			<comment type="block">/*
			 * (non-Javadoc)
			 * 
			 * @see org.eclipse.jface.viewers.ILazyTreeContentProvider#getParent(java.lang.Object)
			 */</comment>
			<function><specifier>public</specifier> <type><name>Object</name></type> <name>getParent</name><parameter_list>(<parameter><decl><type><name>Object</name></type> <name>element</name></decl></parameter>)</parameter_list> <block>{
				<decl_stmt><decl><type><name>Object</name></type> <name>parent</name> <init>= <expr><operator>(</operator><operator>(</operator><name>MarkerItem</name><operator>)</operator> <name>element</name><operator>)</operator><operator>.</operator><call><name>getParent</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
				<if>if <condition>(<expr><name>parent</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then>
					<block type="pseudo"><return>return <expr><name>builder</name></expr>;</return></block></then></if>
				<return>return <expr><name>parent</name></expr>;</return>
			}</block></function>

			<comment type="block">/*
			 * (non-Javadoc)
			 * 
			 * @see org.eclipse.jface.viewers.ITreeContentProvider#hasChildren(java.lang.Object)
			 */</comment>
			<function><specifier>public</specifier> <type><name>boolean</name></type> <name>hasChildren</name><parameter_list>(<parameter><decl><type><name>Object</name></type> <name>element</name></decl></parameter>)</parameter_list> <block>{
				<return>return <expr><operator>(</operator><operator>(</operator><name>MarkerItem</name><operator>)</operator> <name>element</name><operator>)</operator><operator>.</operator><call><name>getChildren</name><argument_list>()</argument_list></call><operator>.</operator><name>length</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</return>
			}</block></function>

			<comment type="block">/*
			 * (non-Javadoc)
			 * 
			 * @see org.eclipse.jface.viewers.IContentProvider#inputChanged(org.eclipse.jface.viewers.Viewer,
			 *      java.lang.Object, java.lang.Object)
			 */</comment>
			<function><specifier>public</specifier> <type><name>void</name></type> <name>inputChanged</name><parameter_list>(<parameter><decl><type><name>Viewer</name></type> <name>viewer</name></decl></parameter>, <parameter><decl><type><name>Object</name></type> <name>oldInput</name></decl></parameter>,
					<parameter><decl><type><name>Object</name></type> <name>newInput</name></decl></parameter>)</parameter_list> <block>{

			}</block></function>
		}</block></class></expr>;</return>
	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Return the listener that updates sort values on selection.
	 * 
	 * @return SelectionListener
	 */</comment>
	<function><specifier>private</specifier> <type><name>SelectionListener</name></type> <name>getHeaderListener</name><parameter_list>()</parameter_list> <block>{

		<return>return <expr><operator>new</operator> <class><super><name>SelectionAdapter</name></super><argument_list>()</argument_list> <block>{
			<comment type="block" format="javadoc">/**
			 * Handles the case of user selecting the header area.
			 */</comment>
			<function><specifier>public</specifier> <type><name>void</name></type> <name>widgetSelected</name><parameter_list>(<parameter><decl><type><name>SelectionEvent</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{

				<decl_stmt><decl><type><specifier>final</specifier> <name>TreeColumn</name></type> <name>column</name> <init>= <expr><operator>(</operator><name>TreeColumn</name><operator>)</operator> <name><name>e</name><operator>.</operator><name>widget</name></name></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><specifier>final</specifier> <name>MarkerField</name></type> <name>field</name> <init>= <expr><operator>(</operator><name>MarkerField</name><operator>)</operator> <call><name><name>column</name>
						<operator>.</operator><name>getData</name></name><argument_list>(<argument><expr><name>MARKER_FIELD</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><call><name>setPrimarySortField</name><argument_list>(<argument><expr><name>field</name></expr></argument>, <argument><expr><name>column</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></function>

		}</block></class></expr>;</return>

	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Return the selection listener for the page selection change.
	 * 
	 * @return ISelectionListener
	 */</comment>
	<function><specifier>private</specifier> <type><name>ISelectionListener</name></type> <name>getPageSelectionListener</name><parameter_list>()</parameter_list> <block>{
		<return>return <expr><operator>new</operator> <class><super><name>ISelectionListener</name></super><argument_list>()</argument_list> <block>{
			<comment type="block" format="javadoc">/**
			 * Get an ITaskListResourceAdapter for use by the default/
			 * 
			 * @return ITaskListResourceAdapter
			 */</comment>
			<function><specifier>private</specifier> <type><name>ITaskListResourceAdapter</name></type> <name>getDefaultTaskListAdapter</name><parameter_list>()</parameter_list> <block>{
				<return>return <expr><operator>new</operator> <class><super><name>ITaskListResourceAdapter</name></super><argument_list>()</argument_list> <block>{

					<comment type="block">/*
					 * (non-Javadoc)
					 * 
					 * @see org.eclipse.ui.views.tasklist.ITaskListResourceAdapter#getAffectedResource(org.eclipse.core.runtime.IAdaptable)
					 */</comment>
					<function><specifier>public</specifier> <type><name>IResource</name></type> <name>getAffectedResource</name><parameter_list>(<parameter><decl><type><name>IAdaptable</name></type> <name>adaptable</name></decl></parameter>)</parameter_list> <block>{
						<decl_stmt><decl><type><name>Object</name></type> <name>resource</name> <init>= <expr><call><name><name>adaptable</name><operator>.</operator><name>getAdapter</name></name><argument_list>(<argument><expr><name><name>IResource</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
						<if>if <condition>(<expr><name>resource</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then>
							<block type="pseudo"><expr_stmt><expr><name>resource</name> <operator>=</operator> <call><name><name>adaptable</name><operator>.</operator><name>getAdapter</name></name><argument_list>(<argument><expr><name><name>IFile</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
						<if>if <condition>(<expr><name>resource</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then>
							<block type="pseudo"><return>return <expr><literal type="null">null</literal></expr>;</return></block></then></if>
						<return>return <expr><operator>(</operator><name>IResource</name><operator>)</operator> <name>resource</name></expr>;</return>

					}</block></function>

				}</block></class></expr>;</return>
			}</block></function>

			<comment type="block">/*
			 * (non-Javadoc)
			 * 
			 * @see org.eclipse.ui.ISelectionListener#selectionChanged(org.eclipse.ui.IWorkbenchPart,
			 *      org.eclipse.jface.viewers.ISelection)
			 */</comment>
			<function><specifier>public</specifier> <type><name>void</name></type> <name>selectionChanged</name><parameter_list>(<parameter><decl><type><name>IWorkbenchPart</name></type> <name>part</name></decl></parameter>,
					<parameter><decl><type><name>ISelection</name></type> <name>selection</name></decl></parameter>)</parameter_list> <block>{

				<comment type="line">// Do not respond to our own selections or if we are not</comment>
				<comment type="line">// visible</comment>
				<if>if <condition>(<expr><name>part</name> <operator>==</operator> <name><name>ExtendedMarkersView</name><operator>.</operator><name>this</name></name>
						<operator>||</operator> <operator>!</operator><operator>(</operator><call><name>getSite</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getPage</name><argument_list>()</argument_list></call><operator>.</operator><call><name>isPartVisible</name><argument_list>(<argument><expr><name>part</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><then>
					<block type="pseudo"><return>return;</return></block></then></if>

				<decl_stmt><decl><type><name>List</name></type> <name>selectedElements</name> <init>= <expr><operator>new</operator> <call><name>ArrayList</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
				<if>if <condition>(<expr><name>part</name> <operator>instanceof</operator> <name>IEditorPart</name></expr>)</condition><then> <block>{
					<decl_stmt><decl><type><name>IEditorPart</name></type> <name>editor</name> <init>= <expr><operator>(</operator><name>IEditorPart</name><operator>)</operator> <name>part</name></expr></init></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>IFile</name></type> <name>file</name> <init>= <expr><call><name><name>ResourceUtil</name><operator>.</operator><name>getFile</name></name><argument_list>(<argument><expr><call><name><name>editor</name><operator>.</operator><name>getEditorInput</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<if>if <condition>(<expr><name>file</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
						<decl_stmt><decl><type><name>IEditorInput</name></type> <name>editorInput</name> <init>= <expr><call><name><name>editor</name><operator>.</operator><name>getEditorInput</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
						<if>if <condition>(<expr><name>editorInput</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
							<decl_stmt><decl><type><name>Object</name></type> <name>mapping</name> <init>= <expr><call><name><name>editorInput</name>
									<operator>.</operator><name>getAdapter</name></name><argument_list>(<argument><expr><name><name>ResourceMapping</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
							<if>if <condition>(<expr><name>mapping</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
								<expr_stmt><expr><call><name><name>selectedElements</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>mapping</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							}</block></then></if>
						}</block></then></if>
					}</block></then> <else>else <block>{
						<expr_stmt><expr><call><name><name>selectedElements</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></else></if>
				}</block></then> <else>else <block>{
					<if>if <condition>(<expr><name>selection</name> <operator>instanceof</operator> <name>IStructuredSelection</name></expr>)</condition><then> <block>{
						<for>for <control>(<init><decl><type><name>Iterator</name></type> <name>iterator</name> <init>= <expr><operator>(</operator><operator>(</operator><name>IStructuredSelection</name><operator>)</operator> <name>selection</name><operator>)</operator>
								<operator>.</operator><call><name>iterator</name><argument_list>()</argument_list></call></expr></init></decl>;</init> <condition><expr><call><name><name>iterator</name><operator>.</operator><name>hasNext</name></name><argument_list>()</argument_list></call></expr>;</condition><incr/>)</control> <block>{
							<decl_stmt><decl><type><name>Object</name></type> <name>object</name> <init>= <expr><call><name><name>iterator</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
							<if>if <condition>(<expr><name>object</name> <operator>instanceof</operator> <name>IAdaptable</name></expr>)</condition><then> <block>{
								<decl_stmt><decl><type><name>ITaskListResourceAdapter</name></type> <name>taskListResourceAdapter</name></decl>;</decl_stmt>
								<decl_stmt><decl><type><name>Object</name></type> <name>adapter</name> <init>= <expr><operator>(</operator><operator>(</operator><name>IAdaptable</name><operator>)</operator> <name>object</name><operator>)</operator>
										<operator>.</operator><call><name>getAdapter</name><argument_list>(<argument><expr><name><name>ITaskListResourceAdapter</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
								<if>if <condition>(<expr><name>adapter</name> <operator>!=</operator> <literal type="null">null</literal>
										<operator>&amp;&amp;</operator> <name>adapter</name> <operator>instanceof</operator> <name>ITaskListResourceAdapter</name></expr>)</condition><then> <block>{
									<expr_stmt><expr><name>taskListResourceAdapter</name> <operator>=</operator> <operator>(</operator><name>ITaskListResourceAdapter</name><operator>)</operator> <name>adapter</name></expr>;</expr_stmt>
								}</block></then> <else>else <block>{
									<expr_stmt><expr><name>taskListResourceAdapter</name> <operator>=</operator> <call><name>getDefaultTaskListAdapter</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
								}</block></else></if>

								<decl_stmt><decl><type><name>IResource</name></type> <name>resource</name> <init>= <expr><call><name><name>taskListResourceAdapter</name>
										<operator>.</operator><name>getAffectedResource</name></name><argument_list>(<argument><expr><operator>(</operator><name>IAdaptable</name><operator>)</operator> <name>object</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
								<if>if <condition>(<expr><name>resource</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
									<decl_stmt><decl><type><name>Object</name></type> <name>mapping</name> <init>= <expr><operator>(</operator><operator>(</operator><name>IAdaptable</name><operator>)</operator> <name>object</name><operator>)</operator>
											<operator>.</operator><call><name>getAdapter</name><argument_list>(<argument><expr><name><name>ResourceMapping</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
									<if>if <condition>(<expr><name>mapping</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
										<expr_stmt><expr><call><name><name>selectedElements</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>mapping</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
									}</block></then></if>
								}</block></then> <else>else <block>{
									<expr_stmt><expr><call><name><name>selectedElements</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>resource</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
								}</block></else></if>
							}</block></then></if>
						}</block></for>
					}</block></then></if>
				}</block></else></if>
				<expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>updateForNewSelection</name></name><argument_list>(<argument><expr><call><name><name>selectedElements</name><operator>.</operator><name>toArray</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></function>

		}</block></class></expr>;</return>
	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Return all of the markers in the current selection
	 * 
	 * @return Array of {@link IMarker}
	 */</comment>
	<function><specifier>public</specifier> <type><name><name>IMarker</name><index>[]</index></name></type> <name>getSelectedMarkers</name><parameter_list>()</parameter_list> <block>{
		<decl_stmt><decl><type><name>ISelection</name></type> <name>selection</name> <init>= <expr><call><name><name>viewer</name><operator>.</operator><name>getSelection</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<if>if <condition>(<expr><name>selection</name> <operator>instanceof</operator> <name>IStructuredSelection</name></expr>)</condition><then> <block>{
			<decl_stmt><decl><type><name>IStructuredSelection</name></type> <name>structured</name> <init>= <expr><operator>(</operator><name>IStructuredSelection</name><operator>)</operator> <name>selection</name></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>Iterator</name></type> <name>elements</name> <init>= <expr><call><name><name>structured</name><operator>.</operator><name>iterator</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>Collection</name></type> <name>result</name> <init>= <expr><operator>new</operator> <call><name>ArrayList</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
			<while>while <condition>(<expr><call><name><name>elements</name><operator>.</operator><name>hasNext</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
				<decl_stmt><decl><type><name>MarkerItem</name></type> <name>next</name> <init>= <expr><operator>(</operator><name>MarkerItem</name><operator>)</operator> <call><name><name>elements</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
				<if>if <condition>(<expr><call><name><name>next</name><operator>.</operator><name>isConcrete</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
					<block type="pseudo"><expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>MarkerEntry</name><operator>)</operator> <name>next</name><operator>)</operator><operator>.</operator><call><name>getMarker</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
			}</block></while>
			<if>if <condition>(<expr><call><name><name>result</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
				<block type="pseudo"><return>return <expr><name><name>MarkerSupportInternalUtilities</name><operator>.</operator><name>EMPTY_MARKER_ARRAY</name></name></expr>;</return></block></then></if>
			<decl_stmt><decl><type><name><name>IMarker</name><index>[]</index></name></type> <name>markers</name> <init>= <expr><operator>new</operator> <name><name>IMarker</name><index>[<expr><call><name><name>result</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>]</index></name></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>toArray</name></name><argument_list>(<argument><expr><name>markers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><name>markers</name></expr>;</return>
		}</block></then></if>
		<return>return <expr><name><name>MarkerSupportInternalUtilities</name><operator>.</operator><name>EMPTY_MARKER_ARRAY</name></name></expr>;</return>

	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Return the sort direction.
	 * 
	 * @return boolean
	 */</comment>
	<function><specifier>public</specifier> <type><name>boolean</name></type> <name>getSortAscending</name><parameter_list>()</parameter_list> <block>{
		<return>return <expr><call><name><name>viewer</name><operator>.</operator><name>getTree</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getSortDirection</name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>SWT</name><operator>.</operator><name>TOP</name></name></expr>;</return>
	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Return a job for updating the receiver.
	 * 
	 * @return Job
	 */</comment>
	<function><specifier>private</specifier> <type><name>Job</name></type> <name>getUpdateJob</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>CachedMarkerBuilder</name></type> <name>builder</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><name>updateJob</name> <operator>=</operator> <operator>new</operator> <class><super><name>WorkbenchJob</name></super><argument_list>(<argument><expr><name><name>MarkerMessages</name><operator>.</operator><name>MarkerView_queueing_updates</name></name></expr></argument>)</argument_list> <block>{

			<comment type="block">/*
			 * (non-Javadoc)
			 * 
			 * @see org.eclipse.core.runtime.jobs.Job#belongsTo(java.lang.Object)
			 */</comment>
			<function><specifier>public</specifier> <type><name>boolean</name></type> <name>belongsTo</name><parameter_list>(<parameter><decl><type><name>Object</name></type> <name>family</name></decl></parameter>)</parameter_list> <block>{
				<return>return <expr><name>family</name> <operator>==</operator> <name><name>MarkerContentGenerator</name><operator>.</operator><name>CACHE_UPDATE_FAMILY</name></name></expr>;</return>
			}</block></function>

			<comment type="block" format="javadoc">/**
			 * Return the viewer that is being updated.
			 * 
			 * @return TreeViewer
			 */</comment>
			<function><specifier>private</specifier> <type><name>TreeViewer</name></type> <name>getViewer</name><parameter_list>()</parameter_list> <block>{

				<return>return <expr><name>viewer</name></expr>;</return>
			}</block></function>

			<comment type="block">/*
			 * (non-Javadoc)
			 * 
			 * @see org.eclipse.ui.progress.UIJob#runInUIThread(org.eclipse.core.runtime.IProgressMonitor)
			 */</comment>
			<function><specifier>public</specifier> <type><name>IStatus</name></type> <name>runInUIThread</name><parameter_list>(<parameter><decl><type><name>IProgressMonitor</name></type> <name>monitor</name></decl></parameter>)</parameter_list> <block>{

				<if>if <condition>(<expr><call><name><name>viewer</name><operator>.</operator><name>getControl</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>isDisposed</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
					<return>return <expr><name><name>Status</name><operator>.</operator><name>CANCEL_STATUS</name></name></expr>;</return>
				}</block></then></if>

				<if>if <condition>(<expr><call><name><name>monitor</name><operator>.</operator><name>isCanceled</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
					<block type="pseudo"><return>return <expr><name><name>Status</name><operator>.</operator><name>CANCEL_STATUS</name></name></expr>;</return></block></then></if>

				<comment type="line">// If there is only one category and the user has no saved state</comment>
				<comment type="line">// show it</comment>
				<if>if <condition>(<expr><call><name><name>builder</name><operator>.</operator><name>isShowingHierarchy</name></name><argument_list>()</argument_list></call>
						<operator>&amp;&amp;</operator> <call><name>getCategoriesToExpand</name><argument_list>()</argument_list></call><operator>.</operator><call><name>isEmpty</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
					<decl_stmt><decl><type><name><name>MarkerCategory</name><index>[]</index></name></type> <name>categories</name> <init>= <expr><call><name><name>builder</name><operator>.</operator><name>getCategories</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
					<if>if <condition>(<expr><name>categories</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <name><name>categories</name><operator>.</operator><name>length</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then>
						<block type="pseudo"><expr_stmt><expr><call><name>getCategoriesToExpand</name><argument_list>()</argument_list></call><operator>.</operator><call><name>add</name><argument_list>(<argument><expr><name><name>categories</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><call><name>getName</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
				}</block></then></if>

				<expr_stmt><expr><call><name>getViewer</name><argument_list>()</argument_list></call><operator>.</operator><call><name>refresh</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>updateTitle</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

				<if>if <condition>(<expr><call><name><name>preservedSelection</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{

					<decl_stmt><decl><type><name>Collection</name></type> <name>newSelection</name> <init>= <expr><operator>new</operator> <call><name>ArrayList</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
					<decl_stmt><decl><type><name><name>MarkerItem</name><index>[]</index></name></type> <name>markerEntries</name> <init>= <expr><call><name><name>builder</name><operator>.</operator><name>getMarkerEntries</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

					<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>markerEntries</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
						<decl_stmt><decl><type><name>Iterator</name></type> <name>preserved</name> <init>= <expr><call><name><name>preservedSelection</name><operator>.</operator><name>iterator</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
						<while>while <condition>(<expr><call><name><name>preserved</name><operator>.</operator><name>hasNext</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
							<decl_stmt><decl><type><name>MarkerSelectionEntry</name></type> <name>next</name> <init>= <expr><operator>(</operator><name>MarkerSelectionEntry</name><operator>)</operator> <call><name><name>preserved</name>
									<operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
							<if>if <condition>(<expr><call><name><name>next</name><operator>.</operator><name>isEquivalentTo</name></name><argument_list>(<argument><expr><name><name>markerEntries</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
								<expr_stmt><expr><call><name><name>newSelection</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name><name>markerEntries</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
								<continue>continue;</continue>
							}</block></then></if>
						}</block></while>
					}</block></for>

					<expr_stmt><expr><call><name>getViewer</name><argument_list>()</argument_list></call><operator>.</operator><call><name>setSelection</name><argument_list>(
							<argument><expr><operator>new</operator> <call><name>StructuredSelection</name><argument_list>(<argument><expr><call><name><name>newSelection</name><operator>.</operator><name>toArray</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
							<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name>preservedSelection</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				}</block></then></if>
				<if>if <condition>(<expr><call><name>getViewer</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getTree</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getItemCount</name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then>
					<block type="pseudo"><expr_stmt><expr><call><name>getViewer</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getTree</name><argument_list>()</argument_list></call><operator>.</operator><call><name>setTopItem</name><argument_list>(
							<argument><expr><call><name>getViewer</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getTree</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getItem</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>

				<expr_stmt><expr><call><name>reexpandCategories</name><argument_list>(<argument><expr><name>builder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<return>return <expr><name><name>Status</name><operator>.</operator><name>OK_STATUS</name></name></expr>;</return>
			}</block></function>

			<comment type="block">/*
			 * (non-Javadoc)
			 * 
			 * @see org.eclipse.ui.progress.WorkbenchJob#shouldRun()
			 */</comment>
			<function><specifier>public</specifier> <type><name>boolean</name></type> <name>shouldRun</name><parameter_list>()</parameter_list> <block>{
				<return>return <expr><operator>!</operator><call><name><name>builder</name><operator>.</operator><name>isBuilding</name></name><argument_list>()</argument_list></call></expr>;</return>
			}</block></function>

		}</block></class></expr>;</expr_stmt>

		<expr_stmt><expr><call><name><name>updateJob</name><operator>.</operator><name>setSystem</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>updateJob</name></expr>;</return>
	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Return the object that is the input to the viewer.
	 * 
	 * @return Object
	 */</comment>
	<function><type><name>Object</name></type> <name>getViewerInput</name><parameter_list>()</parameter_list> <block>{
		<return>return <expr><call><name><name>viewer</name><operator>.</operator><name>getInput</name></name><argument_list>()</argument_list></call></expr>;</return>
	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Get all of the fields visible in the receiver.
	 * 
	 * @return MarkerField[]
	 */</comment>
	<function><type><name><name>MarkerField</name><index>[]</index></name></type> <name>getVisibleFields</name><parameter_list>()</parameter_list> <block>{
		<return>return <expr><call><name><name>builder</name><operator>.</operator><name>getVisibleFields</name></name><argument_list>()</argument_list></call></expr>;</return>
	}</block></function>

	<comment type="block">/*
	 * (non-Javadoc)
	 * 
	 * @see org.eclipse.ui.part.ViewPart#init(org.eclipse.ui.IViewSite,
	 *      org.eclipse.ui.IMemento)
	 */</comment>
	<function><specifier>public</specifier> <type><name>void</name></type> <name>init</name><parameter_list>(<parameter><decl><type><name>IViewSite</name></type> <name>site</name></decl></parameter>, <parameter><decl><type><name>IMemento</name></type> <name>memento</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>PartInitException</name></expr></argument></throws> <block>{
		<expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>init</name></name><argument_list>(<argument><expr><name>site</name></expr></argument>, <argument><expr><name>memento</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>MarkerContentGenerator</name></type> <name>generator</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>

		<if>if <condition>(<expr><name>memento</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
			<expr_stmt><expr><name>generator</name> <operator>=</operator> <call><name><name>MarkerSupportRegistry</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getGenerator</name><argument_list>(
					<argument><expr><call><name><name>memento</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name>TAG_GENERATOR</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>

		<if>if <condition>(<expr><name>generator</name> <operator>==</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <name><name>defaultGeneratorIds</name><operator>.</operator><name>length</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
			<expr_stmt><expr><name>generator</name> <operator>=</operator> <call><name><name>MarkerSupportRegistry</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getGenerator</name><argument_list>(
					<argument><expr><name><name>defaultGeneratorIds</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if>if <condition>(<expr><name>generator</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then>
				<block type="pseudo"><expr_stmt><expr><call><name>logInvalidGenerator</name><argument_list>(<argument><expr><name><name>defaultGeneratorIds</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
		}</block></then></if>

		<if>if <condition>(<expr><name>generator</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then>
			<block type="pseudo"><expr_stmt><expr><name>generator</name> <operator>=</operator> <call><name><name>MarkerSupportRegistry</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call>
					<operator>.</operator><call><name>getDefaultGenerator</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></then></if>

		<comment type="line">// Add in the entries common to all markers views</comment>
		<decl_stmt><decl><type><name>IMenuService</name></type> <name>menuService</name> <init>= <expr><operator>(</operator><name>IMenuService</name><operator>)</operator> <call><name><name>site</name>
				<operator>.</operator><name>getService</name></name><argument_list>(<argument><expr><name><name>IMenuService</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<comment type="line">// Add in the markers view actions</comment>

		<expr_stmt><expr><call><name><name>menuService</name><operator>.</operator><name>populateContributionManager</name></name><argument_list>(<argument><expr><operator>(</operator><name>ContributionManager</name><operator>)</operator> <call><name><name>site</name>
				<operator>.</operator><name>getActionBars</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getMenuManager</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"menu:"</literal> <comment type="line">//$NON-NLS-1$</comment>
				<operator>+</operator> <name><name>MarkerSupportRegistry</name><operator>.</operator><name>MARKERS_ID</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>menuService</name><operator>.</operator><name>populateContributionManager</name></name><argument_list>(<argument><expr><operator>(</operator><name>ContributionManager</name><operator>)</operator> <call><name><name>site</name>
				<operator>.</operator><name>getActionBars</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getToolBarManager</name><argument_list>()</argument_list></call></expr></argument>,
				<argument><expr><literal type="string">"toolbar:"</literal> <operator>+</operator> <name><name>MarkerSupportRegistry</name><operator>.</operator><name>MARKERS_ID</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">//$NON-NLS-1$</comment>

		<decl_stmt><decl><type><name>String</name></type> <name>viewId</name> <init>= <expr><call><name><name>site</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<if>if <condition>(<expr><call><name><name>site</name><operator>.</operator><name>getSecondaryId</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
			<expr_stmt><expr><name>viewId</name> <operator>=</operator> <name>viewId</name> <operator>+</operator> <call><name><name>site</name><operator>.</operator><name>getSecondaryId</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>
		<expr_stmt><expr><name>builder</name> <operator>=</operator> <operator>new</operator> <call><name>CachedMarkerBuilder</name><argument_list>(<argument><expr><name>generator</name></expr></argument>, <argument><expr><name>viewId</name></expr></argument>, <argument><expr><name>memento</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>setUpdateJob</name></name><argument_list>(<argument><expr><call><name>getUpdateJob</name><argument_list>(<argument><expr><name>builder</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>Object</name></type> <name>service</name> <init>= <expr><call><name><name>site</name><operator>.</operator><name>getAdapter</name></name><argument_list>(<argument><expr><name><name>IWorkbenchSiteProgressService</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if>if <condition>(<expr><name>service</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then>
			<block type="pseudo"><expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>setProgressService</name></name><argument_list>(<argument><expr><operator>(</operator><name>IWorkbenchSiteProgressService</name><operator>)</operator> <name>service</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>memento</name></name> <operator>=</operator> <name>memento</name></expr>;</expr_stmt>

		<if>if<condition>(<expr><name>memento</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <call><name><name>memento</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name>TAG_PART_NAME</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then>
			<block type="pseudo"><return>return;</return></block></then></if>
		
		<expr_stmt><expr><call><name>setPartName</name><argument_list>(<argument><expr><call><name><name>memento</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name>TAG_PART_NAME</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Log that a generator id is invalid.
	 * 
	 * @param id
	 */</comment>
	<function><type><name>void</name></type> <name>logInvalidGenerator</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>id</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><call><name><name>StatusManager</name><operator>.</operator><name>getManager</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>handle</name><argument_list>(
				<argument><expr><operator>new</operator> <call><name>Status</name><argument_list>(<argument><expr><name><name>IStatus</name><operator>.</operator><name>WARNING</name></name></expr></argument>, <argument><expr><name><name>IDEWorkbenchPlugin</name><operator>.</operator><name>IDE_WORKBENCH</name></name></expr></argument>,
						<argument><expr><call><name><name>NLS</name><operator>.</operator><name>bind</name></name><argument_list>(<argument><expr><literal type="string">"Invalid markerContentGenerator {0} "</literal></expr></argument>, <comment type="line">//$NON-NLS-1$</comment>
								<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Return whether or not group is enabled.
	 * 
	 * @param group
	 * @return boolean
	 */</comment>
	<function><type><name>boolean</name></type> <name>isEnabled</name><parameter_list>(<parameter><decl><type><name>MarkerFieldFilterGroup</name></type> <name>group</name></decl></parameter>)</parameter_list> <block>{
		<return>return <expr><call><name><name>builder</name><operator>.</operator><name>getEnabledFilters</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>contains</name><argument_list>(<argument><expr><name>group</name></expr></argument>)</argument_list></call></expr>;</return>
	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Return the main sort field for the receiver.
	 * 
	 * @return {@link MarkerField}
	 */</comment>
	<function><type><name>boolean</name></type> <name>isPrimarySortField</name><parameter_list>(<parameter><decl><type><name>MarkerField</name></type> <name>field</name></decl></parameter>)</parameter_list> <block>{
		<return>return <expr><call><name><name>builder</name><operator>.</operator><name>getPrimarySortField</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name>field</name></expr></argument>)</argument_list></call></expr>;</return>
	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Return whether or not generator is the selected one.
	 * 
	 * @param generator
	 * @return boolean
	 */</comment>
	<function><type><name>boolean</name></type> <name>isShowing</name><parameter_list>(<parameter><decl><type><name>MarkerContentGenerator</name></type> <name>generator</name></decl></parameter>)</parameter_list> <block>{
		<return>return <expr><call><name><name>this</name><operator>.</operator><name>builder</name><operator>.</operator><name>getGenerator</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name>generator</name></expr></argument>)</argument_list></call></expr>;</return>
	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Open the filters dialog for the receiver.
	 */</comment>
	<function><type><name>void</name></type> <name>openFiltersDialog</name><parameter_list>()</parameter_list> <block>{
		<decl_stmt><decl><type><name>FiltersConfigurationDialog</name></type> <name>dialog</name> <init>= <expr><operator>new</operator> <call><name>FiltersConfigurationDialog</name><argument_list>(
				<argument><expr><operator>new</operator> <call><name>SameShellProvider</name><argument_list>(<argument><expr><call><name>getSite</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getWorkbenchWindow</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getShell</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
				<argument><expr><name>builder</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if>if <condition>(<expr><call><name><name>dialog</name><operator>.</operator><name>open</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>Window</name><operator>.</operator><name>OK</name></name></expr>)</condition><then> <block>{
			<expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>updateFrom</name></name><argument_list>(<argument><expr><name>dialog</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>

	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Open the selected markers
	 */</comment>
	<function><type><name>void</name></type> <name>openSelectedMarkers</name><parameter_list>()</parameter_list> <block>{
		<decl_stmt><decl><type><name><name>IMarker</name><index>[]</index></name></type> <name>markers</name> <init>= <expr><call><name>getSelectedMarkers</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>markers</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
			<decl_stmt><decl><type><name>IMarker</name></type> <name>marker</name> <init>= <expr><name><name>markers</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>IWorkbenchPage</name></type> <name>page</name> <init>= <expr><call><name>getSite</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getPage</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

			<expr_stmt><expr><call><name>openMarkerInEditor</name><argument_list>(<argument><expr><name>marker</name></expr></argument>, <argument><expr><name>page</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></for>
	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Register the context menu for the receiver so that commands may be added
	 * to it.
	 */</comment>
	<function><specifier>private</specifier> <type><name>void</name></type> <name>registerContextMenu</name><parameter_list>()</parameter_list> <block>{
		<decl_stmt><decl><type><name>MenuManager</name></type> <name>contextMenu</name> <init>= <expr><operator>new</operator> <call><name>MenuManager</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>contextMenu</name><operator>.</operator><name>setRemoveAllWhenShown</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>getSite</name><argument_list>()</argument_list></call><operator>.</operator><call><name>registerContextMenu</name><argument_list>(<argument><expr><name>contextMenu</name></expr></argument>, <argument><expr><name>viewer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="line">// Add in the entries for all markers views if this has a different if</comment>
		<if>if <condition>(<expr><operator>!</operator><call><name>getSite</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getId</name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name><name>MarkerSupportRegistry</name><operator>.</operator><name>MARKERS_ID</name></name></expr></argument>)</argument_list></call></expr>)</condition><then>
			<block type="pseudo"><expr_stmt><expr><call><name>getSite</name><argument_list>()</argument_list></call><operator>.</operator><call><name>registerContextMenu</name><argument_list>(<argument><expr><name><name>MarkerSupportRegistry</name><operator>.</operator><name>MARKERS_ID</name></name></expr></argument>,
					<argument><expr><name>contextMenu</name></expr></argument>, <argument><expr><name>viewer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
		<decl_stmt><decl><type><name>Control</name></type> <name>control</name> <init>= <expr><call><name><name>viewer</name><operator>.</operator><name>getControl</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>Menu</name></type> <name>menu</name> <init>= <expr><call><name><name>contextMenu</name><operator>.</operator><name>createContextMenu</name></name><argument_list>(<argument><expr><name>control</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><call><name><name>control</name><operator>.</operator><name>setMenu</name></name><argument_list>(<argument><expr><name>menu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Remove the category from the list of expanded ones.
	 * 
	 * @param category
	 */</comment>
	<function><type><name>void</name></type> <name>removeExpandedCategory</name><parameter_list>(<parameter><decl><type><name>MarkerCategory</name></type> <name>category</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><call><name>getCategoriesToExpand</name><argument_list>()</argument_list></call><operator>.</operator><call><name>remove</name><argument_list>(<argument><expr><call><name><name>category</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Preserve the selection for re-selection after the next update.
	 * 
	 * @param selection
	 */</comment>
	<function><type><name>void</name></type> <name>saveSelection</name><parameter_list>(<parameter><decl><type><name>ISelection</name></type> <name>selection</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><call><name><name>preservedSelection</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<if>if <condition>(<expr><name>selection</name> <operator>instanceof</operator> <name>IStructuredSelection</name></expr>)</condition><then> <block>{
			<decl_stmt><decl><type><name>IStructuredSelection</name></type> <name>structured</name> <init>= <expr><operator>(</operator><name>IStructuredSelection</name><operator>)</operator> <name>selection</name></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>Iterator</name></type> <name>iterator</name> <init>= <expr><call><name><name>structured</name><operator>.</operator><name>iterator</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
			<while>while <condition>(<expr><call><name><name>iterator</name><operator>.</operator><name>hasNext</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
				<decl_stmt><decl><type><name>MarkerItem</name></type> <name>next</name> <init>= <expr><operator>(</operator><name>MarkerItem</name><operator>)</operator> <call><name><name>iterator</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
				<if>if <condition>(<expr><call><name><name>next</name><operator>.</operator><name>isConcrete</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
					<expr_stmt><expr><call><name><name>preservedSelection</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>MarkerSelectionEntry</name><argument_list>(<argument><expr><name>next</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>getCategoriesToExpand</name><argument_list>()</argument_list></call><operator>.</operator><call><name>add</name><argument_list>(<argument><expr><call><name><name>next</name><operator>.</operator><name>getParent</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then> <else>else
					<block type="pseudo"><expr_stmt><expr><call><name>getCategoriesToExpand</name><argument_list>()</argument_list></call><operator>.</operator><call><name>add</name><argument_list>(<argument><expr><name>next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>
			}</block></while>
		}</block></then></if>

	}</block></function>

	<comment type="block">/*
	 * (non-Javadoc)
	 * 
	 * @see org.eclipse.ui.part.ViewPart#saveState(org.eclipse.ui.IMemento)
	 */</comment>
	<function><specifier>public</specifier> <type><name>void</name></type> <name>saveState</name><parameter_list>(<parameter><decl><type><name>IMemento</name></type> <name>memento</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>saveState</name></name><argument_list>(<argument><expr><name>memento</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>memento</name><operator>.</operator><name>putString</name></name><argument_list>(<argument><expr><name>TAG_GENERATOR</name></expr></argument>, <argument><expr><call><name><name>builder</name><operator>.</operator><name>getGenerator</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getId</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>memento</name><operator>.</operator><name>putString</name></name><argument_list>(<argument><expr><name>TAG_PART_NAME</name></expr></argument>, <argument><expr><call><name>getPartName</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>


		<if>if <condition>(<expr><operator>!</operator><call><name>getCategoriesToExpand</name><argument_list>()</argument_list></call><operator>.</operator><call><name>isEmpty</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
			<decl_stmt><decl><type><name>IMemento</name></type> <name>expanded</name> <init>= <expr><call><name><name>memento</name><operator>.</operator><name>createChild</name></name><argument_list>(<argument><expr><name>TAG_EXPANDED</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>Iterator</name></type> <name>categories</name> <init>= <expr><call><name>getCategoriesToExpand</name><argument_list>()</argument_list></call><operator>.</operator><call><name>iterator</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
			<while>while <condition>(<expr><call><name><name>categories</name><operator>.</operator><name>hasNext</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
				<expr_stmt><expr><call><name><name>expanded</name><operator>.</operator><name>createChild</name></name><argument_list>(<argument><expr><name>TAG_CATEGORY</name></expr></argument>, <argument><expr><operator>(</operator><name>String</name><operator>)</operator> <call><name><name>categories</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></while>
		}</block></then></if>
		<expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>saveState</name></name><argument_list>(<argument><expr><name>memento</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Select all of the elements in the receiver.
	 */</comment>
	<function><type><name>void</name></type> <name>selectAll</name><parameter_list>()</parameter_list> <block>{
		<expr_stmt><expr><call><name><name>viewer</name><operator>.</operator><name>getTree</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>selectAll</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Set the category group for the receiver.
	 * 
	 * @param group
	 */</comment>
	<function><type><name>void</name></type> <name>setCategoryGroup</name><parameter_list>(<parameter><decl><type><name>MarkerGroup</name></type> <name>group</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><call><name>getCategoriesToExpand</name><argument_list>()</argument_list></call><operator>.</operator><call><name>clear</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>setCategoryGroup</name></name><argument_list>(<argument><expr><name>group</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Set the content generator for the receiver.
	 * 
	 * @param generator
	 */</comment>
	<function><type><name>void</name></type> <name>setContentGenerator</name><parameter_list>(<parameter><decl><type><name>MarkerContentGenerator</name></type> <name>generator</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><call><name><name>viewer</name><operator>.</operator><name>setSelection</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>StructuredSelection</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>viewer</name><operator>.</operator><name>removeAndClearAll</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>setGenerator</name></name><argument_list>(<argument><expr><name>generator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>createColumns</name><argument_list>(<argument><expr><call><name><name>viewer</name><operator>.</operator><name>getTree</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getColumns</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	}</block></function>

	<comment type="block">/*
	 * (non-Javadoc)
	 * 
	 * @see org.eclipse.ui.part.WorkbenchPart#setFocus()
	 */</comment>
	<function><specifier>public</specifier> <type><name>void</name></type> <name>setFocus</name><parameter_list>()</parameter_list> <block>{
		<expr_stmt><expr><call><name><name>viewer</name><operator>.</operator><name>getControl</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>setFocus</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Set the primary sort field
	 * 
	 * @param field
	 */</comment>
	<function><type><name>void</name></type> <name>setPrimarySortField</name><parameter_list>(<parameter><decl><type><name>MarkerField</name></type> <name>field</name></decl></parameter>)</parameter_list> <block>{
		<decl_stmt><decl><type><name><name>TreeColumn</name><index>[]</index></name></type> <name>columns</name> <init>= <expr><call><name><name>viewer</name><operator>.</operator><name>getTree</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getColumns</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>columns</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
			<decl_stmt><decl><type><name>TreeColumn</name></type> <name>treeColumn</name> <init>= <expr><name><name>columns</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
			<if>if <condition>(<expr><name><name>columns</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>getData</name><argument_list>(<argument><expr><name>MARKER_FIELD</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name>field</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
				<expr_stmt><expr><call><name>setPrimarySortField</name><argument_list>(<argument><expr><name>field</name></expr></argument>, <argument><expr><name>treeColumn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<return>return;</return>
			}</block></then></if>
		}</block></for>
		<expr_stmt><expr><call><name><name>StatusManager</name><operator>.</operator><name>getManager</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>handle</name><argument_list>(
				<argument><expr><call><name><name>StatusUtil</name><operator>.</operator><name>newStatus</name></name><argument_list>(<argument><expr><name><name>IStatus</name><operator>.</operator><name>WARNING</name></name></expr></argument>,
						<argument><expr><literal type="string">"Sorting by non visible field "</literal> <comment type="line">//$NON-NLS-1$</comment>
								<operator>+</operator> <call><name><name>field</name><operator>.</operator><name>getColumnHeaderText</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Set the primary sort field to field and update the column.
	 * 
	 * @param field
	 * @param column
	 */</comment>
	<function><specifier>private</specifier> <type><name>void</name></type> <name>setPrimarySortField</name><parameter_list>(<parameter><decl><type><name>MarkerField</name></type> <name>field</name></decl></parameter>, <parameter><decl><type><name>TreeColumn</name></type> <name>column</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>setPrimarySortField</name></name><argument_list>(<argument><expr><name>field</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<decl_stmt><decl><type><name>IWorkbenchSiteProgressService</name></type> <name>service</name> <init>= <expr><operator>(</operator><name>IWorkbenchSiteProgressService</name><operator>)</operator> <call><name>getViewSite</name><argument_list>()</argument_list></call>
				<operator>.</operator><call><name>getAdapter</name><argument_list>(<argument><expr><name><name>IWorkbenchSiteProgressService</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>refreshContents</name></name><argument_list>(<argument><expr><name>service</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>updateDirectionIndicator</name><argument_list>(<argument><expr><name>column</name></expr></argument>, <argument><expr><name>field</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>viewer</name><operator>.</operator><name>refresh</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>reexpandCategories</name><argument_list>(<argument><expr><name>builder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Add group to the enabled filters.
	 * 
	 * @param group
	 */</comment>
	<function><type><name>void</name></type> <name>toggleFilter</name><parameter_list>(<parameter><decl><type><name>MarkerFieldFilterGroup</name></type> <name>group</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>toggleFilter</name></name><argument_list>(<argument><expr><name>group</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Toggle the sort direction of the primary field
	 */</comment>
	<function><type><name>void</name></type> <name>toggleSortDirection</name><parameter_list>()</parameter_list> <block>{
		<expr_stmt><expr><call><name>setPrimarySortField</name><argument_list>(<argument><expr><call><name><name>builder</name><operator>.</operator><name>getPrimarySortField</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Update the direction indicator as column is now the primary column.
	 * 
	 * @param column
	 * @field {@link MarkerField}
	 */</comment>
	<function><type><name>void</name></type> <name>updateDirectionIndicator</name><parameter_list>(<parameter><decl><type><name>TreeColumn</name></type> <name>column</name></decl></parameter>, <parameter><decl><type><name>MarkerField</name></type> <name>field</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><call><name><name>viewer</name><operator>.</operator><name>getTree</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>setSortColumn</name><argument_list>(<argument><expr><name>column</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if>if <condition>(<expr><call><name><name>builder</name><operator>.</operator><name>getSortDirection</name></name><argument_list>(<argument><expr><name>field</name></expr></argument>)</argument_list></call> <operator>==</operator> <name><name>MarkerComparator</name><operator>.</operator><name>ASCENDING</name></name></expr>)</condition><then>
			<block type="pseudo"><expr_stmt><expr><call><name><name>viewer</name><operator>.</operator><name>getTree</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>setSortDirection</name><argument_list>(<argument><expr><name><name>SWT</name><operator>.</operator><name>UP</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
		<else>else
			<block type="pseudo"><expr_stmt><expr><call><name><name>viewer</name><operator>.</operator><name>getTree</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>setSortDirection</name><argument_list>(<argument><expr><name><name>SWT</name><operator>.</operator><name>DOWN</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>
	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Update the title of the view.
	 */</comment>
	<function><type><name>void</name></type> <name>updateTitle</name><parameter_list>()</parameter_list> <block>{

		<decl_stmt><decl><type><name>String</name></type> <name>status</name> <init>= <expr><name><name>MarkerSupportConstants</name><operator>.</operator><name>EMPTY_STRING</name></name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>totalCount</name> <init>= <expr><call><name><name>builder</name><operator>.</operator><name>getTotalMarkerCount</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>filteredCount</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name><name>MarkerCategory</name><index>[]</index></name></type> <name>categories</name> <init>= <expr><call><name><name>builder</name><operator>.</operator><name>getCategories</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<comment type="line">// Categories might be null if building is still happening</comment>
		<if>if <condition>(<expr><name>categories</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>builder</name><operator>.</operator><name>isShowingHierarchy</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
			<decl_stmt><decl><type><name>int</name></type> <name>markerLimit</name> <init>= <expr><call><name><name>MarkerSupportInternalUtilities</name><operator>.</operator><name>getMarkerLimit</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

			<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>categories</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
				<expr_stmt><expr><name>filteredCount</name> <operator>+=</operator> <ternary><condition><expr><name>markerLimit</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name><name>categories</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>getTotalSize</name><argument_list>()</argument_list></call></expr>
						</then><else>: <expr><call><name><name>Math</name><operator>.</operator><name>min</name></name><argument_list>(<argument><expr><name><name>categories</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>getTotalSize</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>markerLimit</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>
			}</block></for>
		}</block></then> <else>else <block>{
			<expr_stmt><expr><name>filteredCount</name> <operator>=</operator> <call><name><name>MarkerSupportInternalUtilities</name><operator>.</operator><name>getMarkerLimit</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		}</block></else></if>
		<if>if <condition>(<expr><name>filteredCount</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>filteredCount</name> <operator>&gt;=</operator> <name>totalCount</name></expr>)</condition><then> <block>{
			<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name><name>NLS</name><operator>.</operator><name>bind</name></name><argument_list>(<argument><expr><name><name>MarkerMessages</name><operator>.</operator><name>filter_itemsMessage</name></name></expr></argument>, <argument><expr><operator>new</operator> <call><name>Integer</name><argument_list>(
					<argument><expr><name>totalCount</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then> <else>else <block>{
			<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name><name>NLS</name><operator>.</operator><name>bind</name></name><argument_list>(<argument><expr><name><name>MarkerMessages</name><operator>.</operator><name>filter_matchedMessage</name></name></expr></argument>,
					<argument><expr><operator>new</operator> <call><name>Integer</name><argument_list>(<argument><expr><name>filteredCount</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>new</operator> <call><name>Integer</name><argument_list>(<argument><expr><name>totalCount</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></else></if>

		<expr_stmt><expr><call><name>setContentDescription</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Set the selection of the receiver. reveal the item if reveal is true.
	 * 
	 * @param structuredSelection
	 * @param reveal
	 */</comment>
	<function><type><name>void</name></type> <name>setSelection</name><parameter_list>(<parameter><decl><type><name>StructuredSelection</name></type> <name>structuredSelection</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>reveal</name></decl></parameter>)</parameter_list> <block>{

		<decl_stmt><decl><type><name>List</name></type> <name>newSelection</name> <init>= <expr><operator>new</operator> <call><name>ArrayList</name><argument_list>(<argument><expr><call><name><name>structuredSelection</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<for>for <control>(<init><decl><type><name>Iterator</name></type> <name>i</name> <init>= <expr><call><name><name>structuredSelection</name><operator>.</operator><name>iterator</name></name><argument_list>()</argument_list></call></expr></init></decl>;</init> <condition><expr><call><name><name>i</name><operator>.</operator><name>hasNext</name></name><argument_list>()</argument_list></call></expr>;</condition><incr/>)</control> <block>{
			<decl_stmt><decl><type><name>Object</name></type> <name>next</name> <init>= <expr><call><name><name>i</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
			<if>if <condition>(<expr><name>next</name> <operator>instanceof</operator> <name>IMarker</name></expr>)</condition><then> <block>{
				<decl_stmt><decl><type><name>MarkerItem</name></type> <name>marker</name> <init>= <expr><call><name><name>builder</name><operator>.</operator><name>getMarkerItem</name></name><argument_list>(<argument><expr><operator>(</operator><name>IMarker</name><operator>)</operator> <name>next</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<if>if <condition>(<expr><name>marker</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
					<expr_stmt><expr><call><name><name>newSelection</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>marker</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then></if>
			}</block></then></if>
		}</block></for>

		<expr_stmt><expr><call><name><name>viewer</name><operator>.</operator><name>setSelection</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>StructuredSelection</name><argument_list>(<argument><expr><name>newSelection</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>reveal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Return the ids of the generators specified for the receiver.
	 * 
	 * @return String[]
	 */</comment>
	<function><type><name><name>String</name><index>[]</index></name></type> <name>getGeneratorIds</name><parameter_list>()</parameter_list> <block>{
		<return>return <expr><name>defaultGeneratorIds</name></expr>;</return>
	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Turn off all filters in the builder.
	 */</comment>
	<function><type><name>void</name></type> <name>disableAllFilters</name><parameter_list>()</parameter_list> <block>{
		<expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>disableAllFilters</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Return the builder for the receiver.
	 * 
	 * @return CachedMarkerBuilder
	 */</comment>
	<function><type><name>CachedMarkerBuilder</name></type> <name>getBuilder</name><parameter_list>()</parameter_list> <block>{
		<return>return <expr><name>builder</name></expr>;</return>
	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Get the categories to expand for the receiver.
	 * 
	 * @return Collection of MarkerCategory.
	 */</comment>
	<function><specifier>private</specifier> <type><name>Collection</name></type> <name>getCategoriesToExpand</name><parameter_list>()</parameter_list> <block>{
		<if>if <condition>(<expr><name>categoriesToExpand</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
			<expr_stmt><expr><name>categoriesToExpand</name> <operator>=</operator> <operator>new</operator> <call><name>HashSet</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<if>if <condition>(<expr><name><name>this</name><operator>.</operator><name>memento</name></name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
				<decl_stmt><decl><type><name>IMemento</name></type> <name>expanded</name> <init>= <expr><call><name><name>this</name><operator>.</operator><name>memento</name><operator>.</operator><name>getChild</name></name><argument_list>(<argument><expr><name>TAG_EXPANDED</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<if>if <condition>(<expr><name>expanded</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
					<decl_stmt><decl><type><name><name>IMemento</name><index>[]</index></name></type> <name>mementoCategories</name> <init>= <expr><call><name><name>expanded</name>
							<operator>.</operator><name>getChildren</name></name><argument_list>(<argument><expr><name>TAG_CATEGORY</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<decl_stmt><decl><type><name><name>MarkerCategory</name><index>[]</index></name></type> <name>markerCategories</name> <init>= <expr><call><name><name>builder</name><operator>.</operator><name>getCategories</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
					<if>if <condition>(<expr><name>markerCategories</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
						<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>markerCategories</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
							<for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>mementoCategories</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{
								<if>if <condition>(<expr><name><name>markerCategories</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>getName</name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(
										<argument><expr><name><name>mementoCategories</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><call><name>getID</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then>
									<block type="pseudo"><expr_stmt><expr><call><name><name>categoriesToExpand</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name><name>markerCategories</name><index>[<expr><name>i</name></expr>]</index></name>
											<operator>.</operator><call><name>getName</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
							}</block></for>
						}</block></for>
					}</block></then></if>
				}</block></then></if>
			}</block></then></if>
		}</block></then></if>
		<return>return <expr><name>categoriesToExpand</name></expr>;</return>
	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Restore the expanded categories.
	 * 
	 * @param builder
	 */</comment>
	<function><type><name>void</name></type> <name>reexpandCategories</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>CachedMarkerBuilder</name></type> <name>builder</name></decl></parameter>)</parameter_list> <block>{
		<if>if <condition>(<expr><operator>!</operator><call><name>getCategoriesToExpand</name><argument_list>()</argument_list></call><operator>.</operator><call><name>isEmpty</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>builder</name><operator>.</operator><name>isShowingHierarchy</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
			<decl_stmt><decl><type><name><name>MarkerItem</name><index>[]</index></name></type> <name>items</name> <init>= <expr><call><name><name>builder</name><operator>.</operator><name>getElements</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
			<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>items</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
				<decl_stmt><decl><type><name>String</name></type> <name>name</name> <init>= <expr><operator>(</operator><operator>(</operator><name>MarkerCategory</name><operator>)</operator> <name><name>items</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator><operator>.</operator><call><name>getName</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
				<if>if <condition>(<expr><call><name>getCategoriesToExpand</name><argument_list>()</argument_list></call><operator>.</operator><call><name>contains</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>)</condition><then>
					<block type="pseudo"><expr_stmt><expr><call><name><name>viewer</name><operator>.</operator><name>expandToLevel</name></name><argument_list>(<argument><expr><name><name>items</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>

			}</block></for>
		}</block></then></if>
	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Initialize the title based on the count
	 * 
	 * @param count
	 */</comment>
	<function><type><name>void</name></type> <name>initializeTitle</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>count</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><call><name>setPartName</name><argument_list>(<argument><expr><call><name><name>NLS</name><operator>.</operator><name>bind</name></name><argument_list>(<argument><expr><name><name>MarkerMessages</name><operator>.</operator><name>newViewTitle</name></name></expr></argument>, <argument><expr><operator>new</operator> <name><name>Object</name><index>[]</index></name> <block>{
				<expr><call><name>getPartName</name><argument_list>()</argument_list></call></expr>, <expr><name>count</name></expr> }</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	}</block></function>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="org.eclipse.ui.ide.markers.compatibility/src/org/eclipse/ui/ide/markers/compatibility/internal/MarkerContentGenerator.java" hash="b5632877c76ae804b98e53f308b027543495ddb8"><comment type="block" format="javadoc">/*******************************************************************************
 * Copyright (c) 2007 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     IBM Corporation - initial API and implementation
 ******************************************************************************/</comment>

<package>package <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>ide</name><operator>.</operator><name>markers</name><operator>.</operator><name>compatibility</name><operator>.</operator><name>internal</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Arrays</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Collection</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashSet</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Iterator</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>core</name><operator>.</operator><name>resources</name><operator>.</operator><name>IMarker</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>core</name><operator>.</operator><name>resources</name><operator>.</operator><name>IResource</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>core</name><operator>.</operator><name>resources</name><operator>.</operator><name>ResourcesPlugin</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>core</name><operator>.</operator><name>runtime</name><operator>.</operator><name>CoreException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>core</name><operator>.</operator><name>runtime</name><operator>.</operator><name>IAdaptable</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>core</name><operator>.</operator><name>runtime</name><operator>.</operator><name>IConfigurationElement</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>core</name><operator>.</operator><name>runtime</name><operator>.</operator><name>IProgressMonitor</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>core</name><operator>.</operator><name>runtime</name><operator>.</operator><name>SubProgressMonitor</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>IWorkingSet</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>ide</name><operator>.</operator><name>markers</name><operator>.</operator><name>compatibility</name><operator>.</operator><name>api</name><operator>.</operator><name>MarkerField</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>ide</name><operator>.</operator><name>markers</name><operator>.</operator><name>compatibility</name><operator>.</operator><name>api</name><operator>.</operator><name>MarkerSupportConstants</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>ide</name><operator>.</operator><name>markers</name><operator>.</operator><name>compatibility</name><operator>.</operator><name>api</name><operator>.</operator><name>internal</name><operator>.</operator><name>MarkerGroup</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>ide</name><operator>.</operator><name>markers</name><operator>.</operator><name>compatibility</name><operator>.</operator><name>api</name><operator>.</operator><name>internal</name><operator>.</operator><name>MarkerMessages</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>ide</name><operator>.</operator><name>markers</name><operator>.</operator><name>compatibility</name><operator>.</operator><name>api</name><operator>.</operator><name>internal</name><operator>.</operator><name>MarkerSupportRegistry</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>ide</name><operator>.</operator><name>markers</name><operator>.</operator><name>compatibility</name><operator>.</operator><name>api</name><operator>.</operator><name>internal</name><operator>.</operator><name>MarkerType</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>ide</name><operator>.</operator><name>markers</name><operator>.</operator><name>compatibility</name><operator>.</operator><name>api</name><operator>.</operator><name>internal</name><operator>.</operator><name>MarkerTypesModel</name></name>;</import>

<comment type="block" format="javadoc">/**
 * MarkerContentGenerator is the representation of the markerContentGenerator
 * extension point.
 * 
 * @since 3.4
 * 
 */</comment>
<class><specifier>public</specifier> class <name>MarkerContentGenerator</name> <block>{

	<decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>ATTRIBUTE_DEFAULT_MARKER_GROUPING</name> <init>= <expr><literal type="string">"defaultMarkerGrouping"</literal></expr></init></decl>;</decl_stmt> <comment type="line">//$NON-NLS-1$</comment>
	<decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>ATTRIBUTE_VISIBLE</name> <init>= <expr><literal type="string">"visible"</literal></expr></init></decl>;</decl_stmt> <comment type="line">//$NON-NLS-1$</comment>
	<decl_stmt><decl><specifier>static</specifier> <type><specifier>final</specifier> <name>Object</name></type> <name>CACHE_UPDATE_FAMILY</name> <init>= <expr><operator>new</operator> <call><name>Object</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>ELEMENT_MARKER_FIELD_FILTER_GROUP</name> <init>= <expr><literal type="string">"markerFieldFilterGrouping"</literal></expr></init></decl>;</decl_stmt> <comment type="line">//$NON-NLS-1$;</comment>
	<decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name><name>IResource</name><index>[]</index></name></type> <name>EMPTY_RESOURCE_ARRAY</name> <init>= <expr><operator>new</operator> <name><name>IResource</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>MARKER_FIELD_REFERENCE</name> <init>= <expr><literal type="string">"markerFieldReference"</literal></expr></init></decl>;</decl_stmt> <comment type="line">//$NON-NLS-1$</comment>

	<decl_stmt><decl><specifier>private</specifier> <type><name><name>MarkerField</name><index>[]</index></name></type> <name>allFields</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>private</specifier> <type><name>IConfigurationElement</name></type> <name>configurationElement</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>private</specifier> <type><name>Collection</name></type> <name>markerTypes</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>private</specifier> <type><name><name>MarkerField</name><index>[]</index></name></type> <name>initialVisible</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>private</specifier> <type><name>Collection</name></type> <name>groups</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>private</specifier> <type><name>Collection</name></type> <name>generatorExtensions</name> <init>= <expr><operator>new</operator> <call><name>ArrayList</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="block" format="javadoc">/**
	 * Create a new MarkerContentGenerator
	 * 
	 * @param element
	 */</comment>
	<constructor><specifier>public</specifier> <name>MarkerContentGenerator</name><parameter_list>(<parameter><decl><type><name>IConfigurationElement</name></type> <name>element</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><name>configurationElement</name> <operator>=</operator> <name>element</name></expr>;</expr_stmt>
	}</block></constructor>

	<comment type="block" format="javadoc">/**
	 * Add the groups defined in the receiver to the collection of groups.
	 * 
	 * @param groups
	 */</comment>
	<function><specifier>private</specifier> <type><name>void</name></type> <name>addDefinedGroups</name><parameter_list>(<parameter><decl><type><name>Collection</name></type> <name>groups</name></decl></parameter>)</parameter_list> <block>{
		<comment type="line">// Add the ones in the receiver.</comment>
		<expr_stmt><expr><call><name>addGroupsFrom</name><argument_list>(<argument><expr><name>configurationElement</name></expr></argument>, <argument><expr><name>groups</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="line">// Add the extensions</comment>
		<decl_stmt><decl><type><name>Iterator</name></type> <name>extensions</name> <init>= <expr><call><name><name>generatorExtensions</name><operator>.</operator><name>iterator</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<while>while <condition>(<expr><call><name><name>extensions</name><operator>.</operator><name>hasNext</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
			<expr_stmt><expr><call><name>addGroupsFrom</name><argument_list>(<argument><expr><operator>(</operator><name>IConfigurationElement</name><operator>)</operator> <call><name><name>extensions</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>groups</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></while>
	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Add all of the markerGroups defined in element.
	 * 
	 * @param groups
	 */</comment>
	<function><specifier>private</specifier> <type><name>void</name></type> <name>addGroupsFrom</name><parameter_list>(<parameter><decl><type><name>IConfigurationElement</name></type> <name>element</name></decl></parameter>, <parameter><decl><type><name>Collection</name></type> <name>groups</name></decl></parameter>)</parameter_list> <block>{
		<decl_stmt><decl><type><name><name>IConfigurationElement</name><index>[]</index></name></type> <name>groupings</name> <init>= <expr><call><name><name>element</name>
				<operator>.</operator><name>getChildren</name></name><argument_list>(<argument><expr><name><name>MarkerSupportRegistry</name><operator>.</operator><name>MARKER_GROUPING</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>groupings</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{

			<expr_stmt><expr><call><name><name>groups</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>MarkerGroup</name><operator>.</operator><name>createMarkerGroup</name></name><argument_list>(<argument><expr><name><name>groupings</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></for>
	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Compute all of the markers for the receiver's type.
	 * 
	 * @param subMonitor
	 * @return MarkerEntry
	 */</comment>
	<function><specifier>private</specifier> <type><name>Collection</name></type> <name>computeAllMarkers</name><parameter_list>(<parameter><decl><type><name>SubProgressMonitor</name></type> <name>subMonitor</name></decl></parameter>)</parameter_list> <block>{
		<decl_stmt><decl><type><name>Collection</name></type> <name>allMarkers</name> <init>= <expr><operator>new</operator> <call><name>HashSet</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>findMarkers</name><argument_list>(<argument><expr><name>allMarkers</name></expr></argument>, <argument><expr><operator>new</operator> <name><name>IResource</name><index>[]</index></name> <block>{ <expr><call><name><name>ResourcesPlugin</name>
				<operator>.</operator><name>getWorkspace</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getRoot</name><argument_list>()</argument_list></call></expr> }</block></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name><name>IResource</name><operator>.</operator><name>DEPTH_INFINITE</name></name></expr></argument>,
				<argument><expr><name>subMonitor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>allMarkers</name></expr>;</return>
	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Compute the marker for the supplied filter and add to return markers.
	 * 
	 * @param returnMarkers
	 *            {@link Collection} of {@link IMarker}
	 * @param subMonitor
	 * @param filterGroup
	 * @param focusResources
	 *            the resource currently selected
	 */</comment>
	<function><specifier>private</specifier> <type><name>void</name></type> <name>computeMarkers</name><parameter_list>(<parameter><decl><type><name>Collection</name></type> <name>returnMarkers</name></decl></parameter>,
			<parameter><decl><type><name>SubProgressMonitor</name></type> <name>subMonitor</name></decl></parameter>, <parameter><decl><type><name>MarkerFieldFilterGroup</name></type> <name>filterGroup</name></decl></parameter>,
			<parameter><decl><type><name><name>IResource</name><index>[]</index></name></type> <name>focusResources</name></decl></parameter>)</parameter_list> <block>{

		<decl_stmt><decl><type><name>int</name></type> <name>filterType</name> <init>= <expr><call><name><name>filterGroup</name><operator>.</operator><name>getScope</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

		<switch>switch <condition>(<expr><name>filterType</name></expr>)</condition> <block>{
		<case>case <expr><name><name>MarkerFieldFilterGroup</name><operator>.</operator><name>ON_ANY</name></name></expr>:</case> <block>{
			<expr_stmt><expr><call><name>findMarkers</name><argument_list>(<argument><expr><name>returnMarkers</name></expr></argument>, <argument><expr><operator>new</operator> <name><name>IResource</name><index>[]</index></name> <block>{ <expr><call><name><name>ResourcesPlugin</name>
					<operator>.</operator><name>getWorkspace</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getRoot</name><argument_list>()</argument_list></call></expr> }</block></expr></argument>, <argument><expr><name>filterGroup</name></expr></argument>,
					<argument><expr><name><name>IResource</name><operator>.</operator><name>DEPTH_INFINITE</name></name></expr></argument>, <argument><expr><name>subMonitor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		}</block>
		<case>case <expr><name><name>MarkerFieldFilterGroup</name><operator>.</operator><name>ON_SELECTED_ONLY</name></name></expr>:</case> <block>{
			<expr_stmt><expr><call><name>findMarkers</name><argument_list>(<argument><expr><name>returnMarkers</name></expr></argument>, <argument><expr><name>focusResources</name></expr></argument>, <argument><expr><name>filterGroup</name></expr></argument>,
					<argument><expr><name><name>IResource</name><operator>.</operator><name>DEPTH_ZERO</name></name></expr></argument>, <argument><expr><name>subMonitor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		}</block>
		<case>case <expr><name><name>MarkerFieldFilterGroup</name><operator>.</operator><name>ON_SELECTED_AND_CHILDREN</name></name></expr>:</case> <block>{
			<expr_stmt><expr><call><name>findMarkers</name><argument_list>(<argument><expr><name>returnMarkers</name></expr></argument>, <argument><expr><name>focusResources</name></expr></argument>, <argument><expr><name>filterGroup</name></expr></argument>,
					<argument><expr><name><name>IResource</name><operator>.</operator><name>DEPTH_INFINITE</name></name></expr></argument>, <argument><expr><name>subMonitor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		}</block>
		<case>case <expr><name><name>MarkerFieldFilterGroup</name><operator>.</operator><name>ON_ANY_IN_SAME_CONTAINER</name></name></expr>:</case> <block>{
			<expr_stmt><expr><call><name>findMarkers</name><argument_list>(<argument><expr><name>returnMarkers</name></expr></argument>, <argument><expr><call><name>getProjects</name><argument_list>(<argument><expr><name>focusResources</name></expr></argument>)</argument_list></call></expr></argument>,
					<argument><expr><name>filterGroup</name></expr></argument>, <argument><expr><name><name>IResource</name><operator>.</operator><name>DEPTH_INFINITE</name></name></expr></argument>, <argument><expr><name>subMonitor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		}</block>
		<case>case <expr><name><name>MarkerFieldFilterGroup</name><operator>.</operator><name>ON_WORKING_SET</name></name></expr>:</case> <block>{
			<expr_stmt><expr><call><name>findMarkers</name><argument_list>(<argument><expr><name>returnMarkers</name></expr></argument>, <argument><expr><call><name>getResourcesInWorkingSet</name><argument_list>(<argument><expr><call><name><name>filterGroup</name>
					<operator>.</operator><name>getWorkingSet</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>filterGroup</name></expr></argument>, <argument><expr><name><name>IResource</name><operator>.</operator><name>DEPTH_INFINITE</name></name></expr></argument>,
					<argument><expr><name>subMonitor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block>
		}</block></switch>

	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Add all of the markers that pass the filters to results.
	 * 
	 * @param results
	 *            Collection of {@link IMarker}
	 * @param group
	 * @param markers
	 */</comment>
	<function><specifier>private</specifier> <type><name>void</name></type> <name>filterMarkers</name><parameter_list>(<parameter><decl><type><name>Collection</name></type> <name>results</name></decl></parameter>,
			<parameter><decl><type><name>MarkerFieldFilterGroup</name></type> <name>group</name></decl></parameter>, <parameter><decl><type><name><name>IMarker</name><index>[]</index></name></type> <name>markers</name></decl></parameter>)</parameter_list> <block>{
		<for>for <control>(<init><decl><type><name>int</name></type> <name>idx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>idx</name> <operator>&lt;</operator> <name><name>markers</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>idx</name><operator>++</operator></expr></incr>)</control> <block>{
			<decl_stmt><decl><type><name>IMarker</name></type> <name>marker</name> <init>= <expr><name><name>markers</name><index>[<expr><name>idx</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
			<if>if <condition>(<expr><name>group</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <call><name><name>group</name><operator>.</operator><name>select</name></name><argument_list>(<argument><expr><name>marker</name></expr></argument>)</argument_list></call></expr>)</condition><then>
				<block type="pseudo"><expr_stmt><expr><call><name><name>results</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>marker</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
		}</block></for>
	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Iterate through the return markers. If they do not exist in matching
	 * remove them.
	 * 
	 * @param matching
	 * @param returnMarkers
	 */</comment>
	<function><specifier>private</specifier> <type><name>void</name></type> <name>findIntersection</name><parameter_list>(<parameter><decl><type><name>Collection</name></type> <name>matching</name></decl></parameter>, <parameter><decl><type><name>Collection</name></type> <name>returnMarkers</name></decl></parameter>)</parameter_list> <block>{
		<decl_stmt><decl><type><name>HashSet</name></type> <name>removeMarkers</name> <init>= <expr><operator>new</operator> <call><name>HashSet</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>Iterator</name></type> <name>existing</name> <init>= <expr><call><name><name>returnMarkers</name><operator>.</operator><name>iterator</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<while>while <condition>(<expr><call><name><name>existing</name><operator>.</operator><name>hasNext</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
			<decl_stmt><decl><type><name>Object</name></type> <name>next</name> <init>= <expr><call><name><name>existing</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
			<if>if <condition>(<expr><call><name><name>matching</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><name>next</name></expr></argument>)</argument_list></call></expr>)</condition><then>
				<block type="pseudo"><continue>continue;</continue></block></then></if>
			<expr_stmt><expr><call><name><name>removeMarkers</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></while>
		<expr_stmt><expr><call><name><name>returnMarkers</name><operator>.</operator><name>removeAll</name></name><argument_list>(<argument><expr><name>removeMarkers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Adds all markers in the given set of resources to the given list
	 * 
	 * @param results
	 *            The Collection to add new entries to
	 * @param resources
	 * @param group
	 *            the group to filter on. May be &lt;code&gt;null&lt;/code&gt;.
	 * @param depth
	 * @param monitor
	 */</comment>
	<function><specifier>private</specifier> <type><name>void</name></type> <name>findMarkers</name><parameter_list>(<parameter><decl><type><name>Collection</name></type> <name>results</name></decl></parameter>, <parameter><decl><type><name><name>IResource</name><index>[]</index></name></type> <name>resources</name></decl></parameter>,
			<parameter><decl><type><name>MarkerFieldFilterGroup</name></type> <name>group</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>depth</name></decl></parameter>, <parameter><decl><type><name>IProgressMonitor</name></type> <name>monitor</name></decl></parameter>)</parameter_list> <block>{
		<if>if <condition>(<expr><name>resources</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
			<return>return;</return>
		}</block></then></if>

		<comment type="line">// Optimisation: if a type appears in the selectedTypes list along with</comment>
		<comment type="line">// all of its sub-types, then combine these in a single search.</comment>

		<decl_stmt><decl><type><name>Collection</name></type> <name>selectedTypes</name> <init>= <expr><call><name>getMarkerTypes</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

		<comment type="line">// List of types that haven't been replaced by one of their super-types</comment>
		<decl_stmt><decl><type><name>HashSet</name></type> <name>typesToSearch</name> <init>= <expr><operator>new</operator> <call><name>HashSet</name><argument_list>(<argument><expr><call><name><name>selectedTypes</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<comment type="line">// List of types that appeared in selectedTypes along with all of their</comment>
		<comment type="line">// sub-types</comment>
		<decl_stmt><decl><type><name>HashSet</name></type> <name>includeAllSubtypes</name> <init>= <expr><operator>new</operator> <call><name>HashSet</name><argument_list>(<argument><expr><call><name><name>selectedTypes</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><call><name><name>typesToSearch</name><operator>.</operator><name>addAll</name></name><argument_list>(<argument><expr><name>selectedTypes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<decl_stmt><decl><type><name>Iterator</name></type> <name>iter</name> <init>= <expr><call><name><name>selectedTypes</name><operator>.</operator><name>iterator</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

		<while>while <condition>(<expr><call><name><name>iter</name><operator>.</operator><name>hasNext</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
			<decl_stmt><decl><type><name>MarkerType</name></type> <name>type</name> <init>= <expr><operator>(</operator><name>MarkerType</name><operator>)</operator> <call><name><name>iter</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

			<decl_stmt><decl><type><name>Collection</name></type> <name>subtypes</name> <init>= <expr><call><name><name>Arrays</name><operator>.</operator><name>asList</name></name><argument_list>(<argument><expr><call><name><name>type</name><operator>.</operator><name>getAllSubTypes</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

			<if>if <condition>(<expr><call><name><name>selectedTypes</name><operator>.</operator><name>containsAll</name></name><argument_list>(<argument><expr><name>subtypes</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
				<expr_stmt><expr><call><name><name>typesToSearch</name><operator>.</operator><name>removeAll</name></name><argument_list>(<argument><expr><name>subtypes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<expr_stmt><expr><call><name><name>includeAllSubtypes</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>
		}</block></while>

		<expr_stmt><expr><call><name><name>monitor</name><operator>.</operator><name>beginTask</name></name><argument_list>(<argument><expr><name><name>MarkerMessages</name><operator>.</operator><name>MarkerFilter_searching</name></name></expr></argument>, <argument><expr><call><name><name>typesToSearch</name>
				<operator>.</operator><name>size</name></name><argument_list>()</argument_list></call>
				<operator>*</operator> <name><name>resources</name><operator>.</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="line">// Use this hash set to determine if there are any resources in the</comment>
		<comment type="line">// list that appear along with their parent.</comment>
		<decl_stmt><decl><type><name>HashSet</name></type> <name>resourcesToSearch</name> <init>= <expr><operator>new</operator> <call><name>HashSet</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

		<comment type="line">// Insert all the resources into the Set</comment>
		<for>for <control>(<init><decl><type><name>int</name></type> <name>idx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>idx</name> <operator>&lt;</operator> <name><name>resources</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>idx</name><operator>++</operator></expr></incr>)</control> <block>{
			<decl_stmt><decl><type><name>IResource</name></type> <name>next</name> <init>= <expr><name><name>resources</name><index>[<expr><name>idx</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

			<if>if <condition>(<expr><operator>!</operator><call><name><name>next</name><operator>.</operator><name>exists</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
				<block type="pseudo"><continue>continue;</continue></block></then></if>

			<if>if <condition>(<expr><call><name><name>resourcesToSearch</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><name>next</name></expr></argument>)</argument_list></call></expr>)</condition><then>
				<block type="pseudo"><expr_stmt><expr><call><name><name>monitor</name><operator>.</operator><name>worked</name></name><argument_list>(<argument><expr><call><name><name>typesToSearch</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
			<else>else
				<block type="pseudo"><expr_stmt><expr><call><name><name>resourcesToSearch</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>
		}</block></for>

		<comment type="line">// Iterate through all the selected resources</comment>
		<for>for <control>(<init><decl><type><name>int</name></type> <name>resourceIdx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>resourceIdx</name> <operator>&lt;</operator> <name><name>resources</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>resourceIdx</name><operator>++</operator></expr></incr>)</control> <block>{
			<expr_stmt><expr><name>iter</name> <operator>=</operator> <call><name><name>typesToSearch</name><operator>.</operator><name>iterator</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

			<decl_stmt><decl><type><name>IResource</name></type> <name>resource</name> <init>= <expr><name><name>resources</name><index>[<expr><name>resourceIdx</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

			<comment type="line">// Skip resources that don't exist</comment>
			<if>if <condition>(<expr><operator>!</operator><call><name><name>resource</name><operator>.</operator><name>isAccessible</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
				<continue>continue;</continue>
			}</block></then></if>

			<if>if <condition>(<expr><name>depth</name> <operator>==</operator> <name><name>IResource</name><operator>.</operator><name>DEPTH_INFINITE</name></name></expr>)</condition><then> <block>{
				<comment type="line">// Determine if any parent of this resource is also in our</comment>
				<comment type="line">// filter</comment>
				<decl_stmt><decl><type><name>IResource</name></type> <name>parent</name> <init>= <expr><call><name><name>resource</name><operator>.</operator><name>getParent</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>boolean</name></type> <name>found</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
				<while>while <condition>(<expr><name>parent</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{
					<if>if <condition>(<expr><call><name><name>resourcesToSearch</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><name>parent</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
						<expr_stmt><expr><name>found</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
					}</block></then></if>

					<expr_stmt><expr><name>parent</name> <operator>=</operator> <call><name><name>parent</name><operator>.</operator><name>getParent</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				}</block></while>

				<comment type="line">// If a parent of this resource is also in the filter, we can</comment>
				<comment type="line">// skip it</comment>
				<comment type="line">// because we'll pick up its markers when we search the parent.</comment>
				<if>if <condition>(<expr><name>found</name></expr>)</condition><then> <block>{
					<continue>continue;</continue>
				}</block></then></if>
			}</block></then></if>

			<comment type="line">// Iterate through all the marker types</comment>
			<while>while <condition>(<expr><call><name><name>iter</name><operator>.</operator><name>hasNext</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
				<decl_stmt><decl><type><name>MarkerType</name></type> <name>markerType</name> <init>= <expr><operator>(</operator><name>MarkerType</name><operator>)</operator> <call><name><name>iter</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
				<try>try <block>{
					<comment type="line">// Only search for sub-types of the marker if we found all</comment>
					<comment type="line">// of</comment>
					<comment type="line">// its sub-types in the filter criteria.</comment>
					<decl_stmt><decl><type><name><name>IMarker</name><index>[]</index></name></type> <name>markers</name> <init>= <expr><call><name><name>resource</name><operator>.</operator><name>findMarkers</name></name><argument_list>(
							<argument><expr><call><name><name>markerType</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>includeAllSubtypes</name>
									<operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><name>markerType</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>depth</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

					<expr_stmt><expr><call><name><name>monitor</name><operator>.</operator><name>worked</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					<expr_stmt><expr><call><name>filterMarkers</name><argument_list>(<argument><expr><name>results</name></expr></argument>, <argument><expr><name>group</name></expr></argument>, <argument><expr><name>markers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>CoreException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
					<expr_stmt><expr><call><name><name>MarkerSupportInternalUtilities</name><operator>.</operator><name>handle</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></catch></try>
			}</block></while>
		}</block></for>

		<expr_stmt><expr><call><name><name>monitor</name><operator>.</operator><name>done</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Re-generate all of the markers and filter them based on the enabled
	 * filters.
	 * 
	 * @param subMonitor
	 * @param andFilters
	 *            if &lt;code&gt;true&lt;/code&gt; return the intersection of the filters
	 * @param focusResources
	 *            the current selected resources
	 * @param enabledFilters
	 *            the enabled {@link MarkerFieldFilterGroup}s to apply
	 * @return MarkerMap
	 */</comment>
	<function><type><name>MarkerMap</name></type> <name>generateFilteredMarkers</name><parameter_list>(<parameter><decl><type><name>SubProgressMonitor</name></type> <name>subMonitor</name></decl></parameter>,
			<parameter><decl><type><name>boolean</name></type> <name>andFilters</name></decl></parameter>, <parameter><decl><type><name><name>IResource</name><index>[]</index></name></type> <name>focusResources</name></decl></parameter>,
			<parameter><decl><type><name>Collection</name></type> <name>enabledFilters</name></decl></parameter>)</parameter_list> <block>{

		<decl_stmt><decl><type><name>Collection</name></type> <name>returnMarkers</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
		<if>if <condition>(<expr><call><name><name>enabledFilters</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
			<decl_stmt><decl><type><name>Iterator</name></type> <name>filtersIterator</name> <init>= <expr><call><name><name>enabledFilters</name><operator>.</operator><name>iterator</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
			<if>if <condition>(<expr><name>andFilters</name></expr>)</condition><then> <block>{
				<decl_stmt><decl><type><name>Collection</name></type> <name>matching</name> <init>= <expr><operator>new</operator> <call><name>HashSet</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
				<while>while <condition>(<expr><call><name><name>filtersIterator</name><operator>.</operator><name>hasNext</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{

					<expr_stmt><expr><call><name>computeMarkers</name><argument_list>(<argument><expr><name>matching</name></expr></argument>, <argument><expr><name>subMonitor</name></expr></argument>,
							<argument><expr><operator>(</operator><name>MarkerFieldFilterGroup</name><operator>)</operator> <call><name><name>filtersIterator</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr></argument>,
							<argument><expr><name>focusResources</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<if>if <condition>(<expr><name>returnMarkers</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then>
						<block type="pseudo"><expr_stmt><expr><name>returnMarkers</name> <operator>=</operator> <operator>new</operator> <call><name>HashSet</name><argument_list>(<argument><expr><name>matching</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
					<else>else
						<block type="pseudo"><expr_stmt><expr><call><name>findIntersection</name><argument_list>(<argument><expr><name>matching</name></expr></argument>, <argument><expr><name>returnMarkers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>
					<expr_stmt><expr><call><name><name>matching</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				}</block></while>

			}</block></then> <else>else <block>{
				<expr_stmt><expr><name>returnMarkers</name> <operator>=</operator> <operator>new</operator> <call><name>HashSet</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				<while>while <condition>(<expr><call><name><name>filtersIterator</name><operator>.</operator><name>hasNext</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
					<expr_stmt><expr><call><name>computeMarkers</name><argument_list>(<argument><expr><name>returnMarkers</name></expr></argument>, <argument><expr><name>subMonitor</name></expr></argument>,
							<argument><expr><operator>(</operator><name>MarkerFieldFilterGroup</name><operator>)</operator> <call><name><name>filtersIterator</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr></argument>,
							<argument><expr><name>focusResources</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></while>
			}</block></else></if>

		}</block></then> <else>else
			<block type="pseudo"><expr_stmt><expr><name>returnMarkers</name> <operator>=</operator> <call><name>computeAllMarkers</name><argument_list>(<argument><expr><name>subMonitor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>
		<decl_stmt><decl><type><name><name>MarkerEntry</name><index>[]</index></name></type> <name>entries</name> <init>= <expr><operator>new</operator> <name><name>MarkerEntry</name><index>[<expr><call><name><name>returnMarkers</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>Iterator</name></type> <name>markers</name> <init>= <expr><call><name><name>returnMarkers</name><operator>.</operator><name>iterator</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>index</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
		<comment type="line">// Convert to entries</comment>
		<while>while <condition>(<expr><call><name><name>markers</name><operator>.</operator><name>hasNext</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
			<expr_stmt><expr><name><name>entries</name><index>[<expr><name>index</name></expr>]</index></name> <operator>=</operator> <operator>new</operator> <call><name>MarkerEntry</name><argument_list>(<argument><expr><operator>(</operator><name>IMarker</name><operator>)</operator> <call><name><name>markers</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>index</name><operator>++</operator></expr>;</expr_stmt>
		}</block></while>

		<return>return <expr><operator>new</operator> <call><name>MarkerMap</name><argument_list>(<argument><expr><name>entries</name></expr></argument>)</argument_list></call></expr>;</return>
	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Get the all of the fields that this content generator is using.
	 * 
	 * @return {@link MarkerField}[]
	 */</comment>
	<function><type><name><name>MarkerField</name><index>[]</index></name></type> <name>getAllFields</name><parameter_list>()</parameter_list> <block>{
		<return>return <expr><name>allFields</name></expr>;</return>
	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Get the category name from the receiver.
	 */</comment>
	<function><type><name>String</name></type> <name>getCategoryName</name><parameter_list>()</parameter_list> <block>{
		<return>return <expr><call><name><name>configurationElement</name>
				<operator>.</operator><name>getAttribute</name></name><argument_list>(<argument><expr><name>ATTRIBUTE_DEFAULT_MARKER_GROUPING</name></expr></argument>)</argument_list></call></expr>;</return>

	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Return the configuration elements for the receiver.
	 * 
	 * @return IConfigurationElement[]
	 */</comment>
	<function><type><name><name>IConfigurationElement</name><index>[]</index></name></type> <name>getFilterReferences</name><parameter_list>()</parameter_list> <block>{
		<decl_stmt><decl><type><name><name>IConfigurationElement</name><index>[]</index></name></type> <name>filterGroups</name> <init>= <expr><call><name><name>configurationElement</name>
				<operator>.</operator><name>getChildren</name></name><argument_list>(<argument><expr><name>ELEMENT_MARKER_FIELD_FILTER_GROUP</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if>if <condition>(<expr><call><name><name>generatorExtensions</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
			<block type="pseudo"><return>return <expr><name>filterGroups</name></expr>;</return></block></then></if>
		<decl_stmt><decl><type><name>Iterator</name></type> <name>extensions</name> <init>= <expr><call><name><name>generatorExtensions</name><operator>.</operator><name>iterator</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>Collection</name></type> <name>extendedElements</name> <init>= <expr><operator>new</operator> <call><name>ArrayList</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<while>while <condition>(<expr><call><name><name>extensions</name><operator>.</operator><name>hasNext</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
			<decl_stmt><decl><type><name>IConfigurationElement</name></type> <name>extension</name> <init>= <expr><operator>(</operator><name>IConfigurationElement</name><operator>)</operator> <call><name><name>extensions</name>
					<operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name><name>IConfigurationElement</name><index>[]</index></name></type> <name>extensionFilters</name> <init>= <expr><call><name><name>extension</name>
					<operator>.</operator><name>getChildren</name></name><argument_list>(<argument><expr><name>ELEMENT_MARKER_FIELD_FILTER_GROUP</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>extensionFilters</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
				<expr_stmt><expr><call><name><name>extendedElements</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name><name>extensionFilters</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></for>
		}</block></while>
		<if>if <condition>(<expr><call><name><name>extendedElements</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
			<decl_stmt><decl><type><name><name>IConfigurationElement</name><index>[]</index></name></type> <name>allGroups</name> <init>= <expr><operator>new</operator> <name><name>IConfigurationElement</name><index>[<expr><name><name>filterGroups</name><operator>.</operator><name>length</name></name>
					<operator>+</operator> <call><name><name>extendedElements</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>]</index></name></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name><name>System</name>
					<operator>.</operator><name>arraycopy</name></name><argument_list>(<argument><expr><name>filterGroups</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>allGroups</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
							<argument><expr><name><name>filterGroups</name><operator>.</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<decl_stmt><decl><type><name>Iterator</name></type> <name>extras</name> <init>= <expr><call><name><name>extendedElements</name><operator>.</operator><name>iterator</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>int</name></type> <name>index</name> <init>= <expr><name><name>filterGroups</name><operator>.</operator><name>length</name></name></expr></init></decl>;</decl_stmt>
			<while>while <condition>(<expr><call><name><name>extras</name><operator>.</operator><name>hasNext</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
				<expr_stmt><expr><name><name>allGroups</name><index>[<expr><name>index</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>IConfigurationElement</name><operator>)</operator> <call><name><name>extras</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			}</block></while>
			<return>return <expr><name>allGroups</name></expr>;</return>
		}</block></then></if>
		<return>return <expr><name>filterGroups</name></expr>;</return>
	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Return the id of the receiver.
	 * 
	 * @return String
	 */</comment>
	<function><specifier>public</specifier> <type><name>String</name></type> <name>getId</name><parameter_list>()</parameter_list> <block>{
		<return>return <expr><call><name><name>configurationElement</name>
				<operator>.</operator><name>getAttribute</name></name><argument_list>(<argument><expr><name><name>MarkerSupportConstants</name><operator>.</operator><name>ATTRIBUTE_ID</name></name></expr></argument>)</argument_list></call></expr>;</return>
	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Get the list of initially visible fields
	 * 
	 * @return {@link MarkerField}[]
	 */</comment>
	<function><type><name><name>MarkerField</name><index>[]</index></name></type> <name>getInitialVisible</name><parameter_list>()</parameter_list> <block>{
		<return>return <expr><name>initialVisible</name></expr>;</return>
	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Get the group called groupName from the receiver
	 * 
	 * @param groupName
	 * @return MarkerGroup or &lt;code&gt;null&lt;/code&gt;
	 */</comment>
	<function><type><name>MarkerGroup</name></type> <name>getMarkerGroup</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>groupName</name></decl></parameter>)</parameter_list> <block>{
		<decl_stmt><decl><type><name>Iterator</name></type> <name>groups</name> <init>= <expr><call><name>getMarkerGroups</name><argument_list>()</argument_list></call><operator>.</operator><call><name>iterator</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<while>while <condition>(<expr><call><name><name>groups</name><operator>.</operator><name>hasNext</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
			<decl_stmt><decl><type><name>MarkerGroup</name></type> <name>group</name> <init>= <expr><operator>(</operator><name>MarkerGroup</name><operator>)</operator> <call><name><name>groups</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
			<if>if <condition>(<expr><call><name><name>group</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name>groupName</name></expr></argument>)</argument_list></call></expr>)</condition><then>
				<block type="pseudo"><return>return <expr><name>group</name></expr>;</return></block></then></if>
		}</block></while>
		<return>return <expr><literal type="null">null</literal></expr>;</return>
	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Get the markerGroups associated with the receiver.
	 * 
	 * @return Collection of {@link MarkerGroup}
	 */</comment>
	<function><type><name>Collection</name></type> <name>getMarkerGroups</name><parameter_list>()</parameter_list> <block>{

		<if>if <condition>(<expr><name>groups</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
			<expr_stmt><expr><name>groups</name> <operator>=</operator> <operator>new</operator> <call><name>HashSet</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

			<comment type="line">// Add the groups defined in the receiver</comment>
			<expr_stmt><expr><call><name>addDefinedGroups</name><argument_list>(<argument><expr><name>groups</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<if>if <condition>(<expr><call><name>getId</name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name><name>MarkerSupportRegistry</name><operator>.</operator><name>PROBLEMS_GENERATOR</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
				<comment type="line">// Add the groups that reference the receiver.</comment>
				<expr_stmt><expr><call><name><name>groups</name><operator>.</operator><name>addAll</name></name><argument_list>(<argument><expr><call><name><name>MarkerSupportRegistry</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call>
						<operator>.</operator><call><name>getMarkerGroups</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			}</block></then></if>
		}</block></then></if>
		<return>return <expr><name>groups</name></expr>;</return>
	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Return the markerTypes for the receiver.
	 * 
	 * @return Collection of {@link MarkerType}
	 */</comment>
	<function><specifier>public</specifier> <type><name>Collection</name></type> <name>getMarkerTypes</name><parameter_list>()</parameter_list> <block>{
		<if>if <condition>(<expr><name>markerTypes</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
			<expr_stmt><expr><name>markerTypes</name> <operator>=</operator> <operator>new</operator> <call><name>HashSet</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<decl_stmt><decl><type><name><name>IConfigurationElement</name><index>[]</index></name></type> <name>markerTypeElements</name> <init>= <expr><call><name><name>configurationElement</name>
					<operator>.</operator><name>getChildren</name></name><argument_list>(<argument><expr><name><name>MarkerSupportRegistry</name><operator>.</operator><name>MARKER_TYPE_REFERENCE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>markerTypeElements</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
				<decl_stmt><decl><type><name>IConfigurationElement</name></type> <name>configurationElement</name> <init>= <expr><name><name>markerTypeElements</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>String</name></type> <name>elementName</name> <init>= <expr><call><name><name>configurationElement</name>
						<operator>.</operator><name>getAttribute</name></name><argument_list>(<argument><expr><name><name>MarkerSupportConstants</name><operator>.</operator><name>ATTRIBUTE_ID</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name><name>MarkerType</name><index>[]</index></name></type> <name>types</name> <init>= <expr><call><name><name>MarkerTypesModel</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>(
						<argument><expr><name>elementName</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getAllSubTypes</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
				<for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>types</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{
					<expr_stmt><expr><call><name><name>markerTypes</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name><name>types</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></for>
				<expr_stmt><expr><call><name><name>markerTypes</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>MarkerTypesModel</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>(
						<argument><expr><name>elementName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></for>
			<if>if <condition>(<expr><call><name><name>markerTypes</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
				<decl_stmt><decl><type><name><name>MarkerType</name><index>[]</index></name></type> <name>types</name> <init>= <expr><call><name><name>MarkerTypesModel</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>(
						<argument><expr><name><name>IMarker</name><operator>.</operator><name>PROBLEM</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getAllSubTypes</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
				<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>types</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
					<expr_stmt><expr><call><name><name>markerTypes</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name><name>types</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></for>
			}</block></then></if>
		}</block></then></if>
		<return>return <expr><name>markerTypes</name></expr>;</return>
	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Return the name for the receiver.
	 * 
	 * @return String
	 */</comment>
	<function><type><name>String</name></type> <name>getName</name><parameter_list>()</parameter_list> <block>{
		<return>return <expr><call><name><name>configurationElement</name>
				<operator>.</operator><name>getAttribute</name></name><argument_list>(<argument><expr><name><name>MarkerSupportConstants</name><operator>.</operator><name>ATTRIBUTE_NAME</name></name></expr></argument>)</argument_list></call></expr>;</return>
	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Return all of the projects being shown.
	 * 
	 * @param focusResources
	 * @return IResource[]
	 */</comment>
	<function><specifier>private</specifier> <type><name><name>IResource</name><index>[]</index></name></type> <name>getProjects</name><parameter_list>(<parameter><decl><type><name><name>IResource</name><index>[]</index></name></type> <name>focusResources</name></decl></parameter>)</parameter_list> <block>{

		<if>if <condition>(<expr><name><name>focusResources</name><operator>.</operator><name>length</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then>
			<block type="pseudo"><return>return <expr><name>EMPTY_RESOURCE_ARRAY</name></expr>;</return></block></then></if>
		<decl_stmt><decl><type><name>HashSet</name></type> <name>projects</name> <init>= <expr><operator>new</operator> <call><name>HashSet</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

		<for>for <control>(<init><decl><type><name>int</name></type> <name>idx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>idx</name> <operator>&lt;</operator> <name><name>focusResources</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>idx</name><operator>++</operator></expr></incr>)</control> <block>{
			<expr_stmt><expr><call><name><name>projects</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name><name>focusResources</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><call><name>getProject</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></for>
		<if>if <condition>(<expr><call><name><name>projects</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
			<block type="pseudo"><return>return <expr><name>EMPTY_RESOURCE_ARRAY</name></expr>;</return></block></then></if>
		<return>return <expr><operator>(</operator><name><name>IResource</name><index>[]</index></name><operator>)</operator> <call><name><name>projects</name><operator>.</operator><name>toArray</name></name><argument_list>(<argument><expr><operator>new</operator> <name><name>IResource</name><index>[<expr><call><name><name>projects</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>

	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Get the resources in working set.
	 * 
	 * @param workingSet
	 * @return IResource[]
	 */</comment>
	<function><specifier>private</specifier> <type><name><name>IResource</name><index>[]</index></name></type> <name>getResourcesInWorkingSet</name><parameter_list>(<parameter><decl><type><name>IWorkingSet</name></type> <name>workingSet</name></decl></parameter>)</parameter_list> <block>{

		<if>if <condition>(<expr><name>workingSet</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then>
			<block type="pseudo"><return>return <expr><operator>new</operator> <name><name>IResource</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</return></block></then></if>

		<if>if <condition>(<expr><call><name><name>workingSet</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
			<block type="pseudo"><return>return <expr><operator>new</operator> <name><name>IResource</name><index>[]</index></name> <block>{ <expr><call><name><name>ResourcesPlugin</name><operator>.</operator><name>getWorkspace</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getRoot</name><argument_list>()</argument_list></call></expr> }</block></expr>;</return></block></then></if>

		<decl_stmt><decl><type><name><name>IAdaptable</name><index>[]</index></name></type> <name>elements</name> <init>= <expr><call><name><name>workingSet</name><operator>.</operator><name>getElements</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>List</name></type> <name>result</name> <init>= <expr><operator>new</operator> <call><name>ArrayList</name><argument_list>(<argument><expr><name><name>elements</name><operator>.</operator><name>length</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<for>for <control>(<init><decl><type><name>int</name></type> <name>idx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>idx</name> <operator>&lt;</operator> <name><name>elements</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>idx</name><operator>++</operator></expr></incr>)</control> <block>{
			<decl_stmt><decl><type><name>IResource</name></type> <name>next</name> <init>= <expr><operator>(</operator><name>IResource</name><operator>)</operator> <name><name>elements</name><index>[<expr><name>idx</name></expr>]</index></name>
					<operator>.</operator><call><name>getAdapter</name><argument_list>(<argument><expr><name><name>IResource</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

			<if>if <condition>(<expr><name>next</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
				<expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>
		}</block></for>

		<return>return <expr><operator>(</operator><name><name>IResource</name><index>[]</index></name><operator>)</operator> <call><name><name>result</name><operator>.</operator><name>toArray</name></name><argument_list>(<argument><expr><operator>new</operator> <name><name>IResource</name><index>[<expr><call><name><name>result</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>

	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Initialise the receiver from the configuration element. This is done as a
	 * post processing step.
	 * 
	 * @param registry
	 *            the MarkerSupportRegistry being used to initialise the
	 *            receiver.
	 */</comment>
	<function><specifier>public</specifier> <type><name>void</name></type> <name>initializeFromConfigurationElement</name><parameter_list>(
			<parameter><decl><type><name>MarkerSupportRegistry</name></type> <name>registry</name></decl></parameter>)</parameter_list> <block>{

		<decl_stmt><decl><type><name><name>IConfigurationElement</name><index>[]</index></name></type> <name>elements</name> <init>= <expr><call><name><name>configurationElement</name>
				<operator>.</operator><name>getChildren</name></name><argument_list>(<argument><expr><name>MARKER_FIELD_REFERENCE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>Collection</name></type> <name>allFieldList</name> <init>= <expr><operator>new</operator> <call><name>ArrayList</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>Collection</name></type> <name>initialVisibleList</name> <init>= <expr><operator>new</operator> <call><name>ArrayList</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>elements</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
			<decl_stmt><decl><type><name>MarkerField</name></type> <name>field</name> <init>= <expr><call><name><name>registry</name><operator>.</operator><name>getField</name></name><argument_list>(<argument><expr><name><name>elements</name><index>[<expr><name>i</name></expr>]</index></name>
					<operator>.</operator><call><name>getAttribute</name><argument_list>(<argument><expr><name><name>MarkerSupportConstants</name><operator>.</operator><name>ATTRIBUTE_ID</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<if>if <condition>(<expr><name>field</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then>
				<block type="pseudo"><continue>continue;</continue></block></then></if>
			<expr_stmt><expr><call><name><name>allFieldList</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>field</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if>if <condition>(<expr><operator>!</operator><call><name><name>MarkerSupportInternalUtilities</name><operator>.</operator><name>VALUE_FALSE</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>elements</name><index>[<expr><name>i</name></expr>]</index></name>
					<operator>.</operator><call><name>getAttribute</name><argument_list>(<argument><expr><name>ATTRIBUTE_VISIBLE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then>
				<block type="pseudo"><expr_stmt><expr><call><name><name>initialVisibleList</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>field</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
		}</block></for>

		<expr_stmt><expr><name>allFields</name> <operator>=</operator> <operator>new</operator> <name><name>MarkerField</name><index>[<expr><call><name><name>allFieldList</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>allFieldList</name><operator>.</operator><name>toArray</name></name><argument_list>(<argument><expr><name>allFields</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>initialVisible</name> <operator>=</operator> <operator>new</operator> <name><name>MarkerField</name><index>[<expr><call><name><name>initialVisibleList</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>initialVisibleList</name><operator>.</operator><name>toArray</name></name><argument_list>(<argument><expr><name>initialVisible</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Add the extensions to the receiver.
	 * 
	 * @param extensions
	 *            Collection of {@link IConfigurationElement}
	 */</comment>
	<function><specifier>public</specifier> <type><name>void</name></type> <name>addExtensions</name><parameter_list>(<parameter><decl><type><name>Collection</name></type> <name>extensions</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><name>generatorExtensions</name> <operator>=</operator> <name>extensions</name></expr>;</expr_stmt>

	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Remove the element from the generator extensions
	 * 
	 * @param element
	 */</comment>
	<function><specifier>public</specifier> <type><name>void</name></type> <name>removeExtension</name><parameter_list>(<parameter><decl><type><name>IConfigurationElement</name></type> <name>element</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><call><name><name>generatorExtensions</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><name>element</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	}</block></function>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="org.eclipse.ui.ide.markers.compatibility/src/org/eclipse/ui/ide/markers/compatibility/internal/MarkerPathField.java" hash="6896100c5e44fd23f3a2d73c6dc0cbed43ec863f"><comment type="block" format="javadoc">/*******************************************************************************
 * Copyright (c) 2007 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     IBM Corporation - initial API and implementation
 ******************************************************************************/</comment>

<package>package <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>ide</name><operator>.</operator><name>markers</name><operator>.</operator><name>compatibility</name><operator>.</operator><name>internal</name></name>;</package>

<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>swt</name><operator>.</operator><name>widgets</name><operator>.</operator><name>Control</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>ide</name><operator>.</operator><name>markers</name><operator>.</operator><name>compatibility</name><operator>.</operator><name>api</name><operator>.</operator><name>MarkerField</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>ide</name><operator>.</operator><name>markers</name><operator>.</operator><name>compatibility</name><operator>.</operator><name>api</name><operator>.</operator><name>MarkerItem</name></name>;</import>


<comment type="block" format="javadoc">/**
 * MarkerPathField is the field for the paths column.
 * 
 * @since 3.4
 * 
 */</comment>
<class><specifier>public</specifier> class <name>MarkerPathField</name> <super><extends>extends <name>MarkerField</name></extends></super> <block>{

	<comment type="block">/*
	 * (non-Javadoc)
	 * 
	 * @see org.eclipse.ui.internal.provisional.views.markers.IMarkerField#compare(org.eclipse.ui.internal.provisional.views.markers.MarkerItem,
	 *      org.eclipse.ui.internal.provisional.views.markers.MarkerItem)
	 */</comment>
	<function><specifier>public</specifier> <type><name>int</name></type> <name>compare</name><parameter_list>(<parameter><decl><type><name>MarkerItem</name></type> <name>item1</name></decl></parameter>, <parameter><decl><type><name>MarkerItem</name></type> <name>item2</name></decl></parameter>)</parameter_list> <block>{
		<if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name><name>item1</name><operator>.</operator><name>isConcrete</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>item2</name><operator>.</operator><name>isConcrete</name></name><argument_list>()</argument_list></call><operator>)</operator></expr>)</condition><then>
			<block type="pseudo"><return>return <expr><literal type="number">0</literal></expr>;</return></block></then></if>

		<return>return <expr><call><name><name>item1</name><operator>.</operator><name>getPath</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>compareTo</name><argument_list>(<argument><expr><call><name><name>item2</name><operator>.</operator><name>getPath</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
	}</block></function>

	<comment type="block">/* (non-Javadoc)
	 * @see org.eclipse.ui.internal.provisional.views.markers.api.MarkerField#getDefaultColumnWidth(org.eclipse.swt.widgets.Control)
	 */</comment>
	<function><specifier>public</specifier> <type><name>int</name></type> <name>getDefaultColumnWidth</name><parameter_list>(<parameter><decl><type><name>Control</name></type> <name>control</name></decl></parameter>)</parameter_list> <block>{
		<return>return <expr><literal type="number">20</literal> <operator>*</operator> <call><name>getFontWidth</name><argument_list>(<argument><expr><name>control</name></expr></argument>)</argument_list></call></expr>;</return>
	}</block></function>


	<comment type="block">/*
	 * (non-Javadoc)
	 * 
	 * @see org.eclipse.ui.internal.provisional.views.markers.IMarkerField#getValue(org.eclipse.ui.internal.provisional.views.markers.MarkerItem)
	 */</comment>
	<function><specifier>public</specifier> <type><name>String</name></type> <name>getValue</name><parameter_list>(<parameter><decl><type><name>MarkerItem</name></type> <name>item</name></decl></parameter>)</parameter_list> <block>{
		<return>return <expr><call><name><name>item</name><operator>.</operator><name>getPath</name></name><argument_list>()</argument_list></call></expr>;</return>
	}</block></function>

}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="org.eclipse.ui.ide.markers.compatibility/src/org/eclipse/ui/ide/markers/compatibility/internal/MarkerPreferencesHandler.java" hash="4e902af129a79189274a6cf99949fb6527958839"><comment type="block" format="javadoc">/*******************************************************************************
 * Copyright (c) 2005, 2007 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     IBM Corporation - initial API and implementation
 *******************************************************************************/</comment>
<package>package <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>ide</name><operator>.</operator><name>markers</name><operator>.</operator><name>compatibility</name><operator>.</operator><name>internal</name></name>;</package>

<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>core</name><operator>.</operator><name>commands</name><operator>.</operator><name>ExecutionEvent</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>core</name><operator>.</operator><name>commands</name><operator>.</operator><name>IHandler</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>ide</name><operator>.</operator><name>markers</name><operator>.</operator><name>compatibility</name><operator>.</operator><name>api</name><operator>.</operator><name>MarkerViewHandler</name></name>;</import>

<comment type="block" format="javadoc">/**
 * MarkerPreferencesHandler is the handler for opening the marker preferences dialog.
 * @since 3.4
 *
 */</comment>
<class><specifier>public</specifier> class <name>MarkerPreferencesHandler</name> <super><extends>extends <name>MarkerViewHandler</name></extends> <implements>implements
		<name>IHandler</name></implements></super> <block>{

	<comment type="block">/* (non-Javadoc)
	 * @see org.eclipse.core.commands.IHandler#execute(org.eclipse.core.commands.ExecutionEvent)
	 */</comment>
	<function><specifier>public</specifier> <type><name>Object</name></type> <name>execute</name><parameter_list>(<parameter><decl><type><name>ExecutionEvent</name></type> <name>event</name></decl></parameter>)</parameter_list> <block>{
		
		<decl_stmt><decl><type><name>ExtendedMarkersView</name></type> <name>view</name> <init>= <expr><call><name>getView</name><argument_list>(<argument><expr><name>event</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if>if<condition>(<expr><name>view</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then>
			<block type="pseudo"><return>return <expr><name>this</name></expr>;</return></block></then></if>
		
		<expr_stmt><expr><operator>(</operator><operator>new</operator> <call><name>MarkerPreferencesDialog</name><argument_list>(<argument><expr><call><name><name>view</name><operator>.</operator><name>getSite</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getShell</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator><operator>.</operator><call><name>open</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>this</name></expr>;</return>
	}</block></function>

}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="org.eclipse.ui.ide.markers.compatibility/src/org/eclipse/ui/ide/markers/compatibility/internal/MarkerProblemSeverityAndMessageField.java" hash="f970959d545bef3b4c1fcb3f2b77122acc15a8b2"><comment type="block" format="javadoc">/*******************************************************************************
 * Copyright (c) 2007,2008 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     IBM Corporation - initial API and implementation
 ******************************************************************************/</comment>

<package>package <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>ide</name><operator>.</operator><name>markers</name><operator>.</operator><name>compatibility</name><operator>.</operator><name>internal</name></name>;</package>

<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>jface</name><operator>.</operator><name>resource</name><operator>.</operator><name>DeviceResourceException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>jface</name><operator>.</operator><name>resource</name><operator>.</operator><name>JFaceResources</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>swt</name><operator>.</operator><name>graphics</name><operator>.</operator><name>Image</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>ide</name><operator>.</operator><name>markers</name><operator>.</operator><name>compatibility</name><operator>.</operator><name>api</name><operator>.</operator><name>MarkerItem</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>internal</name><operator>.</operator><name>ide</name><operator>.</operator><name>IDEInternalWorkbenchImages</name></name>;</import>

<comment type="block" format="javadoc">/**
 * MarkerSeverityAndMessageField is the field for severity and messages.
 * 
 * @since 3.4
 * 
 */</comment>
<class><specifier>public</specifier> class <name>MarkerProblemSeverityAndMessageField</name> <super><extends>extends <name>MarkerDescriptionField</name></extends></super> <block>{

	<comment type="block">/*
	 * (non-Javadoc)
	 * 
	 * @see org.eclipse.ui.provisional.views.markers.IMarkerField#compare(org.eclipse.ui.provisional.views.markers.MarkerItem,
	 *      org.eclipse.ui.provisional.views.markers.MarkerItem)
	 */</comment>
	<function><specifier>public</specifier> <type><name>int</name></type> <name>compare</name><parameter_list>(<parameter><decl><type><name>MarkerItem</name></type> <name>item1</name></decl></parameter>, <parameter><decl><type><name>MarkerItem</name></type> <name>item2</name></decl></parameter>)</parameter_list> <block>{

		<decl_stmt><decl><type><name>int</name></type> <name>severity1</name> <init>= <expr><call><name>getSeverity</name><argument_list>(<argument><expr><name>item1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>severity2</name> <init>= <expr><call><name>getSeverity</name><argument_list>(<argument><expr><name>item2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if>if <condition>(<expr><name>severity1</name> <operator>==</operator> <name>severity2</name></expr>)</condition><then>
			<block type="pseudo"><return>return <expr><call><name><name>super</name><operator>.</operator><name>compare</name></name><argument_list>(<argument><expr><name>item1</name></expr></argument>, <argument><expr><name>item2</name></expr></argument>)</argument_list></call></expr>;</return></block></then></if>
		<return>return <expr><name>severity2</name> <operator>-</operator> <name>severity1</name></expr>;</return>
	}</block></function>

	<comment type="block">/*
	 * (non-Javadoc)
	 * 
	 * @see org.eclipse.ui.provisional.views.markers.IMarkerField#getImage(org.eclipse.ui.provisional.views.markers.MarkerItem)
	 */</comment>
	<function><specifier>public</specifier> <type><name>Image</name></type> <name>getImage</name><parameter_list>(<parameter><decl><type><name>MarkerItem</name></type> <name>item</name></decl></parameter>)</parameter_list> <block>{

		<decl_stmt><decl><type><name>int</name></type> <name>severity</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
		<if>if <condition>(<expr><call><name><name>item</name><operator>.</operator><name>isConcrete</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
			<block type="pseudo"><expr_stmt><expr><name>severity</name> <operator>=</operator> <call><name>getSeverity</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
		<else>else <block>{

			<if>if <condition>(<expr><name>item</name> <operator>instanceof</operator> <name>MarkerCategory</name></expr>)</condition><then>
				<block type="pseudo"><expr_stmt><expr><name>severity</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>MarkerCategory</name><operator>)</operator> <name>item</name><operator>)</operator><operator>.</operator><call><name>getHighestSeverity</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></then></if>
		}</block></else></if>
		<if>if <condition>(<expr><name>severity</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><then>
			<block type="pseudo"><return>return <expr><call><name><name>MarkerSupportInternalUtilities</name><operator>.</operator><name>getSeverityImage</name></name><argument_list>(<argument><expr><name>severity</name></expr></argument>)</argument_list></call></expr>;</return></block></then></if>
		<try>try <block>{
			<if>if <condition>(<expr><call><name><name>item</name><operator>.</operator><name>isConcrete</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
				<block type="pseudo"><return>return <expr><literal type="null">null</literal></expr>;</return></block></then></if>
			<return>return <expr><call><name><name>JFaceResources</name>
					<operator>.</operator><name>getResources</name></name><argument_list>()</argument_list></call>
					<operator>.</operator><call><name>createImageWithDefault</name><argument_list>(
							<argument><expr><call><name><name>IDEInternalWorkbenchImages</name>
									<operator>.</operator><name>getImageDescriptor</name></name><argument_list>(<argument><expr><name><name>IDEInternalWorkbenchImages</name><operator>.</operator><name>IMG_ETOOL_PROBLEM_CATEGORY</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
		}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>DeviceResourceException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
			<return>return <expr><literal type="null">null</literal></expr>;</return>
		}</block></catch></try>

	}</block></function>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="org.eclipse.ui.ide.markers.compatibility/src/org/eclipse/ui/ide/markers/compatibility/internal/MarkerResourceField.java" hash="33e242709af7162d435533b956dee66929678dc2"><comment type="block" format="javadoc">/*******************************************************************************
 * Copyright (c) 2007 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     IBM Corporation - initial API and implementation
 ******************************************************************************/</comment>

<package>package <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>ide</name><operator>.</operator><name>markers</name><operator>.</operator><name>compatibility</name><operator>.</operator><name>internal</name></name>;</package>

<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>ide</name><operator>.</operator><name>markers</name><operator>.</operator><name>compatibility</name><operator>.</operator><name>api</name><operator>.</operator><name>MarkerField</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>ide</name><operator>.</operator><name>markers</name><operator>.</operator><name>compatibility</name><operator>.</operator><name>api</name><operator>.</operator><name>MarkerItem</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>ide</name><operator>.</operator><name>markers</name><operator>.</operator><name>compatibility</name><operator>.</operator><name>api</name><operator>.</operator><name>MarkerSupportConstants</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>ide</name><operator>.</operator><name>markers</name><operator>.</operator><name>compatibility</name><operator>.</operator><name>api</name><operator>.</operator><name>MarkerViewUtil</name></name>;</import>

<comment type="block" format="javadoc">/**
 * MarkerResourceField is the field that specifies the resource column.
 * 
 * @since 3.4
 * 
 */</comment>
<class><specifier>public</specifier> class <name>MarkerResourceField</name> <super><extends>extends <name>MarkerField</name></extends></super> <block>{

	<comment type="block">/*
	 * (non-Javadoc)
	 * 
	 * @see org.eclipse.ui.provisional.views.markers.IMarkerField#getValue(org.eclipse.ui.provisional.views.markers.MarkerItem)
	 */</comment>
	<function><specifier>public</specifier> <type><name>String</name></type> <name>getValue</name><parameter_list>(<parameter><decl><type><name>MarkerItem</name></type> <name>item</name></decl></parameter>)</parameter_list> <block>{
		<if>if <condition>(<expr><call><name><name>item</name><operator>.</operator><name>isConcrete</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
			<return>return <expr><call><name><name>item</name><operator>.</operator><name>getAttributeValue</name></name><argument_list>(<argument><expr><name><name>MarkerViewUtil</name><operator>.</operator><name>NAME_ATTRIBUTE</name></name></expr></argument>, <argument><expr><call><name><name>item</name>
					<operator>.</operator><name>getConcreteRepresentative</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getMarker</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getResource</name><argument_list>()</argument_list></call>
					<operator>.</operator><call><name>getName</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
		}</block></then></if>
		<return>return <expr><name><name>MarkerSupportConstants</name><operator>.</operator><name>EMPTY_STRING</name></name></expr>;</return>
	}</block></function>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="org.eclipse.ui.ide.markers.compatibility/src/org/eclipse/ui/ide/markers/compatibility/internal/MarkerSelectAllHandler.java" hash="1abe114db4ec190c3d0e2ed7c5f2b2d7032dfcf2"><package>package <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>ide</name><operator>.</operator><name>markers</name><operator>.</operator><name>compatibility</name><operator>.</operator><name>internal</name></name>;</package>
<comment type="block" format="javadoc">/*******************************************************************************
 * Copyright (c) 2007 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     IBM Corporation - initial API and implementation
 ******************************************************************************/</comment>

<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>core</name><operator>.</operator><name>commands</name><operator>.</operator><name>ExecutionEvent</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>core</name><operator>.</operator><name>commands</name><operator>.</operator><name>IHandler</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>ide</name><operator>.</operator><name>markers</name><operator>.</operator><name>compatibility</name><operator>.</operator><name>api</name><operator>.</operator><name>MarkerViewHandler</name></name>;</import>

<comment type="block" format="javadoc">/**
 * MarkerSelectAllHandler is the handler for the select all action.
 * @since 3.4
 *
 */</comment>
<class><specifier>public</specifier> class <name>MarkerSelectAllHandler</name> <super><extends>extends <name>MarkerViewHandler</name></extends> <implements>implements
		<name>IHandler</name></implements></super> <block>{

	<comment type="block">/* (non-Javadoc)
	 * @see org.eclipse.core.commands.IHandler#execute(org.eclipse.core.commands.ExecutionEvent)
	 */</comment>
	<function><specifier>public</specifier> <type><name>Object</name></type> <name>execute</name><parameter_list>(<parameter><decl><type><name>ExecutionEvent</name></type> <name>event</name></decl></parameter>)</parameter_list>  <block>{
		<decl_stmt><decl><type><name>ExtendedMarkersView</name></type> <name>view</name> <init>= <expr><call><name>getView</name><argument_list>(<argument><expr><name>event</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if>if<condition>(<expr><name>view</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then>
			<block type="pseudo"><expr_stmt><expr><call><name><name>view</name><operator>.</operator><name>selectAll</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></then></if>
		<return>return <expr><name>this</name></expr>;</return>
	}</block></function>

}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="org.eclipse.ui.ide.markers.compatibility/src/org/eclipse/ui/ide/markers/compatibility/internal/MarkerPriorityField.java" hash="05c59399f2ce9484f2bb0d1ab0c8c43092fa3049"><comment type="block" format="javadoc">/*******************************************************************************
 * Copyright (c) 2007 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     IBM Corporation - initial API and implementation
 ******************************************************************************/</comment>
<package>package <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>ide</name><operator>.</operator><name>markers</name><operator>.</operator><name>compatibility</name><operator>.</operator><name>internal</name></name>;</package>

<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>core</name><operator>.</operator><name>resources</name><operator>.</operator><name>IMarker</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>core</name><operator>.</operator><name>runtime</name><operator>.</operator><name>CoreException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>jface</name><operator>.</operator><name>viewers</name><operator>.</operator><name>CellEditor</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>jface</name><operator>.</operator><name>viewers</name><operator>.</operator><name>ColumnViewer</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>jface</name><operator>.</operator><name>viewers</name><operator>.</operator><name>ComboBoxCellEditor</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>jface</name><operator>.</operator><name>viewers</name><operator>.</operator><name>EditingSupport</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>swt</name><operator>.</operator><name>SWT</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>swt</name><operator>.</operator><name>graphics</name><operator>.</operator><name>Image</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>swt</name><operator>.</operator><name>widgets</name><operator>.</operator><name>Composite</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>swt</name><operator>.</operator><name>widgets</name><operator>.</operator><name>Control</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>ide</name><operator>.</operator><name>markers</name><operator>.</operator><name>compatibility</name><operator>.</operator><name>api</name><operator>.</operator><name>MarkerField</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>ide</name><operator>.</operator><name>markers</name><operator>.</operator><name>compatibility</name><operator>.</operator><name>api</name><operator>.</operator><name>MarkerItem</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>ide</name><operator>.</operator><name>markers</name><operator>.</operator><name>compatibility</name><operator>.</operator><name>api</name><operator>.</operator><name>MarkerSupportConstants</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>ide</name><operator>.</operator><name>markers</name><operator>.</operator><name>compatibility</name><operator>.</operator><name>api</name><operator>.</operator><name>internal</name><operator>.</operator><name>MarkerMessages</name></name>;</import>

<comment type="block" format="javadoc">/**
 * MarkerPriorityField is the field for task priority.
 * 
 * @since 3.4
 * 
 */</comment>
<class><specifier>public</specifier> class <name>MarkerPriorityField</name> <super><extends>extends <name>MarkerField</name></extends></super> <block>{

	<decl_stmt><decl><specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>HIGH_PRIORITY_IMAGE_PATH</name> <init>= <expr><literal type="string">"$nl$/icons/full/obj16/hprio_tsk.gif"</literal></expr></init></decl>;</decl_stmt> <comment type="line">//$NON-NLS-1$</comment>

	<decl_stmt><decl><specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>LOW_PRIORITY_IMAGE_PATH</name> <init>= <expr><literal type="string">"$nl$/icons/full/obj16/lprio_tsk.gif"</literal></expr></init></decl>;</decl_stmt> <comment type="line">//$NON-NLS-1$</comment>

	<decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><name><name>String</name><index>[]</index></name></type> <name>priorities</name> <init>= <expr><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{
			<expr><name><name>MarkerMessages</name><operator>.</operator><name>priority_low</name></name></expr>, <expr><name><name>MarkerMessages</name><operator>.</operator><name>priority_normal</name></name></expr>,
			<expr><name><name>MarkerMessages</name><operator>.</operator><name>priority_high</name></name></expr> }</block></expr></init></decl>;</decl_stmt>

	<class><specifier>private</specifier> class <name>PriorityEditingSupport</name> <super><extends>extends <name>EditingSupport</name></extends></super> <block>{

		<decl_stmt><decl><specifier>private</specifier> <type><name>ComboBoxCellEditor</name></type> <name>editor</name></decl>;</decl_stmt>

		<comment type="block" format="javadoc">/**
		 * Create a new instance of the receiver.
		 * 
		 * @param viewer
		 */</comment>
		<constructor><specifier>public</specifier> <name>PriorityEditingSupport</name><parameter_list>(<parameter><decl><type><name>ColumnViewer</name></type> <name>viewer</name></decl></parameter>)</parameter_list> <block>{
			<expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>viewer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>this</name><operator>.</operator><name>editor</name></name> <operator>=</operator> <operator>new</operator> <call><name>ComboBoxCellEditor</name><argument_list>(<argument><expr><operator>(</operator><name>Composite</name><operator>)</operator> <call><name><name>viewer</name>
					<operator>.</operator><name>getControl</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>priorities</name></expr></argument>, <argument><expr><name><name>SWT</name><operator>.</operator><name>READ_ONLY</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></constructor>

		<comment type="block">/*
		 * (non-Javadoc)
		 * 
		 * @see org.eclipse.jface.viewers.EditingSupport#canEdit(java.lang.Object)
		 */</comment>
		<function><specifier>protected</specifier> <type><name>boolean</name></type> <name>canEdit</name><parameter_list>(<parameter><decl><type><name>Object</name></type> <name>element</name></decl></parameter>)</parameter_list> <block>{
			<if>if <condition>(<expr><name>element</name> <operator>instanceof</operator> <name>MarkerEntry</name></expr>)</condition><then>
				<block type="pseudo"><return>return <expr><operator>(</operator><operator>(</operator><name>MarkerEntry</name><operator>)</operator> <name>element</name><operator>)</operator><operator>.</operator><call><name>getAttributeValue</name><argument_list>(
						<argument><expr><name><name>IMarker</name><operator>.</operator><name>USER_EDITABLE</name></name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</return></block></then></if>
			<return>return <expr><literal type="boolean">false</literal></expr>;</return>
		}</block></function>

		<comment type="block">/*
		 * (non-Javadoc)
		 * 
		 * @see org.eclipse.jface.viewers.EditingSupport#getCellEditor(java.lang.Object)
		 */</comment>
		<function><specifier>protected</specifier> <type><name>CellEditor</name></type> <name>getCellEditor</name><parameter_list>(<parameter><decl><type><name>Object</name></type> <name>element</name></decl></parameter>)</parameter_list> <block>{
			<return>return <expr><name>editor</name></expr>;</return>
		}</block></function>

		<comment type="block">/*
		 * (non-Javadoc)
		 * 
		 * @see org.eclipse.jface.viewers.EditingSupport#getValue(java.lang.Object)
		 */</comment>
		<function><specifier>protected</specifier> <type><name>Object</name></type> <name>getValue</name><parameter_list>(<parameter><decl><type><name>Object</name></type> <name>element</name></decl></parameter>)</parameter_list> <block>{
			<return>return <expr><operator>new</operator> <call><name>Integer</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>MarkerEntry</name><operator>)</operator> <name>element</name><operator>)</operator><operator>.</operator><call><name>getAttributeValue</name><argument_list>(
					<argument><expr><name><name>IMarker</name><operator>.</operator><name>PRIORITY</name></name></expr></argument>, <argument><expr><name><name>IMarker</name><operator>.</operator><name>PRIORITY_NORMAL</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
		}</block></function>

		<comment type="block">/*
		 * (non-Javadoc)
		 * 
		 * @see org.eclipse.jface.viewers.EditingSupport#setValue(java.lang.Object,
		 *      java.lang.Object)
		 */</comment>
		<function><specifier>protected</specifier> <type><name>void</name></type> <name>setValue</name><parameter_list>(<parameter><decl><type><name>Object</name></type> <name>element</name></decl></parameter>, <parameter><decl><type><name>Object</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{
			<decl_stmt><decl><type><name>MarkerEntry</name></type> <name>entry</name> <init>= <expr><operator>(</operator><name>MarkerEntry</name><operator>)</operator> <name>element</name></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>Integer</name></type> <name>integerValue</name> <init>= <expr><operator>(</operator><name>Integer</name><operator>)</operator> <name>value</name></expr></init></decl>;</decl_stmt>
			<try>try <block>{
				<expr_stmt><expr><call><name><name>entry</name><operator>.</operator><name>getMarker</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>setAttribute</name><argument_list>(<argument><expr><name><name>IMarker</name><operator>.</operator><name>PRIORITY</name></name></expr></argument>,
						<argument><expr><call><name><name>integerValue</name><operator>.</operator><name>intValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>CoreException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
				<expr_stmt><expr><call><name><name>MarkerSupportInternalUtilities</name><operator>.</operator><name>handle</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></catch></try>

		}</block></function>
	}</block></class>

	<comment type="block" format="javadoc">/**
	 * Return a new priority field.
	 */</comment>
	<constructor><specifier>public</specifier> <name>MarkerPriorityField</name><parameter_list>()</parameter_list> <block>{
		<expr_stmt><expr><call><name>super</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	}</block></constructor>

	<comment type="block">/*
	 * (non-Javadoc)
	 * 
	 * @see org.eclipse.ui.internal.provisional.views.markers.MarkerField#getColumnHeaderText()
	 */</comment>
	<function><specifier>public</specifier> <type><name>String</name></type> <name>getColumnHeaderText</name><parameter_list>()</parameter_list> <block>{
		<return>return <expr><name><name>MarkerSupportConstants</name><operator>.</operator><name>EMPTY_STRING</name></name></expr>;</return>
	}</block></function>

	<comment type="block">/*
	 * (non-Javadoc)
	 * 
	 * @see org.eclipse.ui.internal.provisional.views.markers.api.MarkerField#getColumnTooltipText()
	 */</comment>
	<function><specifier>public</specifier> <type><name>String</name></type> <name>getColumnTooltipText</name><parameter_list>()</parameter_list> <block>{
		<return>return <expr><name><name>MarkerMessages</name><operator>.</operator><name>priority_description</name></name></expr>;</return>
	}</block></function>

	<comment type="block">/*
	 * (non-Javadoc)
	 * 
	 * @see org.eclipse.ui.internal.provisional.views.markers.api.MarkerField#getDefaultColumnWidth(org.eclipse.swt.widgets.Control)
	 */</comment>
	<function><specifier>public</specifier> <type><name>int</name></type> <name>getDefaultColumnWidth</name><parameter_list>(<parameter><decl><type><name>Control</name></type> <name>control</name></decl></parameter>)</parameter_list> <block>{
		<return>return <expr><call><name>getHighPriorityImage</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getBounds</name><argument_list>()</argument_list></call><operator>.</operator><name>width</name></expr>;</return>
	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Get the image for high priority
	 * 
	 * @return Image
	 */</comment>
	<function><specifier>private</specifier> <type><name>Image</name></type> <name>getHighPriorityImage</name><parameter_list>()</parameter_list> <block>{
		<return>return <expr><call><name><name>MarkerSupportInternalUtilities</name>
				<operator>.</operator><name>createImage</name></name><argument_list>(<argument><expr><name>HIGH_PRIORITY_IMAGE_PATH</name></expr></argument>)</argument_list></call></expr>;</return>
	}</block></function>

	<comment type="block">/*
	 * (non-Javadoc)
	 * 
	 * @see org.eclipse.ui.internal.provisional.views.markers.MarkerField#getImage(org.eclipse.ui.internal.provisional.views.markers.MarkerItem)
	 */</comment>
	<function><specifier>public</specifier> <type><name>Image</name></type> <name>getImage</name><parameter_list>(<parameter><decl><type><name>MarkerItem</name></type> <name>item</name></decl></parameter>)</parameter_list> <block>{
		<try>try <block>{
			<decl_stmt><decl><type><name>int</name></type> <name>priority</name> <init>= <expr><call><name><name>item</name><operator>.</operator><name>getAttributeValue</name></name><argument_list>(<argument><expr><name><name>IMarker</name><operator>.</operator><name>PRIORITY</name></name></expr></argument>,
					<argument><expr><name><name>IMarker</name><operator>.</operator><name>PRIORITY_NORMAL</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<if>if <condition>(<expr><name>priority</name> <operator>==</operator> <name><name>IMarker</name><operator>.</operator><name>PRIORITY_HIGH</name></name></expr>)</condition><then> <block>{
				<return>return <expr><call><name>getHighPriorityImage</name><argument_list>()</argument_list></call></expr>;</return>
			}</block></then></if>
			<if>if <condition>(<expr><name>priority</name> <operator>==</operator> <name><name>IMarker</name><operator>.</operator><name>PRIORITY_LOW</name></name></expr>)</condition><then> <block>{
				<return>return <expr><call><name><name>MarkerSupportInternalUtilities</name>
						<operator>.</operator><name>createImage</name></name><argument_list>(<argument><expr><name>LOW_PRIORITY_IMAGE_PATH</name></expr></argument>)</argument_list></call></expr>;</return>
			}</block></then></if>
		}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>NumberFormatException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
			<return>return <expr><literal type="null">null</literal></expr>;</return>
		}</block></catch></try>
		<return>return <expr><literal type="null">null</literal></expr>;</return>
	}</block></function>

	<comment type="block">/*
	 * (non-Javadoc)
	 * 
	 * @see org.eclipse.ui.internal.provisional.views.markers.MarkerField#getValue(org.eclipse.ui.internal.provisional.views.markers.MarkerItem)
	 */</comment>
	<function><specifier>public</specifier> <type><name>String</name></type> <name>getValue</name><parameter_list>(<parameter><decl><type><name>MarkerItem</name></type> <name>item</name></decl></parameter>)</parameter_list> <block>{
		<return>return <expr><name><name>MarkerSupportConstants</name><operator>.</operator><name>EMPTY_STRING</name></name></expr>;</return>
	}</block></function>

	<comment type="block">/*
	 * (non-Javadoc)
	 * 
	 * @see org.eclipse.ui.internal.provisional.views.markers.api.MarkerField#compare(org.eclipse.ui.internal.provisional.views.markers.api.MarkerItem,
	 *      org.eclipse.ui.internal.provisional.views.markers.api.MarkerItem)
	 */</comment>
	<function><specifier>public</specifier> <type><name>int</name></type> <name>compare</name><parameter_list>(<parameter><decl><type><name>MarkerItem</name></type> <name>item1</name></decl></parameter>, <parameter><decl><type><name>MarkerItem</name></type> <name>item2</name></decl></parameter>)</parameter_list> <block>{
		<return>return <expr><call><name><name>item2</name><operator>.</operator><name>getAttributeValue</name></name><argument_list>(<argument><expr><name><name>IMarker</name><operator>.</operator><name>PRIORITY</name></name></expr></argument>,
				<argument><expr><name><name>IMarker</name><operator>.</operator><name>PRIORITY_NORMAL</name></name></expr></argument>)</argument_list></call>
				<operator>-</operator> <call><name><name>item1</name><operator>.</operator><name>getAttributeValue</name></name><argument_list>(<argument><expr><name><name>IMarker</name><operator>.</operator><name>PRIORITY</name></name></expr></argument>,
						<argument><expr><name><name>IMarker</name><operator>.</operator><name>PRIORITY_NORMAL</name></name></expr></argument>)</argument_list></call></expr>;</return>
	}</block></function>

	<comment type="block">/*
	 * (non-Javadoc)
	 * 
	 * @see org.eclipse.ui.internal.provisional.views.markers.api.MarkerField#getEditingSupport(org.eclipse.jface.viewers.ColumnViewer)
	 */</comment>
	<function><specifier>public</specifier> <type><name>EditingSupport</name></type> <name>getEditingSupport</name><parameter_list>(<parameter><decl><type><name>ColumnViewer</name></type> <name>viewer</name></decl></parameter>)</parameter_list> <block>{
		<return>return <expr><operator>new</operator> <call><name>PriorityEditingSupport</name><argument_list>(<argument><expr><name>viewer</name></expr></argument>)</argument_list></call></expr>;</return>
	}</block></function>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="org.eclipse.ui.ide.markers.compatibility/src/org/eclipse/ui/ide/markers/compatibility/internal/MarkerSeverityAndDescriptionField.java" hash="b82e1b0b5d898821afa5379cf09a11b3b8bfdbe5"><comment type="block" format="javadoc">/*******************************************************************************
 * Copyright (c) 2008 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     IBM Corporation - initial API and implementation
 ******************************************************************************/</comment>

<package>package <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>ide</name><operator>.</operator><name>markers</name><operator>.</operator><name>compatibility</name><operator>.</operator><name>internal</name></name>;</package>

<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>core</name><operator>.</operator><name>resources</name><operator>.</operator><name>IMarker</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>swt</name><operator>.</operator><name>graphics</name><operator>.</operator><name>Image</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>ide</name><operator>.</operator><name>markers</name><operator>.</operator><name>compatibility</name><operator>.</operator><name>api</name><operator>.</operator><name>MarkerItem</name></name>;</import>

<comment type="block" format="javadoc">/**
 * MarkerSeverityAndDescriptionField can handle severities for all markers.
 * 
 * @since 3.4
 * 
 */</comment>
<class><specifier>public</specifier> class <name>MarkerSeverityAndDescriptionField</name> <super><extends>extends <name>MarkerDescriptionField</name></extends></super> <block>{

	<comment type="block" format="javadoc">/**
	 * Create a new instance of the receiver.
	 */</comment>
	<constructor><specifier>public</specifier> <name>MarkerSeverityAndDescriptionField</name><parameter_list>()</parameter_list> <block>{
		<expr_stmt><expr><call><name>super</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	}</block></constructor>

	<comment type="block">/*
	 * (non-Javadoc)
	 * 
	 * @see org.eclipse.ui.provisional.views.markers.IMarkerField#compare(org.eclipse.ui.provisional.views.markers.MarkerItem,
	 *      org.eclipse.ui.provisional.views.markers.MarkerItem)
	 */</comment>
	<function><specifier>public</specifier> <type><name>int</name></type> <name>compare</name><parameter_list>(<parameter><decl><type><name>MarkerItem</name></type> <name>item1</name></decl></parameter>, <parameter><decl><type><name>MarkerItem</name></type> <name>item2</name></decl></parameter>)</parameter_list> <block>{

		<decl_stmt><decl><type><name>int</name></type> <name>severity1</name> <init>= <expr><call><name>getSeverity</name><argument_list>(<argument><expr><name>item1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>severity2</name> <init>= <expr><call><name>getSeverity</name><argument_list>(<argument><expr><name>item2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if>if <condition>(<expr><name>severity1</name> <operator>==</operator> <name>severity2</name></expr>)</condition><then>
			<block type="pseudo"><return>return <expr><call><name><name>super</name><operator>.</operator><name>compare</name></name><argument_list>(<argument><expr><name>item1</name></expr></argument>, <argument><expr><name>item2</name></expr></argument>)</argument_list></call></expr>;</return></block></then></if>
		<return>return <expr><name>severity2</name> <operator>-</operator> <name>severity1</name></expr>;</return>
	}</block></function>

	<comment type="block">/*
	 * (non-Javadoc)
	 * 
	 * @see org.eclipse.ui.provisional.views.markers.IMarkerField#getImage(org.eclipse.ui.provisional.views.markers.MarkerItem)
	 */</comment>
	<function><specifier>public</specifier> <type><name>Image</name></type> <name>getImage</name><parameter_list>(<parameter><decl><type><name>MarkerItem</name></type> <name>item</name></decl></parameter>)</parameter_list> <block>{

		<decl_stmt><decl><type><name>int</name></type> <name>severity</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
		<if>if <condition>(<expr><call><name><name>item</name><operator>.</operator><name>isConcrete</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
			<block type="pseudo"><expr_stmt><expr><name>severity</name> <operator>=</operator> <call><name>getSeverity</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
		<elseif>else <if>if <condition>(<expr><name>item</name> <operator>instanceof</operator> <name>MarkerCategory</name></expr>)</condition><then>
			<block type="pseudo"><expr_stmt><expr><name>severity</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>MarkerCategory</name><operator>)</operator> <name>item</name><operator>)</operator><operator>.</operator><call><name>getHighestSeverity</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></then></if></elseif></if>

		<if>if <condition>(<expr><name>severity</name> <operator>&gt;=</operator> <name><name>IMarker</name><operator>.</operator><name>SEVERITY_WARNING</name></name></expr>)</condition><then>
			<block type="pseudo"><return>return <expr><call><name><name>MarkerSupportInternalUtilities</name><operator>.</operator><name>getSeverityImage</name></name><argument_list>(<argument><expr><name>severity</name></expr></argument>)</argument_list></call></expr>;</return></block></then></if>
		<return>return <expr><literal type="null">null</literal></expr>;</return>

	}</block></function>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="org.eclipse.ui.ide.markers.compatibility/src/org/eclipse/ui/ide/markers/compatibility/internal/MarkerSeverityField.java" hash="1a779de009366fc7cbe5054156ccd030dca32bd8"><comment type="block" format="javadoc">/*******************************************************************************
 * Copyright (c) 2007 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     IBM Corporation - initial API and implementation
 ******************************************************************************/</comment>

<package>package <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>ide</name><operator>.</operator><name>markers</name><operator>.</operator><name>compatibility</name><operator>.</operator><name>internal</name></name>;</package>

<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>core</name><operator>.</operator><name>resources</name><operator>.</operator><name>IMarker</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>ide</name><operator>.</operator><name>markers</name><operator>.</operator><name>compatibility</name><operator>.</operator><name>api</name><operator>.</operator><name>MarkerField</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>ide</name><operator>.</operator><name>markers</name><operator>.</operator><name>compatibility</name><operator>.</operator><name>api</name><operator>.</operator><name>MarkerItem</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>ide</name><operator>.</operator><name>markers</name><operator>.</operator><name>compatibility</name><operator>.</operator><name>api</name><operator>.</operator><name>MarkerSupportConstants</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>ide</name><operator>.</operator><name>markers</name><operator>.</operator><name>compatibility</name><operator>.</operator><name>api</name><operator>.</operator><name>internal</name><operator>.</operator><name>MarkerMessages</name></name>;</import>

<comment type="block" format="javadoc">/**
 * MarkerSeverityField is the field for showing severity categories.
 * 
 * @since 3.4
 * 
 */</comment>
<class><specifier>public</specifier> class <name>MarkerSeverityField</name> <super><extends>extends <name>MarkerField</name></extends></super> <block>{

	
	<comment type="block">/*
	 * (non-Javadoc)
	 * 
	 * @see org.eclipse.ui.internal.provisional.views.markers.MarkerField#getValue(org.eclipse.ui.internal.provisional.views.markers.MarkerItem)
	 */</comment>
	<function><specifier>public</specifier> <type><name>String</name></type> <name>getValue</name><parameter_list>(<parameter><decl><type><name>MarkerItem</name></type> <name>item</name></decl></parameter>)</parameter_list> <block>{

		<switch>switch <condition>(<expr><call><name><name>item</name><operator>.</operator><name>getAttributeValue</name></name><argument_list>(<argument><expr><name><name>IMarker</name><operator>.</operator><name>SEVERITY</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{
		<case>case <expr><literal type="number">2</literal></expr>:</case>
			<return>return <expr><name><name>MarkerMessages</name><operator>.</operator><name>filtersDialog_severityError</name></name></expr>;</return>
		<case>case <expr><literal type="number">1</literal></expr>:</case>
			<return>return <expr><name><name>MarkerMessages</name><operator>.</operator><name>filtersDialog_severityWarning</name></name></expr>;</return>
		<case>case <expr><literal type="number">0</literal></expr>:</case>
			<return>return <expr><name><name>MarkerMessages</name><operator>.</operator><name>filtersDialog_severityInfo</name></name></expr>;</return>

		<default>default:</default>
			<return>return <expr><name><name>MarkerSupportConstants</name><operator>.</operator><name>EMPTY_STRING</name></name></expr>;</return>
		}</block></switch>

	}</block></function>

	<comment type="block">/*
	 * (non-Javadoc)
	 * 
	 * @see org.eclipse.ui.internal.provisional.views.markers.MarkerField#compare(org.eclipse.ui.internal.provisional.views.markers.MarkerItem,
	 *      org.eclipse.ui.internal.provisional.views.markers.MarkerItem)
	 */</comment>
	<function><specifier>public</specifier> <type><name>int</name></type> <name>compare</name><parameter_list>(<parameter><decl><type><name>MarkerItem</name></type> <name>item1</name></decl></parameter>, <parameter><decl><type><name>MarkerItem</name></type> <name>item2</name></decl></parameter>)</parameter_list> <block>{
		<return>return <expr><call><name>getSeverity</name><argument_list>(<argument><expr><name>item2</name></expr></argument>)</argument_list></call> <operator>-</operator> <call><name>getSeverity</name><argument_list>(<argument><expr><name>item1</name></expr></argument>)</argument_list></call></expr>;</return>
	}</block></function>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="org.eclipse.ui.ide.markers.compatibility/src/org/eclipse/ui/ide/markers/compatibility/internal/MarkerPreferencesDialog.java" hash="bddc922efe8635e01ab7fcca8c721108adb526df"><comment type="block" format="javadoc">/*******************************************************************************
 * Copyright (c) 2008 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     IBM Corporation - initial API and implementation
 ******************************************************************************/</comment>

<package>package <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>ide</name><operator>.</operator><name>markers</name><operator>.</operator><name>compatibility</name><operator>.</operator><name>internal</name></name>;</package>

<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>jface</name><operator>.</operator><name>dialogs</name><operator>.</operator><name>IDialogConstants</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>jface</name><operator>.</operator><name>preference</name><operator>.</operator><name>IntegerFieldEditor</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>jface</name><operator>.</operator><name>resource</name><operator>.</operator><name>JFaceColors</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>swt</name><operator>.</operator><name>SWT</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>swt</name><operator>.</operator><name>events</name><operator>.</operator><name>SelectionAdapter</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>swt</name><operator>.</operator><name>events</name><operator>.</operator><name>SelectionEvent</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>swt</name><operator>.</operator><name>layout</name><operator>.</operator><name>GridData</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>swt</name><operator>.</operator><name>layout</name><operator>.</operator><name>GridLayout</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>swt</name><operator>.</operator><name>widgets</name><operator>.</operator><name>Button</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>swt</name><operator>.</operator><name>widgets</name><operator>.</operator><name>Composite</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>swt</name><operator>.</operator><name>widgets</name><operator>.</operator><name>Control</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>swt</name><operator>.</operator><name>widgets</name><operator>.</operator><name>Label</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>swt</name><operator>.</operator><name>widgets</name><operator>.</operator><name>Shell</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>ide</name><operator>.</operator><name>markers</name><operator>.</operator><name>compatibility</name><operator>.</operator><name>api</name><operator>.</operator><name>MarkerSupportConstants</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>ide</name><operator>.</operator><name>markers</name><operator>.</operator><name>compatibility</name><operator>.</operator><name>api</name><operator>.</operator><name>internal</name><operator>.</operator><name>MarkerMessages</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>internal</name><operator>.</operator><name>ide</name><operator>.</operator><name>IDEInternalPreferences</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>internal</name><operator>.</operator><name>ide</name><operator>.</operator><name>IDEWorkbenchPlugin</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>preferences</name><operator>.</operator><name>ViewSettingsDialog</name></name>;</import>

<comment type="block" format="javadoc">/**
 * MarkerPreferencesDialog is the dialog for showing marker preferences.
 * 
 * @since 3.4
 * 
 */</comment>
<class><specifier>public</specifier> class <name>MarkerPreferencesDialog</name> <super><extends>extends <name>ViewSettingsDialog</name></extends></super> <block>{

	<decl_stmt><decl><specifier>private</specifier> <type><name>IntegerFieldEditor</name></type> <name>limitEditor</name></decl>;</decl_stmt>

	<decl_stmt><decl><specifier>private</specifier> <type><name>Button</name></type> <name>enablementButton</name></decl>;</decl_stmt>

	<decl_stmt><decl><specifier>private</specifier> <type><name>Composite</name></type> <name>editArea</name></decl>;</decl_stmt>

	<decl_stmt><decl><specifier>private</specifier> <type><name>Label</name></type> <name>messageLabel</name></decl>;</decl_stmt>

	<comment type="block" format="javadoc">/**
	 * Create a new instance of the receiver.
	 * 
	 * @param parentShell
	 */</comment>
	<constructor><specifier>public</specifier> <name>MarkerPreferencesDialog</name><parameter_list>(<parameter><decl><type><name>Shell</name></type> <name>parentShell</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>parentShell</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	}</block></constructor>

	<comment type="block">/*
	 * (non-Javadoc)
	 * 
	 * @see org.eclipse.jface.window.Window#configureShell(org.eclipse.swt.widgets.Shell)
	 */</comment>
	<function><specifier>protected</specifier> <type><name>void</name></type> <name>configureShell</name><parameter_list>(<parameter><decl><type><name>Shell</name></type> <name>newShell</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>configureShell</name></name><argument_list>(<argument><expr><name>newShell</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>newShell</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><name><name>MarkerMessages</name><operator>.</operator><name>MarkerPreferences_DialogTitle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<comment type="block">/*
	 * (non-Javadoc)
	 * 
	 * @see org.eclipse.jface.dialogs.Dialog#createDialogArea(org.eclipse.swt.widgets.Composite)
	 */</comment>
	<function><specifier>protected</specifier> <type><name>Control</name></type> <name>createDialogArea</name><parameter_list>(<parameter><decl><type><name>Composite</name></type> <name>parent</name></decl></parameter>)</parameter_list> <block>{

		<decl_stmt><decl><type><name>Composite</name></type> <name>dialogArea</name> <init>= <expr><operator>(</operator><name>Composite</name><operator>)</operator> <call><name><name>super</name><operator>.</operator><name>createDialogArea</name></name><argument_list>(<argument><expr><name>parent</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<decl_stmt><decl><type><name>boolean</name></type> <name>checked</name> <init>= <expr><call><name><name>IDEWorkbenchPlugin</name><operator>.</operator><name>getDefault</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getPreferenceStore</name><argument_list>()</argument_list></call>
				<operator>.</operator><call><name>getBoolean</name><argument_list>(<argument><expr><name><name>IDEInternalPreferences</name><operator>.</operator><name>USE_MARKER_LIMITS</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name>enablementButton</name> <operator>=</operator> <operator>new</operator> <call><name>Button</name><argument_list>(<argument><expr><name>dialogArea</name></expr></argument>, <argument><expr><name><name>SWT</name><operator>.</operator><name>CHECK</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>enablementButton</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><name><name>MarkerMessages</name><operator>.</operator><name>MarkerPreferences_MarkerLimits</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>enablementButton</name><operator>.</operator><name>setSelection</name></name><argument_list>(<argument><expr><name>checked</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>editArea</name> <operator>=</operator> <operator>new</operator> <call><name>Composite</name><argument_list>(<argument><expr><name>dialogArea</name></expr></argument>, <argument><expr><name><name>SWT</name><operator>.</operator><name>NONE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>editArea</name><operator>.</operator><name>setLayout</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>GridLayout</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>GridData</name></type> <name>editData</name> <init>= <expr><operator>new</operator> <call><name>GridData</name><argument_list>(<argument><expr><name><name>GridData</name><operator>.</operator><name>FILL_BOTH</name></name>
				<operator>|</operator> <name><name>GridData</name><operator>.</operator><name>GRAB_HORIZONTAL</name></name> <operator>|</operator> <name><name>GridData</name><operator>.</operator><name>GRAB_VERTICAL</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name><name>editData</name><operator>.</operator><name>horizontalIndent</name></name> <operator>=</operator> <literal type="number">10</literal></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>editArea</name><operator>.</operator><name>setLayoutData</name></name><argument_list>(<argument><expr><name>editData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>limitEditor</name> <operator>=</operator> <operator>new</operator> <class><super><name>IntegerFieldEditor</name></super><argument_list>(
				<argument><expr><literal type="string">"limit"</literal></expr></argument>, <argument><expr><name><name>MarkerMessages</name><operator>.</operator><name>MarkerPreferences_VisibleItems</name></name></expr></argument>, <argument><expr><name>editArea</name></expr></argument>)</argument_list> <block>{ <comment type="line">//$NON-NLS-1$</comment>
			<comment type="block">/*
			 * (non-Javadoc)
			 * 
			 * @see org.eclipse.jface.preference.IntegerFieldEditor#checkState()
			 */</comment>
			<function><specifier>protected</specifier> <type><name>boolean</name></type> <name>checkState</name><parameter_list>()</parameter_list> <block>{
				<decl_stmt><decl><type><name>boolean</name></type> <name>state</name> <init>= <expr><call><name><name>super</name><operator>.</operator><name>checkState</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><call><name>setValid</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><call><name>getErrorMessage</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<return>return <expr><name>state</name></expr>;</return>
			}</block></function>
		}</block></class></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>limitEditor</name><operator>.</operator><name>setPreferenceStore</name></name><argument_list>(<argument><expr><call><name><name>IDEWorkbenchPlugin</name><operator>.</operator><name>getDefault</name></name><argument_list>()</argument_list></call>
				<operator>.</operator><call><name>getPreferenceStore</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>limitEditor</name>
				<operator>.</operator><name>setPreferenceName</name></name><argument_list>(<argument><expr><name><name>IDEInternalPreferences</name><operator>.</operator><name>MARKER_LIMITS_VALUE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>limitEditor</name><operator>.</operator><name>load</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

		<decl_stmt><decl><type><name>GridData</name></type> <name>checkedData</name> <init>= <expr><operator>new</operator> <call><name>GridData</name><argument_list>(<argument><expr><name><name>SWT</name><operator>.</operator><name>FILL</name></name></expr></argument>, <argument><expr><name><name>SWT</name><operator>.</operator><name>NONE</name></name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name><name>checkedData</name><operator>.</operator><name>horizontalSpan</name></name> <operator>=</operator> <call><name><name>limitEditor</name><operator>.</operator><name>getNumberOfControls</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>enablementButton</name><operator>.</operator><name>setLayoutData</name></name><argument_list>(<argument><expr><name>checkedData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name><name>enablementButton</name><operator>.</operator><name>addSelectionListener</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>SelectionAdapter</name></super><argument_list>()</argument_list> <block>{
			<function><specifier>public</specifier> <type><name>void</name></type> <name>widgetSelected</name><parameter_list>(<parameter><decl><type><name>SelectionEvent</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
				<expr_stmt><expr><call><name>setLimitEditorEnablement</name><argument_list>(<argument><expr><name>editArea</name></expr></argument>, <argument><expr><call><name><name>enablementButton</name>
						<operator>.</operator><name>getSelection</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></function>
		}</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>setLimitEditorEnablement</name><argument_list>(<argument><expr><name>editArea</name></expr></argument>, <argument><expr><name>checked</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		
		<expr_stmt><expr><name>messageLabel</name> <operator>=</operator> <operator>new</operator> <call><name>Label</name><argument_list>(<argument><expr><name>dialogArea</name></expr></argument>, <argument><expr><name><name>SWT</name><operator>.</operator><name>NONE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name><name>messageLabel</name><operator>.</operator><name>setBackground</name></name><argument_list>(<argument><expr><call><name><name>JFaceColors</name><operator>.</operator><name>getErrorBackground</name></name><argument_list>(<argument><expr><call><name><name>dialogArea</name><operator>.</operator><name>getDisplay</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>messageLabel</name><operator>.</operator><name>setForeground</name></name><argument_list>(<argument><expr><call><name><name>JFaceColors</name><operator>.</operator><name>getErrorText</name></name><argument_list>(<argument><expr><call><name><name>dialogArea</name><operator>.</operator><name>getDisplay</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>messageLabel</name><operator>.</operator><name>setLayoutData</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>GridData</name><argument_list>(<argument><expr><name><name>SWT</name><operator>.</operator><name>FILL</name></name></expr></argument>,<argument><expr><name><name>SWT</name><operator>.</operator><name>NONE</name></name></expr></argument>,<argument><expr><literal type="boolean">true</literal></expr></argument>,<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<expr_stmt><expr><call><name>applyDialogFont</name><argument_list>(<argument><expr><name>dialogArea</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>dialogArea</name></expr>;</return>
	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Set the enabled state of the OK button by state.
	 * 
	 * @param state
	 */</comment>
	<function><specifier>protected</specifier> <type><name>void</name></type> <name>setValid</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>state</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>errorMessage</name></decl></parameter>)</parameter_list> <block>{
		<decl_stmt><decl><type><name>Button</name></type> <name>okButton</name> <init>= <expr><call><name>getButton</name><argument_list>(<argument><expr><name><name>IDialogConstants</name><operator>.</operator><name>OK_ID</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<if>if <condition>(<expr><name>okButton</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then>
			<block type="pseudo"><return>return;</return></block></then></if>
		
		<if>if<condition>(<expr><name>state</name></expr>)</condition><then>
			<block type="pseudo"><expr_stmt><expr><call><name><name>messageLabel</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><name><name>MarkerSupportConstants</name><operator>.</operator><name>EMPTY_STRING</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
		<else>else
			<block type="pseudo"><expr_stmt><expr><call><name><name>messageLabel</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><name>errorMessage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>

		<expr_stmt><expr><call><name><name>okButton</name><operator>.</operator><name>setEnabled</name></name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Enable the limitEditor based on checked.
	 * 
	 * @param control
	 *            The parent of the editor
	 * @param checked
	 */</comment>
	<function><specifier>private</specifier> <type><name>void</name></type> <name>setLimitEditorEnablement</name><parameter_list>(<parameter><decl><type><name>Composite</name></type> <name>control</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>checked</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><call><name><name>limitEditor</name><operator>.</operator><name>setEnabled</name></name><argument_list>(<argument><expr><name>checked</name></expr></argument>, <argument><expr><name>control</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<comment type="block">/*
	 * (non-Javadoc)
	 * 
	 * @see org.eclipse.jface.dialogs.Dialog#okPressed()
	 */</comment>
	<function><specifier>protected</specifier> <type><name>void</name></type> <name>okPressed</name><parameter_list>()</parameter_list> <block>{

		<expr_stmt><expr><call><name><name>limitEditor</name><operator>.</operator><name>store</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>IDEWorkbenchPlugin</name><operator>.</operator><name>getDefault</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getPreferenceStore</name><argument_list>()</argument_list></call><operator>.</operator><call><name>setValue</name><argument_list>(
				<argument><expr><name><name>IDEInternalPreferences</name><operator>.</operator><name>USE_MARKER_LIMITS</name></name></expr></argument>,
				<argument><expr><call><name><name>enablementButton</name><operator>.</operator><name>getSelection</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>IDEWorkbenchPlugin</name><operator>.</operator><name>getDefault</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>savePluginPreferences</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>okPressed</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<comment type="block">/*
	 * (non-Javadoc)
	 * 
	 * @see org.eclipse.ui.preferences.ViewSettingsDialog#performDefaults()
	 */</comment>
	<function><specifier>protected</specifier> <type><name>void</name></type> <name>performDefaults</name><parameter_list>()</parameter_list> <block>{
		<expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>performDefaults</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>limitEditor</name><operator>.</operator><name>loadDefault</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>boolean</name></type> <name>checked</name> <init>= <expr><call><name><name>IDEWorkbenchPlugin</name><operator>.</operator><name>getDefault</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getPreferenceStore</name><argument_list>()</argument_list></call>
				<operator>.</operator><call><name>getDefaultBoolean</name><argument_list>(<argument><expr><name><name>IDEInternalPreferences</name><operator>.</operator><name>USE_MARKER_LIMITS</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>enablementButton</name><operator>.</operator><name>setSelection</name></name><argument_list>(<argument><expr><name>checked</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>setLimitEditorEnablement</name><argument_list>(<argument><expr><name>editArea</name></expr></argument>, <argument><expr><name>checked</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>

}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="org.eclipse.ui.ide.markers.compatibility/src/org/eclipse/ui/ide/markers/compatibility/internal/MarkerFieldFilterGroup.java" hash="f19b4bb0d4c9507127029fd35041f0e59410b2e5"><comment type="block" format="javadoc">/*******************************************************************************
 * Copyright (c) 2007 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     IBM Corporation - initial API and implementation
 ******************************************************************************/</comment>

<package>package <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>ide</name><operator>.</operator><name>markers</name><operator>.</operator><name>compatibility</name><operator>.</operator><name>internal</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Collection</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashMap</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashSet</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>core</name><operator>.</operator><name>resources</name><operator>.</operator><name>IContainer</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>core</name><operator>.</operator><name>resources</name><operator>.</operator><name>IMarker</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>core</name><operator>.</operator><name>resources</name><operator>.</operator><name>IProject</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>core</name><operator>.</operator><name>resources</name><operator>.</operator><name>IResource</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>core</name><operator>.</operator><name>resources</name><operator>.</operator><name>ResourcesPlugin</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>core</name><operator>.</operator><name>resources</name><operator>.</operator><name>mapping</name><operator>.</operator><name>ResourceMapping</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>core</name><operator>.</operator><name>runtime</name><operator>.</operator><name>CoreException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>core</name><operator>.</operator><name>runtime</name><operator>.</operator><name>IAdaptable</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>core</name><operator>.</operator><name>runtime</name><operator>.</operator><name>IConfigurationElement</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>core</name><operator>.</operator><name>runtime</name><operator>.</operator><name>IStatus</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>IMemento</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>IWorkbenchPage</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>IWorkbenchPreferenceConstants</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>IWorkbenchWindow</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>IWorkingSet</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>PlatformUI</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>ide</name><operator>.</operator><name>markers</name><operator>.</operator><name>compatibility</name><operator>.</operator><name>api</name><operator>.</operator><name>FilterConfigurationArea</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>ide</name><operator>.</operator><name>markers</name><operator>.</operator><name>compatibility</name><operator>.</operator><name>api</name><operator>.</operator><name>FiltersContributionParameters</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>ide</name><operator>.</operator><name>markers</name><operator>.</operator><name>compatibility</name><operator>.</operator><name>api</name><operator>.</operator><name>MarkerField</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>ide</name><operator>.</operator><name>markers</name><operator>.</operator><name>compatibility</name><operator>.</operator><name>api</name><operator>.</operator><name>MarkerFieldFilter</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>ide</name><operator>.</operator><name>markers</name><operator>.</operator><name>compatibility</name><operator>.</operator><name>api</name><operator>.</operator><name>MarkerSupportConstants</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>ide</name><operator>.</operator><name>markers</name><operator>.</operator><name>compatibility</name><operator>.</operator><name>api</name><operator>.</operator><name>internal</name><operator>.</operator><name>MarkerFilter</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>ide</name><operator>.</operator><name>markers</name><operator>.</operator><name>compatibility</name><operator>.</operator><name>api</name><operator>.</operator><name>internal</name><operator>.</operator><name>MarkerSupportRegistry</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>ide</name><operator>.</operator><name>markers</name><operator>.</operator><name>compatibility</name><operator>.</operator><name>api</name><operator>.</operator><name>internal</name><operator>.</operator><name>MarkerType</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>internal</name><operator>.</operator><name>ide</name><operator>.</operator><name>IDEWorkbenchPlugin</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>internal</name><operator>.</operator><name>ide</name><operator>.</operator><name>StatusUtil</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>statushandlers</name><operator>.</operator><name>StatusManager</name></name>;</import>

<comment type="block" format="javadoc">/**
 * MarkerFieldFilterGroup is the representation of a grouping of marker filters.
 * 
 * @since 3.4
 * 
 */</comment>
<class>class <name>MarkerFieldFilterGroup</name> <block>{

	<decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>ATTRIBUTE_ON_ANY_IN_SAME_CONTAINER</name> <init>= <expr><literal type="string">"ON_ANY_IN_SAME_CONTAINER"</literal></expr></init></decl>;</decl_stmt><comment type="line">//$NON-NLS-1$</comment>
	<decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>ATTRIBUTE_ON_SELECTED_AND_CHILDREN</name> <init>= <expr><literal type="string">"ON_SELECTED_AND_CHILDREN"</literal></expr></init></decl>;</decl_stmt><comment type="line">//$NON-NLS-1$</comment>
	<decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>ATTRIBUTE_ON_SELECTED_ONLY</name> <init>= <expr><literal type="string">"ON_SELECTED_ONLY"</literal></expr></init></decl>;</decl_stmt> <comment type="line">//$NON-NLS-1$</comment>

	<comment type="block" format="javadoc">/**
	 * The attribute values for the scope
	 * 
	 */</comment>

	<decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>ATTRIBUTE_SCOPE</name> <init>= <expr><literal type="string">"scope"</literal></expr></init></decl>;</decl_stmt> <comment type="line">//$NON-NLS-1$</comment>

	<decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>ATTRIBUTE_VALUES</name> <init>= <expr><literal type="string">"values"</literal></expr></init></decl>;</decl_stmt> <comment type="line">//$NON-NLS-1$</comment>

	<decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name><name>IProject</name><index>[]</index></name></type> <name>EMPTY_PROJECT_ARRAY</name> <init>= <expr><operator>new</operator> <name><name>IProject</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

	<comment type="block" format="javadoc">/**
	 * Constant for any element.
	 */</comment>
	<decl_stmt><decl><specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>ON_ANY</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<comment type="block" format="javadoc">/**
	 * Constant for any element in same container.
	 */</comment>
	<decl_stmt><decl><specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>ON_ANY_IN_SAME_CONTAINER</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>;</decl_stmt>

	<comment type="block" format="javadoc">/**
	 * Constant for selected element and children.
	 */</comment>
	<decl_stmt><decl><specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>ON_SELECTED_AND_CHILDREN</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
	<comment type="block" format="javadoc">/**
	 * Constant for any selected element only.
	 */</comment>
	<decl_stmt><decl><specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>ON_SELECTED_ONLY</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<comment type="block" format="javadoc">/**
	 * Constant for on working set.
	 */</comment>
	<decl_stmt><decl><specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>ON_WORKING_SET</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>TAG_ENABLED</name> <init>= <expr><literal type="string">"enabled"</literal></expr></init></decl>;</decl_stmt> <comment type="line">//$NON-NLS-1$</comment>
	<decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>TAG_SCOPE</name> <init>= <expr><literal type="string">"scope"</literal></expr></init></decl>;</decl_stmt> <comment type="line">//$NON-NLS-1$</comment>
	<decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>TAG_FIELD_FILTER_ENTRY</name> <init>= <expr><literal type="string">"fieldFilter"</literal></expr></init></decl>;</decl_stmt> <comment type="line">//$NON-NLS-1$</comment>
	<decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>TAG_WORKING_SET</name> <init>= <expr><literal type="string">"workingSet"</literal></expr></init></decl>;</decl_stmt> <comment type="line">//$NON-NLS-1$</comment>
	<comment type="line">// The identifier for user filters</comment>
	<decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>USER</name> <init>= <expr><literal type="string">"USER"</literal></expr></init></decl>;</decl_stmt> <comment type="line">//$NON-NLS-1$</comment>

	<comment type="block" format="javadoc">/**
	 * Returns the set of projects that contain the given set of resources.
	 * 
	 * @param resources
	 * @return IProject[]
	 */</comment>
	<function><specifier>static</specifier> <type><name><name>IProject</name><index>[]</index></name></type> <name>getProjects</name><parameter_list>(<parameter><decl><type><name><name>IResource</name><index>[]</index></name></type> <name>resources</name></decl></parameter>)</parameter_list> <block>{
		<if>if <condition>(<expr><name>resources</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then>
			<block type="pseudo"><return>return <expr><name>EMPTY_PROJECT_ARRAY</name></expr>;</return></block></then></if>

		<decl_stmt><decl><type><name>Collection</name></type> <name>projects</name> <init>= <expr><call><name>getProjectsAsCollection</name><argument_list>(<argument><expr><name>resources</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<return>return <expr><operator>(</operator><name><name>IProject</name><index>[]</index></name><operator>)</operator> <call><name><name>projects</name><operator>.</operator><name>toArray</name></name><argument_list>(<argument><expr><operator>new</operator> <name><name>IProject</name><index>[<expr><call><name><name>projects</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>
	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Return the projects for the elements.
	 * 
	 * @param elements
	 *            collection of IResource or IResourceMapping
	 * @return Collection of IProject
	 */</comment>
	<function><specifier>static</specifier> <type><name>Collection</name></type> <name>getProjectsAsCollection</name><parameter_list>(<parameter><decl><type><name><name>Object</name><index>[]</index></name></type> <name>elements</name></decl></parameter>)</parameter_list> <block>{
		<decl_stmt><decl><type><name>HashSet</name></type> <name>projects</name> <init>= <expr><operator>new</operator> <call><name>HashSet</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

		<for>for <control>(<init><decl><type><name>int</name></type> <name>idx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>idx</name> <operator>&lt;</operator> <name><name>elements</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>idx</name><operator>++</operator></expr></incr>)</control> <block>{
			<if>if <condition>(<expr><name><name>elements</name><index>[<expr><name>idx</name></expr>]</index></name> <operator>instanceof</operator> <name>IResource</name></expr>)</condition><then> <block>{
				<expr_stmt><expr><call><name><name>projects</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>IResource</name><operator>)</operator> <name><name>elements</name><index>[<expr><name>idx</name></expr>]</index></name><operator>)</operator><operator>.</operator><call><name>getProject</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then> <else>else <block>{
				<decl_stmt><decl><type><name><name>IProject</name><index>[]</index></name></type> <name>mappingProjects</name> <init>= <expr><operator>(</operator><operator>(</operator><operator>(</operator><name>ResourceMapping</name><operator>)</operator> <name><name>elements</name><index>[<expr><name>idx</name></expr>]</index></name><operator>)</operator>
						<operator>.</operator><call><name>getProjects</name><argument_list>()</argument_list></call><operator>)</operator></expr></init></decl>;</decl_stmt>
				<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>mappingProjects</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
					<expr_stmt><expr><call><name><name>projects</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name><name>mappingProjects</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></for>
			}</block></else></if>

		}</block></for>

		<return>return <expr><name>projects</name></expr>;</return>
	}</block></function>

	<decl_stmt><decl><specifier>protected</specifier> <type><name>CachedMarkerBuilder</name></type> <name>builder</name></decl>;</decl_stmt>

	<decl_stmt><decl><specifier>private</specifier> <type><name>IConfigurationElement</name></type> <name>element</name></decl>;</decl_stmt>

	<decl_stmt><decl><specifier>private</specifier> <type><name>Map</name></type> <name>EMPTY_MAP</name> <init>= <expr><operator>new</operator> <call><name>HashMap</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>private</specifier> <type><name>boolean</name></type> <name>enabled</name> <init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>protected</specifier> <type><name><name>MarkerFieldFilter</name><index>[]</index></name></type> <name>fieldFilters</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>private</specifier> <type><name>int</name></type> <name>scope</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>private</specifier> <type><name>String</name></type> <name>name</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>private</specifier> <type><name>String</name></type> <name>id</name></decl>;</decl_stmt>

	<comment type="block" format="javadoc">/**
	 * The entry for testing filters. Cached to prevent garbage.
	 */</comment>
	<decl_stmt><decl><specifier>private</specifier> <type><name>MarkerEntry</name></type> <name>testEntry</name> <init>= <expr><operator>new</operator> <call><name>MarkerEntry</name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>private</specifier> <type><name>IWorkingSet</name></type> <name>workingSet</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>private</specifier> <type><name>Collection</name></type> <name>workingSetPaths</name></decl>;</decl_stmt>

	<comment type="block" format="javadoc">/**
	 * Create a new instance of the receiver.
	 * 
	 * @param configurationElement
	 * @param markerBuilder
	 */</comment>
	<constructor><specifier>public</specifier> <name>MarkerFieldFilterGroup</name><parameter_list>(<parameter><decl><type><name>IConfigurationElement</name></type> <name>configurationElement</name></decl></parameter>,
			<parameter><decl><type><name>CachedMarkerBuilder</name></type> <name>markerBuilder</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><name>element</name> <operator>=</operator> <name>configurationElement</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>builder</name> <operator>=</operator> <name>markerBuilder</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>initializeWorkingSet</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>scope</name> <operator>=</operator> <call><name>processScope</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

		<if>if <condition>(<expr><name>configurationElement</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then>
			<block type="pseudo"><return>return;</return></block></then></if>
		<decl_stmt><decl><type><name>String</name></type> <name>enablementString</name> <init>= <expr><call><name><name>configurationElement</name>
				<operator>.</operator><name>getAttribute</name></name><argument_list>(<argument><expr><name><name>MarkerSupportRegistry</name><operator>.</operator><name>ENABLED</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if>if <condition>(<expr><call><name><name>MarkerSupportInternalUtilities</name><operator>.</operator><name>FALSE</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>enablementString</name></expr></argument>)</argument_list></call></expr>)</condition><then>
			<block type="pseudo"><expr_stmt><expr><name>enabled</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt></block></then></if>

	}</block></constructor>

	<comment type="block" format="javadoc">/**
	 * Add resources and thier children's paths to the working set paths.
	 * 
	 * @param resources
	 */</comment>
	<function><specifier>private</specifier> <type><name>void</name></type> <name>addResourcesAndChildrenPaths</name><parameter_list>(<parameter><decl><type><name><name>IResource</name><index>[]</index></name></type> <name>resources</name></decl></parameter>)</parameter_list> <block>{
		<for>for <control>(<init><decl><type><name>int</name></type> <name>idx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>idx</name> <operator>&lt;</operator> <name><name>resources</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>idx</name><operator>++</operator></expr></incr>)</control> <block>{

			<decl_stmt><decl><type><name>IResource</name></type> <name>currentResource</name> <init>= <expr><name><name>resources</name><index>[<expr><name>idx</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

			<expr_stmt><expr><call><name><name>workingSetPaths</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>currentResource</name><operator>.</operator><name>getFullPath</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<if>if <condition>(<expr><name>currentResource</name> <operator>instanceof</operator> <name>IContainer</name></expr>)</condition><then> <block>{
				<decl_stmt><decl><type><name>IContainer</name></type> <name>cont</name> <init>= <expr><operator>(</operator><name>IContainer</name><operator>)</operator> <name>currentResource</name></expr></init></decl>;</decl_stmt>

				<try>try <block>{
					<expr_stmt><expr><call><name>addResourcesAndChildrenPaths</name><argument_list>(<argument><expr><call><name><name>cont</name><operator>.</operator><name>members</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>CoreException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
					<expr_stmt><expr><call><name><name>MarkerSupportInternalUtilities</name><operator>.</operator><name>handle</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></catch></try>
			}</block></then></if>

		}</block></for>
	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Get the root types for the receiver
	 * 
	 * @return Collection of {@link MarkerType}
	 */</comment>
	<function><type><name>Collection</name></type> <name>getAllTypes</name><parameter_list>()</parameter_list> <block>{
		<return>return <expr><call><name><name>builder</name><operator>.</operator><name>getGenerator</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getMarkerTypes</name><argument_list>()</argument_list></call></expr>;</return>
	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Get all of the filter configuration areas defined on the receiver.
	 * 
	 * @return Collection of FilterConfigurationArea
	 */</comment>
	<function><type><name>Collection</name></type> <name>getFieldFilterAreas</name><parameter_list>()</parameter_list> <block>{

		<decl_stmt><decl><type><name>Collection</name></type> <name>areas</name> <init>= <expr><operator>new</operator> <call><name>ArrayList</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name><name>MarkerField</name><index>[]</index></name></type> <name>fields</name> <init>= <expr><call><name><name>builder</name><operator>.</operator><name>getVisibleFields</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>fields</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
			<decl_stmt><decl><type><name>FilterConfigurationArea</name></type> <name>area</name> <init>= <expr><name><name>fields</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>generateFilterArea</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
			<if>if <condition>(<expr><name>area</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
				<expr_stmt><expr><call><name><name>areas</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>area</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>
		}</block></for>
		<return>return <expr><name>areas</name></expr>;</return>
	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Get the filters registered on the receiver.
	 * 
	 * @return MarkerFieldFilter[]
	 */</comment>
	<function><specifier>private</specifier> <type><name><name>MarkerFieldFilter</name><index>[]</index></name></type> <name>getFieldFilters</name><parameter_list>()</parameter_list> <block>{
		<if>if <condition>(<expr><name>fieldFilters</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
			<expr_stmt><expr><call><name>calculateFilters</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>
		<return>return <expr><name>fieldFilters</name></expr>;</return>
	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Calculate the filters for the receiver.
	 */</comment>
	<function><specifier>protected</specifier> <type><name>void</name></type> <name>calculateFilters</name><parameter_list>()</parameter_list> <block>{
		<decl_stmt><decl><type><name>Map</name></type> <name>values</name> <init>= <expr><call><name>getValues</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>Collection</name></type> <name>filters</name> <init>= <expr><operator>new</operator> <call><name>ArrayList</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name><name>MarkerField</name><index>[]</index></name></type> <name>fields</name> <init>= <expr><call><name><name>builder</name><operator>.</operator><name>getVisibleFields</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>fields</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
			<decl_stmt><decl><type><name>MarkerFieldFilter</name></type> <name>fieldFilter</name> <init>= <expr><name><name>fields</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>generateFilter</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
			<if>if <condition>(<expr><name>fieldFilter</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
				<expr_stmt><expr><call><name><name>filters</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>fieldFilter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<comment type="line">// The type filter needs information from the generator</comment>
				<if>if <condition>(<expr><name>fieldFilter</name> <operator>instanceof</operator> <name>MarkerTypeFieldFilter</name></expr>)</condition><then>
					<comment type="line">// Show everything by default</comment>
					<block type="pseudo"><expr_stmt><expr><operator>(</operator><operator>(</operator><name>MarkerTypeFieldFilter</name><operator>)</operator> <name>fieldFilter</name><operator>)</operator>
							<operator>.</operator><call><name>setAndSelectAllTypes</name><argument_list>(<argument><expr><call><name><name>builder</name><operator>.</operator><name>getGenerator</name></name><argument_list>()</argument_list></call>
									<operator>.</operator><call><name>getMarkerTypes</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
				<if>if <condition>(<expr><name>values</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then>
					<block type="pseudo"><expr_stmt><expr><call><name><name>fieldFilter</name><operator>.</operator><name>initialize</name></name><argument_list>(<argument><expr><name>values</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
			}</block></then></if>
		}</block></for>
		<expr_stmt><expr><name>fieldFilters</name> <operator>=</operator> <operator>new</operator> <name><name>MarkerFieldFilter</name><index>[<expr><call><name><name>filters</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>filters</name><operator>.</operator><name>toArray</name></name><argument_list>(<argument><expr><name>fieldFilters</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Return the MarkerFieldFilter for field or &lt;code&gt;null&lt;/code&gt; if there
	 * isn't one.
	 * 
	 * @param field
	 * @return MarkerFieldFilter
	 */</comment>
	<function><specifier>public</specifier> <type><name>MarkerFieldFilter</name></type> <name>getFilter</name><parameter_list>(<parameter><decl><type><name>MarkerField</name></type> <name>field</name></decl></parameter>)</parameter_list> <block>{
		<decl_stmt><decl><type><name><name>MarkerFieldFilter</name><index>[]</index></name></type> <name>filters</name> <init>= <expr><call><name>getFieldFilters</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>filters</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
			<if>if <condition>(<expr><name><name>filters</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>getField</name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name>field</name></expr></argument>)</argument_list></call></expr>)</condition><then>
				<block type="pseudo"><return>return <expr><name><name>filters</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</return></block></then></if>
		}</block></for>
		<return>return <expr><literal type="null">null</literal></expr>;</return>
	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Return the id of the receiver.
	 * 
	 * @return String
	 */</comment>
	<function><specifier>public</specifier> <type><name>String</name></type> <name>getID</name><parameter_list>()</parameter_list> <block>{
		<if>if <condition>(<expr><name>id</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
			<if>if <condition>(<expr><name>element</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then>
				<block type="pseudo"><expr_stmt><expr><name>id</name> <operator>=</operator> <name>USER</name> <operator>+</operator> <call><name><name>String</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><call><name><name>System</name><operator>.</operator><name>currentTimeMillis</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
			<else>else
				<block type="pseudo"><expr_stmt><expr><name>id</name> <operator>=</operator> <call><name><name>element</name>
						<operator>.</operator><name>getAttribute</name></name><argument_list>(<argument><expr><name><name>MarkerSupportConstants</name><operator>.</operator><name>ATTRIBUTE_NAME</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>
		}</block></then></if>
		<return>return <expr><name>id</name></expr>;</return>
	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Return the name of the receiver.
	 * 
	 * @return String
	 */</comment>
	<function><specifier>public</specifier> <type><name>String</name></type> <name>getName</name><parameter_list>()</parameter_list> <block>{
		<if>if <condition>(<expr><name>name</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
			<if>if <condition>(<expr><name>element</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then>
				<block type="pseudo"><expr_stmt><expr><name>name</name> <operator>=</operator> <name><name>MarkerSupportConstants</name><operator>.</operator><name>EMPTY_STRING</name></name></expr>;</expr_stmt></block></then>
			<else>else
				<block type="pseudo"><expr_stmt><expr><name>name</name> <operator>=</operator> <call><name><name>element</name>
						<operator>.</operator><name>getAttribute</name></name><argument_list>(<argument><expr><name><name>MarkerSupportConstants</name><operator>.</operator><name>ATTRIBUTE_NAME</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>
		}</block></then></if>
		<return>return <expr><name>name</name></expr>;</return>
	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Return the resources in the working set. If it is empty then return the
	 * workspace root.
	 * 
	 * @return IResource[]
	 */</comment>
	<function><type><name><name>IResource</name><index>[]</index></name></type> <name>getResourcesInWorkingSet</name><parameter_list>()</parameter_list> <block>{
		<if>if <condition>(<expr><name>workingSet</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
			<return>return <expr><operator>new</operator> <name><name>IResource</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</return>
		}</block></then></if>

		<if>if <condition>(<expr><call><name><name>workingSet</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
			<return>return <expr><operator>new</operator> <name><name>IResource</name><index>[]</index></name> <block>{ <expr><call><name><name>ResourcesPlugin</name><operator>.</operator><name>getWorkspace</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getRoot</name><argument_list>()</argument_list></call></expr> }</block></expr>;</return>
		}</block></then></if>

		<decl_stmt><decl><type><name><name>IAdaptable</name><index>[]</index></name></type> <name>elements</name> <init>= <expr><call><name><name>workingSet</name><operator>.</operator><name>getElements</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>List</name></type> <name>result</name> <init>= <expr><operator>new</operator> <call><name>ArrayList</name><argument_list>(<argument><expr><name><name>elements</name><operator>.</operator><name>length</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<for>for <control>(<init><decl><type><name>int</name></type> <name>idx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>idx</name> <operator>&lt;</operator> <name><name>elements</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>idx</name><operator>++</operator></expr></incr>)</control> <block>{
			<decl_stmt><decl><type><name>IResource</name></type> <name>next</name> <init>= <expr><operator>(</operator><name>IResource</name><operator>)</operator> <name><name>elements</name><index>[<expr><name>idx</name></expr>]</index></name>
					<operator>.</operator><call><name>getAdapter</name><argument_list>(<argument><expr><name><name>IResource</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

			<if>if <condition>(<expr><name>next</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
				<expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>
		}</block></for>

		<return>return <expr><operator>(</operator><name><name>IResource</name><index>[]</index></name><operator>)</operator> <call><name><name>result</name><operator>.</operator><name>toArray</name></name><argument_list>(<argument><expr><operator>new</operator> <name><name>IResource</name><index>[<expr><call><name><name>result</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>
	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Return the value of the scope.
	 * 
	 * @return int
	 * @see #ON_ANY
	 * @see #ON_ANY_IN_SAME_CONTAINER
	 * @see #ON_SELECTED_AND_CHILDREN
	 * @see #ON_SELECTED_ONLY
	 * @see #ON_WORKING_SET
	 */</comment>
	<function><specifier>public</specifier> <type><name>int</name></type> <name>getScope</name><parameter_list>()</parameter_list> <block>{
		<return>return <expr><name>scope</name></expr>;</return>
	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Get the values defined for the receiver.
	 * 
	 * @return Map of values to apply to a {@link MarkerFieldFilter}
	 */</comment>
	<function><specifier>private</specifier> <type><name>Map</name></type> <name>getValues</name><parameter_list>()</parameter_list> <block>{

		<try>try <block>{
			<decl_stmt><decl><type><name>String</name></type> <name>className</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
			<if>if <condition>(<expr><name>element</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
				<expr_stmt><expr><name>className</name> <operator>=</operator> <call><name><name>element</name><operator>.</operator><name>getAttribute</name></name><argument_list>(<argument><expr><name>ATTRIBUTE_VALUES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if>if <condition>(<expr><name>className</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
					<decl_stmt><decl><type><name>FiltersContributionParameters</name></type> <name>parameters</name> <init>= <expr><operator>(</operator><name>FiltersContributionParameters</name><operator>)</operator> <call><name><name>IDEWorkbenchPlugin</name>
							<operator>.</operator><name>createExtension</name></name><argument_list>(<argument><expr><name>element</name></expr></argument>, <argument><expr><name>ATTRIBUTE_VALUES</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<return>return <expr><call><name><name>parameters</name><operator>.</operator><name>getParameterValues</name></name><argument_list>()</argument_list></call></expr>;</return>
				}</block></then></if>
			}</block></then></if>
		}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>CoreException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
			<expr_stmt><expr><call><name><name>MarkerSupportInternalUtilities</name><operator>.</operator><name>handle</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><literal type="null">null</literal></expr>;</return>
		}</block></catch></try>
		<return>return <expr><name>EMPTY_MAP</name></expr>;</return>

	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Get the working set for the receiver.
	 * 
	 * @return IWorkingSet
	 */</comment>
	<function><type><name>IWorkingSet</name></type> <name>getWorkingSet</name><parameter_list>()</parameter_list> <block>{
		<return>return <expr><name>workingSet</name></expr>;</return>
	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Return all of the paths in the working set
	 * 
	 * @return Collection
	 */</comment>
	<function><specifier>private</specifier> <type><name>Collection</name></type> <name>getWorkingSetPaths</name><parameter_list>()</parameter_list> <block>{

		<if>if <condition>(<expr><name>workingSetPaths</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
			<expr_stmt><expr><name>workingSetPaths</name> <operator>=</operator> <operator>new</operator> <call><name>HashSet</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>addResourcesAndChildrenPaths</name><argument_list>(<argument><expr><call><name>getResourcesInWorkingSet</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>
		<return>return <expr><name>workingSetPaths</name></expr>;</return>

	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Initialise the working set for the receiver. Use the window working set
	 * for the working set and set the scope to ON_WORKING_SET if they are to be
	 * used by default.
	 */</comment>
	<function><specifier>private</specifier> <type><name>void</name></type> <name>initializeWorkingSet</name><parameter_list>()</parameter_list> <block>{

		<decl_stmt><decl><type><name>IWorkbenchWindow</name></type> <name>window</name> <init>= <expr><call><name><name>PlatformUI</name><operator>.</operator><name>getWorkbench</name></name><argument_list>()</argument_list></call>
				<operator>.</operator><call><name>getActiveWorkbenchWindow</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<if>if <condition>(<expr><name>window</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
			<decl_stmt><decl><type><name>IWorkbenchPage</name></type> <name>page</name> <init>= <expr><call><name><name>window</name><operator>.</operator><name>getActivePage</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
			<if>if <condition>(<expr><name>page</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
				<expr_stmt><expr><call><name>setWorkingSet</name><argument_list>(<argument><expr><call><name><name>page</name><operator>.</operator><name>getAggregateWorkingSet</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if>if <condition>(<expr><operator>(</operator><call><name><name>PlatformUI</name><operator>.</operator><name>getPreferenceStore</name></name><argument_list>()</argument_list></call>
						<operator>.</operator><call><name>getBoolean</name><argument_list>(<argument><expr><name><name>IWorkbenchPreferenceConstants</name><operator>.</operator><name>USE_WINDOW_WORKING_SET_BY_DEFAULT</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><then>
					<block type="pseudo"><expr_stmt><expr><call><name>setScope</name><argument_list>(<argument><expr><name>ON_WORKING_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>

			}</block></then></if>
		}</block></then></if>
	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Return whether or not the receiver is enabled.
	 * 
	 * @return boolean
	 */</comment>
	<function><specifier>public</specifier> <type><name>boolean</name></type> <name>isEnabled</name><parameter_list>()</parameter_list> <block>{
		<return>return <expr><name>enabled</name></expr>;</return>
	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Return whether or not this is a system or user group.
	 * 
	 * @return boolean &lt;code&gt;true&lt;/code&gt; if it is a system group.
	 */</comment>
	<function><specifier>public</specifier> <type><name>boolean</name></type> <name>isSystem</name><parameter_list>()</parameter_list> <block>{
		<return>return <expr><name>element</name> <operator>!=</operator> <literal type="null">null</literal></expr>;</return>
	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Load the settings from the legacy child.
	 * 
	 * @param memento
	 */</comment>
	<function><type><name>void</name></type> <name>legacyLoadSettings</name><parameter_list>(<parameter><decl><type><name>IMemento</name></type> <name>memento</name></decl></parameter>)</parameter_list> <block>{

		<decl_stmt><decl><type><name>String</name></type> <name>enabledString</name> <init>= <expr><call><name><name>memento</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name>TAG_ENABLED</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if>if <condition>(<expr><name>enabledString</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>enabledString</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then>
			<block type="pseudo"><expr_stmt><expr><name>enabled</name> <operator>=</operator> <call><name><name>Boolean</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><name>enabledString</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>booleanValue</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></then></if>

		<decl_stmt><decl><type><name>Integer</name></type> <name>resourceSetting</name> <init>= <expr><call><name><name>memento</name>
				<operator>.</operator><name>getInteger</name></name><argument_list>(<argument><expr><name><name>MarkerFilter</name><operator>.</operator><name>TAG_ON_RESOURCE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<if>if <condition>(<expr><name>resourceSetting</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then>
			<block type="pseudo"><expr_stmt><expr><name>scope</name> <operator>=</operator> <call><name><name>resourceSetting</name><operator>.</operator><name>intValue</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></then></if>

		<decl_stmt><decl><type><name>String</name></type> <name>workingSetName</name> <init>= <expr><call><name><name>memento</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name>TAG_WORKING_SET</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<if>if <condition>(<expr><name>workingSetName</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then>
			<block type="pseudo"><expr_stmt><expr><call><name>setWorkingSet</name><argument_list>(<argument><expr><call><name><name>PlatformUI</name><operator>.</operator><name>getWorkbench</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getWorkingSetManager</name><argument_list>()</argument_list></call>
					<operator>.</operator><call><name>getWorkingSet</name><argument_list>(<argument><expr><name>workingSetName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>

		<if>if <condition>(<expr><name>element</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
			<decl_stmt><decl><type><name>String</name></type> <name>nameString</name> <init>= <expr><call><name><name>memento</name><operator>.</operator><name>getID</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
			<if>if <condition>(<expr><name>nameString</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>nameString</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then>
				<block type="pseudo"><expr_stmt><expr><name>name</name> <operator>=</operator> <name>nameString</name></expr>;</expr_stmt></block></then></if>
			<decl_stmt><decl><type><name>String</name></type> <name>idString</name> <init>= <expr><call><name><name>memento</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>IMemento</name><operator>.</operator><name>TAG_ID</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<if>if <condition>(<expr><name>idString</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>idString</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then>
				<block type="pseudo"><expr_stmt><expr><name>id</name> <operator>=</operator> <name>idString</name></expr>;</expr_stmt></block></then></if>

		}</block></then></if>

		<decl_stmt><decl><type><name><name>MarkerFieldFilter</name><index>[]</index></name></type> <name>filters</name> <init>= <expr><call><name>getFieldFilters</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>filters</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
			<if>if <condition>(<expr><name><name>filters</name><index>[<expr><name>i</name></expr>]</index></name> <operator>instanceof</operator> <name>CompatibilityFieldFilter</name></expr>)</condition><then>
				<block type="pseudo"><expr_stmt><expr><operator>(</operator><operator>(</operator><name>CompatibilityFieldFilter</name><operator>)</operator> <name><name>filters</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator>
						<operator>.</operator><call><name>loadLegacySettings</name><argument_list>(<argument><expr><name>memento</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
		}</block></for>

	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Load the current settings from the child.
	 * 
	 * @param memento -
	 *            the memento to load from
	 */</comment>
	<function><type><name>void</name></type> <name>loadSettings</name><parameter_list>(<parameter><decl><type><name>IMemento</name></type> <name>memento</name></decl></parameter>)</parameter_list> <block>{

		<decl_stmt><decl><type><name>String</name></type> <name>enabledString</name> <init>= <expr><call><name><name>memento</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name>TAG_ENABLED</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if>if <condition>(<expr><name>enabledString</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>enabledString</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then>
			<block type="pseudo"><expr_stmt><expr><name>enabled</name> <operator>=</operator> <call><name><name>Boolean</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><name>enabledString</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>booleanValue</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></then></if>
		<expr_stmt><expr><name>scope</name> <operator>=</operator> <call><name><name>memento</name><operator>.</operator><name>getInteger</name></name><argument_list>(<argument><expr><name>TAG_SCOPE</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>intValue</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

		<decl_stmt><decl><type><name>String</name></type> <name>workingSetName</name> <init>= <expr><call><name><name>memento</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name>TAG_WORKING_SET</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<if>if <condition>(<expr><name>workingSetName</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then>
			<block type="pseudo"><expr_stmt><expr><call><name>setWorkingSet</name><argument_list>(<argument><expr><call><name><name>PlatformUI</name><operator>.</operator><name>getWorkbench</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getWorkingSetManager</name><argument_list>()</argument_list></call>
					<operator>.</operator><call><name>getWorkingSet</name><argument_list>(<argument><expr><name>workingSetName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>

		<decl_stmt><decl><type><name>Map</name></type> <name>filterMap</name> <init>= <expr><operator>new</operator> <call><name>HashMap</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name><name>MarkerFieldFilter</name><index>[]</index></name></type> <name>filters</name> <init>= <expr><call><name>getFieldFilters</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>filters</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
			<expr_stmt><expr><call><name><name>filterMap</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>filters</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>getID</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>filters</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		}</block></for>

		<decl_stmt><decl><type><name><name>IMemento</name><index>[]</index></name></type> <name>children</name> <init>= <expr><call><name><name>memento</name><operator>.</operator><name>getChildren</name></name><argument_list>(<argument><expr><name>TAG_FIELD_FILTER_ENTRY</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>children</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
			<decl_stmt><decl><type><name>IMemento</name></type> <name>childMemento</name> <init>= <expr><name><name>children</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>String</name></type> <name>id</name> <init>= <expr><call><name><name>childMemento</name><operator>.</operator><name>getID</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
			<if>if <condition>(<expr><call><name><name>filterMap</name><operator>.</operator><name>containsKey</name></name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
				<expr_stmt><expr><operator>(</operator><operator>(</operator><name>MarkerFieldFilter</name><operator>)</operator> <call><name><name>filterMap</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call><operator>)</operator>
						<operator>.</operator><call><name>loadSettings</name><argument_list>(<argument><expr><name>childMemento</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>

		}</block></for>

		<if>if <condition>(<expr><name>element</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
			<decl_stmt><decl><type><name>String</name></type> <name>nameString</name> <init>= <expr><call><name><name>memento</name>
					<operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>MarkerSupportConstants</name><operator>.</operator><name>ATTRIBUTE_NAME</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<if>if <condition>(<expr><name>nameString</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>nameString</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then>
				<block type="pseudo"><expr_stmt><expr><name>name</name> <operator>=</operator> <name>nameString</name></expr>;</expr_stmt></block></then></if>
			<decl_stmt><decl><type><name>String</name></type> <name>idString</name> <init>= <expr><call><name><name>memento</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>IMemento</name><operator>.</operator><name>TAG_ID</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<if>if <condition>(<expr><name>idString</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>idString</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then>
				<block type="pseudo"><expr_stmt><expr><name>id</name> <operator>=</operator> <name>idString</name></expr>;</expr_stmt></block></then></if>

		}</block></then></if>

	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Make a working copy of the receiver.
	 * 
	 * @return MarkerFieldFilterGroup or &lt;code&gt; null&lt;/code&gt; if it failed.
	 */</comment>
	<function><type><name>MarkerFieldFilterGroup</name></type> <name>makeWorkingCopy</name><parameter_list>()</parameter_list> <block>{
		<decl_stmt><decl><type><name>MarkerFieldFilterGroup</name></type> <name>clone</name> <init>= <expr><operator>new</operator> <call><name>MarkerFieldFilterGroup</name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>element</name></name></expr></argument>,
				<argument><expr><name><name>this</name><operator>.</operator><name>builder</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if>if <condition>(<expr><call><name>populateClone</name><argument_list>(<argument><expr><name>clone</name></expr></argument>)</argument_list></call></expr>)</condition><then>
			<block type="pseudo"><return>return <expr><name>clone</name></expr>;</return></block></then></if>
		<return>return <expr><literal type="null">null</literal></expr>;</return>

	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Populate the clone and return true if successful.
	 * 
	 * @param clone
	 */</comment>
	<function><specifier>protected</specifier> <type><name>boolean</name></type> <name>populateClone</name><parameter_list>(<parameter><decl><type><name>MarkerFieldFilterGroup</name></type> <name>clone</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><name><name>clone</name><operator>.</operator><name>scope</name></name> <operator>=</operator> <name><name>this</name><operator>.</operator><name>scope</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>clone</name><operator>.</operator><name>workingSet</name></name> <operator>=</operator> <name><name>this</name><operator>.</operator><name>workingSet</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>clone</name><operator>.</operator><name>enabled</name></name> <operator>=</operator> <name><name>this</name><operator>.</operator><name>enabled</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>clone</name><operator>.</operator><name>fieldFilters</name></name> <operator>=</operator> <operator>new</operator> <name><name>MarkerFieldFilter</name><index>[<expr><call><name>getFieldFilters</name><argument_list>()</argument_list></call><operator>.</operator><name>length</name></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>clone</name><operator>.</operator><name>name</name></name> <operator>=</operator> <name>name</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>clone</name><operator>.</operator><name>id</name></name> <operator>=</operator> <name>id</name></expr>;</expr_stmt>
		<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>fieldFilters</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
			<try>try <block>{
				<expr_stmt><expr><name><name>clone</name><operator>.</operator><name>fieldFilters</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>MarkerFieldFilter</name><operator>)</operator> <name><name>fieldFilters</name><index>[<expr><name>i</name></expr>]</index></name>
						<operator>.</operator><call><name>getClass</name><argument_list>()</argument_list></call><operator>.</operator><call><name>newInstance</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>fieldFilters</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>populateWorkingCopy</name><argument_list>(<argument><expr><name><name>clone</name><operator>.</operator><name>fieldFilters</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>InstantiationException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
				<expr_stmt><expr><call><name><name>StatusManager</name><operator>.</operator><name>getManager</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>handle</name><argument_list>(
						<argument><expr><call><name><name>StatusUtil</name><operator>.</operator><name>newStatus</name></name><argument_list>(<argument><expr><name><name>IStatus</name><operator>.</operator><name>ERROR</name></name></expr></argument>, <argument><expr><call><name><name>e</name>
								<operator>.</operator><name>getLocalizedMessage</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>StatusManager</name><operator>.</operator><name>SHOW</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<return>return <expr><literal type="boolean">false</literal></expr>;</return>
			}</block></catch> <catch>catch <parameter_list>(<parameter><decl><type><name>IllegalAccessException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
				<expr_stmt><expr><call><name><name>StatusManager</name><operator>.</operator><name>getManager</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>handle</name><argument_list>(
						<argument><expr><call><name><name>StatusUtil</name><operator>.</operator><name>newStatus</name></name><argument_list>(<argument><expr><name><name>IStatus</name><operator>.</operator><name>ERROR</name></name></expr></argument>, <argument><expr><call><name><name>e</name>
								<operator>.</operator><name>getLocalizedMessage</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>StatusManager</name><operator>.</operator><name>SHOW</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<return>return <expr><literal type="boolean">false</literal></expr>;</return>
			}</block></catch></try>

		}</block></for>
		<return>return <expr><literal type="boolean">true</literal></expr>;</return>
	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Process the scope attribute.
	 * 
	 * @return int
	 */</comment>
	<function><specifier>private</specifier> <type><name>int</name></type> <name>processScope</name><parameter_list>()</parameter_list> <block>{

		<if>if <condition>(<expr><name>element</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then>
			<block type="pseudo"><return>return <expr><name>ON_ANY</name></expr>;</return></block></then></if>

		<decl_stmt><decl><type><name>String</name></type> <name>scopeValue</name> <init>= <expr><call><name><name>element</name><operator>.</operator><name>getAttribute</name></name><argument_list>(<argument><expr><name>ATTRIBUTE_SCOPE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<if>if <condition>(<expr><call><name><name>scopeValue</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>ATTRIBUTE_ON_SELECTED_ONLY</name></expr></argument>)</argument_list></call></expr>)</condition><then>
			<block type="pseudo"><return>return <expr><name>ON_SELECTED_ONLY</name></expr>;</return></block></then></if>

		<if>if <condition>(<expr><call><name><name>scopeValue</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>ATTRIBUTE_ON_SELECTED_AND_CHILDREN</name></expr></argument>)</argument_list></call></expr>)</condition><then>
			<block type="pseudo"><return>return <expr><name>ON_SELECTED_AND_CHILDREN</name></expr>;</return></block></then></if>

		<if>if <condition>(<expr><call><name><name>scopeValue</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>ATTRIBUTE_ON_ANY_IN_SAME_CONTAINER</name></expr></argument>)</argument_list></call></expr>)</condition><then>
			<block type="pseudo"><return>return <expr><name>ON_ANY_IN_SAME_CONTAINER</name></expr>;</return></block></then></if>

		<return>return <expr><name>ON_ANY</name></expr>;</return>
	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Save the settings for the receiver in the memento.
	 * 
	 * @param memento
	 */</comment>
	<function><type><name>void</name></type> <name>saveFilterSettings</name><parameter_list>(<parameter><decl><type><name>IMemento</name></type> <name>memento</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><call><name><name>memento</name><operator>.</operator><name>putString</name></name><argument_list>(<argument><expr><name>TAG_ENABLED</name></expr></argument>, <argument><expr><call><name><name>String</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><name>enabled</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>memento</name><operator>.</operator><name>putString</name></name><argument_list>(<argument><expr><name>TAG_SCOPE</name></expr></argument>, <argument><expr><call><name><name>String</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><name>scope</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if>if <condition>(<expr><name>workingSet</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
			<expr_stmt><expr><call><name><name>memento</name><operator>.</operator><name>putString</name></name><argument_list>(<argument><expr><name>TAG_WORKING_SET</name></expr></argument>, <argument><expr><call><name><name>workingSet</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>

		<if>if <condition>(<expr><name>element</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
			<expr_stmt><expr><call><name><name>memento</name><operator>.</operator><name>putString</name></name><argument_list>(<argument><expr><name><name>MarkerSupportConstants</name><operator>.</operator><name>ATTRIBUTE_NAME</name></name></expr></argument>, <argument><expr><call><name>getName</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>memento</name><operator>.</operator><name>putString</name></name><argument_list>(<argument><expr><name><name>IMemento</name><operator>.</operator><name>TAG_ID</name></name></expr></argument>, <argument><expr><call><name>getID</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>
		<decl_stmt><decl><type><name><name>MarkerFieldFilter</name><index>[]</index></name></type> <name>filters</name> <init>= <expr><call><name>getFieldFilters</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

		<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>filters</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
			<decl_stmt><decl><type><name>IMemento</name></type> <name>child</name> <init>= <expr><call><name><name>memento</name><operator>.</operator><name>createChild</name></name><argument_list>(<argument><expr><name>TAG_FIELD_FILTER_ENTRY</name></expr></argument>,
					<argument><expr><name><name>filters</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>getID</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><name><name>filters</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>saveSettings</name><argument_list>(<argument><expr><name>child</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		}</block></for>

	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Return whether or not this IMarker is being shown.
	 * 
	 * @param marker
	 * @return &lt;code&gt;true&lt;/code&gt; if it is being shown
	 */</comment>
	<function><specifier>public</specifier> <type><name>boolean</name></type> <name>select</name><parameter_list>(<parameter><decl><type><name>IMarker</name></type> <name>marker</name></decl></parameter>)</parameter_list> <block>{
		<decl_stmt><decl><type><name><name>MarkerFieldFilter</name><index>[]</index></name></type> <name>filters</name> <init>= <expr><call><name>getFieldFilters</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>testEntry</name><operator>.</operator><name>setMarker</name></name><argument_list>(<argument><expr><name>marker</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if>if <condition>(<expr><name>scope</name> <operator>==</operator> <name>ON_WORKING_SET</name> <operator>&amp;&amp;</operator> <name>workingSet</name> <operator>!=</operator> <literal type="null">null</literal>
				<operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>workingSet</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
			<if>if <condition>(<expr><operator>!</operator><call><name>getWorkingSetPaths</name><argument_list>()</argument_list></call><operator>.</operator><call><name>contains</name><argument_list>(
					<argument><expr><call><name><name>marker</name><operator>.</operator><name>getResource</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getFullPath</name><argument_list>()</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then>
				<block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr>;</return></block></then></if>
		}</block></then></if>

		<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>filters</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
			<if>if <condition>(<expr><name><name>filters</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>select</name><argument_list>(<argument><expr><name>testEntry</name></expr></argument>)</argument_list></call></expr>)</condition><then>
				<block type="pseudo"><continue>continue;</continue></block></then></if>
			<return>return <expr><literal type="boolean">false</literal></expr>;</return>
		}</block></for>
		<return>return <expr><literal type="boolean">true</literal></expr>;</return>
	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Set whether or not the receiver is enabled.
	 * 
	 * @param enabled
	 *            The enabled to set.
	 */</comment>
	<function><type><name>void</name></type> <name>setEnabled</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>enabled</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>enabled</name></name> <operator>=</operator> <name>enabled</name></expr>;</expr_stmt>
	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Set the name of the receiver.
	 * 
	 * @param newName
	 */</comment>
	<function><specifier>public</specifier> <type><name>void</name></type> <name>setName</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>newName</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><name>name</name> <operator>=</operator> <name>newName</name></expr>;</expr_stmt>

	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Set the scope of the receiver.
	 * 
	 * @param newScope
	 */</comment>
	<function><specifier>public</specifier> <type><name>void</name></type> <name>setScope</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>newScope</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><name>scope</name> <operator>=</operator> <name>newScope</name></expr>;</expr_stmt>
	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Set the working set of the receiver.
	 * 
	 * @param workingSet
	 */</comment>
	<function><type><name>void</name></type> <name>setWorkingSet</name><parameter_list>(<parameter><decl><type><name>IWorkingSet</name></type> <name>workingSet</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>workingSet</name></name> <operator>=</operator> <name>workingSet</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>workingSetPaths</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>

	}</block></function>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="org.eclipse.ui.ide.markers.compatibility/src/org/eclipse/ui/ide/markers/compatibility/internal/MarkerTypeField.java" hash="4f963dfbcce2178ba3412608a09f88ea83290155"><comment type="block" format="javadoc">/*******************************************************************************
 * Copyright (c) 2007 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     IBM Corporation - initial API and implementation
 ******************************************************************************/</comment>

<package>package <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>ide</name><operator>.</operator><name>markers</name><operator>.</operator><name>compatibility</name><operator>.</operator><name>internal</name></name>;</package>

<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>ide</name><operator>.</operator><name>markers</name><operator>.</operator><name>compatibility</name><operator>.</operator><name>api</name><operator>.</operator><name>MarkerField</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>ide</name><operator>.</operator><name>markers</name><operator>.</operator><name>compatibility</name><operator>.</operator><name>api</name><operator>.</operator><name>MarkerItem</name></name>;</import>


<comment type="block" format="javadoc">/**
 * MarkerTypeField is the field that defines the marker type.
 * 
 * @since 3.3
 * 
 */</comment>
<class><specifier>public</specifier> class <name>MarkerTypeField</name> <super><extends>extends <name>MarkerField</name></extends></super> <block>{

	<comment type="block">/*
	 * (non-Javadoc)
	 * 
	 * @see org.eclipse.ui.internal.provisional.views.markers.MarkerField#getValue(org.eclipse.ui.internal.provisional.views.markers.MarkerItem)
	 */</comment>
	<function><specifier>public</specifier> <type><name>String</name></type> <name>getValue</name><parameter_list>(<parameter><decl><type><name>MarkerItem</name></type> <name>item</name></decl></parameter>)</parameter_list> <block>{
		<return>return <expr><call><name><name>item</name><operator>.</operator><name>getMarkerTypeName</name></name><argument_list>()</argument_list></call></expr>;</return>
	}</block></function>

}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="org.eclipse.ui.ide.markers.compatibility/src/org/eclipse/ui/ide/markers/compatibility/internal/MarkerShowInAdapter.java" hash="eb90eb0e77cce5b22ce8b8b554702eef10e415a9"><comment type="block" format="javadoc">/*******************************************************************************
 * Copyright (c) 2007 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     IBM Corporation - initial API and implementation
 ******************************************************************************/</comment>
<package>package <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>ide</name><operator>.</operator><name>markers</name><operator>.</operator><name>compatibility</name><operator>.</operator><name>internal</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Collection</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashSet</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>core</name><operator>.</operator><name>resources</name><operator>.</operator><name>IMarker</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>core</name><operator>.</operator><name>runtime</name><operator>.</operator><name>IAdapterFactory</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>jface</name><operator>.</operator><name>viewers</name><operator>.</operator><name>StructuredSelection</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>part</name><operator>.</operator><name>IShowInSource</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>part</name><operator>.</operator><name>ShowInContext</name></name>;</import>

<comment type="block" format="javadoc">/**
 * MarkerShowInAdapter is the adapter for ExtendedMarkersViews to get an
 * IShowInSource.
 * 
 * @since 3.4
 * 
 */</comment>
<class><specifier>public</specifier> class <name>MarkerShowInAdapter</name> <super><implements>implements <name>IAdapterFactory</name></implements></super> <block>{

	<decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><name><name>Class</name><index>[]</index></name></type> <name>classes</name> <init>= <expr><operator>new</operator> <name><name>Class</name><index>[]</index></name> <block>{ <expr><name><name>IShowInSource</name><operator>.</operator><name>class</name></name></expr> }</block></expr></init></decl>;</decl_stmt>

	<comment type="block">/*
	 * (non-Javadoc)
	 * 
	 * @see org.eclipse.core.runtime.IAdapterFactory#getAdapter(java.lang.Object,
	 *      java.lang.Class)
	 */</comment>
	<function><specifier>public</specifier> <type><name>Object</name></type> <name>getAdapter</name><parameter_list>(<parameter><decl><type><name>Object</name></type> <name>adaptableObject</name></decl></parameter>, <parameter><decl><type><name>Class</name></type> <name>adapterType</name></decl></parameter>)</parameter_list> <block>{
		<if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>adaptableObject</name> <operator>instanceof</operator> <name>ExtendedMarkersView</name><operator>)</operator></expr>)</condition><then>
			<block type="pseudo"><return>return <expr><literal type="null">null</literal></expr>;</return></block></then></if>

		<decl_stmt><decl><type><specifier>final</specifier> <name>ExtendedMarkersView</name></type> <name>view</name> <init>= <expr><operator>(</operator><name>ExtendedMarkersView</name><operator>)</operator> <name>adaptableObject</name></expr></init></decl>;</decl_stmt>

		<return>return <expr><operator>new</operator> <class><super><name>IShowInSource</name></super><argument_list>()</argument_list> <block>{
			<function><specifier>public</specifier> <type><name>ShowInContext</name></type> <name>getShowInContext</name><parameter_list>()</parameter_list> <block>{
				<decl_stmt><decl><type><name><name>IMarker</name><index>[]</index></name></type> <name>markers</name> <init>= <expr><call><name><name>view</name><operator>.</operator><name>getSelectedMarkers</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>Collection</name></type> <name>resources</name> <init>= <expr><operator>new</operator> <call><name>HashSet</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
				<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>markers</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
					<expr_stmt><expr><call><name><name>resources</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name><name>markers</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>getResource</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></for>
				<return>return <expr><operator>new</operator> <call><name>ShowInContext</name><argument_list>(<argument><expr><call><name><name>view</name><operator>.</operator><name>getViewerInput</name></name><argument_list>()</argument_list></call></expr></argument>,
						<argument><expr><operator>new</operator> <call><name>StructuredSelection</name><argument_list>(<argument><expr><call><name><name>resources</name><operator>.</operator><name>toArray</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
			}</block></function>

		}</block></class></expr>;</return>

	}</block></function>

	<comment type="block">/*
	 * (non-Javadoc)
	 * 
	 * @see org.eclipse.core.runtime.IAdapterFactory#getAdapterList()
	 */</comment>
	<function><specifier>public</specifier> <type><name><name>Class</name><index>[]</index></name></type> <name>getAdapterList</name><parameter_list>()</parameter_list> <block>{
		<return>return <expr><name>classes</name></expr>;</return>
	}</block></function>

}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="org.eclipse.ui.ide.markers.compatibility/src/org/eclipse/ui/ide/markers/compatibility/internal/MarkersContribution.java" hash="21ec795e218f7cf0780419320607ca64c13d1c17"><comment type="block" format="javadoc">/*******************************************************************************
 * Copyright (c) 2007 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     IBM Corporation - initial API and implementation
 ******************************************************************************/</comment>

<package>package <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>ide</name><operator>.</operator><name>markers</name><operator>.</operator><name>compatibility</name><operator>.</operator><name>internal</name></name>;</package>

<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>IWorkbenchPage</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>IWorkbenchPart</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>IWorkbenchWindow</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>PlatformUI</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>actions</name><operator>.</operator><name>CompoundContributionItem</name></name>;</import>

<comment type="block" format="javadoc">/**
 * MarkersContribution is the abstract superclass of the compound contribution
 * items used in the Markers views.
 * 
 * @since 3.4
 * 
 */</comment>
<class><specifier>abstract</specifier> class <name>MarkersContribution</name> <super><extends>extends <name>CompoundContributionItem</name></extends></super> <block>{

	<comment type="block" format="javadoc">/**
	 * Create a new instance of the receiver.
	 */</comment>
	<constructor><specifier>public</specifier> <name>MarkersContribution</name><parameter_list>()</parameter_list> <block>{
		<expr_stmt><expr><call><name>super</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	}</block></constructor>

	<comment type="block" format="javadoc">/**
	 * Create a new instance of the receiver.
	 * 
	 * @param id
	 */</comment>
	<constructor><specifier>public</specifier> <name>MarkersContribution</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>id</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></constructor>

	<comment type="block" format="javadoc">/**
	 * Get the view this contribution is working on.
	 * 
	 * @return ExtendedMarkersView
	 */</comment>
	<function><type><name>ExtendedMarkersView</name></type> <name>getView</name><parameter_list>()</parameter_list> <block>{
		<decl_stmt><decl><type><name>IWorkbenchWindow</name></type> <name>active</name> <init>= <expr><call><name><name>PlatformUI</name><operator>.</operator><name>getWorkbench</name></name><argument_list>()</argument_list></call>
				<operator>.</operator><call><name>getActiveWorkbenchWindow</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<if>if <condition>(<expr><name>active</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then>
			<block type="pseudo"><return>return <expr><literal type="null">null</literal></expr>;</return></block></then></if>
		<decl_stmt><decl><type><name>IWorkbenchPage</name></type> <name>page</name> <init>= <expr><call><name><name>active</name><operator>.</operator><name>getActivePage</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<if>if <condition>(<expr><name>page</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then>
			<block type="pseudo"><return>return <expr><literal type="null">null</literal></expr>;</return></block></then></if>
		<decl_stmt><decl><type><name>IWorkbenchPart</name></type> <name>part</name> <init>= <expr><call><name><name>page</name><operator>.</operator><name>getActivePart</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<if>if <condition>(<expr><name>part</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then>
			<block type="pseudo"><return>return <expr><literal type="null">null</literal></expr>;</return></block></then></if>

		<return>return <expr><operator>(</operator><name>ExtendedMarkersView</name><operator>)</operator> <name>part</name></expr>;</return>
	}</block></function>

}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="org.eclipse.ui.ide.markers.compatibility/src/org/eclipse/ui/ide/markers/compatibility/internal/MarkerSupportInternalUtilities.java" hash="0b7dd9e910a840fddfdf76c6368267ae03ec33d6"><comment type="block" format="javadoc">/*******************************************************************************
 * Copyright (c) 2007 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     IBM Corporation - initial API and implementation
 ******************************************************************************/</comment>

<package>package <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>ide</name><operator>.</operator><name>markers</name><operator>.</operator><name>compatibility</name><operator>.</operator><name>internal</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>net</name><operator>.</operator><name>URL</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>core</name><operator>.</operator><name>resources</name><operator>.</operator><name>IMarker</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>core</name><operator>.</operator><name>resources</name><operator>.</operator><name>IResource</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>core</name><operator>.</operator><name>runtime</name><operator>.</operator><name>CoreException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>core</name><operator>.</operator><name>runtime</name><operator>.</operator><name>IStatus</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>core</name><operator>.</operator><name>runtime</name><operator>.</operator><name>Status</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>jface</name><operator>.</operator><name>resource</name><operator>.</operator><name>ImageDescriptor</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>jface</name><operator>.</operator><name>resource</name><operator>.</operator><name>JFaceResources</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>jface</name><operator>.</operator><name>viewers</name><operator>.</operator><name>StructuredSelection</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>swt</name><operator>.</operator><name>graphics</name><operator>.</operator><name>Image</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>IViewPart</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>ide</name><operator>.</operator><name>markers</name><operator>.</operator><name>compatibility</name><operator>.</operator><name>api</name><operator>.</operator><name>FilterConfigurationArea</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>ide</name><operator>.</operator><name>markers</name><operator>.</operator><name>compatibility</name><operator>.</operator><name>api</name><operator>.</operator><name>MarkerFieldFilter</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>ide</name><operator>.</operator><name>markers</name><operator>.</operator><name>compatibility</name><operator>.</operator><name>api</name><operator>.</operator><name>MarkerItem</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>ide</name><operator>.</operator><name>markers</name><operator>.</operator><name>compatibility</name><operator>.</operator><name>api</name><operator>.</operator><name>MarkerSupportConstants</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>internal</name><operator>.</operator><name>ide</name><operator>.</operator><name>IDEInternalPreferences</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>internal</name><operator>.</operator><name>ide</name><operator>.</operator><name>IDEInternalWorkbenchImages</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>internal</name><operator>.</operator><name>ide</name><operator>.</operator><name>IDEWorkbenchPlugin</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>internal</name><operator>.</operator><name>ide</name><operator>.</operator><name>Policy</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>internal</name><operator>.</operator><name>ide</name><operator>.</operator><name>StatusUtil</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>internal</name><operator>.</operator><name>util</name><operator>.</operator><name>BundleUtility</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>statushandlers</name><operator>.</operator><name>StatusAdapter</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>statushandlers</name><operator>.</operator><name>StatusManager</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>ibm</name><operator>.</operator><name>icu</name><operator>.</operator><name>text</name><operator>.</operator><name>CollationKey</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>ibm</name><operator>.</operator><name>icu</name><operator>.</operator><name>text</name><operator>.</operator><name>Collator</name></name>;</import>

<comment type="block" format="javadoc">/**
 * MarkerSupportUtilities is the class that maintains constants and
 * functionality used by multiple classes.
 * 
 * @since 3.4
 * 
 */</comment>
<class><specifier>public</specifier> class <name>MarkerSupportInternalUtilities</name> <block>{

	<decl_stmt><decl><specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>ATTRIBUTE_CLASS</name> <init>= <expr><literal type="string">"class"</literal></expr></init></decl>;</decl_stmt> <comment type="line">//$NON-NLS-1$</comment>
	<decl_stmt><decl><specifier>static</specifier> <type><specifier>final</specifier> <name>CollationKey</name></type> <name>EMPTY_COLLATION_KEY</name> <init>= <expr><call><name><name>Collator</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call>
			<operator>.</operator><call><name>getCollationKey</name><argument_list>(<argument><expr><name><name>MarkerSupportConstants</name><operator>.</operator><name>EMPTY_STRING</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>static</specifier> <type><specifier>final</specifier> <name><name>IMarker</name><index>[]</index></name></type> <name>EMPTY_MARKER_ARRAY</name> <init>= <expr><operator>new</operator> <name><name>IMarker</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><specifier>static</specifier> <type><specifier>final</specifier> <name><name>MarkerItem</name><index>[]</index></name></type> <name>EMPTY_MARKER_ITEM_ARRAY</name> <init>= <expr><operator>new</operator> <name><name>MarkerItem</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>static</specifier> <type><specifier>final</specifier> <name><name>IResource</name><index>[]</index></name></type> <name>EMPTY_RESOURCE_ARRAY</name> <init>= <expr><operator>new</operator> <name><name>IResource</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>static</specifier> <type><specifier>final</specifier> <name>Object</name></type> <name>CONTAINS_MODIFIER_TOKEN</name> <init>= <expr><operator>new</operator> <call><name>Object</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>static</specifier> <type><specifier>final</specifier> <name>Object</name></type> <name>CONTAINS_TEXT_TOKEN</name> <init>= <expr><operator>new</operator> <call><name>Object</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="block" format="javadoc">/**
	 * A constant to map migration to the filter being migrated
	 */</comment>
	<decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>MIGRATE_PREFERENCE_CONSTANT</name> <init>= <expr><literal type="string">"_MIGRATE"</literal></expr></init></decl>;</decl_stmt> <comment type="line">//$NON-NLS-1$</comment>

	<comment type="block" format="javadoc">/**
	 * Constant for the problem filters migration.
	 */</comment>
	<decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>MIGRATE_PROBLEM_FILTERS</name> <init>= <expr><name><name>IDEInternalPreferences</name><operator>.</operator><name>PROBLEMS_FILTERS</name></name>
			<operator>+</operator> <name>MIGRATE_PREFERENCE_CONSTANT</name></expr></init></decl>;</decl_stmt>
	<comment type="block" format="javadoc">/**
	 * Constant for the task filters migration.
	 */</comment>
	<decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>MIGRATE_TASK_FILTERS</name> <init>= <expr><name><name>IDEInternalPreferences</name><operator>.</operator><name>TASKS_FILTERS</name></name>
			<operator>+</operator> <name>MIGRATE_PREFERENCE_CONSTANT</name></expr></init></decl>;</decl_stmt>
	<comment type="block" format="javadoc">/**
	 * Constant for the bookmark filters migration.
	 */</comment>
	<decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>MIGRATE_BOOKMARK_FILTERS</name> <init>= <expr><name><name>IDEInternalPreferences</name><operator>.</operator><name>BOOKMARKS_FILTERS</name></name>
			<operator>+</operator> <name>MIGRATE_PREFERENCE_CONSTANT</name></expr></init></decl>;</decl_stmt>

	<comment type="block" format="javadoc">/**
	 * The string value of the false value for a boolean attribute.
	 */</comment>
	<decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>Object</name></type> <name>VALUE_FALSE</name> <init>= <expr><literal type="string">"false"</literal></expr></init></decl>;</decl_stmt> <comment type="line">//$NON-NLS-1$</comment>

	<comment type="block" format="javadoc">/**
	 * The suffix to the view names for the legacy markers views.
	 */</comment>
	<decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>LEGACY_SUFFIX</name> <init>= <expr><literal type="string">".old"</literal></expr></init></decl>;</decl_stmt> <comment type="line">//$NON-NLS-1$</comment>

	<comment type="block" format="javadoc">/**
	 * The markers quick fix decoration.
	 */</comment>
	<decl_stmt><decl><specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>IMG_MARKERS_QUICK_FIX_DECORATION_PATH</name> <init>= <expr><literal type="string">"markers/contassist_ovr.gif"</literal></expr></init></decl>;</decl_stmt> <comment type="line">//$NON-NLS-1$</comment>
	<comment type="block" format="javadoc">/**
	 * The markers help decoration.
	 */</comment>
	<decl_stmt><decl><specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>IMG_MARKERS_HELP_DECORATION_PATH</name> <init>= <expr><literal type="string">"markers/help_small.gif"</literal></expr></init></decl>;</decl_stmt> <comment type="line">//$NON-NLS-1$</comment>

	<comment type="block" format="javadoc">/**
	 * The configuration element constant for false
	 */</comment>
	<decl_stmt><decl><specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>FALSE</name> <init>= <expr><literal type="string">"false"</literal></expr></init></decl>;</decl_stmt> <comment type="line">//$NON-NLS-1$</comment>

	<comment type="block" format="javadoc">/**
	 * Create the image at the supplied path.
	 * 
	 * @param completeImagePath
	 * @return Image or &lt;code&gt;null&lt;/code&gt;.
	 */</comment>
	<function><specifier>public</specifier> <specifier>static</specifier> <type><name>Image</name></type> <name>createImage</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>completeImagePath</name></decl></parameter>)</parameter_list> <block>{
		<decl_stmt><decl><type><name>URL</name></type> <name>url</name> <init>= <expr><call><name><name>BundleUtility</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><call><name><name>IDEWorkbenchPlugin</name><operator>.</operator><name>getDefault</name></name><argument_list>()</argument_list></call>
				<operator>.</operator><call><name>getBundle</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getSymbolicName</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>completeImagePath</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if>if <condition>(<expr><name>url</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then>
			<block type="pseudo"><return>return <expr><literal type="null">null</literal></expr>;</return></block></then></if>
		<return>return <expr><call><name><name>IDEWorkbenchPlugin</name><operator>.</operator><name>getDefault</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getResourceManager</name><argument_list>()</argument_list></call>
				<operator>.</operator><call><name>createImageWithDefault</name><argument_list>(<argument><expr><call><name><name>ImageDescriptor</name><operator>.</operator><name>createFromURL</name></name><argument_list>(<argument><expr><name>url</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Get the IDE image at path.
	 * 
	 * @param constantName
	 * @return Image
	 */</comment>
	<function><specifier>private</specifier> <specifier>static</specifier> <type><name>Image</name></type> <name>getIDEImage</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>constantName</name></decl></parameter>)</parameter_list> <block>{

		<return>return <expr><call><name><name>JFaceResources</name><operator>.</operator><name>getResources</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>createImageWithDefault</name><argument_list>(
				<argument><expr><call><name><name>IDEInternalWorkbenchImages</name><operator>.</operator><name>getImageDescriptor</name></name><argument_list>(<argument><expr><name>constantName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Get the image for the supplied severity
	 * 
	 * @param severity
	 * @return {@link Image}
	 */</comment>
	<function><specifier>public</specifier> <specifier>static</specifier> <type><name>Image</name></type> <name>getSeverityImage</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>severity</name></decl></parameter>)</parameter_list> <block>{

		<if>if <condition>(<expr><name>severity</name> <operator>==</operator> <name><name>IMarker</name><operator>.</operator><name>SEVERITY_ERROR</name></name></expr>)</condition><then> <block>{
			<return>return <expr><call><name>getIDEImage</name><argument_list>(<argument><expr><name><name>IDEInternalWorkbenchImages</name><operator>.</operator><name>IMG_OBJS_ERROR_PATH</name></name></expr></argument>)</argument_list></call></expr>;</return>
		}</block></then></if>
		<if>if <condition>(<expr><name>severity</name> <operator>==</operator> <name><name>IMarker</name><operator>.</operator><name>SEVERITY_WARNING</name></name></expr>)</condition><then> <block>{
			<return>return <expr><call><name>getIDEImage</name><argument_list>(<argument><expr><name><name>IDEInternalWorkbenchImages</name><operator>.</operator><name>IMG_OBJS_WARNING_PATH</name></name></expr></argument>)</argument_list></call></expr>;</return>
		}</block></then></if>
		<if>if <condition>(<expr><name>severity</name> <operator>==</operator> <name><name>IMarker</name><operator>.</operator><name>SEVERITY_INFO</name></name></expr>)</condition><then> <block>{
			<return>return <expr><call><name>getIDEImage</name><argument_list>(<argument><expr><name><name>IDEInternalWorkbenchImages</name><operator>.</operator><name>IMG_OBJS_INFO_PATH</name></name></expr></argument>)</argument_list></call></expr>;</return>
		}</block></then></if>

		<return>return <expr><literal type="null">null</literal></expr>;</return>

	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Get the MarkerFieldFilter associated with the filter in group.
	 * 
	 * @param group
	 * @param area
	 * @return MarkerFieldFilter or &lt;code&gt;null&lt;/code&gt;
	 */</comment>
	<function><specifier>public</specifier> <specifier>final</specifier> <type><name>MarkerFieldFilter</name></type> <name>getFilter</name><parameter_list>(<parameter><decl><type><name>MarkerFieldFilterGroup</name></type> <name>group</name></decl></parameter>,
			<parameter><decl><type><name>FilterConfigurationArea</name></type> <name>area</name></decl></parameter>)</parameter_list> <block>{
		<return>return <expr><call><name><name>group</name><operator>.</operator><name>getFilter</name></name><argument_list>(<argument><expr><call><name><name>area</name><operator>.</operator><name>getField</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Return a StatusAdapter for the error
	 * 
	 * @param exception
	 * @return StatusAdapter
	 */</comment>
	<function><specifier>public</specifier> <specifier>static</specifier> <type><name>StatusAdapter</name></type> <name>errorFor</name><parameter_list>(<parameter><decl><type><name>Throwable</name></type> <name>exception</name></decl></parameter>)</parameter_list> <block>{
		<decl_stmt><decl><type><name>IStatus</name></type> <name>status</name> <init>= <expr><operator>new</operator> <call><name>Status</name><argument_list>(<argument><expr><name><name>IStatus</name><operator>.</operator><name>ERROR</name></name></expr></argument>,
				<argument><expr><name><name>IDEWorkbenchPlugin</name><operator>.</operator><name>IDE_WORKBENCH</name></name></expr></argument>, <argument><expr><name><name>IStatus</name><operator>.</operator><name>ERROR</name></name></expr></argument>, <argument><expr><call><name><name>exception</name>
						<operator>.</operator><name>getLocalizedMessage</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>exception</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<return>return <expr><operator>new</operator> <call><name>StatusAdapter</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</return>
	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Get the marker limit for the receiver.
	 * 
	 * @return int
	 */</comment>
	<function><specifier>static</specifier> <type><name>int</name></type> <name>getMarkerLimit</name><parameter_list>()</parameter_list> <block>{

		<comment type="line">// If limits are enabled return it. Otherwise return -1</comment>
		<if>if <condition>(<expr><call><name><name>IDEWorkbenchPlugin</name><operator>.</operator><name>getDefault</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getPreferenceStore</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getBoolean</name><argument_list>(
				<argument><expr><name><name>IDEInternalPreferences</name><operator>.</operator><name>USE_MARKER_LIMITS</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
			<return>return <expr><call><name><name>IDEWorkbenchPlugin</name><operator>.</operator><name>getDefault</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getPreferenceStore</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getInt</name><argument_list>(
					<argument><expr><name><name>IDEInternalPreferences</name><operator>.</operator><name>MARKER_LIMITS_VALUE</name></name></expr></argument>)</argument_list></call></expr>;</return>

		}</block></then></if>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Show the marker in view if possible.
	 * 
	 * @param view
	 * @param marker
	 * @return &lt;code&gt;true&lt;/code&gt; if the marker is shown
	 */</comment>
	<function><specifier>public</specifier> <specifier>static</specifier> <type><name>boolean</name></type> <name>showMarker</name><parameter_list>(<parameter><decl><type><name>IViewPart</name></type> <name>view</name></decl></parameter>, <parameter><decl><type><name>IMarker</name></type> <name>marker</name></decl></parameter>)</parameter_list> <block>{
		<if>if <condition>(<expr><name>view</name> <operator>instanceof</operator> <name>ExtendedMarkersView</name></expr>)</condition><then> <block>{
			<decl_stmt><decl><type><name>StructuredSelection</name></type> <name>selection</name> <init>= <expr><operator>new</operator> <call><name>StructuredSelection</name><argument_list>(<argument><expr><name>marker</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>ExtendedMarkersView</name></type> <name>markerView</name> <init>= <expr><operator>(</operator><name>ExtendedMarkersView</name><operator>)</operator> <name>view</name></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name><name>markerView</name><operator>.</operator><name>setSelection</name></name><argument_list>(<argument><expr><name>selection</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><literal type="boolean">true</literal></expr>;</return>
		}</block></then></if>
		<return>return <expr><literal type="boolean">false</literal></expr>;</return>

	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Handle the core exception.
	 * 
	 * @param exception
	 */</comment>
	<function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>handle</name><parameter_list>(<parameter><decl><type><name>CoreException</name></type> <name>exception</name></decl></parameter>)</parameter_list> <block>{
		<comment type="line">// Only log if in debug mode</comment>
		<if>if <condition>(<expr><name><name>Policy</name><operator>.</operator><name>DEBUG_MARKERS</name></name></expr>)</condition><then>
			<block type="pseudo"><expr_stmt><expr><call><name><name>StatusManager</name><operator>.</operator><name>getManager</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>handle</name><argument_list>(<argument><expr><call><name><name>StatusUtil</name><operator>.</operator><name>newStatus</name></name><argument_list>(<argument><expr><name>exception</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>

	}</block></function>

}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="org.eclipse.ui.ide.markers.compatibility/src/org/eclipse/ui/ide/markers/compatibility/internal/MarkersPreferencePage.java" hash="b7a36400af47ca53f88eaa5184dba29c31d95b81"><comment type="block" format="javadoc">/*******************************************************************************
 * Copyright (c) 2007 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     IBM Corporation - initial API and implementation
 ******************************************************************************/</comment>

<package>package <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>ide</name><operator>.</operator><name>markers</name><operator>.</operator><name>compatibility</name><operator>.</operator><name>internal</name></name>;</package>

<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>jface</name><operator>.</operator><name>preference</name><operator>.</operator><name>IntegerFieldEditor</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>jface</name><operator>.</operator><name>preference</name><operator>.</operator><name>PreferencePage</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>jface</name><operator>.</operator><name>resource</name><operator>.</operator><name>ImageDescriptor</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>swt</name><operator>.</operator><name>SWT</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>swt</name><operator>.</operator><name>events</name><operator>.</operator><name>SelectionAdapter</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>swt</name><operator>.</operator><name>events</name><operator>.</operator><name>SelectionEvent</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>swt</name><operator>.</operator><name>layout</name><operator>.</operator><name>GridData</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>swt</name><operator>.</operator><name>layout</name><operator>.</operator><name>GridLayout</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>swt</name><operator>.</operator><name>widgets</name><operator>.</operator><name>Button</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>swt</name><operator>.</operator><name>widgets</name><operator>.</operator><name>Composite</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>swt</name><operator>.</operator><name>widgets</name><operator>.</operator><name>Control</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>IWorkbench</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>IWorkbenchPreferencePage</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>ide</name><operator>.</operator><name>markers</name><operator>.</operator><name>compatibility</name><operator>.</operator><name>api</name><operator>.</operator><name>internal</name><operator>.</operator><name>MarkerMessages</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>internal</name><operator>.</operator><name>ide</name><operator>.</operator><name>IDEInternalPreferences</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>internal</name><operator>.</operator><name>ide</name><operator>.</operator><name>IDEWorkbenchPlugin</name></name>;</import>

<comment type="block" format="javadoc">/**
 * MarkersPreferencePage is the preference page for the markers.
 * 
 * @since 3.4
 * 
 */</comment>
<class><specifier>public</specifier> class <name>MarkersPreferencePage</name> <super><extends>extends <name>PreferencePage</name></extends> <implements>implements
		<name>IWorkbenchPreferencePage</name></implements></super> <block>{

	<decl_stmt><decl><specifier>private</specifier> <type><name>IntegerFieldEditor</name></type> <name>limitEditor</name></decl>;</decl_stmt>

	<decl_stmt><decl><specifier>private</specifier> <type><name>Button</name></type> <name>enablementButton</name></decl>;</decl_stmt>

	<decl_stmt><decl><specifier>private</specifier> <type><name>Composite</name></type> <name>editArea</name></decl>;</decl_stmt>

	<comment type="block" format="javadoc">/**
	 * Create a new instance of the receiver.
	 */</comment>
	<constructor><specifier>public</specifier> <name>MarkersPreferencePage</name><parameter_list>()</parameter_list> <block>{
		<expr_stmt><expr><call><name>super</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	}</block></constructor>

	<comment type="block" format="javadoc">/**
	 * Create a new instance of the receiver.
	 * 
	 * @param title
	 */</comment>
	<constructor><specifier>public</specifier> <name>MarkersPreferencePage</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>title</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>title</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></constructor>

	<comment type="block" format="javadoc">/**
	 * Create a new instance of the receiver.
	 * 
	 * @param title
	 * @param image
	 */</comment>
	<constructor><specifier>public</specifier> <name>MarkersPreferencePage</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>title</name></decl></parameter>, <parameter><decl><type><name>ImageDescriptor</name></type> <name>image</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>title</name></expr></argument>, <argument><expr><name>image</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	}</block></constructor>

	<function><specifier>public</specifier> <type><name>void</name></type> <name>init</name><parameter_list>(<parameter><decl><type><name>IWorkbench</name></type> <name>workbench</name></decl></parameter>)</parameter_list> <block>{
		<comment type="line">// TODO Auto-generated method stub</comment>

	}</block></function>

	<comment type="block">/*
	 * (non-Javadoc)
	 * 
	 * @see org.eclipse.jface.preference.PreferencePage#createContents(org.eclipse.swt.widgets.Composite)
	 */</comment>
	<function><specifier>protected</specifier> <type><name>Control</name></type> <name>createContents</name><parameter_list>(<parameter><decl><type><name>Composite</name></type> <name>parent</name></decl></parameter>)</parameter_list> <block>{

		<decl_stmt><decl><type><name>boolean</name></type> <name>checked</name> <init>= <expr><call><name><name>IDEWorkbenchPlugin</name><operator>.</operator><name>getDefault</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getPreferenceStore</name><argument_list>()</argument_list></call>
				<operator>.</operator><call><name>getBoolean</name><argument_list>(<argument><expr><name><name>IDEInternalPreferences</name><operator>.</operator><name>USE_MARKER_LIMITS</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name>enablementButton</name> <operator>=</operator> <operator>new</operator> <call><name>Button</name><argument_list>(<argument><expr><name>parent</name></expr></argument>, <argument><expr><name><name>SWT</name><operator>.</operator><name>CHECK</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>enablementButton</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><name><name>MarkerMessages</name><operator>.</operator><name>MarkerPreferences_MarkerLimits</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>enablementButton</name><operator>.</operator><name>setSelection</name></name><argument_list>(<argument><expr><name>checked</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>editArea</name> <operator>=</operator> <operator>new</operator> <call><name>Composite</name><argument_list>(<argument><expr><name>parent</name></expr></argument>, <argument><expr><name><name>SWT</name><operator>.</operator><name>NONE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>editArea</name><operator>.</operator><name>setLayout</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>GridLayout</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>GridData</name></type> <name>editData</name> <init>= <expr><operator>new</operator> <call><name>GridData</name><argument_list>(<argument><expr><name><name>GridData</name><operator>.</operator><name>FILL_BOTH</name></name>
				<operator>|</operator> <name><name>GridData</name><operator>.</operator><name>GRAB_HORIZONTAL</name></name> <operator>|</operator> <name><name>GridData</name><operator>.</operator><name>GRAB_VERTICAL</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name><name>editData</name><operator>.</operator><name>horizontalIndent</name></name> <operator>=</operator> <literal type="number">10</literal></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>editArea</name><operator>.</operator><name>setLayoutData</name></name><argument_list>(<argument><expr><name>editData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>limitEditor</name> <operator>=</operator> <operator>new</operator> <class><super><name>IntegerFieldEditor</name></super><argument_list>(
				<argument><expr><literal type="string">"limit"</literal></expr></argument>, <argument><expr><name><name>MarkerMessages</name><operator>.</operator><name>MarkerPreferences_VisibleItems</name></name></expr></argument>, <argument><expr><name>editArea</name></expr></argument>)</argument_list> <block>{ <comment type="line">//$NON-NLS-1$</comment>
			<comment type="block">/*
			 * (non-Javadoc)
			 * 
			 * @see org.eclipse.jface.preference.IntegerFieldEditor#checkState()
			 */</comment>
			<function><specifier>protected</specifier> <type><name>boolean</name></type> <name>checkState</name><parameter_list>()</parameter_list> <block>{
				<decl_stmt><decl><type><name>boolean</name></type> <name>state</name> <init>= <expr><call><name><name>super</name><operator>.</operator><name>checkState</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><call><name>setValid</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<return>return <expr><name>state</name></expr>;</return>
			}</block></function>
		}</block></class></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>limitEditor</name><operator>.</operator><name>setPreferenceStore</name></name><argument_list>(<argument><expr><call><name><name>IDEWorkbenchPlugin</name><operator>.</operator><name>getDefault</name></name><argument_list>()</argument_list></call>
				<operator>.</operator><call><name>getPreferenceStore</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>limitEditor</name><operator>.</operator><name>setPreferenceName</name></name><argument_list>(<argument><expr><name><name>IDEInternalPreferences</name><operator>.</operator><name>MARKER_LIMITS_VALUE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>limitEditor</name><operator>.</operator><name>load</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

		<decl_stmt><decl><type><name>GridData</name></type> <name>checkedData</name> <init>= <expr><operator>new</operator> <call><name>GridData</name><argument_list>(<argument><expr><name><name>SWT</name><operator>.</operator><name>FILL</name></name></expr></argument>, <argument><expr><name><name>SWT</name><operator>.</operator><name>NONE</name></name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name><name>checkedData</name><operator>.</operator><name>horizontalSpan</name></name> <operator>=</operator> <call><name><name>limitEditor</name><operator>.</operator><name>getNumberOfControls</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>enablementButton</name><operator>.</operator><name>setLayoutData</name></name><argument_list>(<argument><expr><name>checkedData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name><name>enablementButton</name><operator>.</operator><name>addSelectionListener</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>SelectionAdapter</name></super><argument_list>()</argument_list> <block>{
			<function><specifier>public</specifier> <type><name>void</name></type> <name>widgetSelected</name><parameter_list>(<parameter><decl><type><name>SelectionEvent</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
				<expr_stmt><expr><call><name>setLimitEditorEnablement</name><argument_list>(<argument><expr><name>editArea</name></expr></argument>, <argument><expr><call><name><name>enablementButton</name>
						<operator>.</operator><name>getSelection</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></function>
		}</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>setLimitEditorEnablement</name><argument_list>(<argument><expr><name>editArea</name></expr></argument>, <argument><expr><name>checked</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>parent</name></expr>;</return>
	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Enable the limitEditor based on checked.
	 * 
	 * @param control
	 *            The parent of the editor
	 * @param checked
	 */</comment>
	<function><specifier>private</specifier> <type><name>void</name></type> <name>setLimitEditorEnablement</name><parameter_list>(<parameter><decl><type><name>Composite</name></type> <name>control</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>checked</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><call><name><name>limitEditor</name><operator>.</operator><name>setEnabled</name></name><argument_list>(<argument><expr><name>checked</name></expr></argument>, <argument><expr><name>control</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<comment type="block">/* (non-Javadoc)
	 * @see org.eclipse.jface.preference.PreferencePage#performOk()
	 */</comment>
	<function><specifier>public</specifier> <type><name>boolean</name></type> <name>performOk</name><parameter_list>()</parameter_list> <block>{

		<expr_stmt><expr><call><name><name>limitEditor</name><operator>.</operator><name>store</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>IDEWorkbenchPlugin</name><operator>.</operator><name>getDefault</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getPreferenceStore</name><argument_list>()</argument_list></call><operator>.</operator><call><name>setValue</name><argument_list>(
				<argument><expr><name><name>IDEInternalPreferences</name><operator>.</operator><name>USE_MARKER_LIMITS</name></name></expr></argument>, <argument><expr><call><name><name>enablementButton</name><operator>.</operator><name>getSelection</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>IDEWorkbenchPlugin</name><operator>.</operator><name>getDefault</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>savePluginPreferences</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	
		<return>return <expr><call><name><name>super</name><operator>.</operator><name>performOk</name></name><argument_list>()</argument_list></call></expr>;</return>
	}</block></function>
	<comment type="block">/*
	 * (non-Javadoc)
	 * 
	 * @see org.eclipse.ui.preferences.ViewSettingsDialog#performDefaults()
	 */</comment>
	<function><specifier>protected</specifier> <type><name>void</name></type> <name>performDefaults</name><parameter_list>()</parameter_list> <block>{
		<expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>performDefaults</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>limitEditor</name><operator>.</operator><name>loadDefault</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>boolean</name></type> <name>checked</name> <init>= <expr><call><name><name>IDEWorkbenchPlugin</name><operator>.</operator><name>getDefault</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getPreferenceStore</name><argument_list>()</argument_list></call>
				<operator>.</operator><call><name>getDefaultBoolean</name><argument_list>(<argument><expr><name><name>IDEInternalPreferences</name><operator>.</operator><name>USE_MARKER_LIMITS</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>enablementButton</name><operator>.</operator><name>setSelection</name></name><argument_list>(<argument><expr><name>checked</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>setLimitEditorEnablement</name><argument_list>(<argument><expr><name>editArea</name></expr></argument>, <argument><expr><name>checked</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>

}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="org.eclipse.ui.ide.markers.compatibility/src/org/eclipse/ui/ide/markers/compatibility/internal/MarkersTreeViewer.java" hash="2c1cf965eed8cb8f04856d4fa1d6abd1f34fbf7a"><comment type="block" format="javadoc">/*******************************************************************************
 * Copyright (c) 2007 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     IBM Corporation - initial API and implementation
 ******************************************************************************/</comment>

<package>package <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>ide</name><operator>.</operator><name>markers</name><operator>.</operator><name>compatibility</name><operator>.</operator><name>internal</name></name>;</package>

<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>jface</name><operator>.</operator><name>viewers</name><operator>.</operator><name>TreeViewer</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>swt</name><operator>.</operator><name>widgets</name><operator>.</operator><name>Composite</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>swt</name><operator>.</operator><name>widgets</name><operator>.</operator><name>Tree</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>swt</name><operator>.</operator><name>widgets</name><operator>.</operator><name>TreeItem</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>swt</name><operator>.</operator><name>widgets</name><operator>.</operator><name>Widget</name></name>;</import>

<comment type="block" format="javadoc">/**
 * The MarkersTreeViewer is a viewer that optimizes the expandToLevel method.
 * 
 * @since 3.4
 * 
 */</comment>

<comment type="line">// TODO Delete this class if Bug 201135 is fixed.</comment>
<comment type="line">// https://bugs.eclipse.org/bugs/show_bug.cgi?id=201135</comment>
<class><specifier>public</specifier> class <name>MarkersTreeViewer</name> <super><extends>extends <name>TreeViewer</name></extends></super> <block>{

	<comment type="block" format="javadoc">/**
	 * Create a new instance of the receiver.
	 * 
	 * @param parent
	 * @param style
	 */</comment>
	<constructor><specifier>public</specifier> <name>MarkersTreeViewer</name><parameter_list>(<parameter><decl><type><name>Composite</name></type> <name>parent</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>style</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>parent</name></expr></argument>, <argument><expr><name>style</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	}</block></constructor>

	<comment type="block" format="javadoc">/**
	 * Create a new instance of the receiver.
	 * 
	 * @param parent
	 */</comment>
	<constructor><specifier>public</specifier> <name>MarkersTreeViewer</name><parameter_list>(<parameter><decl><type><name>Composite</name></type> <name>parent</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>parent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></constructor>

	<comment type="block" format="javadoc">/**
	 * Create a new instance of the receiver.
	 * 
	 * @param tree
	 */</comment>
	<constructor><specifier>public</specifier> <name>MarkersTreeViewer</name><parameter_list>(<parameter><decl><type><name>Tree</name></type> <name>tree</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>tree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></constructor>

	<comment type="block">/*
	 * (non-Javadoc)
	 * 
	 * @see org.eclipse.jface.viewers.AbstractTreeViewer#expandToLevel(java.lang.Object,
	 *      int)
	 */</comment>
	<function><specifier>public</specifier> <type><name>void</name></type> <name>expandToLevel</name><parameter_list>(<parameter><decl><type><name>Object</name></type> <name>elementOrTreePath</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>level</name></decl></parameter>)</parameter_list> <block>{
		<if>if <condition>(<expr><name>level</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then> <block>{
			<decl_stmt><decl><type><name>Widget</name></type> <name>widget</name> <init>= <expr><call><name>findItem</name><argument_list>(<argument><expr><name>elementOrTreePath</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<if>if <condition>(<expr><name>widget</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <name>widget</name> <operator>instanceof</operator> <name>TreeItem</name></expr>)</condition><then> <block>{
				<expr_stmt><expr><operator>(</operator><operator>(</operator><name>TreeItem</name><operator>)</operator> <name>widget</name><operator>)</operator><operator>.</operator><call><name>setExpanded</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<return>return;</return>
			}</block></then></if>
		}</block></then></if>
		<expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>expandToLevel</name></name><argument_list>(<argument><expr><name>elementOrTreePath</name></expr></argument>, <argument><expr><name>level</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Remove all of the entries and unmap all of the elements.
	 */</comment>
	<function><specifier>public</specifier> <type><name>void</name></type> <name>removeAndClearAll</name><parameter_list>()</parameter_list> <block>{
		<expr_stmt><expr><call><name>removeAll</name><argument_list>(<argument><expr><call><name>getControl</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>unmapAllElements</name><argument_list>()</argument_list></call></expr>;</expr_stmt>		
	}</block></function>

}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="org.eclipse.ui.ide.markers.compatibility/src/org/eclipse/ui/ide/markers/compatibility/internal/MarkerTypeFieldFilter.java" hash="40c96851e1a7a73e87b8cbb56800d35a36d2a827"><comment type="block" format="javadoc">/*******************************************************************************
 * Copyright (c) 2007 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     IBM Corporation - initial API and implementation
 ******************************************************************************/</comment>

<package>package <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>ide</name><operator>.</operator><name>markers</name><operator>.</operator><name>compatibility</name><operator>.</operator><name>internal</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Collection</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashMap</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashSet</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Iterator</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>StringTokenizer</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>core</name><operator>.</operator><name>resources</name><operator>.</operator><name>IMarker</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>core</name><operator>.</operator><name>runtime</name><operator>.</operator><name>CoreException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>IMemento</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>ide</name><operator>.</operator><name>markers</name><operator>.</operator><name>compatibility</name><operator>.</operator><name>api</name><operator>.</operator><name>MarkerFieldFilter</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>ide</name><operator>.</operator><name>markers</name><operator>.</operator><name>compatibility</name><operator>.</operator><name>api</name><operator>.</operator><name>MarkerItem</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>ide</name><operator>.</operator><name>markers</name><operator>.</operator><name>compatibility</name><operator>.</operator><name>api</name><operator>.</operator><name>internal</name><operator>.</operator><name>MarkerFilter</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>ide</name><operator>.</operator><name>markers</name><operator>.</operator><name>compatibility</name><operator>.</operator><name>api</name><operator>.</operator><name>internal</name><operator>.</operator><name>MarkerType</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>ide</name><operator>.</operator><name>markers</name><operator>.</operator><name>compatibility</name><operator>.</operator><name>api</name><operator>.</operator><name>internal</name><operator>.</operator><name>MarkerTypesModel</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>ide</name><operator>.</operator><name>markers</name><operator>.</operator><name>compatibility</name><operator>.</operator><name>api</name><operator>.</operator><name>internal</name><operator>.</operator><name>ProblemFilter</name></name>;</import>

<comment type="block" format="javadoc">/**
 * MarkerTypeFieldFilter is the field filter for filtering on types.
 * 
 * @since 3.4
 * 
 */</comment>
<class><specifier>public</specifier> class <name>MarkerTypeFieldFilter</name> <super><extends>extends <name>CompatibilityFieldFilter</name></extends></super> <block>{

	<decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>TAG_TYPES_DELIMITER</name> <init>= <expr><literal type="string">":"</literal></expr></init></decl>;</decl_stmt> <comment type="line">//$NON-NLS-1$</comment>
	<decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>TAG_SELECTED_TYPES</name> <init>= <expr><literal type="string">"selectedTypes"</literal></expr></init></decl>;</decl_stmt> <comment type="line">//$NON-NLS-1$</comment>
	<decl_stmt><decl><type><name>Collection</name></type> <name>selectedTypes</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>private</specifier> <type><name>HashMap</name></type> <name>allTypes</name></decl>;</decl_stmt>

	<comment type="block">/*
	 * (non-Javadoc)
	 * 
	 * @see org.eclipse.ui.internal.provisional.views.markers.api.MarkerFieldFilter#select(org.eclipse.ui.internal.provisional.views.markers.api.MarkerItem)
	 */</comment>
	<function><specifier>public</specifier> <type><name>boolean</name></type> <name>select</name><parameter_list>(<parameter><decl><type><name>MarkerItem</name></type> <name>item</name></decl></parameter>)</parameter_list> <block>{

		<decl_stmt><decl><type><name>IMarker</name></type> <name>marker</name> <init>= <expr><call><name><name>item</name><operator>.</operator><name>getMarker</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<if>if <condition>(<expr><name>marker</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then><comment type="line">// OK if all are selected</comment>
			<block type="pseudo"><return>return <expr><call><name><name>selectedTypes</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <call><name><name>allTypes</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</return></block></then></if>
		<try>try <block>{
			<return>return <expr><call><name><name>selectedTypes</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><call><name><name>MarkerTypesModel</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call>
					<operator>.</operator><call><name>getType</name><argument_list>(<argument><expr><call><name><name>marker</name><operator>.</operator><name>getType</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
		}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>CoreException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
			<return>return <expr><literal type="boolean">false</literal></expr>;</return>
		}</block></catch></try>

	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Set the selected types in the receiver.
	 * 
	 * @param markerTypes
	 *            Collection of MarkerType
	 */</comment>
	<function><specifier>public</specifier> <type><name>void</name></type> <name>setSelectedTypes</name><parameter_list>(<parameter><decl><type><name>Collection</name></type> <name>markerTypes</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><name>selectedTypes</name> <operator>=</operator> <name>markerTypes</name></expr>;</expr_stmt>

	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Return the selectedTypes.
	 * 
	 * @return Collection of MarkerType
	 */</comment>
	<function><specifier>public</specifier> <type><name>Collection</name></type> <name>getSelectedTypes</name><parameter_list>()</parameter_list> <block>{
		<return>return <expr><name>selectedTypes</name></expr>;</return>
	}</block></function>

	<comment type="block">/*
	 * (non-Javadoc)
	 * 
	 * @see org.eclipse.ui.internal.provisional.views.markers.MarkerFieldFilter#saveSettings(org.eclipse.ui.IMemento)
	 */</comment>
	<function><specifier>public</specifier> <type><name>void</name></type> <name>saveSettings</name><parameter_list>(<parameter><decl><type><name>IMemento</name></type> <name>memento</name></decl></parameter>)</parameter_list> <block>{

		<decl_stmt><decl><type><name>Iterator</name></type> <name>selected</name> <init>= <expr><call><name><name>selectedTypes</name><operator>.</operator><name>iterator</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

		<decl_stmt><decl><type><name>StringBuffer</name></type> <name>settings</name> <init>= <expr><operator>new</operator> <call><name>StringBuffer</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<while>while <condition>(<expr><call><name><name>selected</name><operator>.</operator><name>hasNext</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
			<decl_stmt><decl><type><name>MarkerType</name></type> <name>markerType</name> <init>= <expr><operator>(</operator><name>MarkerType</name><operator>)</operator> <call><name><name>selected</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name><name>settings</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><call><name><name>markerType</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>settings</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><name>TAG_TYPES_DELIMITER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></while>

		<expr_stmt><expr><call><name><name>memento</name><operator>.</operator><name>putString</name></name><argument_list>(<argument><expr><name>TAG_SELECTED_TYPES</name></expr></argument>, <argument><expr><call><name><name>settings</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<comment type="block">/*
	 * (non-Javadoc)
	 * 
	 * @see org.eclipse.ui.internal.provisional.views.markers.MarkerFieldFilter#loadSettings(org.eclipse.ui.IMemento)
	 */</comment>
	<function><specifier>public</specifier> <type><name>void</name></type> <name>loadSettings</name><parameter_list>(<parameter><decl><type><name>IMemento</name></type> <name>memento</name></decl></parameter>)</parameter_list> <block>{

		<decl_stmt><decl><type><name>String</name></type> <name>types</name> <init>= <expr><call><name><name>memento</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name>TAG_SELECTED_TYPES</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>selectedTypes</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

		<decl_stmt><decl><type><name>int</name></type> <name>start</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>nextSpace</name> <init>= <expr><call><name><name>types</name><operator>.</operator><name>indexOf</name></name><argument_list>(<argument><expr><name>TAG_TYPES_DELIMITER</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<while>while <condition>(<expr><name>nextSpace</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{
			<decl_stmt><decl><type><name>String</name></type> <name>typeId</name> <init>= <expr><call><name><name>types</name><operator>.</operator><name>substring</name></name><argument_list>(<argument><expr><name>start</name></expr></argument>, <argument><expr><name>nextSpace</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><name>start</name> <operator>=</operator> <name>nextSpace</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>nextSpace</name> <operator>=</operator> <call><name><name>types</name><operator>.</operator><name>indexOf</name></name><argument_list>(<argument><expr><name>TAG_TYPES_DELIMITER</name></expr></argument>, <argument><expr><name>start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<if>if <condition>(<expr><call><name><name>allTypes</name><operator>.</operator><name>containsKey</name></name><argument_list>(<argument><expr><name>typeId</name></expr></argument>)</argument_list></call></expr>)</condition><then>
				<block type="pseudo"><expr_stmt><expr><call><name><name>selectedTypes</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>allTypes</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>typeId</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
		}</block></while>

	}</block></function>

	<comment type="block">/*
	 * (non-Javadoc)
	 * 
	 * @see org.eclipse.ui.internal.provisional.views.markers.CompatibilityFieldFilter#loadLegacySettings(org.eclipse.ui.IMemento)
	 */</comment>
	<function><specifier>public</specifier> <type><name>void</name></type> <name>loadLegacySettings</name><parameter_list>(<parameter><decl><type><name>IMemento</name></type> <name>memento</name></decl></parameter>)</parameter_list> <block>{
		<comment type="line">// new selection list attribute</comment>
		<comment type="line">// format is "id:(true|false):"</comment>
		<decl_stmt><decl><type><name>String</name></type> <name>setting</name> <init>= <expr><call><name><name>memento</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>MarkerFilter</name><operator>.</operator><name>TAG_SELECTION_STATUS</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<if>if <condition>(<expr><name>setting</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
			<expr_stmt><expr><call><name><name>selectedTypes</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

			<comment type="line">// get the complete list of types</comment>
			<decl_stmt><decl><type><name>List</name></type> <name>newTypes</name> <init>= <expr><operator>new</operator> <call><name>ArrayList</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

			<decl_stmt><decl><type><name>StringTokenizer</name></type> <name>stringTokenizer</name> <init>= <expr><operator>new</operator> <call><name>StringTokenizer</name><argument_list>(<argument><expr><name>setting</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

			<while>while <condition>(<expr><call><name><name>stringTokenizer</name><operator>.</operator><name>hasMoreTokens</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
				<decl_stmt><decl><type><name>String</name></type> <name>id</name> <init>= <expr><call><name><name>stringTokenizer</name><operator>.</operator><name>nextToken</name></name><argument_list>(<argument><expr><name>TAG_TYPES_DELIMITER</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>String</name></type> <name>status</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
				<if>if <condition>(<expr><call><name><name>stringTokenizer</name><operator>.</operator><name>hasMoreTokens</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
					<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name><name>stringTokenizer</name><operator>.</operator><name>nextToken</name></name><argument_list>(<argument><expr><name>TAG_TYPES_DELIMITER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then></if>

				<if>if <condition>(<expr><call><name><name>allTypes</name><operator>.</operator><name>containsKey</name></name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
					<decl_stmt><decl><type><name>MarkerType</name></type> <name>markerType</name> <init>= <expr><operator>(</operator><name>MarkerType</name><operator>)</operator> <call><name><name>allTypes</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

					<expr_stmt><expr><call><name><name>newTypes</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><name>markerType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					<comment type="line">// add the type to the selected list</comment>
					<if>if <condition>(<expr><operator>!</operator><call><name><name>MarkerFilter</name><operator>.</operator><name>SELECTED_FALSE</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call>
							<operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>selectedTypes</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><name>markerType</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
						<expr_stmt><expr><call><name><name>selectedTypes</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>markerType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></then></if>
				}</block></then></if>
			}</block></while>
		}</block></then></if>


	}</block></function>
	
	<comment type="block">/* (non-Javadoc)
	 * @see org.eclipse.ui.internal.views.markers.CompatibilityFieldFilter#initialize(org.eclipse.ui.views.markers.internal.ProblemFilter)
	 */</comment>
	<function><specifier>public</specifier> <type><name>void</name></type> <name>initialize</name><parameter_list>(<parameter><decl><type><name>ProblemFilter</name></type> <name>problemFilter</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><call><name><name>selectedTypes</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>selectedTypes</name><operator>.</operator><name>addAll</name></name><argument_list>(<argument><expr><call><name><name>problemFilter</name><operator>.</operator><name>getSelectedTypes</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Set the set of all types to markerTypes. Select all of them by default.
	 * 
	 * @param markerTypes
	 */</comment>
	<function><specifier>public</specifier> <type><name>void</name></type> <name>setAndSelectAllTypes</name><parameter_list>(<parameter><decl><type><name>Collection</name></type> <name>markerTypes</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><name>allTypes</name> <operator>=</operator> <operator>new</operator> <call><name>HashMap</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>selectedTypes</name> <operator>=</operator> <operator>new</operator> <call><name>HashSet</name><argument_list>(<argument><expr><name>markerTypes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>Iterator</name></type> <name>allIterator</name> <init>= <expr><call><name><name>markerTypes</name><operator>.</operator><name>iterator</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<while>while <condition>(<expr><call><name><name>allIterator</name><operator>.</operator><name>hasNext</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
			<decl_stmt><decl><type><name>MarkerType</name></type> <name>next</name> <init>= <expr><operator>(</operator><name>MarkerType</name><operator>)</operator> <call><name><name>allIterator</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name><name>allTypes</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><call><name><name>next</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></while>

	}</block></function>

	<comment type="block">/*
	 * (non-Javadoc)
	 * 
	 * @see org.eclipse.ui.internal.provisional.views.markers.MarkerFieldFilter#populateWorkingCopy(org.eclipse.ui.internal.provisional.views.markers.MarkerFieldFilter)
	 */</comment>
	<function><specifier>public</specifier> <type><name>void</name></type> <name>populateWorkingCopy</name><parameter_list>(<parameter><decl><type><name>MarkerFieldFilter</name></type> <name>copy</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>populateWorkingCopy</name></name><argument_list>(<argument><expr><name>copy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><operator>(</operator><operator>(</operator><name>MarkerTypeFieldFilter</name><operator>)</operator> <name>copy</name><operator>)</operator><operator>.</operator><name>selectedTypes</name> <operator>=</operator> <operator>new</operator> <call><name>HashSet</name><argument_list>(
				<argument><expr><name>selectedTypes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="org.eclipse.ui.ide.markers.compatibility/src/org/eclipse/ui/ide/markers/compatibility/internal/MarkersViewPropertyTester.java" hash="9a989aeefe6fd7d06f07ad9ac3195595aa31788c"><comment type="block" format="javadoc">/*******************************************************************************
 * Copyright (c) 2007 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     IBM Corporation - initial API and implementation
 ******************************************************************************/</comment>

<package>package <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>ide</name><operator>.</operator><name>markers</name><operator>.</operator><name>compatibility</name><operator>.</operator><name>internal</name></name>;</package>

<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>core</name><operator>.</operator><name>expressions</name><operator>.</operator><name>PropertyTester</name></name>;</import>

<comment type="block" format="javadoc">/**
 * ContentGeneratorPropertyTester is the property tester for what content
 * generator is being shown.
 * 
 * @since 3.4
 * 
 */</comment>
<class><specifier>public</specifier> class <name>MarkersViewPropertyTester</name> <super><extends>extends <name>PropertyTester</name></extends></super> <block>{

	<decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>ATTRIBUTE_CONTENT_GENERATOR</name> <init>= <expr><literal type="string">"contentGenerator"</literal></expr></init></decl>;</decl_stmt> <comment type="line">//$NON-NLS-1$</comment>


	<decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>ATTRIBUTE_HAS_FILTERS</name> <init>= <expr><literal type="string">"hasFilters"</literal></expr></init></decl>;</decl_stmt> <comment type="line">//$NON-NLS-1$</comment>

	<decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>ATTRIBUTE_HAS_GROUPS</name> <init>= <expr><literal type="string">"hasGroups"</literal></expr></init></decl>;</decl_stmt> <comment type="line">//$NON-NLS-1$</comment>

	<decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>ANY_CONTENT_GENERATOR</name> <init>= <expr><literal type="string">"any"</literal></expr></init></decl>;</decl_stmt> <comment type="line">//$NON-NLS-1$</comment>

	<comment type="block" format="javadoc">/**
	 * Create a new instance of the receiver.
	 */</comment>
	<constructor><specifier>public</specifier> <name>MarkersViewPropertyTester</name><parameter_list>()</parameter_list> <block>{
	}</block></constructor>

	<comment type="block">/*
	 * (non-Javadoc)
	 * 
	 * @see org.eclipse.core.expressions.IPropertyTester#test(java.lang.Object,
	 *      java.lang.String, java.lang.Object[], java.lang.Object)
	 */</comment>
	<function><specifier>public</specifier> <type><name>boolean</name></type> <name>test</name><parameter_list>(<parameter><decl><type><name>Object</name></type> <name>receiver</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>property</name></decl></parameter>, <parameter><decl><type><name><name>Object</name><index>[]</index></name></type> <name>args</name></decl></parameter>,
			<parameter><decl><type><name>Object</name></type> <name>expectedValue</name></decl></parameter>)</parameter_list> <block>{

		<if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>receiver</name> <operator>instanceof</operator> <name>ExtendedMarkersView</name><operator>)</operator></expr>)</condition><then>
			<block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr>;</return></block></then></if>

		<decl_stmt><decl><type><name>ExtendedMarkersView</name></type> <name>view</name> <init>= <expr><operator>(</operator><name>ExtendedMarkersView</name><operator>)</operator> <name>receiver</name></expr></init></decl>;</decl_stmt>

		<if>if <condition>(<expr><call><name><name>property</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>ATTRIBUTE_CONTENT_GENERATOR</name></expr></argument>)</argument_list></call></expr>)</condition><then>
			<block type="pseudo"><return>return <expr><call><name>testContentGenerator</name><argument_list>(<argument><expr><name>view</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</return></block></then></if>
		<if>if <condition>(<expr><call><name><name>property</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>ATTRIBUTE_HAS_FILTERS</name></expr></argument>)</argument_list></call></expr>)</condition><then>
			<block type="pseudo"><return>return <expr><call><name><name>view</name><operator>.</operator><name>getAllFilters</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</return></block></then></if>
		<if>if <condition>(<expr><call><name><name>property</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>ATTRIBUTE_HAS_GROUPS</name></expr></argument>)</argument_list></call></expr>)</condition><then>
			<block type="pseudo"><return>return <expr><call><name><name>view</name><operator>.</operator><name>getBuilder</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getGenerator</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getMarkerGroups</name><argument_list>()</argument_list></call><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</return></block></then></if>

		<return>return <expr><literal type="boolean">false</literal></expr>;</return>
	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Test if the content generator in the args match the receiver.
	 * 
	 * @param view
	 * @param args
	 * @return boolean
	 */</comment>
	<function><specifier>private</specifier> <type><name>boolean</name></type> <name>testContentGenerator</name><parameter_list>(<parameter><decl><type><name>ExtendedMarkersView</name></type> <name>view</name></decl></parameter>, <parameter><decl><type><name><name>Object</name><index>[]</index></name></type> <name>args</name></decl></parameter>)</parameter_list> <block>{

		<decl_stmt><decl><type><name>String</name></type> <name>currentGenerator</name> <init>= <expr><call><name><name>view</name><operator>.</operator><name>getBuilder</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getGenerator</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getId</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>args</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
			<if>if <condition>(<expr><name><name>args</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name>currentGenerator</name></expr></argument>)</argument_list></call></expr>)</condition><then>
				<block type="pseudo"><return>return <expr><literal type="boolean">true</literal></expr>;</return></block></then></if>

			<comment type="line">// The value 'any' works for any content generator</comment>
			<if>if <condition>(<expr><name><name>args</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name>ANY_CONTENT_GENERATOR</name></expr></argument>)</argument_list></call></expr>)</condition><then>
				<block type="pseudo"><return>return <expr><literal type="boolean">true</literal></expr>;</return></block></then></if>
		}</block></for>
		<return>return <expr><literal type="boolean">false</literal></expr>;</return>
	}</block></function>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="org.eclipse.ui.ide.markers.compatibility/src/org/eclipse/ui/ide/markers/compatibility/internal/OpenMarkersViewHandler.java" hash="498b30a981d893797bcab162c3c59865c7bd8db2"><comment type="block" format="javadoc">/*******************************************************************************
 * Copyright (c) 2007 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     IBM Corporation - initial API and implementation
 ******************************************************************************/</comment>

<package>package <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>ide</name><operator>.</operator><name>markers</name><operator>.</operator><name>compatibility</name><operator>.</operator><name>internal</name></name>;</package>

<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>core</name><operator>.</operator><name>commands</name><operator>.</operator><name>AbstractHandler</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>core</name><operator>.</operator><name>commands</name><operator>.</operator><name>ExecutionEvent</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>core</name><operator>.</operator><name>commands</name><operator>.</operator><name>ExecutionException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>IViewPart</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>IWorkbenchPage</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>IWorkbenchPart</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>PartInitException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>handlers</name><operator>.</operator><name>HandlerUtil</name></name>;</import>

<comment type="block" format="javadoc">/**
 * OpenMarkersViewHandler is used to open another markers view.
 * 
 * @since 3.4
 * 
 */</comment>
<class><specifier>public</specifier> class <name>OpenMarkersViewHandler</name> <super><extends>extends <name>AbstractHandler</name></extends></super> <block>{

	<comment type="block">/*
	 * (non-Javadoc)
	 * 
	 * @see org.eclipse.core.commands.IHandler#execute(org.eclipse.core.commands.ExecutionEvent)
	 */</comment>
	<function><specifier>public</specifier> <type><name>Object</name></type> <name>execute</name><parameter_list>(<parameter><decl><type><name>ExecutionEvent</name></type> <name>event</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>ExecutionException</name></expr></argument></throws> <block>{
		<decl_stmt><decl><type><name>IWorkbenchPart</name></type> <name>part</name> <init>= <expr><call><name><name>HandlerUtil</name><operator>.</operator><name>getActivePart</name></name><argument_list>(<argument><expr><name>event</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if>if <condition>(<expr><name>part</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then>
			<block type="pseudo"><return>return <expr><literal type="null">null</literal></expr>;</return></block></then></if>
		<try>try <block>{

			<decl_stmt><decl><type><name>String</name></type> <name>count</name> <init>= <expr><call><name><name>ExtendedMarkersView</name><operator>.</operator><name>newSecondaryID</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>IViewPart</name></type> <name>newPart</name> <init>= <expr><call><name><name>part</name><operator>.</operator><name>getSite</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getPage</name><argument_list>()</argument_list></call>
					<operator>.</operator><call><name>showView</name><argument_list>(<argument><expr><call><name><name>part</name><operator>.</operator><name>getSite</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getId</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>count</name></expr></argument>,
							<argument><expr><name><name>IWorkbenchPage</name><operator>.</operator><name>VIEW_ACTIVATE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<if>if<condition>(<expr><name>newPart</name> <operator>instanceof</operator> <name>ExtendedMarkersView</name></expr>)</condition><then><block>{
				<expr_stmt><expr><operator>(</operator><operator>(</operator><name>ExtendedMarkersView</name><operator>)</operator> <name>newPart</name><operator>)</operator><operator>.</operator><call><name>initializeTitle</name><argument_list>(<argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>
		}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>PartInitException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
			<throw>throw <expr><operator>new</operator> <call><name>ExecutionException</name><argument_list>(<argument><expr><call><name><name>e</name><operator>.</operator><name>getLocalizedMessage</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
		}</block></catch></try>
		<return>return <expr><name>this</name></expr>;</return>

	}</block></function>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="org.eclipse.ui.ide.markers.compatibility/src/org/eclipse/ui/ide/markers/compatibility/internal/ProblemsView.java" hash="80c9625a71d5beedf6199e12c72b0c355ef02210"><comment type="block" format="javadoc">/*******************************************************************************
 * Copyright (c) 2008 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     IBM Corporation - initial API and implementation
 ******************************************************************************/</comment>

<package>package <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>ide</name><operator>.</operator><name>markers</name><operator>.</operator><name>compatibility</name><operator>.</operator><name>internal</name></name>;</package>

<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>ide</name><operator>.</operator><name>markers</name><operator>.</operator><name>compatibility</name><operator>.</operator><name>api</name><operator>.</operator><name>MarkerSupportView</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>ide</name><operator>.</operator><name>markers</name><operator>.</operator><name>compatibility</name><operator>.</operator><name>api</name><operator>.</operator><name>internal</name><operator>.</operator><name>MarkerSupportRegistry</name></name>;</import>

<comment type="block" format="javadoc">/**
 * The ProblemsView is the view supplied by the ide to show
 * problems.
 * @since 3.4
 *
 */</comment>
<class><specifier>public</specifier> class <name>ProblemsView</name> <super><extends>extends <name>MarkerSupportView</name></extends></super> <block>{

	<comment type="block" format="javadoc">/**
	 * Create a new instance of the receiver.
	 */</comment>
	<constructor><specifier>public</specifier> <name>ProblemsView</name><parameter_list>()</parameter_list> <block>{
		<expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name><name>MarkerSupportRegistry</name><operator>.</operator><name>PROBLEMS_GENERATOR</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
	}</block></constructor>

}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="org.eclipse.ui.ide.markers.compatibility/src/org/eclipse/ui/ide/markers/compatibility/internal/PriorityConfigurationArea.java" hash="7f71ca80f16542e346e34142bb91dd6f95740193"><package>package <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>ide</name><operator>.</operator><name>markers</name><operator>.</operator><name>compatibility</name><operator>.</operator><name>internal</name></name>;</package>

<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>swt</name><operator>.</operator><name>SWT</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>swt</name><operator>.</operator><name>events</name><operator>.</operator><name>SelectionAdapter</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>swt</name><operator>.</operator><name>events</name><operator>.</operator><name>SelectionEvent</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>swt</name><operator>.</operator><name>layout</name><operator>.</operator><name>GridLayout</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>swt</name><operator>.</operator><name>widgets</name><operator>.</operator><name>Button</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>swt</name><operator>.</operator><name>widgets</name><operator>.</operator><name>Composite</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>ide</name><operator>.</operator><name>markers</name><operator>.</operator><name>compatibility</name><operator>.</operator><name>api</name><operator>.</operator><name>FilterConfigurationArea</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>ide</name><operator>.</operator><name>markers</name><operator>.</operator><name>compatibility</name><operator>.</operator><name>api</name><operator>.</operator><name>MarkerFieldFilter</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>ide</name><operator>.</operator><name>markers</name><operator>.</operator><name>compatibility</name><operator>.</operator><name>api</name><operator>.</operator><name>internal</name><operator>.</operator><name>MarkerMessages</name></name>;</import>

<comment type="block" format="javadoc">/**
 * The PriorityConfigurationArea is the configuration area for the task
 * priority.
 * 
 * @since 3.4
 * 
 */</comment>
<class><specifier>public</specifier> class <name>PriorityConfigurationArea</name> <super><extends>extends <name>FilterConfigurationArea</name></extends></super> <block>{

	<decl_stmt><decl><specifier>private</specifier> <type><name>int</name></type> <name>priorities</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>private</specifier> <type><name>Button</name></type> <name>highButton</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>private</specifier> <type><name>Button</name></type> <name>normalButton</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>private</specifier> <type><name>Button</name></type> <name>lowButton</name></decl>;</decl_stmt>

	<comment type="block" format="javadoc">/**
	 * Create a new instance of the receiver.
	 */</comment>
	<constructor><specifier>public</specifier> <name>PriorityConfigurationArea</name><parameter_list>()</parameter_list> <block>{
		<expr_stmt><expr><call><name>super</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	}</block></constructor>

	<comment type="block">/*
	 * (non-Javadoc)
	 * 
	 * @see org.eclipse.ui.internal.provisional.views.markers.api.FilterConfigurationArea#apply(org.eclipse.ui.internal.provisional.views.markers.api.MarkerFieldFilter)
	 */</comment>
	<function><specifier>public</specifier> <type><name>void</name></type> <name>apply</name><parameter_list>(<parameter><decl><type><name>MarkerFieldFilter</name></type> <name>filter</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><operator>(</operator><operator>(</operator><name>PriorityMarkerFieldFilter</name><operator>)</operator> <name>filter</name><operator>)</operator><operator>.</operator><name>selectedPriorities</name> <operator>=</operator> <name>priorities</name></expr>;</expr_stmt>

	}</block></function>

	<comment type="block">/*
	 * (non-Javadoc)
	 * 
	 * @see org.eclipse.ui.internal.provisional.views.markers.api.FilterConfigurationArea#createContents(org.eclipse.swt.widgets.Composite)
	 */</comment>
	<function><specifier>public</specifier> <type><name>void</name></type> <name>createContents</name><parameter_list>(<parameter><decl><type><name>Composite</name></type> <name>parent</name></decl></parameter>)</parameter_list> <block>{
		
		<expr_stmt><expr><call><name><name>parent</name><operator>.</operator><name>setLayout</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>GridLayout</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>,<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>highButton</name> <operator>=</operator> <operator>new</operator> <call><name>Button</name><argument_list>(<argument><expr><name>parent</name></expr></argument>, <argument><expr><name><name>SWT</name><operator>.</operator><name>CHECK</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>highButton</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><name><name>MarkerMessages</name><operator>.</operator><name>filtersDialog_priorityHigh</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>highButton</name><operator>.</operator><name>addSelectionListener</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>SelectionAdapter</name></super><argument_list>()</argument_list> <block>{
			<comment type="block">/*
			 * (non-Javadoc)
			 * 
			 * @see org.eclipse.swt.events.SelectionListener#widgetSelected(org.eclipse.swt.events.SelectionEvent)
			 */</comment>
			<function><specifier>public</specifier> <type><name>void</name></type> <name>widgetSelected</name><parameter_list>(<parameter><decl><type><name>SelectionEvent</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
				<expr_stmt><expr><call><name>updatePriorities</name><argument_list>(<argument><expr><name><name>PriorityMarkerFieldFilter</name><operator>.</operator><name>PRIORITY_HIGH</name></name></expr></argument>,
						<argument><expr><call><name><name>highButton</name><operator>.</operator><name>getSelection</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></function>

		}</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>normalButton</name> <operator>=</operator> <operator>new</operator> <call><name>Button</name><argument_list>(<argument><expr><name>parent</name></expr></argument>, <argument><expr><name><name>SWT</name><operator>.</operator><name>CHECK</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>normalButton</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><name><name>MarkerMessages</name><operator>.</operator><name>filtersDialog_priorityNormal</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>normalButton</name><operator>.</operator><name>addSelectionListener</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>SelectionAdapter</name></super><argument_list>()</argument_list> <block>{
			<comment type="block">/*
			 * (non-Javadoc)
			 * 
			 * @see org.eclipse.swt.events.SelectionListener#widgetSelected(org.eclipse.swt.events.SelectionEvent)
			 */</comment>
			<function><specifier>public</specifier> <type><name>void</name></type> <name>widgetSelected</name><parameter_list>(<parameter><decl><type><name>SelectionEvent</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
				<expr_stmt><expr><call><name>updatePriorities</name><argument_list>(<argument><expr><name><name>PriorityMarkerFieldFilter</name><operator>.</operator><name>PRIORITY_NORMAL</name></name></expr></argument>,
						<argument><expr><call><name><name>normalButton</name><operator>.</operator><name>getSelection</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></function>
		}</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>lowButton</name> <operator>=</operator> <operator>new</operator> <call><name>Button</name><argument_list>(<argument><expr><name>parent</name></expr></argument>, <argument><expr><name><name>SWT</name><operator>.</operator><name>CHECK</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>lowButton</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><name><name>MarkerMessages</name><operator>.</operator><name>filtersDialog_priorityLow</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>lowButton</name><operator>.</operator><name>addSelectionListener</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>SelectionAdapter</name></super><argument_list>()</argument_list> <block>{
			<comment type="block">/*
			 * (non-Javadoc)
			 * 
			 * @see org.eclipse.swt.events.SelectionListener#widgetSelected(org.eclipse.swt.events.SelectionEvent)
			 */</comment>
			<function><specifier>public</specifier> <type><name>void</name></type> <name>widgetSelected</name><parameter_list>(<parameter><decl><type><name>SelectionEvent</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
				<expr_stmt><expr><call><name>updatePriorities</name><argument_list>(<argument><expr><name><name>PriorityMarkerFieldFilter</name><operator>.</operator><name>PRIORITY_LOW</name></name></expr></argument>,
						<argument><expr><call><name><name>normalButton</name><operator>.</operator><name>getSelection</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></function>
		}</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Update he priorities set based on the constant and the selection value.
	 * 
	 * @param constant
	 * @param enabled
	 */</comment>
	<function><type><name>void</name></type> <name>updatePriorities</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>constant</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>enabled</name></decl></parameter>)</parameter_list> <block>{

		<if>if <condition>(<expr><name>enabled</name></expr>)</condition><then>
			<block type="pseudo"><expr_stmt><expr><name>priorities</name> <operator>=</operator> <name>constant</name> <operator>|</operator> <name>priorities</name></expr>;</expr_stmt></block></then>
		<else>else
			<block type="pseudo"><expr_stmt><expr><name>priorities</name> <operator>=</operator> <name>constant</name> <operator>^</operator> <name>priorities</name></expr>;</expr_stmt></block></else></if>

	}</block></function>

	<comment type="block">/* (non-Javadoc)
	 * @see org.eclipse.ui.internal.provisional.views.markers.api.FilterConfigurationArea#initialize(org.eclipse.ui.internal.provisional.views.markers.api.MarkerFieldFilter)
	 */</comment>
	<function><specifier>public</specifier> <type><name>void</name></type> <name>initialize</name><parameter_list>(<parameter><decl><type><name>MarkerFieldFilter</name></type> <name>filter</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><name>priorities</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>PriorityMarkerFieldFilter</name><operator>)</operator> <name>filter</name><operator>)</operator><operator>.</operator><name>selectedPriorities</name></expr>;</expr_stmt>

		<expr_stmt><expr><call><name><name>lowButton</name>
				<operator>.</operator><name>setSelection</name></name><argument_list>(<argument><expr><operator>(</operator><name><name>PriorityMarkerFieldFilter</name><operator>.</operator><name>PRIORITY_LOW</name></name> <operator>&amp;</operator> <name>priorities</name><operator>)</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>normalButton</name>
				<operator>.</operator><name>setSelection</name></name><argument_list>(<argument><expr><operator>(</operator><name><name>PriorityMarkerFieldFilter</name><operator>.</operator><name>PRIORITY_NORMAL</name></name> <operator>&amp;</operator> <name>priorities</name><operator>)</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>highButton</name>
				<operator>.</operator><name>setSelection</name></name><argument_list>(<argument><expr><operator>(</operator><name><name>PriorityMarkerFieldFilter</name><operator>.</operator><name>PRIORITY_HIGH</name></name> <operator>&amp;</operator> <name>priorities</name><operator>)</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	}</block></function>
	
	<comment type="block">/* (non-Javadoc)
	 * @see org.eclipse.ui.internal.provisional.views.markers.api.FilterConfigurationArea#getTitle()
	 */</comment>
	<function><specifier>public</specifier> <type><name>String</name></type> <name>getTitle</name><parameter_list>()</parameter_list> <block>{
		<return>return <expr><name><name>MarkerMessages</name><operator>.</operator><name>priority_description</name></name></expr>;</return>
	}</block></function>

}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="org.eclipse.ui.ide.markers.compatibility/src/org/eclipse/ui/ide/markers/compatibility/internal/PriorityMarkerFieldFilter.java" hash="152b49c110b42d9fe0c4ba409b6164ccd70f18f9"><comment type="block" format="javadoc">/*******************************************************************************
 * Copyright (c) 2007 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     IBM Corporation - initial API and implementation
 ******************************************************************************/</comment>

<package>package <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>ide</name><operator>.</operator><name>markers</name><operator>.</operator><name>compatibility</name><operator>.</operator><name>internal</name></name>;</package>

<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>core</name><operator>.</operator><name>resources</name><operator>.</operator><name>IMarker</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>IMemento</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>ide</name><operator>.</operator><name>markers</name><operator>.</operator><name>compatibility</name><operator>.</operator><name>api</name><operator>.</operator><name>MarkerFieldFilter</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>ide</name><operator>.</operator><name>markers</name><operator>.</operator><name>compatibility</name><operator>.</operator><name>api</name><operator>.</operator><name>MarkerItem</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>ide</name><operator>.</operator><name>markers</name><operator>.</operator><name>compatibility</name><operator>.</operator><name>api</name><operator>.</operator><name>internal</name><operator>.</operator><name>ProblemFilter</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>ide</name><operator>.</operator><name>markers</name><operator>.</operator><name>compatibility</name><operator>.</operator><name>api</name><operator>.</operator><name>internal</name><operator>.</operator><name>TaskFilter</name></name>;</import>

<comment type="block" format="javadoc">/**
 * PriorityMarkerFieldFilter is the field filter for priority in markers
 * 
 * @since 3.4
 * 
 */</comment>
<class><specifier>public</specifier> class <name>PriorityMarkerFieldFilter</name> <super><extends>extends <name>CompatibilityFieldFilter</name></extends></super> <block>{

	<decl_stmt><decl><type><specifier>final</specifier> <specifier>static</specifier> <name>int</name></type> <name>PRIORITY_HIGH</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name><name>IMarker</name><operator>.</operator><name>PRIORITY_HIGH</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>final</specifier> <specifier>static</specifier> <name>int</name></type> <name>PRIORITY_NORMAL</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name><name>IMarker</name><operator>.</operator><name>PRIORITY_NORMAL</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>final</specifier> <specifier>static</specifier> <name>int</name></type> <name>PRIORITY_LOW</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name><name>IMarker</name><operator>.</operator><name>PRIORITY_LOW</name></name></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>TAG_SELECTED_PRIORITIES</name> <init>= <expr><literal type="string">"selectedPriorities"</literal></expr></init></decl>;</decl_stmt> <comment type="line">//$NON-NLS-1$</comment>

	<decl_stmt><decl><type><name>int</name></type> <name>selectedPriorities</name> <init>= <expr><name>PRIORITY_HIGH</name> <operator>+</operator> <name>PRIORITY_LOW</name> <operator>+</operator> <name>PRIORITY_NORMAL</name></expr></init></decl>;</decl_stmt>

	<comment type="block" format="javadoc">/**
	 * Create a new instance of the receiver
	 */</comment>
	<constructor><specifier>public</specifier> <name>PriorityMarkerFieldFilter</name><parameter_list>()</parameter_list> <block>{
		<expr_stmt><expr><call><name>super</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	}</block></constructor>

	<comment type="block">/*
	 * (non-Javadoc)
	 * 
	 * @see org.eclipse.ui.internal.provisional.views.markers.api.MarkerFieldFilter#loadSettings(org.eclipse.ui.IMemento)
	 */</comment>
	<function><specifier>public</specifier> <type><name>void</name></type> <name>loadSettings</name><parameter_list>(<parameter><decl><type><name>IMemento</name></type> <name>memento</name></decl></parameter>)</parameter_list> <block>{
		<decl_stmt><decl><type><name>Integer</name></type> <name>priority</name> <init>= <expr><call><name><name>memento</name><operator>.</operator><name>getInteger</name></name><argument_list>(<argument><expr><name>TAG_SELECTED_PRIORITIES</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if>if <condition>(<expr><name>priority</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then>
			<block type="pseudo"><return>return;</return></block></then></if>
		<expr_stmt><expr><name>selectedPriorities</name> <operator>=</operator> <call><name><name>priority</name><operator>.</operator><name>intValue</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	}</block></function>
	
	<comment type="block">/* (non-Javadoc)
	 * @see org.eclipse.ui.internal.provisional.views.markers.CompatibilityFieldFilter#loadLegacySettings(org.eclipse.ui.IMemento)
	 */</comment>
	<function><specifier>public</specifier> <type><name>void</name></type> <name>loadLegacySettings</name><parameter_list>(<parameter><decl><type><name>IMemento</name></type> <name>memento</name></decl></parameter>)</parameter_list> <block>{
		<decl_stmt><decl><type><name>String</name></type> <name>setting</name> <init>= <expr><call><name><name>memento</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>TaskFilter</name><operator>.</operator><name>TAG_PRIORITY</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<if>if <condition>(<expr><name>setting</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
			<try>try <block>{
				<expr_stmt><expr><name>selectedPriorities</name> <operator>=</operator> <call><name><name>Integer</name><operator>.</operator><name>parseInt</name></name><argument_list>(<argument><expr><name>setting</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>NumberFormatException</name></type> <name>eNumberFormat</name></decl></parameter>)</parameter_list> <block>{
			}</block></catch></try>
		}</block></then></if>
		
	}</block></function>
	
	<comment type="block">/* (non-Javadoc)
	 * @see org.eclipse.ui.internal.views.markers.CompatibilityFieldFilter#initialize(org.eclipse.ui.views.markers.internal.ProblemFilter)
	 */</comment>
	<function><specifier>public</specifier> <type><name>void</name></type> <name>initialize</name><parameter_list>(<parameter><decl><type><name>ProblemFilter</name></type> <name>problemFilter</name></decl></parameter>)</parameter_list> <block>{
		<comment type="line">//There is no problem filter support for priority</comment>
		
	}</block></function>

	<comment type="block">/*
	 * (non-Javadoc)
	 * 
	 * @see org.eclipse.ui.internal.provisional.views.markers.api.MarkerFieldFilter#saveSettings(org.eclipse.ui.IMemento)
	 */</comment>
	<function><specifier>public</specifier> <type><name>void</name></type> <name>saveSettings</name><parameter_list>(<parameter><decl><type><name>IMemento</name></type> <name>memento</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><call><name><name>memento</name><operator>.</operator><name>putInteger</name></name><argument_list>(<argument><expr><name>TAG_SELECTED_PRIORITIES</name></expr></argument>, <argument><expr><name>selectedPriorities</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	}</block></function>

	<comment type="block">/*
	 * (non-Javadoc)
	 * 
	 * @see org.eclipse.ui.internal.provisional.views.markers.api.MarkerFieldFilter#select(org.eclipse.ui.internal.provisional.views.markers.api.MarkerItem)
	 */</comment>
	<function><specifier>public</specifier> <type><name>boolean</name></type> <name>select</name><parameter_list>(<parameter><decl><type><name>MarkerItem</name></type> <name>item</name></decl></parameter>)</parameter_list> <block>{

		<if>if <condition>(<expr><name>selectedPriorities</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then>
			<block type="pseudo"><return>return <expr><literal type="boolean">true</literal></expr>;</return></block></then></if>
		<decl_stmt><decl><type><name>IMarker</name></type> <name>marker</name> <init>= <expr><call><name><name>item</name><operator>.</operator><name>getMarker</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<if>if <condition>(<expr><name>marker</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then>
			<block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr>;</return></block></then></if>
		<decl_stmt><decl><type><name>int</name></type> <name>markerPriority</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <call><name><name>marker</name><operator>.</operator><name>getAttribute</name></name><argument_list>(<argument><expr><name><name>IMarker</name><operator>.</operator><name>PRIORITY</name></name></expr></argument>,
				<argument><expr><name><name>IMarker</name><operator>.</operator><name>PRIORITY_NORMAL</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<switch>switch <condition>(<expr><name>markerPriority</name></expr>)</condition> <block>{
		<case>case <expr><name>PRIORITY_HIGH</name></expr>:</case>
			<return>return <expr><operator>(</operator><name>markerPriority</name> <operator>&amp;</operator> <name>PRIORITY_HIGH</name><operator>)</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</return>
		<case>case <expr><name>PRIORITY_NORMAL</name></expr>:</case>
			<return>return <expr><operator>(</operator><name>markerPriority</name> <operator>&amp;</operator> <name>PRIORITY_NORMAL</name><operator>)</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</return>
		<case>case <expr><name>PRIORITY_LOW</name></expr>:</case>
			<return>return <expr><operator>(</operator><name>markerPriority</name> <operator>&amp;</operator> <name>PRIORITY_LOW</name><operator>)</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</return>

		<default>default:</default>
			<return>return <expr><literal type="boolean">true</literal></expr>;</return>
		}</block></switch>

	}</block></function>
	
	<comment type="block">/* (non-Javadoc)
	 * @see org.eclipse.ui.internal.provisional.views.markers.api.MarkerFieldFilter#populateWorkingCopy(org.eclipse.ui.internal.provisional.views.markers.api.MarkerFieldFilter)
	 */</comment>
	<function><specifier>public</specifier> <type><name>void</name></type> <name>populateWorkingCopy</name><parameter_list>(<parameter><decl><type><name>MarkerFieldFilter</name></type> <name>copy</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>populateWorkingCopy</name></name><argument_list>(<argument><expr><name>copy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><operator>(</operator><operator>(</operator><name>PriorityMarkerFieldFilter</name><operator>)</operator><name>copy</name><operator>)</operator><operator>.</operator><name>selectedPriorities</name> <operator>=</operator> <name>selectedPriorities</name></expr>;</expr_stmt>
	}</block></function>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="org.eclipse.ui.ide.markers.compatibility/src/org/eclipse/ui/ide/markers/compatibility/internal/QuickFixPropertyTester.java" hash="f906ec0338a78ba34c7698284549000065523295"><comment type="block" format="javadoc">/*******************************************************************************
 * Copyright (c) 2007 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     IBM Corporation - initial API and implementation
 ******************************************************************************/</comment>
<package>package <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>ide</name><operator>.</operator><name>markers</name><operator>.</operator><name>compatibility</name><operator>.</operator><name>internal</name></name>;</package>

<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>core</name><operator>.</operator><name>expressions</name><operator>.</operator><name>PropertyTester</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>ide</name><operator>.</operator><name>IDE</name></name>;</import>

<comment type="block" format="javadoc">/**
 * QuickFixPropertyTester is the property tester for the quick fix object.
 * 
 * @since 3.4
 * 
 */</comment>
<class><specifier>public</specifier> class <name>QuickFixPropertyTester</name> <super><extends>extends <name>PropertyTester</name></extends></super> <block>{

	<decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>QUICK_FIX</name> <init>= <expr><literal type="string">"quickFix"</literal></expr></init></decl>;</decl_stmt> <comment type="line">//$NON-NLS-1$</comment>

	<comment type="block" format="javadoc">/**
	 * Create a new instance of the receiver.
	 */</comment>
	<constructor><specifier>public</specifier> <name>QuickFixPropertyTester</name><parameter_list>()</parameter_list> <block>{
		<expr_stmt><expr><call><name>super</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	}</block></constructor>

	<comment type="block">/* (non-Javadoc)
	 * @see org.eclipse.core.expressions.IPropertyTester#test(java.lang.Object, java.lang.String, java.lang.Object[], java.lang.Object)
	 */</comment>
	<function><specifier>public</specifier> <type><name>boolean</name></type> <name>test</name><parameter_list>(<parameter><decl><type><name>Object</name></type> <name>receiver</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>property</name></decl></parameter>, <parameter><decl><type><name><name>Object</name><index>[]</index></name></type> <name>args</name></decl></parameter>,
			<parameter><decl><type><name>Object</name></type> <name>expectedValue</name></decl></parameter>)</parameter_list> <block>{
		<if>if <condition>(<expr><call><name><name>property</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>QUICK_FIX</name></expr></argument>)</argument_list></call></expr>)</condition><then>
			<block type="pseudo"><return>return <expr><call><name><name>IDE</name><operator>.</operator><name>getMarkerHelpRegistry</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>hasResolutions</name><argument_list>(
					<argument><expr><operator>(</operator><operator>(</operator><name>MarkerEntry</name><operator>)</operator> <name>receiver</name><operator>)</operator><operator>.</operator><call><name>getMarker</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block></then></if>
		<return>return <expr><literal type="boolean">false</literal></expr>;</return>
	}</block></function>

}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="org.eclipse.ui.ide.markers.compatibility/src/org/eclipse/ui/ide/markers/compatibility/internal/QuickFixWizard.java" hash="4fbbb33ac08b1fea160d9636a246b723c932f0a9"><comment type="block" format="javadoc">/*******************************************************************************
 * Copyright (c) 2007 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     IBM Corporation - initial API and implementation
 ******************************************************************************/</comment>

<package>package <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>ide</name><operator>.</operator><name>markers</name><operator>.</operator><name>compatibility</name><operator>.</operator><name>internal</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>reflect</name><operator>.</operator><name>InvocationTargetException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>core</name><operator>.</operator><name>resources</name><operator>.</operator><name>IMarker</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>core</name><operator>.</operator><name>runtime</name><operator>.</operator><name>IProgressMonitor</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>core</name><operator>.</operator><name>runtime</name><operator>.</operator><name>IStatus</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>core</name><operator>.</operator><name>runtime</name><operator>.</operator><name>SubProgressMonitor</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>jface</name><operator>.</operator><name>operation</name><operator>.</operator><name>IRunnableWithProgress</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>jface</name><operator>.</operator><name>wizard</name><operator>.</operator><name>IWizardPage</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>jface</name><operator>.</operator><name>wizard</name><operator>.</operator><name>Wizard</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>IMarkerResolution</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>IWorkbenchPartSite</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>ide</name><operator>.</operator><name>markers</name><operator>.</operator><name>compatibility</name><operator>.</operator><name>api</name><operator>.</operator><name>internal</name><operator>.</operator><name>MarkerMessages</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>internal</name><operator>.</operator><name>ide</name><operator>.</operator><name>IDEInternalWorkbenchImages</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>internal</name><operator>.</operator><name>ide</name><operator>.</operator><name>StatusUtil</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>statushandlers</name><operator>.</operator><name>StatusManager</name></name>;</import>

<comment type="block" format="javadoc">/**
 * QuickFixWizard is the wizard for quick fixes.
 * 
 * @since 3.4
 * 
 */</comment>
<class>class <name>QuickFixWizard</name> <super><extends>extends <name>Wizard</name></extends></super> <block>{

	<decl_stmt><decl><specifier>private</specifier> <type><name>Map</name></type> <name>resolutionMap</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>private</specifier> <type><name>String</name></type> <name>description</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>private</specifier> <type><name>IWorkbenchPartSite</name></type> <name>partSite</name></decl>;</decl_stmt>

	<comment type="block" format="javadoc">/**
	 * Create the wizard with the map of resolutions.
	 * 
	 * @param description the description of the problem
	 * @param resolutions
	 *            Map key {@link IMarkerResolution} value {@link IMarker} []
	 * @param site the {@link IWorkbenchPartSite} to open the markers in
	 */</comment>
	<constructor><specifier>public</specifier> <name>QuickFixWizard</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>description</name></decl></parameter>,<parameter><decl><type><name>Map</name></type> <name>resolutions</name></decl></parameter>, <parameter><decl><type><name>IWorkbenchPartSite</name></type> <name>site</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><call><name>super</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>resolutionMap</name></name> <operator>=</operator> <name>resolutions</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>description</name></name> <operator>=</operator> <name>description</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>partSite</name> <operator>=</operator> <name>site</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>setDefaultPageImageDescriptor</name><argument_list>(<argument><expr><call><name><name>IDEInternalWorkbenchImages</name>
				<operator>.</operator><name>getImageDescriptor</name></name><argument_list>(<argument><expr><name><name>IDEInternalWorkbenchImages</name><operator>.</operator><name>IMG_DLGBAN_QUICKFIX_DLG</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>setNeedsProgressMonitor</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	}</block></constructor>

	<comment type="block">/*
	 * (non-Javadoc)
	 * 
	 * @see org.eclipse.jface.wizard.Wizard#addPages()
	 */</comment>
	<function><specifier>public</specifier> <type><name>void</name></type> <name>addPages</name><parameter_list>()</parameter_list> <block>{
		<expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>addPages</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>addPage</name><argument_list>(<argument><expr><operator>new</operator> <call><name>QuickFixPage</name><argument_list>(<argument><expr><name>description</name></expr></argument>,<argument><expr><name>resolutionMap</name></expr></argument>,<argument><expr><name>partSite</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<comment type="block">/*
	 * (non-Javadoc)
	 * 
	 * @see org.eclipse.jface.wizard.Wizard#performFinish()
	 */</comment>
	<function><specifier>public</specifier> <type><name>boolean</name></type> <name>performFinish</name><parameter_list>()</parameter_list> <block>{
		<decl_stmt><decl><type><name>IRunnableWithProgress</name></type> <name>finishRunnable</name> <init>= <expr><operator>new</operator> <class><super><name>IRunnableWithProgress</name></super><argument_list>()</argument_list> <block>{
			<comment type="block">/*
			 * (non-Javadoc)
			 * 
			 * @see org.eclipse.jface.operation.IRunnableWithProgress#run(org.eclipse.core.runtime.IProgressMonitor)
			 */</comment>
			<function><specifier>public</specifier> <type><name>void</name></type> <name>run</name><parameter_list>(<parameter><decl><type><name>IProgressMonitor</name></type> <name>monitor</name></decl></parameter>)</parameter_list>
				 <block>{
				<decl_stmt><decl><type><name><name>IWizardPage</name><index>[]</index></name></type> <name>pages</name> <init>= <expr><call><name>getPages</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><call><name><name>monitor</name><operator>.</operator><name>beginTask</name></name><argument_list>(<argument><expr><name><name>MarkerMessages</name><operator>.</operator><name>MarkerResolutionDialog_Fixing</name></name></expr></argument>,
						<argument><expr><operator>(</operator><literal type="number">10</literal> <operator>*</operator> <name><name>pages</name><operator>.</operator><name>length</name></name><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>monitor</name><operator>.</operator><name>worked</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pages</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
					<comment type="line">//Allow for cancel event processing</comment>
					<expr_stmt><expr><call><name>getShell</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getDisplay</name><argument_list>()</argument_list></call><operator>.</operator><call><name>readAndDispatch</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
					<if>if<condition>(<expr><call><name><name>monitor</name><operator>.</operator><name>isCanceled</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
						<block type="pseudo"><return>return;</return></block></then></if>
					<decl_stmt><decl><type><name>QuickFixPage</name></type> <name>wizardPage</name> <init>= <expr><operator>(</operator><name>QuickFixPage</name><operator>)</operator> <name><name>pages</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
					<expr_stmt><expr><call><name><name>wizardPage</name><operator>.</operator><name>performFinish</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>SubProgressMonitor</name><argument_list>(<argument><expr><name>monitor</name></expr></argument>,<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name>monitor</name><operator>.</operator><name>worked</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></for>
				<expr_stmt><expr><call><name><name>monitor</name><operator>.</operator><name>done</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

			}</block></function>
		}</block></class></expr></init></decl>;</decl_stmt>

		<try>try <block>{
			<expr_stmt><expr><call><name>getContainer</name><argument_list>()</argument_list></call><operator>.</operator><call><name>run</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><name>finishRunnable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>InvocationTargetException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
			<expr_stmt><expr><call><name><name>StatusManager</name><operator>.</operator><name>getManager</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>handle</name><argument_list>(
					<argument><expr><call><name><name>StatusUtil</name><operator>.</operator><name>newStatus</name></name><argument_list>(<argument><expr><name><name>IStatus</name><operator>.</operator><name>ERROR</name></name></expr></argument>,
							<argument><expr><call><name><name>e</name><operator>.</operator><name>getLocalizedMessage</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><literal type="boolean">false</literal></expr>;</return>
		}</block></catch> <catch>catch <parameter_list>(<parameter><decl><type><name>InterruptedException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
			<expr_stmt><expr><call><name><name>StatusManager</name><operator>.</operator><name>getManager</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>handle</name><argument_list>(
					<argument><expr><call><name><name>StatusUtil</name><operator>.</operator><name>newStatus</name></name><argument_list>(<argument><expr><name><name>IStatus</name><operator>.</operator><name>ERROR</name></name></expr></argument>,
							<argument><expr><call><name><name>e</name><operator>.</operator><name>getLocalizedMessage</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><literal type="boolean">false</literal></expr>;</return>
		}</block></catch></try>

		<return>return <expr><literal type="boolean">true</literal></expr>;</return>
	}</block></function>

}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="org.eclipse.ui.ide.markers.compatibility/src/org/eclipse/ui/ide/markers/compatibility/internal/QuickFixHandler.java" hash="e3dcc307245e3c5899acd7396105a50779a0804b"><package>package <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>ide</name><operator>.</operator><name>markers</name><operator>.</operator><name>compatibility</name><operator>.</operator><name>internal</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>reflect</name><operator>.</operator><name>InvocationTargetException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Collection</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashMap</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>core</name><operator>.</operator><name>commands</name><operator>.</operator><name>ExecutionEvent</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>core</name><operator>.</operator><name>commands</name><operator>.</operator><name>ExecutionException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>core</name><operator>.</operator><name>resources</name><operator>.</operator><name>IMarker</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>core</name><operator>.</operator><name>runtime</name><operator>.</operator><name>IProgressMonitor</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>core</name><operator>.</operator><name>runtime</name><operator>.</operator><name>IStatus</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>core</name><operator>.</operator><name>runtime</name><operator>.</operator><name>Status</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>jface</name><operator>.</operator><name>dialogs</name><operator>.</operator><name>ProgressMonitorDialog</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>jface</name><operator>.</operator><name>operation</name><operator>.</operator><name>IRunnableContext</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>jface</name><operator>.</operator><name>operation</name><operator>.</operator><name>IRunnableWithProgress</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>jface</name><operator>.</operator><name>wizard</name><operator>.</operator><name>IWizard</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>jface</name><operator>.</operator><name>wizard</name><operator>.</operator><name>WizardDialog</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>osgi</name><operator>.</operator><name>util</name><operator>.</operator><name>NLS</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>swt</name><operator>.</operator><name>SWT</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>swt</name><operator>.</operator><name>widgets</name><operator>.</operator><name>Shell</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>IMarkerResolution</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>PlatformUI</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>ide</name><operator>.</operator><name>IDE</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>ide</name><operator>.</operator><name>markers</name><operator>.</operator><name>compatibility</name><operator>.</operator><name>api</name><operator>.</operator><name>MarkerSupportConstants</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>ide</name><operator>.</operator><name>markers</name><operator>.</operator><name>compatibility</name><operator>.</operator><name>api</name><operator>.</operator><name>MarkerViewHandler</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>ide</name><operator>.</operator><name>markers</name><operator>.</operator><name>compatibility</name><operator>.</operator><name>api</name><operator>.</operator><name>WorkbenchMarkerResolution</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>ide</name><operator>.</operator><name>markers</name><operator>.</operator><name>compatibility</name><operator>.</operator><name>api</name><operator>.</operator><name>internal</name><operator>.</operator><name>MarkerMessages</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>internal</name><operator>.</operator><name>ide</name><operator>.</operator><name>IDEWorkbenchPlugin</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>progress</name><operator>.</operator><name>IWorkbenchSiteProgressService</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>statushandlers</name><operator>.</operator><name>StatusAdapter</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>statushandlers</name><operator>.</operator><name>StatusManager</name></name>;</import>

<comment type="block" format="javadoc">/**
 * QuickFixHandler is the command handler for the quick fix dialog.
 * 
 * @since 3.4
 * 
 */</comment>
<class><specifier>public</specifier> class <name>QuickFixHandler</name> <super><extends>extends <name>MarkerViewHandler</name></extends></super> <block>{

	<class><specifier>private</specifier> class <name>QuickFixWizardDialog</name> <super><extends>extends <name>WizardDialog</name></extends></super> <block>{

		<comment type="block" format="javadoc">/**
		 * @param parentShell
		 * @param newWizard
		 */</comment>
		<constructor><specifier>public</specifier> <name>QuickFixWizardDialog</name><parameter_list>(<parameter><decl><type><name>Shell</name></type> <name>parentShell</name></decl></parameter>, <parameter><decl><type><name>IWizard</name></type> <name>newWizard</name></decl></parameter>)</parameter_list> <block>{
			<expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>parentShell</name></expr></argument>, <argument><expr><name>newWizard</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>setShellStyle</name><argument_list>(<argument><expr><name><name>SWT</name><operator>.</operator><name>CLOSE</name></name> <operator>|</operator> <name><name>SWT</name><operator>.</operator><name>MAX</name></name> <operator>|</operator> <name><name>SWT</name><operator>.</operator><name>TITLE</name></name> <operator>|</operator> <name><name>SWT</name><operator>.</operator><name>BORDER</name></name>
					<operator>|</operator> <name><name>SWT</name><operator>.</operator><name>MODELESS</name></name> <operator>|</operator> <name><name>SWT</name><operator>.</operator><name>RESIZE</name></name> <operator>|</operator> <call><name>getDefaultOrientation</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></constructor>

	}</block></class>

	<comment type="block">/*
	 * (non-Javadoc)
	 * 
	 * @see org.eclipse.core.commands.IHandler#execute(org.eclipse.core.commands.ExecutionEvent)
	 */</comment>
	<function><specifier>public</specifier> <type><name>Object</name></type> <name>execute</name><parameter_list>(<parameter><decl><type><name>ExecutionEvent</name></type> <name>event</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>ExecutionException</name></expr></argument></throws> <block>{

		<decl_stmt><decl><type><specifier>final</specifier> <name>ExtendedMarkersView</name></type> <name>view</name> <init>= <expr><call><name>getView</name><argument_list>(<argument><expr><name>event</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if>if <condition>(<expr><name>view</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then>
			<block type="pseudo"><return>return <expr><name>this</name></expr>;</return></block></then></if>

		<decl_stmt><decl><type><specifier>final</specifier> <name>Map</name></type> <name>resolutions</name> <init>= <expr><operator>new</operator> <call><name>HashMap</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier>final</specifier> <name>IMarker</name></type> <name>selected</name> <init>= <expr><call><name><name>view</name><operator>.</operator><name>getSelectedMarkers</name></name><argument_list>()</argument_list></call><index>[<expr><literal type="number">0</literal></expr>]</index></expr></init></decl>;</decl_stmt>

		<decl_stmt><decl><type><name>IRunnableWithProgress</name></type> <name>resolutionsRunnable</name> <init>= <expr><operator>new</operator> <class><super><name>IRunnableWithProgress</name></super><argument_list>()</argument_list> <block>{
			<function><specifier>public</specifier> <type><name>void</name></type> <name>run</name><parameter_list>(<parameter><decl><type><name>IProgressMonitor</name></type> <name>monitor</name></decl></parameter>)</parameter_list> <block>{
				<expr_stmt><expr><call><name><name>monitor</name>
						<operator>.</operator><name>beginTask</name></name><argument_list>(
								<argument><expr><name><name>MarkerMessages</name><operator>.</operator><name>resolveMarkerAction_computationManyAction</name></name></expr></argument>,
								<argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<decl_stmt><decl><type><name><name>IMarker</name><index>[]</index></name></type> <name>allMarkers</name> <init>= <expr><call><name><name>view</name><operator>.</operator><name>getAllMarkers</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><call><name><name>monitor</name><operator>.</operator><name>worked</name></name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<decl_stmt><decl><type><name><name>IMarkerResolution</name><index>[]</index></name></type> <name>found</name> <init>= <expr><call><name><name>IDE</name><operator>.</operator><name>getMarkerHelpRegistry</name></name><argument_list>()</argument_list></call>
						<operator>.</operator><call><name>getResolutions</name><argument_list>(<argument><expr><name>selected</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>int</name></type> <name>progressCount</name> <init>= <expr><literal type="number">80</literal></expr></init></decl>;</decl_stmt>
				<if>if <condition>(<expr><name><name>found</name><operator>.</operator><name>length</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><then>
					<block type="pseudo"><expr_stmt><expr><name>progressCount</name> <operator>=</operator> <name>progressCount</name> <operator>/</operator> <name><name>found</name><operator>.</operator><name>length</name></name></expr>;</expr_stmt></block></then></if>
				<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>found</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
					<decl_stmt><decl><type><name>IMarkerResolution</name></type> <name>markerResolution</name> <init>= <expr><name><name>found</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
					<if>if <condition>(<expr><name>markerResolution</name> <operator>instanceof</operator> <name>WorkbenchMarkerResolution</name></expr>)</condition><then> <block>{
						<decl_stmt><decl><type><name><name>IMarker</name><index>[]</index></name></type> <name>other</name> <init>= <expr><operator>(</operator><operator>(</operator><name>WorkbenchMarkerResolution</name><operator>)</operator> <name>markerResolution</name><operator>)</operator>
								<operator>.</operator><call><name>findOtherMarkers</name><argument_list>(<argument><expr><name>allMarkers</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
						<decl_stmt><decl><type><name>Collection</name></type> <name>markers</name> <init>= <expr><operator>new</operator> <call><name>ArrayList</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
						<expr_stmt><expr><call><name><name>markers</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>selected</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>other</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{
							<expr_stmt><expr><call><name><name>markers</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name><name>other</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						}</block></for>
						<expr_stmt><expr><call><name><name>resolutions</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>markerResolution</name></expr></argument>, <argument><expr><name>markers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></then> <else>else <block>{
						<decl_stmt><decl><type><name>Collection</name></type> <name>markers</name> <init>= <expr><operator>new</operator> <call><name>ArrayList</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
						<expr_stmt><expr><call><name><name>markers</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>selected</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name><name>resolutions</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>markerResolution</name></expr></argument>, <argument><expr><name>markers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></else></if>
					<expr_stmt><expr><call><name><name>monitor</name><operator>.</operator><name>worked</name></name><argument_list>(<argument><expr><name>progressCount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></for>
				<expr_stmt><expr><call><name><name>monitor</name><operator>.</operator><name>done</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			}</block></function>
		}</block></class></expr></init></decl>;</decl_stmt>

		<decl_stmt><decl><type><name>Object</name></type> <name>service</name> <init>= <expr><call><name><name>view</name><operator>.</operator><name>getSite</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getAdapter</name><argument_list>(
				<argument><expr><name><name>IWorkbenchSiteProgressService</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<decl_stmt><decl><type><name>IRunnableContext</name></type> <name>context</name> <init>= <expr><operator>new</operator> <call><name>ProgressMonitorDialog</name><argument_list>(<argument><expr><call><name><name>view</name><operator>.</operator><name>getSite</name></name><argument_list>()</argument_list></call>
				<operator>.</operator><call><name>getShell</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<try>try <block>{
			<if>if <condition>(<expr><name>service</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
				<expr_stmt><expr><call><name><name>PlatformUI</name><operator>.</operator><name>getWorkbench</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getProgressService</name><argument_list>()</argument_list></call><operator>.</operator><call><name>runInUI</name><argument_list>(<argument><expr><name>context</name></expr></argument>,
						<argument><expr><name>resolutionsRunnable</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then> <else>else <block>{
				<expr_stmt><expr><operator>(</operator><operator>(</operator><name>IWorkbenchSiteProgressService</name><operator>)</operator> <name>service</name><operator>)</operator><operator>.</operator><call><name>runInUI</name><argument_list>(<argument><expr><name>context</name></expr></argument>,
						<argument><expr><name>resolutionsRunnable</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></else></if>
		}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>InvocationTargetException</name></type> <name>exception</name></decl></parameter>)</parameter_list> <block>{
			<throw>throw <expr><operator>new</operator> <call><name>ExecutionException</name><argument_list>(<argument><expr><call><name><name>exception</name><operator>.</operator><name>getLocalizedMessage</name></name><argument_list>()</argument_list></call></expr></argument>,
					<argument><expr><name>exception</name></expr></argument>)</argument_list></call></expr>;</throw>
		}</block></catch> <catch>catch <parameter_list>(<parameter><decl><type><name>InterruptedException</name></type> <name>exception</name></decl></parameter>)</parameter_list> <block>{

			<throw>throw <expr><operator>new</operator> <call><name>ExecutionException</name><argument_list>(<argument><expr><call><name><name>exception</name><operator>.</operator><name>getLocalizedMessage</name></name><argument_list>()</argument_list></call></expr></argument>,
					<argument><expr><name>exception</name></expr></argument>)</argument_list></call></expr>;</throw>
		}</block></catch></try>

		<decl_stmt><decl><type><name>String</name></type> <name>markerDescription</name> <init>= <expr><call><name><name>selected</name><operator>.</operator><name>getAttribute</name></name><argument_list>(<argument><expr><name><name>IMarker</name><operator>.</operator><name>MESSAGE</name></name></expr></argument>,
				<argument><expr><name><name>MarkerSupportConstants</name><operator>.</operator><name>EMPTY_STRING</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if>if <condition>(<expr><call><name><name>resolutions</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
			<decl_stmt><decl><type><name>Status</name></type> <name>newStatus</name> <init>= <expr><operator>new</operator> <call><name>Status</name><argument_list>(
					<argument><expr><name><name>IStatus</name><operator>.</operator><name>INFO</name></name></expr></argument>,
					<argument><expr><name><name>IDEWorkbenchPlugin</name><operator>.</operator><name>IDE_WORKBENCH</name></name></expr></argument>,
					<argument><expr><call><name><name>NLS</name>
							<operator>.</operator><name>bind</name></name><argument_list>(
									<argument><expr><name><name>MarkerMessages</name><operator>.</operator><name>MarkerResolutionDialog_NoResolutionsFound</name></name></expr></argument>,
									<argument><expr><operator>new</operator> <name><name>Object</name><index>[]</index></name> <block>{ <expr><name>markerDescription</name></expr> }</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>StatusAdapter</name></type> <name>adapter</name> <init>= <expr><operator>new</operator> <call><name>StatusAdapter</name><argument_list>(<argument><expr><name>newStatus</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name><name>adapter</name><operator>.</operator><name>setProperty</name></name><argument_list>(<argument><expr><name><name>StatusAdapter</name><operator>.</operator><name>TITLE_PROPERTY</name></name></expr></argument>,
					<argument><expr><name><name>MarkerMessages</name><operator>.</operator><name>MarkerResolutionDialog_CannotFixTitle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>StatusManager</name><operator>.</operator><name>getManager</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>handle</name><argument_list>(<argument><expr><name>adapter</name></expr></argument>, <argument><expr><name><name>StatusManager</name><operator>.</operator><name>SHOW</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then> <else>else <block>{

			<decl_stmt><decl><type><name>String</name></type> <name>description</name> <init>= <expr><call><name><name>NLS</name><operator>.</operator><name>bind</name></name><argument_list>(
					<argument><expr><name><name>MarkerMessages</name><operator>.</operator><name>MarkerResolutionDialog_Description</name></name></expr></argument>,
					<argument><expr><name>markerDescription</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

			<decl_stmt><decl><type><name>IWizard</name></type> <name>wizard</name> <init>= <expr><operator>new</operator> <call><name>QuickFixWizard</name><argument_list>(<argument><expr><name>description</name></expr></argument>, <argument><expr><name>resolutions</name></expr></argument>, <argument><expr><call><name><name>view</name>
					<operator>.</operator><name>getSite</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>WizardDialog</name></type> <name>dialog</name> <init>= <expr><operator>new</operator> <call><name>QuickFixWizardDialog</name><argument_list>(<argument><expr><call><name><name>view</name><operator>.</operator><name>getSite</name></name><argument_list>()</argument_list></call>
					<operator>.</operator><call><name>getShell</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>wizard</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name><name>dialog</name><operator>.</operator><name>open</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		}</block></else></if>
		<return>return <expr><name>this</name></expr>;</return>
	}</block></function>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="org.eclipse.ui.ide.markers.compatibility/src/org/eclipse/ui/ide/markers/compatibility/internal/SelectedWarningsParameters.java" hash="7e455277c9c6c8f9df8ce72ed901988bf849472a"><comment type="block" format="javadoc">/*******************************************************************************
 * Copyright (c) 2007 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     IBM Corporation - initial API and implementation
 ******************************************************************************/</comment>

<package>package <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>ide</name><operator>.</operator><name>markers</name><operator>.</operator><name>compatibility</name><operator>.</operator><name>internal</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashMap</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>core</name><operator>.</operator><name>resources</name><operator>.</operator><name>IMarker</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>ide</name><operator>.</operator><name>markers</name><operator>.</operator><name>compatibility</name><operator>.</operator><name>api</name><operator>.</operator><name>FiltersContributionParameters</name></name>;</import>

<comment type="block" format="javadoc">/**
 * SelectedWarningsParameters is the parameters for warnings.
 * 
 * @since 3.4
 * 
 */</comment>
<class><specifier>public</specifier> class <name>SelectedWarningsParameters</name> <super><extends>extends <name>FiltersContributionParameters</name></extends></super> <block>{

	<decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><name>Map</name></type> <name>warningsMap</name></decl>;</decl_stmt>
	<static>static <block>{
		<expr_stmt><expr><name>warningsMap</name> <operator>=</operator> <operator>new</operator> <call><name>HashMap</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>warningsMap</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>IMarker</name><operator>.</operator><name>SEVERITY</name></name></expr></argument>, <argument><expr><operator>new</operator> <call><name>Integer</name><argument_list>(
				<argument><expr><name><name>SeverityAndDescriptionFieldFilter</name><operator>.</operator><name>SEVERITY_WARNING</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></static>

	<comment type="block" format="javadoc">/**
	 * Create a new instance of the receiver.
	 */</comment>
	<constructor><specifier>public</specifier> <name>SelectedWarningsParameters</name><parameter_list>()</parameter_list> <block>{
		<expr_stmt><expr><call><name>super</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	}</block></constructor>

	<comment type="block">/*
	 * (non-Javadoc)
	 * 
	 * @see org.eclipse.ui.internal.provisional.views.markers.FiltersContributionParameters#getParameterValues()
	 */</comment>
	<function><specifier>public</specifier> <type><name>Map</name></type> <name>getParameterValues</name><parameter_list>()</parameter_list> <block>{
		<return>return <expr><name>warningsMap</name></expr>;</return>
	}</block></function>

}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="org.eclipse.ui.ide.markers.compatibility/src/org/eclipse/ui/ide/markers/compatibility/internal/MarkersPropertyPage.java" hash="456f013019c887acdf0a7d5738806d525940b503"><comment type="block" format="javadoc">/*******************************************************************************
 * Copyright (c) 2007 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     IBM Corporation - initial API and implementation
 ******************************************************************************/</comment>
<package>package <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>ide</name><operator>.</operator><name>markers</name><operator>.</operator><name>compatibility</name><operator>.</operator><name>internal</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashMap</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>core</name><operator>.</operator><name>commands</name><operator>.</operator><name>ExecutionException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>core</name><operator>.</operator><name>commands</name><operator>.</operator><name>operations</name><operator>.</operator><name>IUndoableOperation</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>core</name><operator>.</operator><name>resources</name><operator>.</operator><name>IMarker</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>core</name><operator>.</operator><name>resources</name><operator>.</operator><name>IResource</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>core</name><operator>.</operator><name>resources</name><operator>.</operator><name>ResourcesPlugin</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>core</name><operator>.</operator><name>runtime</name><operator>.</operator><name>CoreException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>core</name><operator>.</operator><name>runtime</name><operator>.</operator><name>IStatus</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>core</name><operator>.</operator><name>runtime</name><operator>.</operator><name>NullProgressMonitor</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>jface</name><operator>.</operator><name>dialogs</name><operator>.</operator><name>Dialog</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>osgi</name><operator>.</operator><name>util</name><operator>.</operator><name>NLS</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>swt</name><operator>.</operator><name>SWT</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>swt</name><operator>.</operator><name>layout</name><operator>.</operator><name>GridData</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>swt</name><operator>.</operator><name>layout</name><operator>.</operator><name>GridLayout</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>swt</name><operator>.</operator><name>widgets</name><operator>.</operator><name>Button</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>swt</name><operator>.</operator><name>widgets</name><operator>.</operator><name>Combo</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>swt</name><operator>.</operator><name>widgets</name><operator>.</operator><name>Composite</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>swt</name><operator>.</operator><name>widgets</name><operator>.</operator><name>Control</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>swt</name><operator>.</operator><name>widgets</name><operator>.</operator><name>Label</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>swt</name><operator>.</operator><name>widgets</name><operator>.</operator><name>Text</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>IWorkbenchPropertyPage</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>PlatformUI</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>dialogs</name><operator>.</operator><name>PropertyPage</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>ide</name><operator>.</operator><name>markers</name><operator>.</operator><name>compatibility</name><operator>.</operator><name>api</name><operator>.</operator><name>MarkerSupportConstants</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>ide</name><operator>.</operator><name>markers</name><operator>.</operator><name>compatibility</name><operator>.</operator><name>api</name><operator>.</operator><name>internal</name><operator>.</operator><name>MarkerMessages</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>ide</name><operator>.</operator><name>markers</name><operator>.</operator><name>compatibility</name><operator>.</operator><name>api</name><operator>.</operator><name>internal</name><operator>.</operator><name>Util</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>ide</name><operator>.</operator><name>undo</name><operator>.</operator><name>UpdateMarkersOperation</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>ide</name><operator>.</operator><name>undo</name><operator>.</operator><name>WorkspaceUndoUtil</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>internal</name><operator>.</operator><name>ide</name><operator>.</operator><name>StatusUtil</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>statushandlers</name><operator>.</operator><name>StatusManager</name></name>;</import>

<comment type="block" format="javadoc">/**
 * MarkersPropertyPage is the property page for a marker.
 * 
 * @since 3.4
 * 
 */</comment>
<class><specifier>public</specifier> class <name>MarkersPropertyPage</name> <super><extends>extends <name>PropertyPage</name></extends> <implements>implements
		<name>IWorkbenchPropertyPage</name></implements></super> <block>{

	<decl_stmt><decl><specifier>private</specifier> <type><name>Text</name></type> <name>descriptionText</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>private</specifier> <type><name>IMarker</name></type> <name>marker</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Combo</name></type> <name>priorityCombo</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Button</name></type> <name>completedCheckbox</name></decl>;</decl_stmt>

	<comment type="block" format="javadoc">/**
	 * Create a new instance of the reciever.
	 */</comment>
	<constructor><specifier>public</specifier> <name>MarkersPropertyPage</name><parameter_list>()</parameter_list> <block>{
		<expr_stmt><expr><call><name>super</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	}</block></constructor>

	<function><specifier>protected</specifier> <type><name>Control</name></type> <name>createContents</name><parameter_list>(<parameter><decl><type><name>Composite</name></type> <name>parent</name></decl></parameter>)</parameter_list> <block>{
		<comment type="line">// initialize resources/properties</comment>

		<decl_stmt><decl><type><name>Object</name></type> <name>element</name> <init>= <expr><call><name>getElement</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getAdapter</name><argument_list>(<argument><expr><name><name>IMarker</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>IResource</name></type> <name>resource</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>

		<if>if <condition>(<expr><name>element</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
			<expr_stmt><expr><name>marker</name> <operator>=</operator> <operator>(</operator><name>IMarker</name><operator>)</operator> <name>element</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>resource</name> <operator>=</operator> <call><name><name>marker</name><operator>.</operator><name>getResource</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		}</block></then> <elseif>else <if>if <condition>(<expr><name>resource</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
			<expr_stmt><expr><name>resource</name> <operator>=</operator> <call><name><name>ResourcesPlugin</name><operator>.</operator><name>getWorkspace</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getRoot</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		}</block></then></if></elseif></if>

		<if>if <condition>(<expr><operator>!</operator><call><name><name>Util</name><operator>.</operator><name>isEditable</name></name><argument_list>(<argument><expr><name>marker</name></expr></argument>)</argument_list></call></expr>)</condition><then>
			<block type="pseudo"><expr_stmt><expr><call><name>noDefaultAndApplyButton</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></then></if>

		<decl_stmt><decl><type><name>Composite</name></type> <name>composite</name> <init>= <expr><operator>new</operator> <call><name>Composite</name><argument_list>(<argument><expr><name>parent</name></expr></argument>, <argument><expr><name><name>SWT</name><operator>.</operator><name>NULL</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>GridLayout</name></type> <name>layout</name> <init>= <expr><operator>new</operator> <call><name>GridLayout</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name><name>layout</name><operator>.</operator><name>marginWidth</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>layout</name><operator>.</operator><name>marginHeight</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>composite</name><operator>.</operator><name>setLayout</name></name><argument_list>(<argument><expr><name>layout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>GridData</name></type> <name>gridData</name> <init>= <expr><operator>new</operator> <call><name>GridData</name><argument_list>(<argument><expr><name><name>GridData</name><operator>.</operator><name>FILL_HORIZONTAL</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>composite</name><operator>.</operator><name>setLayoutData</name></name><argument_list>(<argument><expr><name>gridData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>initializeDialogUnits</name><argument_list>(<argument><expr><name>composite</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>createDescriptionArea</name><argument_list>(<argument><expr><name>composite</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if>if <condition>(<expr><name>element</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
			<expr_stmt><expr><call><name>createSeperator</name><argument_list>(<argument><expr><name>composite</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>createCreationTimeArea</name><argument_list>(<argument><expr><name>composite</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>
		<expr_stmt><expr><call><name>createAttributesArea</name><argument_list>(<argument><expr><name>composite</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if>if <condition>(<expr><name>resource</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
			<expr_stmt><expr><call><name>createSeperator</name><argument_list>(<argument><expr><name>composite</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>createResourceArea</name><argument_list>(<argument><expr><name>composite</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>

		<expr_stmt><expr><call><name><name>Dialog</name><operator>.</operator><name>applyDialogFont</name></name><argument_list>(<argument><expr><name>composite</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<return>return <expr><name>composite</name></expr>;</return>
	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Creates a seperator.
	 */</comment>
	<function><specifier>protected</specifier> <type><name>void</name></type> <name>createSeperator</name><parameter_list>(<parameter><decl><type><name>Composite</name></type> <name>parent</name></decl></parameter>)</parameter_list> <block>{
		<decl_stmt><decl><type><name>Label</name></type> <name>seperator</name> <init>= <expr><operator>new</operator> <call><name>Label</name><argument_list>(<argument><expr><name>parent</name></expr></argument>, <argument><expr><name><name>SWT</name><operator>.</operator><name>NULL</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>GridData</name></type> <name>gridData</name> <init>= <expr><operator>new</operator> <call><name>GridData</name><argument_list>(<argument><expr><name><name>GridData</name><operator>.</operator><name>FILL_HORIZONTAL</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name><name>gridData</name><operator>.</operator><name>horizontalSpan</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>seperator</name><operator>.</operator><name>setLayoutData</name></name><argument_list>(<argument><expr><name>gridData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Method createCreationTimeArea.
	 * 
	 * @param parent
	 */</comment>
	<function><specifier>private</specifier> <type><name>void</name></type> <name>createCreationTimeArea</name><parameter_list>(<parameter><decl><type><name>Composite</name></type> <name>parent</name></decl></parameter>)</parameter_list> <block>{
		<decl_stmt><decl><type><name>Label</name></type> <name>label</name> <init>= <expr><operator>new</operator> <call><name>Label</name><argument_list>(<argument><expr><name>parent</name></expr></argument>, <argument><expr><name><name>SWT</name><operator>.</operator><name>NONE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>label</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><name><name>MarkerMessages</name><operator>.</operator><name>propertiesDialog_creationTime_text</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<decl_stmt><decl><type><name>Label</name></type> <name>creationTime</name> <init>= <expr><operator>new</operator> <call><name>Label</name><argument_list>(<argument><expr><name>parent</name></expr></argument>, <argument><expr><name><name>SWT</name><operator>.</operator><name>NONE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>creationTime</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><call><name><name>Util</name><operator>.</operator><name>getCreationTime</name></name><argument_list>(<argument><expr><name>marker</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Creates the area for the Description field.
	 */</comment>
	<function><specifier>private</specifier> <type><name>void</name></type> <name>createDescriptionArea</name><parameter_list>(<parameter><decl><type><name>Composite</name></type> <name>parent</name></decl></parameter>)</parameter_list> <block>{
		<decl_stmt><decl><type><name>Label</name></type> <name>label</name> <init>= <expr><operator>new</operator> <call><name>Label</name><argument_list>(<argument><expr><name>parent</name></expr></argument>, <argument><expr><name><name>SWT</name><operator>.</operator><name>NONE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>label</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><name><name>MarkerMessages</name><operator>.</operator><name>propertiesDialog_description_text</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>descriptionText</name> <operator>=</operator> <operator>new</operator> <call><name>Text</name><argument_list>(<argument><expr><name>parent</name></expr></argument>, <argument><expr><operator>(</operator><name><name>SWT</name><operator>.</operator><name>SINGLE</name></name> <operator>|</operator> <name><name>SWT</name><operator>.</operator><name>BORDER</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>GridData</name></type> <name>gridData</name> <init>= <expr><operator>new</operator> <call><name>GridData</name><argument_list>(<argument><expr><name><name>GridData</name><operator>.</operator><name>FILL_HORIZONTAL</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name><name>gridData</name><operator>.</operator><name>widthHint</name></name> <operator>=</operator> <call><name>convertHorizontalDLUsToPixels</name><argument_list>(<argument><expr><literal type="number">400</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>descriptionText</name><operator>.</operator><name>setLayoutData</name></name><argument_list>(<argument><expr><name>gridData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>descriptionText</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><call><name><name>Util</name><operator>.</operator><name>getProperty</name></name><argument_list>(<argument><expr><name><name>IMarker</name><operator>.</operator><name>MESSAGE</name></name></expr></argument>, <argument><expr><name>marker</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>descriptionText</name><operator>.</operator><name>selectAll</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>descriptionText</name><operator>.</operator><name>setEditable</name></name><argument_list>(<argument><expr><call><name><name>Util</name><operator>.</operator><name>isEditable</name></name><argument_list>(<argument><expr><name>marker</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	}</block></function>

	<comment type="block" format="javadoc">/**
	 * This method is intended to be overridden by subclasses. The attributes
	 * area is created between the creation time area and the resource area.
	 * 
	 * @param parent
	 *            the parent composite
	 */</comment>
	<function><specifier>protected</specifier> <type><name>void</name></type> <name>createAttributesArea</name><parameter_list>(<parameter><decl><type><name>Composite</name></type> <name>parent</name></decl></parameter>)</parameter_list> <block>{
		<try>try <block>{
			<if>if <condition>(<expr><call><name><name>marker</name><operator>.</operator><name>isSubtypeOf</name></name><argument_list>(<argument><expr><name><name>IMarker</name><operator>.</operator><name>PROBLEM</name></name></expr></argument>)</argument_list></call></expr>)</condition><then>
				<block type="pseudo"><expr_stmt><expr><call><name>createProblemAttributes</name><argument_list>(<argument><expr><name>parent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>

			<if>if <condition>(<expr><call><name><name>marker</name><operator>.</operator><name>isSubtypeOf</name></name><argument_list>(<argument><expr><name><name>IMarker</name><operator>.</operator><name>TASK</name></name></expr></argument>)</argument_list></call></expr>)</condition><then>
				<block type="pseudo"><expr_stmt><expr><call><name>createTaskAttributes</name><argument_list>(<argument><expr><name>parent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
		}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>CoreException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
			<expr_stmt><expr><call><name><name>MarkerSupportInternalUtilities</name><operator>.</operator><name>handle</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></catch></try>
	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Create the attributes area for editing a task
	 * 
	 * @param parent
	 */</comment>
	<function><specifier>private</specifier> <type><name>void</name></type> <name>createTaskAttributes</name><parameter_list>(<parameter><decl><type><name>Composite</name></type> <name>parent</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><call><name>createSeperator</name><argument_list>(<argument><expr><name>parent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<decl_stmt><decl><type><name>Label</name></type> <name>label</name> <init>= <expr><operator>new</operator> <call><name>Label</name><argument_list>(<argument><expr><name>parent</name></expr></argument>, <argument><expr><name><name>SWT</name><operator>.</operator><name>NONE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>label</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><name><name>MarkerMessages</name><operator>.</operator><name>propertiesDialog_priority</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<decl_stmt><decl><type><name>Composite</name></type> <name>composite</name> <init>= <expr><operator>new</operator> <call><name>Composite</name><argument_list>(<argument><expr><name>parent</name></expr></argument>, <argument><expr><name><name>SWT</name><operator>.</operator><name>NONE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>GridLayout</name></type> <name>layout</name> <init>= <expr><operator>new</operator> <call><name>GridLayout</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name><name>layout</name><operator>.</operator><name>numColumns</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>layout</name><operator>.</operator><name>marginWidth</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>layout</name><operator>.</operator><name>marginHeight</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>composite</name><operator>.</operator><name>setLayout</name></name><argument_list>(<argument><expr><name>layout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>priorityCombo</name> <operator>=</operator> <operator>new</operator> <call><name>Combo</name><argument_list>(<argument><expr><name>composite</name></expr></argument>, <argument><expr><name><name>SWT</name><operator>.</operator><name>READ_ONLY</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>priorityCombo</name><operator>.</operator><name>setItems</name></name><argument_list>(<argument><expr><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{
				<expr><name><name>MarkerMessages</name><operator>.</operator><name>propertiesDialog_priorityLow</name></name></expr>,
				<expr><name><name>MarkerMessages</name><operator>.</operator><name>propertiesDialog_priorityNormal</name></name></expr>,
				<expr><name><name>MarkerMessages</name><operator>.</operator><name>propertiesDialog_priorityHigh</name></name></expr> }</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name><name>priorityCombo</name><operator>.</operator><name>select</name></name><argument_list>(<argument><expr><call><name><name>marker</name><operator>.</operator><name>getAttribute</name></name><argument_list>(<argument><expr><name><name>IMarker</name><operator>.</operator><name>PRIORITY</name></name></expr></argument>,
				<argument><expr><name><name>IMarker</name><operator>.</operator><name>PRIORITY_NORMAL</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>priorityCombo</name><operator>.</operator><name>setEnabled</name></name><argument_list>(<argument><expr><call><name><name>Util</name><operator>.</operator><name>isEditable</name></name><argument_list>(<argument><expr><name>marker</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>completedCheckbox</name> <operator>=</operator> <operator>new</operator> <call><name>Button</name><argument_list>(<argument><expr><name>composite</name></expr></argument>, <argument><expr><name><name>SWT</name><operator>.</operator><name>CHECK</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>completedCheckbox</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><name><name>MarkerMessages</name><operator>.</operator><name>propertiesDialog_completed</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>GridData</name></type> <name>gridData</name> <init>= <expr><operator>new</operator> <call><name>GridData</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name><name>gridData</name><operator>.</operator><name>horizontalIndent</name></name> <operator>=</operator> <call><name>convertHorizontalDLUsToPixels</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>completedCheckbox</name><operator>.</operator><name>setLayoutData</name></name><argument_list>(<argument><expr><name>gridData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<expr_stmt><expr><call><name><name>completedCheckbox</name><operator>.</operator><name>setEnabled</name></name><argument_list>(<argument><expr><call><name><name>Util</name><operator>.</operator><name>isEditable</name></name><argument_list>(<argument><expr><name>marker</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<decl_stmt><decl><type><name>Object</name></type> <name>done</name></decl>;</decl_stmt>
		<try>try <block>{
			<expr_stmt><expr><name>done</name> <operator>=</operator> <call><name><name>marker</name><operator>.</operator><name>getAttribute</name></name><argument_list>(<argument><expr><name><name>IMarker</name><operator>.</operator><name>DONE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>completedCheckbox</name><operator>.</operator><name>setSelection</name></name><argument_list>(<argument><expr><name>done</name> <operator>!=</operator> <literal type="null">null</literal>
					<operator>&amp;&amp;</operator> <name>done</name> <operator>instanceof</operator> <name>Boolean</name>
					<operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>Boolean</name><operator>)</operator> <name>done</name><operator>)</operator><operator>.</operator><call><name>booleanValue</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>CoreException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
			<expr_stmt><expr><call><name><name>MarkerSupportInternalUtilities</name><operator>.</operator><name>handle</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></catch></try>

	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Create the attributes area for problems
	 * 
	 * @param parent
	 */</comment>
	<function><specifier>private</specifier> <type><name>void</name></type> <name>createProblemAttributes</name><parameter_list>(<parameter><decl><type><name>Composite</name></type> <name>parent</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><call><name>createSeperator</name><argument_list>(<argument><expr><name>parent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><operator>new</operator> <call><name>Label</name><argument_list>(<argument><expr><name>parent</name></expr></argument>, <argument><expr><name><name>SWT</name><operator>.</operator><name>NONE</name></name></expr></argument>)</argument_list></call>
				<operator>.</operator><call><name>setText</name><argument_list>(<argument><expr><name><name>MarkerMessages</name><operator>.</operator><name>propertiesDialog_severityLabel</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<decl_stmt><decl><type><name>Composite</name></type> <name>composite</name> <init>= <expr><operator>new</operator> <call><name>Composite</name><argument_list>(<argument><expr><name>parent</name></expr></argument>, <argument><expr><name><name>SWT</name><operator>.</operator><name>NONE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>GridLayout</name></type> <name>layout</name> <init>= <expr><operator>new</operator> <call><name>GridLayout</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name><name>layout</name><operator>.</operator><name>numColumns</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>layout</name><operator>.</operator><name>marginWidth</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>layout</name><operator>.</operator><name>marginHeight</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>composite</name><operator>.</operator><name>setLayout</name></name><argument_list>(<argument><expr><name>layout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<decl_stmt><decl><type><name>Label</name></type> <name>severityImage</name> <init>= <expr><operator>new</operator> <call><name>Label</name><argument_list>(<argument><expr><name>composite</name></expr></argument>, <argument><expr><name><name>SWT</name><operator>.</operator><name>NONE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><call><name><name>severityImage</name><operator>.</operator><name>setImage</name></name><argument_list>(<argument><expr><call><name><name>Util</name><operator>.</operator><name>getImage</name></name><argument_list>(<argument><expr><call><name><name>marker</name><operator>.</operator><name>getAttribute</name></name><argument_list>(
				<argument><expr><name><name>IMarker</name><operator>.</operator><name>SEVERITY</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<decl_stmt><decl><type><name>Label</name></type> <name>severityLabel</name> <init>= <expr><operator>new</operator> <call><name>Label</name><argument_list>(<argument><expr><name>composite</name></expr></argument>, <argument><expr><name><name>SWT</name><operator>.</operator><name>NONE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<decl_stmt><decl><type><name>int</name></type> <name>severity</name> <init>= <expr><call><name><name>marker</name><operator>.</operator><name>getAttribute</name></name><argument_list>(<argument><expr><name><name>IMarker</name><operator>.</operator><name>SEVERITY</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if>if <condition>(<expr><name>severity</name> <operator>==</operator> <name><name>IMarker</name><operator>.</operator><name>SEVERITY_ERROR</name></name></expr>)</condition><then> <block>{
			<expr_stmt><expr><call><name><name>severityLabel</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><name><name>MarkerMessages</name><operator>.</operator><name>propertiesDialog_errorLabel</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then> <elseif>else <if>if <condition>(<expr><name>severity</name> <operator>==</operator> <name><name>IMarker</name><operator>.</operator><name>SEVERITY_WARNING</name></name></expr>)</condition><then> <block>{
			<expr_stmt><expr><call><name><name>severityLabel</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><name><name>MarkerMessages</name><operator>.</operator><name>propertiesDialog_warningLabel</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if></elseif> <elseif>else <if>if <condition>(<expr><name>severity</name> <operator>==</operator> <name><name>IMarker</name><operator>.</operator><name>SEVERITY_INFO</name></name></expr>)</condition><then> <block>{
			<expr_stmt><expr><call><name><name>severityLabel</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><name><name>MarkerMessages</name><operator>.</operator><name>propertiesDialog_infoLabel</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if></elseif> <else>else <block>{
			<expr_stmt><expr><call><name><name>severityLabel</name>
					<operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><name><name>MarkerMessages</name><operator>.</operator><name>propertiesDialog_noseverityLabel</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></else></if>

	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Creates the area for the Resource field.
	 */</comment>
	<function><specifier>private</specifier> <type><name>void</name></type> <name>createResourceArea</name><parameter_list>(<parameter><decl><type><name>Composite</name></type> <name>parent</name></decl></parameter>)</parameter_list> <block>{
		<decl_stmt><decl><type><name>Label</name></type> <name>resourceLabel</name> <init>= <expr><operator>new</operator> <call><name>Label</name><argument_list>(<argument><expr><name>parent</name></expr></argument>, <argument><expr><name><name>SWT</name><operator>.</operator><name>NONE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>resourceLabel</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><name><name>MarkerMessages</name><operator>.</operator><name>propertiesDialog_resource_text</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>Text</name></type> <name>resourceText</name> <init>= <expr><operator>new</operator> <call><name>Text</name><argument_list>(<argument><expr><name>parent</name></expr></argument>, <argument><expr><name><name>SWT</name><operator>.</operator><name>SINGLE</name></name> <operator>|</operator> <name><name>SWT</name><operator>.</operator><name>WRAP</name></name>
				<operator>|</operator> <name><name>SWT</name><operator>.</operator><name>READ_ONLY</name></name> <operator>|</operator> <name><name>SWT</name><operator>.</operator><name>BORDER</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>GridData</name></type> <name>gridData</name> <init>= <expr><operator>new</operator> <call><name>GridData</name><argument_list>(<argument><expr><name><name>GridData</name><operator>.</operator><name>FILL_HORIZONTAL</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>resourceText</name><operator>.</operator><name>setLayoutData</name></name><argument_list>(<argument><expr><name>gridData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>resourceText</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><call><name><name>Util</name><operator>.</operator><name>getResourceName</name></name><argument_list>(<argument><expr><name>marker</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<decl_stmt><decl><type><name>Label</name></type> <name>folderLabel</name> <init>= <expr><operator>new</operator> <call><name>Label</name><argument_list>(<argument><expr><name>parent</name></expr></argument>, <argument><expr><name><name>SWT</name><operator>.</operator><name>NONE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>folderLabel</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><name><name>MarkerMessages</name><operator>.</operator><name>propertiesDialog_folder_text</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>Text</name></type> <name>folderText</name> <init>= <expr><operator>new</operator> <call><name>Text</name><argument_list>(<argument><expr><name>parent</name></expr></argument>, <argument><expr><name><name>SWT</name><operator>.</operator><name>SINGLE</name></name> <operator>|</operator> <name><name>SWT</name><operator>.</operator><name>WRAP</name></name>
				<operator>|</operator> <name><name>SWT</name><operator>.</operator><name>READ_ONLY</name></name> <operator>|</operator> <name><name>SWT</name><operator>.</operator><name>BORDER</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name>gridData</name> <operator>=</operator> <operator>new</operator> <call><name>GridData</name><argument_list>(<argument><expr><name><name>GridData</name><operator>.</operator><name>FILL_HORIZONTAL</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>folderText</name><operator>.</operator><name>setLayoutData</name></name><argument_list>(<argument><expr><name>gridData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>folderText</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><call><name><name>Util</name><operator>.</operator><name>getContainerName</name></name><argument_list>(<argument><expr><name>marker</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<decl_stmt><decl><type><name>Label</name></type> <name>locationLabel</name> <init>= <expr><operator>new</operator> <call><name>Label</name><argument_list>(<argument><expr><name>parent</name></expr></argument>, <argument><expr><name><name>SWT</name><operator>.</operator><name>NONE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>locationLabel</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><name><name>MarkerMessages</name><operator>.</operator><name>propertiesDialog_location_text</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>Text</name></type> <name>locationText</name> <init>= <expr><operator>new</operator> <call><name>Text</name><argument_list>(<argument><expr><name>parent</name></expr></argument>, <argument><expr><name><name>SWT</name><operator>.</operator><name>SINGLE</name></name> <operator>|</operator> <name><name>SWT</name><operator>.</operator><name>WRAP</name></name>
				<operator>|</operator> <name><name>SWT</name><operator>.</operator><name>READ_ONLY</name></name> <operator>|</operator> <name><name>SWT</name><operator>.</operator><name>BORDER</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name>gridData</name> <operator>=</operator> <operator>new</operator> <call><name>GridData</name><argument_list>(<argument><expr><name><name>GridData</name><operator>.</operator><name>FILL_HORIZONTAL</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>locationText</name><operator>.</operator><name>setLayoutData</name></name><argument_list>(<argument><expr><name>gridData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<decl_stmt><decl><type><name>String</name></type> <name>line</name> <init>= <expr><call><name><name>Util</name><operator>.</operator><name>getProperty</name></name><argument_list>(<argument><expr><name><name>IMarker</name><operator>.</operator><name>LINE_NUMBER</name></name></expr></argument>, <argument><expr><name>marker</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if>if <condition>(<expr><call><name><name>line</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call><operator>==</operator><literal type="number">0</literal></expr>)</condition><then>
			<block type="pseudo"><expr_stmt><expr><call><name><name>locationText</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><name><name>MarkerSupportConstants</name><operator>.</operator><name>EMPTY_STRING</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
		<else>else
			<block type="pseudo"><expr_stmt><expr><call><name><name>locationText</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><call><name><name>NLS</name>
					<operator>.</operator><name>bind</name></name><argument_list>(<argument><expr><name><name>MarkerMessages</name><operator>.</operator><name>label_lineNumber</name></name></expr></argument>, <argument><expr><name>line</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>

	}</block></function>
	
	<comment type="block">/* (non-Javadoc)
	 * @see org.eclipse.jface.preference.PreferencePage#performOk()
	 */</comment>
	<function><specifier>public</specifier> <type><name>boolean</name></type> <name>performOk</name><parameter_list>()</parameter_list> <block>{
		<if>if <condition>(<expr><name>marker</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <call><name><name>Util</name><operator>.</operator><name>isEditable</name></name><argument_list>(<argument><expr><name>marker</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
			<expr_stmt><expr><call><name>saveChanges</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>
		<return>return <expr><call><name><name>super</name><operator>.</operator><name>performOk</name></name><argument_list>()</argument_list></call></expr>;</return>
	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Saves the changes made in the dialog if needed. Creates a new marker if
	 * needed. Updates the existing marker only if there have been changes.
	 */</comment>
	<function><specifier>private</specifier> <type><name>void</name></type> <name>saveChanges</name><parameter_list>()</parameter_list> <block>{
		<decl_stmt><decl><type><name>Map</name></type> <name>attrs</name></decl>;</decl_stmt>
		<try>try <block>{
			<expr_stmt><expr><name>attrs</name> <operator>=</operator> <call><name><name>marker</name><operator>.</operator><name>getAttributes</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>CoreException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
			<expr_stmt><expr><name>attrs</name> <operator>=</operator> <operator>new</operator> <call><name>HashMap</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>MarkerSupportInternalUtilities</name><operator>.</operator><name>handle</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></catch></try>

		<expr_stmt><expr><call><name><name>attrs</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>IMarker</name><operator>.</operator><name>MESSAGE</name></name></expr></argument>, <argument><expr><call><name><name>descriptionText</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="line">// Are we editing a task?</comment>
		<if>if <condition>(<expr><name>priorityCombo</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
			<decl_stmt><decl><type><name>int</name></type> <name>priority</name> <init>= <expr><name><name>IMarker</name><operator>.</operator><name>PRIORITY_NORMAL</name></name></expr></init></decl>;</decl_stmt>

			<decl_stmt><decl><type><name>int</name></type> <name>index</name> <init>= <expr><call><name><name>priorityCombo</name><operator>.</operator><name>getSelectionIndex</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
			<if>if <condition>(<expr><name>index</name> <operator>==</operator> <call><name><name>priorityCombo</name>
					<operator>.</operator><name>indexOf</name></name><argument_list>(<argument><expr><name><name>MarkerMessages</name><operator>.</operator><name>propertiesDialog_priorityHigh</name></name></expr></argument>)</argument_list></call></expr>)</condition><then>
				<block type="pseudo"><expr_stmt><expr><name>priority</name> <operator>=</operator> <name><name>IMarker</name><operator>.</operator><name>PRIORITY_HIGH</name></name></expr>;</expr_stmt></block></then>
			<elseif>else <if>if <condition>(<expr><name>index</name> <operator>==</operator> <call><name><name>priorityCombo</name>
					<operator>.</operator><name>indexOf</name></name><argument_list>(<argument><expr><name><name>MarkerMessages</name><operator>.</operator><name>propertiesDialog_priorityLow</name></name></expr></argument>)</argument_list></call></expr>)</condition><then>
				<block type="pseudo"><expr_stmt><expr><name>priority</name> <operator>=</operator> <name><name>IMarker</name><operator>.</operator><name>PRIORITY_LOW</name></name></expr>;</expr_stmt></block></then></if></elseif></if>

			<expr_stmt><expr><call><name><name>attrs</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>IMarker</name><operator>.</operator><name>PRIORITY</name></name></expr></argument>, <argument><expr><operator>new</operator> <call><name>Integer</name><argument_list>(<argument><expr><name>priority</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>

		<if>if <condition>(<expr><name>completedCheckbox</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then>
			<block type="pseudo"><expr_stmt><expr><call><name><name>attrs</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>IMarker</name><operator>.</operator><name>DONE</name></name></expr></argument>,
					<argument><expr><ternary><condition><expr><call><name><name>completedCheckbox</name><operator>.</operator><name>getSelection</name></name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><name><name>Boolean</name><operator>.</operator><name>TRUE</name></name></expr>
							</then><else>: <expr><name><name>Boolean</name><operator>.</operator><name>FALSE</name></name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>

		<decl_stmt><decl><type><name>IUndoableOperation</name></type> <name>op</name> <init>= <expr><operator>new</operator> <call><name>UpdateMarkersOperation</name><argument_list>(<argument><expr><name>marker</name></expr></argument>, <argument><expr><name>attrs</name></expr></argument>, <argument><expr><call><name><name>NLS</name>
				<operator>.</operator><name>bind</name></name><argument_list>(<argument><expr><name><name>MarkerMessages</name><operator>.</operator><name>qualifiedMarkerCommand_title</name></name></expr></argument>,
						<argument><expr><operator>new</operator> <name><name>Object</name><index>[]</index></name> <block>{
								<expr><name><name>MarkerMessages</name><operator>.</operator><name>DialogMarkerProperties_Modify</name></name></expr>,
								<expr><call><name><name>Util</name><operator>.</operator><name>getResourceName</name></name><argument_list>(<argument><expr><name>marker</name></expr></argument>)</argument_list></call></expr> }</block></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<try>try <block>{
			<expr_stmt><expr><call><name><name>PlatformUI</name><operator>.</operator><name>getWorkbench</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getOperationSupport</name><argument_list>()</argument_list></call>
					<operator>.</operator><call><name>getOperationHistory</name><argument_list>()</argument_list></call><operator>.</operator><call><name>execute</name><argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>NullProgressMonitor</name><argument_list>()</argument_list></call></expr></argument>,
							<argument><expr><call><name><name>WorkspaceUndoUtil</name><operator>.</operator><name>getUIInfoAdapter</name></name><argument_list>(<argument><expr><call><name>getShell</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>ExecutionException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
			<if>if <condition>(<expr><call><name><name>e</name><operator>.</operator><name>getCause</name></name><argument_list>()</argument_list></call> <operator>instanceof</operator> <name>CoreException</name></expr>)</condition><then> <block>{
				<expr_stmt><expr><call><name><name>StatusManager</name><operator>.</operator><name>getManager</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>handle</name><argument_list>(
						<argument><expr><operator>(</operator><operator>(</operator><name>CoreException</name><operator>)</operator> <call><name><name>e</name><operator>.</operator><name>getCause</name></name><argument_list>()</argument_list></call><operator>)</operator><operator>.</operator><call><name>getStatus</name><argument_list>()</argument_list></call></expr></argument>,
						<argument><expr><name><name>StatusManager</name><operator>.</operator><name>SHOW</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then> <else>else
				<block type="pseudo"><expr_stmt><expr><call><name><name>StatusManager</name><operator>.</operator><name>getManager</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>handle</name><argument_list>(
						<argument><expr><call><name><name>StatusUtil</name><operator>.</operator><name>newStatus</name></name><argument_list>(<argument><expr><name><name>IStatus</name><operator>.</operator><name>ERROR</name></name></expr></argument>, <argument><expr><call><name><name>e</name>
								<operator>.</operator><name>getLocalizedMessage</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>
		}</block></catch></try>

	}</block></function>

}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="org.eclipse.ui.ide.markers.compatibility/src/org/eclipse/ui/ide/markers/compatibility/internal/SeverityAndDescriptionConfigurationArea.java" hash="d2a976d1c729789b0534d817440c86bea11d98fa"><package>package <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>ide</name><operator>.</operator><name>markers</name><operator>.</operator><name>compatibility</name><operator>.</operator><name>internal</name></name>;</package>
<comment type="block" format="javadoc">/*******************************************************************************
 * Copyright (c) 2007 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     IBM Corporation - initial API and implementation
 ******************************************************************************/</comment>

<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>core</name><operator>.</operator><name>resources</name><operator>.</operator><name>IMarker</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>jface</name><operator>.</operator><name>dialogs</name><operator>.</operator><name>IDialogConstants</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>swt</name><operator>.</operator><name>SWT</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>swt</name><operator>.</operator><name>events</name><operator>.</operator><name>SelectionAdapter</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>swt</name><operator>.</operator><name>events</name><operator>.</operator><name>SelectionEvent</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>swt</name><operator>.</operator><name>layout</name><operator>.</operator><name>GridData</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>swt</name><operator>.</operator><name>layout</name><operator>.</operator><name>GridLayout</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>swt</name><operator>.</operator><name>widgets</name><operator>.</operator><name>Button</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>swt</name><operator>.</operator><name>widgets</name><operator>.</operator><name>Composite</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>swt</name><operator>.</operator><name>widgets</name><operator>.</operator><name>Label</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>ide</name><operator>.</operator><name>markers</name><operator>.</operator><name>compatibility</name><operator>.</operator><name>api</name><operator>.</operator><name>MarkerFieldFilter</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>ide</name><operator>.</operator><name>markers</name><operator>.</operator><name>compatibility</name><operator>.</operator><name>api</name><operator>.</operator><name>internal</name><operator>.</operator><name>MarkerMessages</name></name>;</import>

<comment type="block" format="javadoc">/**
 * SeverityAndDescriptionConfigurationArea is the configuration area for the
 * severity and description field.
 * 
 * @since 3.4
 * 
 */</comment>
<class><specifier>public</specifier> class <name>SeverityAndDescriptionConfigurationArea</name> <super><extends>extends
		<name>DescriptionConfigurationArea</name></extends></super> <block>{
	
	<decl_stmt><decl><specifier>private</specifier> <type><name>int</name></type> <name>severities</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>private</specifier> <type><name>Button</name></type> <name>infoButton</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>private</specifier> <type><name>Button</name></type> <name>errorButton</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>private</specifier> <type><name>Button</name></type> <name>warningButton</name></decl>;</decl_stmt>

	<comment type="block" format="javadoc">/**
	 * Create a new instance of the receiver.
	 */</comment>
	<constructor><specifier>public</specifier> <name>SeverityAndDescriptionConfigurationArea</name><parameter_list>()</parameter_list> <block>{
		<expr_stmt><expr><call><name>super</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	}</block></constructor>

	<comment type="block">/*
	 * (non-Javadoc)
	 * 
	 * @see org.eclipse.ui.internal.provisional.views.markers.api.FilterConfigurationArea#apply(org.eclipse.ui.internal.provisional.views.markers.api.MarkerFieldFilter)
	 */</comment>
	<function><specifier>public</specifier> <type><name>void</name></type> <name>apply</name><parameter_list>(<parameter><decl><type><name>MarkerFieldFilter</name></type> <name>filter</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>apply</name></name><argument_list>(<argument><expr><name>filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><operator>(</operator><operator>(</operator><name>SeverityAndDescriptionFieldFilter</name><operator>)</operator> <name>filter</name><operator>)</operator><operator>.</operator><name>selectedSeverities</name> <operator>=</operator> <name>severities</name></expr>;</expr_stmt>

	}</block></function>

	<comment type="block">/*
	 * (non-Javadoc)
	 * 
	 * @see org.eclipse.ui.internal.provisional.views.markers.FilterConfigurationArea#createContents(org.eclipse.swt.widgets.Composite)
	 */</comment>
	<function><specifier>public</specifier> <type><name>void</name></type> <name>createContents</name><parameter_list>(<parameter><decl><type><name>Composite</name></type> <name>parent</name></decl></parameter>)</parameter_list> <block>{

		<expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>createContents</name></name><argument_list>(<argument><expr><name>parent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>createSeverityGroup</name><argument_list>(<argument><expr><name>parent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Create a group for the severity selection.
	 * 
	 * @param parent
	 */</comment>
	<function><specifier>private</specifier> <type><name>void</name></type> <name>createSeverityGroup</name><parameter_list>(<parameter><decl><type><name>Composite</name></type> <name>parent</name></decl></parameter>)</parameter_list> <block>{

		<decl_stmt><decl><type><name>Composite</name></type> <name>severityComposite</name> <init>= <expr><operator>new</operator> <call><name>Composite</name><argument_list>(<argument><expr><name>parent</name></expr></argument>, <argument><expr><name><name>SWT</name><operator>.</operator><name>NONE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>GridLayout</name></type> <name>layout</name> <init>= <expr><operator>new</operator> <call><name>GridLayout</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name><name>layout</name><operator>.</operator><name>horizontalSpacing</name></name> <operator>=</operator> <name><name>IDialogConstants</name><operator>.</operator><name>BUTTON_MARGIN</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>severityComposite</name><operator>.</operator><name>setLayout</name></name><argument_list>(<argument><expr><name>layout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>severityComposite</name><operator>.</operator><name>setLayoutData</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>GridData</name><argument_list>(<argument><expr><name><name>GridData</name><operator>.</operator><name>FILL_HORIZONTAL</name></name>
				<operator>|</operator> <name><name>GridData</name><operator>.</operator><name>GRAB_HORIZONTAL</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<decl_stmt><decl><type><name>Label</name></type> <name>label</name> <init>= <expr><operator>new</operator> <call><name>Label</name><argument_list>(<argument><expr><name>severityComposite</name></expr></argument>, <argument><expr><name><name>SWT</name><operator>.</operator><name>NONE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>label</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><name><name>MarkerMessages</name><operator>.</operator><name>filtersDialog_severityLabel</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>errorButton</name> <operator>=</operator> <operator>new</operator> <call><name>Button</name><argument_list>(<argument><expr><name>severityComposite</name></expr></argument>, <argument><expr><name><name>SWT</name><operator>.</operator><name>CHECK</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>errorButton</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><name><name>MarkerMessages</name><operator>.</operator><name>filtersDialog_severityError</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>errorButton</name><operator>.</operator><name>addSelectionListener</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>SelectionAdapter</name></super><argument_list>()</argument_list> <block>{
			<comment type="block">/*
			 * (non-Javadoc)
			 * 
			 * @see org.eclipse.swt.events.SelectionListener#widgetSelected(org.eclipse.swt.events.SelectionEvent)
			 */</comment>
			<function><specifier>public</specifier> <type><name>void</name></type> <name>widgetSelected</name><parameter_list>(<parameter><decl><type><name>SelectionEvent</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
				<expr_stmt><expr><call><name>updateSeverities</name><argument_list>(
						<argument><expr><name><name>SeverityAndDescriptionFieldFilter</name><operator>.</operator><name>SEVERITY_ERROR</name></name></expr></argument>,
						<argument><expr><call><name><name>errorButton</name><operator>.</operator><name>getSelection</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></function>
		}</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>GridData</name></type> <name>data</name> <init>= <expr><operator>new</operator> <call><name>GridData</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name><name>data</name><operator>.</operator><name>horizontalIndent</name></name> <operator>=</operator> <name><name>IDialogConstants</name><operator>.</operator><name>BUTTON_MARGIN</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>errorButton</name><operator>.</operator><name>setLayoutData</name></name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>warningButton</name> <operator>=</operator> <operator>new</operator> <call><name>Button</name><argument_list>(<argument><expr><name>severityComposite</name></expr></argument>, <argument><expr><name><name>SWT</name><operator>.</operator><name>CHECK</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>warningButton</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><name><name>MarkerMessages</name><operator>.</operator><name>filtersDialog_severityWarning</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>warningButton</name><operator>.</operator><name>addSelectionListener</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>SelectionAdapter</name></super><argument_list>()</argument_list> <block>{
			<comment type="block">/*
			 * (non-Javadoc)
			 * 
			 * @see org.eclipse.swt.events.SelectionListener#widgetSelected(org.eclipse.swt.events.SelectionEvent)
			 */</comment>
			<function><specifier>public</specifier> <type><name>void</name></type> <name>widgetSelected</name><parameter_list>(<parameter><decl><type><name>SelectionEvent</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
				<expr_stmt><expr><call><name>updateSeverities</name><argument_list>(
						<argument><expr><name><name>SeverityAndDescriptionFieldFilter</name><operator>.</operator><name>SEVERITY_WARNING</name></name></expr></argument>,
						<argument><expr><call><name><name>warningButton</name><operator>.</operator><name>getSelection</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></function>
		}</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>infoButton</name> <operator>=</operator> <operator>new</operator> <call><name>Button</name><argument_list>(<argument><expr><name>severityComposite</name></expr></argument>, <argument><expr><name><name>SWT</name><operator>.</operator><name>CHECK</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>infoButton</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><name><name>MarkerMessages</name><operator>.</operator><name>filtersDialog_severityInfo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>infoButton</name><operator>.</operator><name>addSelectionListener</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>SelectionAdapter</name></super><argument_list>()</argument_list> <block>{
			<comment type="block">/*
			 * (non-Javadoc)
			 * 
			 * @see org.eclipse.swt.events.SelectionListener#widgetSelected(org.eclipse.swt.events.SelectionEvent)
			 */</comment>
			<function><specifier>public</specifier> <type><name>void</name></type> <name>widgetSelected</name><parameter_list>(<parameter><decl><type><name>SelectionEvent</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
				<expr_stmt><expr><call><name>updateSeverities</name><argument_list>(
						<argument><expr><name><name>SeverityAndDescriptionFieldFilter</name><operator>.</operator><name>SEVERITY_INFO</name></name></expr></argument>,
						<argument><expr><call><name><name>infoButton</name><operator>.</operator><name>getSelection</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></function>
		}</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<comment type="block">/*
	 * (non-Javadoc)
	 * 
	 * @see org.eclipse.ui.internal.provisional.views.markers.api.FilterConfigurationArea#initialize(org.eclipse.ui.internal.provisional.views.markers.api.MarkerFieldFilter)
	 */</comment>
	<function><specifier>public</specifier> <type><name>void</name></type> <name>initialize</name><parameter_list>(<parameter><decl><type><name>MarkerFieldFilter</name></type> <name>filter</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>initialize</name></name><argument_list>(<argument><expr><name>filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>SeverityAndDescriptionFieldFilter</name></type> <name>sevFilter</name> <init>= <expr><operator>(</operator><name>SeverityAndDescriptionFieldFilter</name><operator>)</operator> <name>filter</name></expr></init></decl>;</decl_stmt>
		
		<expr_stmt><expr><name>severities</name> <operator>=</operator> <name><name>sevFilter</name><operator>.</operator><name>selectedSeverities</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>infoButton</name>
				<operator>.</operator><name>setSelection</name></name><argument_list>(<argument><expr><operator>(</operator><name><name>SeverityAndDescriptionFieldFilter</name><operator>.</operator><name>SEVERITY_INFO</name></name> <operator>&amp;</operator> <name>severities</name><operator>)</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>warningButton</name>
				<operator>.</operator><name>setSelection</name></name><argument_list>(<argument><expr><operator>(</operator><name><name>SeverityAndDescriptionFieldFilter</name><operator>.</operator><name>SEVERITY_WARNING</name></name> <operator>&amp;</operator> <name>severities</name><operator>)</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>errorButton</name>
				<operator>.</operator><name>setSelection</name></name><argument_list>(<argument><expr><operator>(</operator><name><name>SeverityAndDescriptionFieldFilter</name><operator>.</operator><name>SEVERITY_ERROR</name></name> <operator>&amp;</operator> <name>severities</name><operator>)</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Set or clear the flag for the constant based on the enablement.
	 * 
	 * @param constant
	 *            one of {@link IMarker#SEVERITY_ERROR},{@link IMarker#SEVERITY_WARNING},{@link IMarker#SEVERITY_INFO}
	 * @param enabled
	 */</comment>
	<function><specifier>private</specifier> <type><name>void</name></type> <name>updateSeverities</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>constant</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>enabled</name></decl></parameter>)</parameter_list> <block>{
		<if>if <condition>(<expr><name>enabled</name></expr>)</condition><then>
			<block type="pseudo"><expr_stmt><expr><name>severities</name> <operator>=</operator> <name>constant</name> <operator>|</operator> <name>severities</name></expr>;</expr_stmt></block></then>
		<else>else
			<block type="pseudo"><expr_stmt><expr><name>severities</name> <operator>=</operator> <name>constant</name> <operator>^</operator> <name>severities</name></expr>;</expr_stmt></block></else></if>

	}</block></function>

}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="org.eclipse.ui.ide.markers.compatibility/src/org/eclipse/ui/ide/markers/compatibility/internal/SeverityAndDescriptionFieldFilter.java" hash="3c0a313921eee4bdfb77303929fc042936d502b6"><comment type="block" format="javadoc">/*******************************************************************************
 * Copyright (c) 2007 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     IBM Corporation - initial API and implementation
 ******************************************************************************/</comment>
<package>package <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>ide</name><operator>.</operator><name>markers</name><operator>.</operator><name>compatibility</name><operator>.</operator><name>internal</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>core</name><operator>.</operator><name>resources</name><operator>.</operator><name>IMarker</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>IMemento</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>ide</name><operator>.</operator><name>markers</name><operator>.</operator><name>compatibility</name><operator>.</operator><name>api</name><operator>.</operator><name>MarkerFieldFilter</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>ide</name><operator>.</operator><name>markers</name><operator>.</operator><name>compatibility</name><operator>.</operator><name>api</name><operator>.</operator><name>MarkerItem</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>ide</name><operator>.</operator><name>markers</name><operator>.</operator><name>compatibility</name><operator>.</operator><name>api</name><operator>.</operator><name>internal</name><operator>.</operator><name>ProblemFilter</name></name>;</import>

<comment type="block" format="javadoc">/**
 * SeverityAndDescriptionFieldFilter is the filter for the severity and
 * description field.
 * 
 * @since 3.4
 * 
 */</comment>
<class><specifier>public</specifier> class <name>SeverityAndDescriptionFieldFilter</name> <super><extends>extends <name>DescriptionFieldFilter</name></extends></super> <block>{

	<decl_stmt><decl><type><specifier>final</specifier> <specifier>static</specifier> <name>int</name></type> <name>SEVERITY_ERROR</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name><name>IMarker</name><operator>.</operator><name>SEVERITY_ERROR</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>final</specifier> <specifier>static</specifier> <name>int</name></type> <name>SEVERITY_WARNING</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name><name>IMarker</name><operator>.</operator><name>SEVERITY_WARNING</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>final</specifier> <specifier>static</specifier> <name>int</name></type> <name>SEVERITY_INFO</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name><name>IMarker</name><operator>.</operator><name>SEVERITY_INFO</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>selectedSeverities</name> <init>= <expr><name>SEVERITY_ERROR</name> <operator>+</operator> <name>SEVERITY_WARNING</name> <operator>+</operator> <name>SEVERITY_INFO</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>TAG_SELECTED_SEVERITIES</name> <init>= <expr><literal type="string">"selectedSeverities"</literal></expr></init></decl>;</decl_stmt> <comment type="line">//$NON-NLS-1$</comment>

	<comment type="block" format="javadoc">/**
	 * Create a new instance of the receiver.
	 */</comment>
	<constructor><specifier>public</specifier> <name>SeverityAndDescriptionFieldFilter</name><parameter_list>()</parameter_list> <block>{
		<expr_stmt><expr><call><name>super</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	}</block></constructor>

	<comment type="block">/*
	 * (non-Javadoc)
	 * 
	 * @see org.eclipse.ui.internal.provisional.views.markers.api.MarkerFieldFilter#select(org.eclipse.ui.internal.provisional.views.markers.api.MarkerItem)
	 */</comment>
	<function><specifier>public</specifier> <type><name>boolean</name></type> <name>select</name><parameter_list>(<parameter><decl><type><name>MarkerItem</name></type> <name>item</name></decl></parameter>)</parameter_list> <block>{

		<decl_stmt><decl><type><name>IMarker</name></type> <name>marker</name> <init>= <expr><call><name><name>item</name><operator>.</operator><name>getMarker</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<if>if <condition>(<expr><name>marker</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then>
			<block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr>;</return></block></then></if>

		<decl_stmt><decl><type><name>int</name></type> <name>markerSeverity</name> <init>= <expr><call><name><name>item</name><operator>.</operator><name>getAttributeValue</name></name><argument_list>(<argument><expr><name><name>IMarker</name><operator>.</operator><name>SEVERITY</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if>if <condition>(<expr><name>markerSeverity</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><then>
			<block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr>;</return></block></then></if>
		<comment type="line">// Convert from the marker to the filter</comment>
		<if>if <condition>(<expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>markerSeverity</name> <operator>&amp;</operator> <name>selectedSeverities</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then>
			<block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr>;</return></block></then></if>
		<return>return <expr><call><name><name>super</name><operator>.</operator><name>select</name></name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</return>

	}</block></function>

	<comment type="block">/*
	 * (non-Javadoc)
	 * 
	 * @see org.eclipse.ui.internal.provisional.views.markers.MarkerFieldFilter#initialize(java.util.Map)
	 */</comment>
	<function><specifier>public</specifier> <type><name>void</name></type> <name>initialize</name><parameter_list>(<parameter><decl><type><name>Map</name></type> <name>values</name></decl></parameter>)</parameter_list> <block>{
		<decl_stmt><decl><type><name>Object</name></type> <name>value</name> <init>= <expr><call><name><name>values</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>IMarker</name><operator>.</operator><name>SEVERITY</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if>if <condition>(<expr><name>value</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <name>value</name> <operator>instanceof</operator> <name>Integer</name></expr>)</condition><then> <block>{
			<expr_stmt><expr><name>selectedSeverities</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>Integer</name><operator>)</operator> <name>value</name><operator>)</operator><operator>.</operator><call><name>intValue</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>
		<decl_stmt><decl><type><name>Object</name></type> <name>modifier</name> <init>= <expr><call><name><name>values</name>
				<operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>MarkerSupportInternalUtilities</name><operator>.</operator><name>CONTAINS_MODIFIER_TOKEN</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if>if <condition>(<expr><name>modifier</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <name>modifier</name> <operator>instanceof</operator> <name>String</name></expr>)</condition><then>
			<block type="pseudo"><expr_stmt><expr><name>containsModifier</name> <operator>=</operator> <operator>(</operator><name>String</name><operator>)</operator> <name>modifier</name></expr>;</expr_stmt></block></then></if>

		<decl_stmt><decl><type><name>Object</name></type> <name>text</name> <init>= <expr><call><name><name>values</name>
				<operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>MarkerSupportInternalUtilities</name><operator>.</operator><name>CONTAINS_TEXT_TOKEN</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if>if <condition>(<expr><name>text</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <name>text</name> <operator>instanceof</operator> <name>String</name></expr>)</condition><then>
			<block type="pseudo"><expr_stmt><expr><name>containsText</name> <operator>=</operator> <operator>(</operator><name>String</name><operator>)</operator> <name>text</name></expr>;</expr_stmt></block></then></if>

	}</block></function>

	<comment type="block">/*
	 * (non-Javadoc)
	 * 
	 * @see org.eclipse.ui.internal.provisional.views.markers.MarkerFieldFilter#populateWorkingCopy(org.eclipse.ui.internal.provisional.views.markers.MarkerFieldFilter)
	 */</comment>
	<function><specifier>public</specifier> <type><name>void</name></type> <name>populateWorkingCopy</name><parameter_list>(<parameter><decl><type><name>MarkerFieldFilter</name></type> <name>copy</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>populateWorkingCopy</name></name><argument_list>(<argument><expr><name>copy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><operator>(</operator><operator>(</operator><name>SeverityAndDescriptionFieldFilter</name><operator>)</operator> <name>copy</name><operator>)</operator><operator>.</operator><name>selectedSeverities</name> <operator>=</operator> <name><name>this</name><operator>.</operator><name>selectedSeverities</name></name></expr>;</expr_stmt>

	}</block></function>

	<comment type="block">/*
	 * (non-Javadoc)
	 * 
	 * @see org.eclipse.ui.internal.provisional.views.markers.MarkerFieldFilter#saveSettings(org.eclipse.ui.IMemento)
	 */</comment>
	<function><specifier>public</specifier> <type><name>void</name></type> <name>saveSettings</name><parameter_list>(<parameter><decl><type><name>IMemento</name></type> <name>memento</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>saveSettings</name></name><argument_list>(<argument><expr><name>memento</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>memento</name><operator>.</operator><name>putInteger</name></name><argument_list>(<argument><expr><name>TAG_SELECTED_SEVERITIES</name></expr></argument>, <argument><expr><name>selectedSeverities</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	}</block></function>

	<comment type="block">/*
	 * (non-Javadoc)
	 * 
	 * @see org.eclipse.ui.internal.provisional.views.markers.MarkerFieldFilter#loadSettings(org.eclipse.ui.IMemento)
	 */</comment>
	<function><specifier>public</specifier> <type><name>void</name></type> <name>loadSettings</name><parameter_list>(<parameter><decl><type><name>IMemento</name></type> <name>memento</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>loadSettings</name></name><argument_list>(<argument><expr><name>memento</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>selectedSeverities</name> <operator>=</operator> <call><name><name>memento</name><operator>.</operator><name>getInteger</name></name><argument_list>(<argument><expr><name>TAG_SELECTED_SEVERITIES</name></expr></argument>)</argument_list></call>
				<operator>.</operator><call><name>intValue</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<comment type="block">/*
	 * (non-Javadoc)
	 * 
	 * @see org.eclipse.ui.internal.provisional.views.markers.DescriptionFieldFilter#loadLegacySettings(org.eclipse.ui.IMemento)
	 */</comment>
	<function><specifier>public</specifier> <type><name>void</name></type> <name>loadLegacySettings</name><parameter_list>(<parameter><decl><type><name>IMemento</name></type> <name>memento</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>loadLegacySettings</name></name><argument_list>(<argument><expr><name>memento</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>Integer</name></type> <name>severitySetting</name> <init>= <expr><call><name><name>memento</name>
				<operator>.</operator><name>getInteger</name></name><argument_list>(<argument><expr><name><name>ProblemFilter</name><operator>.</operator><name>TAG_SEVERITY</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<if>if <condition>(<expr><name>severitySetting</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
			<expr_stmt><expr><name>selectedSeverities</name> <operator>=</operator> <call><name><name>severitySetting</name><operator>.</operator><name>intValue</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>

	}</block></function>

	<comment type="block">/*
	 * (non-Javadoc)
	 * 
	 * @see org.eclipse.ui.internal.views.markers.DescriptionFieldFilter#initialize(org.eclipse.ui.views.markers.internal.ProblemFilter)
	 */</comment>
	<function><specifier>public</specifier> <type><name>void</name></type> <name>initialize</name><parameter_list>(<parameter><decl><type><name>ProblemFilter</name></type> <name>problemFilter</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>initialize</name></name><argument_list>(<argument><expr><name>problemFilter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if>if <condition>(<expr><call><name><name>problemFilter</name><operator>.</operator><name>getSeverity</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then>
			<block type="pseudo"><expr_stmt><expr><name>selectedSeverities</name> <operator>=</operator> <call><name><name>problemFilter</name><operator>.</operator><name>getSeverity</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></then></if>
	}</block></function>

}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="org.eclipse.ui.ide.markers.compatibility/src/org/eclipse/ui/ide/markers/compatibility/internal/TasksView.java" hash="b8539c431be7dcd0f0129b4a41a0a42d7707ff05"><comment type="block" format="javadoc">/*******************************************************************************
 * Copyright (c) 2008 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     IBM Corporation - initial API and implementation
 ******************************************************************************/</comment>

<package>package <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>ide</name><operator>.</operator><name>markers</name><operator>.</operator><name>compatibility</name><operator>.</operator><name>internal</name></name>;</package>

<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>ide</name><operator>.</operator><name>markers</name><operator>.</operator><name>compatibility</name><operator>.</operator><name>api</name><operator>.</operator><name>MarkerSupportView</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>ide</name><operator>.</operator><name>markers</name><operator>.</operator><name>compatibility</name><operator>.</operator><name>api</name><operator>.</operator><name>internal</name><operator>.</operator><name>MarkerSupportRegistry</name></name>;</import>

<comment type="block" format="javadoc">/**
 * TasksView is the ide view for showing tasks.
 * @since 3.4
 *
 */</comment>
<class><specifier>public</specifier> class <name>TasksView</name> <super><extends>extends <name>MarkerSupportView</name></extends></super> <block>{

	<comment type="block" format="javadoc">/**
	 * Create a new instance of the receiver.
	 */</comment>
	<constructor><specifier>public</specifier> <name>TasksView</name><parameter_list>()</parameter_list> <block>{
		<expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name><name>MarkerSupportRegistry</name><operator>.</operator><name>TASKS_GENERATOR</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
	}</block></constructor>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="org.eclipse.ui.ide.markers.compatibility/src/org/eclipse/ui/ide/markers/compatibility/internal/TodoFiltersContributionParameters.java" hash="488718ac7167e626bf3bcdbeb09dac1d04c71f39"><package>package <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>ide</name><operator>.</operator><name>markers</name><operator>.</operator><name>compatibility</name><operator>.</operator><name>internal</name></name>;</package>
<comment type="block" format="javadoc">/*******************************************************************************
 * Copyright (c) 2007 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     IBM Corporation - initial API and implementation
 ******************************************************************************/</comment>


<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashMap</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>ide</name><operator>.</operator><name>markers</name><operator>.</operator><name>compatibility</name><operator>.</operator><name>api</name><operator>.</operator><name>FiltersContributionParameters</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>ide</name><operator>.</operator><name>markers</name><operator>.</operator><name>compatibility</name><operator>.</operator><name>api</name><operator>.</operator><name>MarkerSupportConstants</name></name>;</import>

<comment type="block" format="javadoc">/**
 * TodoFiltersContributionParameters is the filter to just show TODOs.
 * @since 3.4
 *
 */</comment>
<class><specifier>public</specifier> class <name>TodoFiltersContributionParameters</name> <super><extends>extends
		<name>FiltersContributionParameters</name></extends></super> <block>{
	
	<decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><name>Map</name></type> <name>todoMap</name></decl>;</decl_stmt>
	<static>static <block>{
		<expr_stmt><expr><name>todoMap</name> <operator>=</operator> <operator>new</operator> <call><name>HashMap</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>todoMap</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>MarkerSupportConstants</name><operator>.</operator><name>CONTAINS_KEY</name></name></expr></argument>, <argument><expr><literal type="string">"TODO"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">//$NON-NLS-1$</comment>
	}</block></static>

	<comment type="block" format="javadoc">/**
	 * Return a new instance of the receiver.
	 */</comment>
	<constructor><specifier>public</specifier> <name>TodoFiltersContributionParameters</name><parameter_list>()</parameter_list> <block>{
		<expr_stmt><expr><call><name>super</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	}</block></constructor>

	<comment type="block">/* (non-Javadoc)
	 * @see org.eclipse.ui.internal.provisional.views.markers.api.FiltersContributionParameters#getParameterValues()
	 */</comment>
	<function><specifier>public</specifier> <type><name>Map</name></type> <name>getParameterValues</name><parameter_list>()</parameter_list> <block>{
		<return>return <expr><name>todoMap</name></expr>;</return>
	}</block></function>

}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="org.eclipse.ui.ide.markers.compatibility/src/org/eclipse/ui/ide/markers/compatibility/internal/ScopeArea.java" hash="9a6be221ac81c1ef9d952f0f256095abfb3998b0"><comment type="block" format="javadoc">/*******************************************************************************
 * Copyright (c) 2007 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     IBM Corporation - initial API and implementation
 ******************************************************************************/</comment>

<package>package <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>ide</name><operator>.</operator><name>markers</name><operator>.</operator><name>compatibility</name><operator>.</operator><name>internal</name></name>;</package>

<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>jface</name><operator>.</operator><name>dialogs</name><operator>.</operator><name>IDialogConstants</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>jface</name><operator>.</operator><name>window</name><operator>.</operator><name>Window</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>osgi</name><operator>.</operator><name>util</name><operator>.</operator><name>NLS</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>swt</name><operator>.</operator><name>SWT</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>swt</name><operator>.</operator><name>events</name><operator>.</operator><name>SelectionAdapter</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>swt</name><operator>.</operator><name>events</name><operator>.</operator><name>SelectionEvent</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>swt</name><operator>.</operator><name>layout</name><operator>.</operator><name>GridData</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>swt</name><operator>.</operator><name>widgets</name><operator>.</operator><name>Button</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>swt</name><operator>.</operator><name>widgets</name><operator>.</operator><name>Composite</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>IWorkingSet</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>PlatformUI</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>dialogs</name><operator>.</operator><name>IWorkingSetSelectionDialog</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>ide</name><operator>.</operator><name>markers</name><operator>.</operator><name>compatibility</name><operator>.</operator><name>api</name><operator>.</operator><name>MarkerFieldFilter</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>ide</name><operator>.</operator><name>markers</name><operator>.</operator><name>compatibility</name><operator>.</operator><name>api</name><operator>.</operator><name>internal</name><operator>.</operator><name>MarkerMessages</name></name>;</import>

<comment type="block" format="javadoc">/**
 * ScopeArea is the filter configuration area that handles the scope of the
 * filter.
 * 
 * @since 3.4
 * 
 */</comment>
<class>class <name>ScopeArea</name> <super><extends>extends <name>GroupFilterConfigurationArea</name></extends></super> <block>{

	<decl_stmt><decl><specifier>private</specifier> <type><name><name>Button</name><index>[]</index></name></type> <name>buttons</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>scope</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>private</specifier> <type><name>WorkingSetArea</name></type> <name>workingSetArea</name></decl>;</decl_stmt>

	<class><specifier>private</specifier> class <name>WorkingSetArea</name> <block>{

		<decl_stmt><decl><type><name>Button</name></type> <name>button</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>Button</name></type> <name>selectButton</name></decl>;</decl_stmt>

		<comment type="block" format="javadoc">/**
		 * Creates the working set filter selection widgets.
		 * 
		 * @param parent
		 *            the parent composite of the working set widgets
		 */</comment>
		<constructor><name>WorkingSetArea</name><parameter_list>(<parameter><decl><type><name>Composite</name></type> <name>parent</name></decl></parameter>)</parameter_list> <block>{
			<comment type="line">// radio button has to be part of main radio button group</comment>
			<expr_stmt><expr><name>button</name> <operator>=</operator> <call><name>createRadioButton</name><argument_list>(<argument><expr><name>parent</name></expr></argument>,
					<argument><expr><name><name>MarkerMessages</name><operator>.</operator><name>filtersDialog_noWorkingSet</name></name></expr></argument>,
					<argument><expr><name><name>MarkerFieldFilterGroup</name><operator>.</operator><name>ON_WORKING_SET</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<decl_stmt><decl><type><name>GridData</name></type> <name>data</name> <init>= <expr><operator>new</operator> <call><name>GridData</name><argument_list>(<argument><expr><name><name>GridData</name><operator>.</operator><name>FILL_HORIZONTAL</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name><name>button</name><operator>.</operator><name>setLayoutData</name></name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<comment type="line">// Composite composite = new Composite(parent, SWT.NONE);</comment>
			<comment type="line">// composite.setFont(parent.getFont());</comment>
			<comment type="line">// GridLayout layout = new GridLayout();</comment>
			<comment type="line">// Button radio = new Button(parent, SWT.RADIO);</comment>
			<comment type="line">// layout.marginWidth = radio.computeSize(SWT.DEFAULT,</comment>
			<comment type="line">// SWT.DEFAULT).x;</comment>
			<comment type="line">// layout.marginHeight = 0;</comment>
			<comment type="line">// radio.dispose();</comment>
			<comment type="line">// composite.setLayout(layout);</comment>
			<expr_stmt><expr><name>selectButton</name> <operator>=</operator> <operator>new</operator> <call><name>Button</name><argument_list>(<argument><expr><name>parent</name></expr></argument>, <argument><expr><name><name>SWT</name><operator>.</operator><name>PUSH</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>selectButton</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><name><name>MarkerMessages</name><operator>.</operator><name>filtersDialog_workingSetSelect</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			
			<decl_stmt><decl><type><name>GridData</name></type> <name>layoutData</name> <init>= <expr><operator>new</operator> <call><name>GridData</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><name><name>layoutData</name><operator>.</operator><name>horizontalIndent</name></name> <operator>=</operator> <name><name>IDialogConstants</name><operator>.</operator><name>INDENT</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>selectButton</name><operator>.</operator><name>setLayoutData</name></name><argument_list>(<argument><expr><name>layoutData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>selectButton</name><operator>.</operator><name>addSelectionListener</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>SelectionAdapter</name></super><argument_list>()</argument_list> <block>{
				<comment type="block">/*
				 * (non-Javadoc)
				 * 
				 * @see org.eclipse.swt.events.SelectionAdapter#widgetSelected(org.eclipse.swt.events.SelectionEvent)
				 */</comment>
				<function><specifier>public</specifier> <type><name>void</name></type> <name>widgetSelected</name><parameter_list>(<parameter><decl><type><name>SelectionEvent</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{

					<decl_stmt><decl><type><name>IWorkingSetSelectionDialog</name></type> <name>dialog</name> <init>= <expr><call><name><name>PlatformUI</name>
							<operator>.</operator><name>getWorkbench</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getWorkingSetManager</name><argument_list>()</argument_list></call>
							<operator>.</operator><call><name>createWorkingSetSelectionDialog</name><argument_list>(<argument><expr><call><name><name>button</name><operator>.</operator><name>getShell</name></name><argument_list>()</argument_list></call></expr></argument>,
									<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>IWorkingSet</name></type> <name>workingSet</name> <init>= <expr><call><name>getWorkingSet</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

					<if>if <condition>(<expr><name>workingSet</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
						<expr_stmt><expr><call><name><name>dialog</name><operator>.</operator><name>setSelection</name></name><argument_list>(<argument><expr><operator>new</operator> <name><name>IWorkingSet</name><index>[]</index></name> <block>{ <expr><name>workingSet</name></expr> }</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></then></if>
					<if>if <condition>(<expr><call><name><name>dialog</name><operator>.</operator><name>open</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>Window</name><operator>.</operator><name>OK</name></name></expr>)</condition><then> <block>{
						<decl_stmt><decl><type><name><name>IWorkingSet</name><index>[]</index></name></type> <name>result</name> <init>= <expr><call><name><name>dialog</name><operator>.</operator><name>getSelection</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
						<if>if <condition>(<expr><name>result</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <name><name>result</name><operator>.</operator><name>length</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
							<expr_stmt><expr><call><name>setWorkingSet</name><argument_list>(<argument><expr><name><name>result</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						}</block></then> <else>else <block>{
							<expr_stmt><expr><call><name>setWorkingSet</name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						}</block></else></if>
						<if>if <condition>(<expr><call><name>getSelection</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="boolean">false</literal></expr>)</condition><then> <block>{
							<expr_stmt><expr><call><name>setSelection</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						}</block></then></if>
					}</block></then></if>

				}</block></function>
			}</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		}</block></constructor>

		<comment type="block" format="javadoc">/**
		 * Returns wether or not a working set filter should be used
		 * 
		 * @return true=a working set filter should be used false=a working set
		 *         filter should not be used
		 */</comment>
		<function><type><name>boolean</name></type> <name>getSelection</name><parameter_list>()</parameter_list> <block>{
			<return>return <expr><call><name><name>button</name><operator>.</operator><name>getSelection</name></name><argument_list>()</argument_list></call></expr>;</return>
		}</block></function>

		<comment type="block" format="javadoc">/**
		 * Returns the selected working set filter or null if none is selected.
		 * 
		 * @return the selected working set filter or null if none is selected.
		 */</comment>
		<function><type><name>IWorkingSet</name></type> <name>getWorkingSet</name><parameter_list>()</parameter_list> <block>{
			<return>return <expr><operator>(</operator><name>IWorkingSet</name><operator>)</operator> <call><name><name>button</name><operator>.</operator><name>getData</name></name><argument_list>()</argument_list></call></expr>;</return>
		}</block></function>

		<comment type="block" format="javadoc">/**
		 * Sets the working set filter selection.
		 * 
		 * @param selected
		 *            true=a working set filter should be used false=no working
		 *            set filter should be used
		 */</comment>
		<function><type><name>void</name></type> <name>setSelection</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>selected</name></decl></parameter>)</parameter_list> <block>{
			<expr_stmt><expr><call><name><name>button</name><operator>.</operator><name>setSelection</name></name><argument_list>(<argument><expr><name>selected</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></function>

		<comment type="block" format="javadoc">/**
		 * Opens the working set selection dialog.
		 */</comment>
		<function><type><name>void</name></type> <name>selectPressed</name><parameter_list>()</parameter_list> <block>{
			<decl_stmt><decl><type><name>IWorkingSetSelectionDialog</name></type> <name>dialog</name> <init>= <expr><call><name><name>PlatformUI</name><operator>.</operator><name>getWorkbench</name></name><argument_list>()</argument_list></call>
					<operator>.</operator><call><name>getWorkingSetManager</name><argument_list>()</argument_list></call><operator>.</operator><call><name>createWorkingSetSelectionDialog</name><argument_list>(
							<argument><expr><call><name><name>button</name><operator>.</operator><name>getShell</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>IWorkingSet</name></type> <name>workingSet</name> <init>= <expr><call><name>getWorkingSet</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

			<if>if <condition>(<expr><name>workingSet</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
				<expr_stmt><expr><call><name><name>dialog</name><operator>.</operator><name>setSelection</name></name><argument_list>(<argument><expr><operator>new</operator> <name><name>IWorkingSet</name><index>[]</index></name> <block>{ <expr><name>workingSet</name></expr> }</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>
			<if>if <condition>(<expr><call><name><name>dialog</name><operator>.</operator><name>open</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>Window</name><operator>.</operator><name>OK</name></name></expr>)</condition><then> <block>{
				<decl_stmt><decl><type><name><name>IWorkingSet</name><index>[]</index></name></type> <name>result</name> <init>= <expr><call><name><name>dialog</name><operator>.</operator><name>getSelection</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
				<if>if <condition>(<expr><name>result</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <name><name>result</name><operator>.</operator><name>length</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
					<expr_stmt><expr><call><name>setWorkingSet</name><argument_list>(<argument><expr><name><name>result</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then> <else>else <block>{
					<expr_stmt><expr><call><name>setWorkingSet</name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></else></if>
				<if>if <condition>(<expr><call><name>getSelection</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="boolean">false</literal></expr>)</condition><then> <block>{
					<expr_stmt><expr><call><name>setSelection</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then></if>
			}</block></then></if>
		}</block></function>

		<comment type="block" format="javadoc">/**
		 * Sets the specified working set.
		 * 
		 * @param workingSet
		 *            the working set
		 */</comment>
		<function><type><name>void</name></type> <name>setWorkingSet</name><parameter_list>(<parameter><decl><type><name>IWorkingSet</name></type> <name>workingSet</name></decl></parameter>)</parameter_list> <block>{
			<expr_stmt><expr><call><name><name>button</name><operator>.</operator><name>setData</name></name><argument_list>(<argument><expr><name>workingSet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if>if <condition>(<expr><name>workingSet</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
				<expr_stmt><expr><call><name><name>button</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><call><name><name>NLS</name><operator>.</operator><name>bind</name></name><argument_list>(
						<argument><expr><name><name>MarkerMessages</name><operator>.</operator><name>filtersDialog_workingSet</name></name></expr></argument>, <argument><expr><call><name><name>workingSet</name>
								<operator>.</operator><name>getLabel</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then> <else>else <block>{
				<expr_stmt><expr><call><name><name>button</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><name><name>MarkerMessages</name><operator>.</operator><name>filtersDialog_noWorkingSet</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></else></if>
		}</block></function>

		<function><type><name>void</name></type> <name>setEnabled</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>enabled</name></decl></parameter>)</parameter_list> <block>{
			<expr_stmt><expr><call><name><name>button</name><operator>.</operator><name>setEnabled</name></name><argument_list>(<argument><expr><name>enabled</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>selectButton</name><operator>.</operator><name>setEnabled</name></name><argument_list>(<argument><expr><name>enabled</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></function>

		<comment type="block" format="javadoc">/**
		 * Return the radio button for the receiver.
		 * @return Button
		 */</comment>
		<function><type><name>Button</name></type> <name>getRadioButton</name><parameter_list>()</parameter_list> <block>{
			<return>return <expr><name>button</name></expr>;</return>
		}</block></function>

	}</block></class>

	<comment type="block" format="javadoc">/**
	 * Create a new instance of the receiver.
	 */</comment>
	<constructor><specifier>public</specifier> <name>ScopeArea</name><parameter_list>()</parameter_list> <block>{
		<expr_stmt><expr><call><name>super</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	}</block></constructor>

	<comment type="block">/*
	 * (non-Javadoc)
	 * 
	 * @see org.eclipse.ui.internal.provisional.views.markers.FilterConfigurationArea#applyToGroup(org.eclipse.ui.internal.provisional.views.markers.MarkerFieldFilterGroup)
	 */</comment>
	<function><specifier>public</specifier> <type><name>void</name></type> <name>applyToGroup</name><parameter_list>(<parameter><decl><type><name>MarkerFieldFilterGroup</name></type> <name>group</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><call><name><name>group</name><operator>.</operator><name>setScope</name></name><argument_list>(<argument><expr><name>scope</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>group</name><operator>.</operator><name>setWorkingSet</name></name><argument_list>(<argument><expr><call><name><name>workingSetArea</name><operator>.</operator><name>getWorkingSet</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
	}</block></function>

	<comment type="block">/*
	 * (non-Javadoc)
	 * 
	 * @see org.eclipse.ui.internal.provisional.views.markers.FilterConfigurationArea#createContents(org.eclipse.swt.widgets.Composite)
	 */</comment>
	<function><specifier>public</specifier> <type><name>void</name></type> <name>createContents</name><parameter_list>(<parameter><decl><type><name>Composite</name></type> <name>parent</name></decl></parameter>)</parameter_list> <block>{

		<expr_stmt><expr><name>buttons</name> <operator>=</operator> <operator>new</operator> <name><name>Button</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr>;</expr_stmt>

		<expr_stmt><expr><name><name>buttons</name><index>[<expr><name><name>MarkerFieldFilterGroup</name><operator>.</operator><name>ON_ANY</name></name></expr>]</index></name> <operator>=</operator> <call><name>createRadioButton</name><argument_list>(<argument><expr><name>parent</name></expr></argument>,
				<argument><expr><name><name>MarkerMessages</name><operator>.</operator><name>filtersDialog_anyResource</name></name></expr></argument>,
				<argument><expr><name><name>MarkerFieldFilterGroup</name><operator>.</operator><name>ON_ANY</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>buttons</name><index>[<expr><name><name>MarkerFieldFilterGroup</name><operator>.</operator><name>ON_ANY_IN_SAME_CONTAINER</name></name></expr>]</index></name> <operator>=</operator> <call><name>createRadioButton</name><argument_list>(
				<argument><expr><name>parent</name></expr></argument>, <argument><expr><name><name>MarkerMessages</name><operator>.</operator><name>filtersDialog_anyResourceInSameProject</name></name></expr></argument>,
				<argument><expr><name><name>MarkerFieldFilterGroup</name><operator>.</operator><name>ON_ANY_IN_SAME_CONTAINER</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>buttons</name><index>[<expr><name><name>MarkerFieldFilterGroup</name><operator>.</operator><name>ON_SELECTED_ONLY</name></name></expr>]</index></name> <operator>=</operator> <call><name>createRadioButton</name><argument_list>(
				<argument><expr><name>parent</name></expr></argument>, <argument><expr><name><name>MarkerMessages</name><operator>.</operator><name>filtersDialog_selectedResource</name></name></expr></argument>,
				<argument><expr><name><name>MarkerFieldFilterGroup</name><operator>.</operator><name>ON_SELECTED_ONLY</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>buttons</name><index>[<expr><name><name>MarkerFieldFilterGroup</name><operator>.</operator><name>ON_SELECTED_AND_CHILDREN</name></name></expr>]</index></name> <operator>=</operator> <call><name>createRadioButton</name><argument_list>(
				<argument><expr><name>parent</name></expr></argument>, <argument><expr><name><name>MarkerMessages</name><operator>.</operator><name>filtersDialog_selectedAndChildren</name></name></expr></argument>,
				<argument><expr><name><name>MarkerFieldFilterGroup</name><operator>.</operator><name>ON_SELECTED_AND_CHILDREN</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>workingSetArea</name> <operator>=</operator> <operator>new</operator> <call><name>WorkingSetArea</name><argument_list>(<argument><expr><name>parent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>buttons</name><index>[<expr><name><name>MarkerFieldFilterGroup</name><operator>.</operator><name>ON_WORKING_SET</name></name></expr>]</index></name> <operator>=</operator> <call><name><name>workingSetArea</name><operator>.</operator><name>getRadioButton</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Creates a radio button with the given parent and text.
	 * 
	 * @param parent
	 *            the parent composite
	 * @param text
	 *            the text for the check box
	 * @return the radio box button
	 */</comment>
	<function><specifier>protected</specifier> <type><name>Button</name></type> <name>createRadioButton</name><parameter_list>(<parameter><decl><type><name>Composite</name></type> <name>parent</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>text</name></decl></parameter>,
			<parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{
		<decl_stmt><decl><type><name>Button</name></type> <name>button</name> <init>= <expr><operator>new</operator> <call><name>Button</name><argument_list>(<argument><expr><name>parent</name></expr></argument>, <argument><expr><name><name>SWT</name><operator>.</operator><name>RADIO</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>button</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>button</name><operator>.</operator><name>setSelection</name></name><argument_list>(<argument><expr><name>value</name> <operator>==</operator> <name>scope</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>button</name><operator>.</operator><name>addSelectionListener</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>SelectionAdapter</name></super><argument_list>()</argument_list> <block>{

			<comment type="block">/*
			 * (non-Javadoc)
			 * 
			 * @see org.eclipse.swt.events.SelectionListener#widgetSelected(org.eclipse.swt.events.SelectionEvent)
			 */</comment>
			<function><specifier>public</specifier> <type><name>void</name></type> <name>widgetSelected</name><parameter_list>(<parameter><decl><type><name>SelectionEvent</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
				<expr_stmt><expr><name>scope</name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
			}</block></function>
		}</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>button</name></expr>;</return>
	}</block></function>

	<comment type="block">/*
	 * (non-Javadoc)
	 * 
	 * @see org.eclipse.ui.internal.provisional.views.markers.FilterConfigurationArea#getTitle()
	 */</comment>
	<function><specifier>public</specifier> <type><name>String</name></type> <name>getTitle</name><parameter_list>()</parameter_list> <block>{
		<return>return <expr><name><name>MarkerMessages</name><operator>.</operator><name>filtersDialog_scopeLabel</name></name></expr>;</return>
	}</block></function>

	<comment type="block">/*
	 * (non-Javadoc)
	 * 
	 * @see org.eclipse.ui.internal.provisional.views.markers.FilterConfigurationArea#initializeFromGroup(org.eclipse.ui.internal.provisional.views.markers.MarkerFieldFilterGroup)
	 */</comment>
	<function><specifier>public</specifier> <type><name>void</name></type> <name>initializeFromGroup</name><parameter_list>(<parameter><decl><type><name>MarkerFieldFilterGroup</name></type> <name>group</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><name><name>buttons</name><index>[<expr><name>scope</name></expr>]</index></name><operator>.</operator><call><name>setSelection</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>scope</name> <operator>=</operator> <call><name><name>group</name><operator>.</operator><name>getScope</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>buttons</name><index>[<expr><name>scope</name></expr>]</index></name><operator>.</operator><call><name>setSelection</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>workingSetArea</name><operator>.</operator><name>setWorkingSet</name></name><argument_list>(<argument><expr><call><name><name>group</name><operator>.</operator><name>getWorkingSet</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<comment type="block">/*
	 * (non-Javadoc)
	 * 
	 * @see org.eclipse.ui.internal.provisional.views.markers.api.FilterConfigurationArea#apply(org.eclipse.ui.internal.provisional.views.markers.api.MarkerFieldFilter)
	 */</comment>
	<function><specifier>public</specifier> <type><name>void</name></type> <name>apply</name><parameter_list>(<parameter><decl><type><name>MarkerFieldFilter</name></type> <name>filter</name></decl></parameter>)</parameter_list> <block>{
		<comment type="line">// Do nothing as this is a group level setting</comment>

	}</block></function>

	<comment type="block">/*
	 * (non-Javadoc)
	 * 
	 * @see org.eclipse.ui.internal.provisional.views.markers.api.FilterConfigurationArea#initialize(org.eclipse.ui.internal.provisional.views.markers.api.MarkerFieldFilter)
	 */</comment>
	<function><specifier>public</specifier> <type><name>void</name></type> <name>initialize</name><parameter_list>(<parameter><decl><type><name>MarkerFieldFilter</name></type> <name>filter</name></decl></parameter>)</parameter_list> <block>{
		<comment type="line">// Do nothing as this is a group level setting</comment>

	}</block></function>

}</block></class></unit>

<unit revision="0.9.5" language="Java" filename="org.eclipse.ui.ide.markers.compatibility/src/org/eclipse/ui/ide/markers/compatibility/internal/TypeFieldGroup.java" hash="d9e6b13b50e06e2ce3c077a48b759e97020d2b04"><comment type="block" format="javadoc">/*******************************************************************************
 * Copyright (c) 2007 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     IBM Corporation - initial API and implementation
 ******************************************************************************/</comment>

<package>package <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>ide</name><operator>.</operator><name>markers</name><operator>.</operator><name>compatibility</name><operator>.</operator><name>internal</name></name>;</package>

<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>core</name><operator>.</operator><name>resources</name><operator>.</operator><name>IMarker</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>core</name><operator>.</operator><name>runtime</name><operator>.</operator><name>CoreException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>swt</name><operator>.</operator><name>graphics</name><operator>.</operator><name>Image</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>views</name><operator>.</operator><name>markers</name><operator>.</operator><name>internal</name><operator>.</operator><name>AbstractField</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>views</name><operator>.</operator><name>markers</name><operator>.</operator><name>internal</name><operator>.</operator><name>MarkerMessages</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>views</name><operator>.</operator><name>markers</name><operator>.</operator><name>internal</name><operator>.</operator><name>MarkerType</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>views</name><operator>.</operator><name>markers</name><operator>.</operator><name>internal</name><operator>.</operator><name>TableComparator</name></name>;</import>

<comment type="block" format="javadoc">/**
 * TypeFieldGroup is the field used to group by type.
 * 
 * @since 3.3
 * 
 */</comment>
<class><specifier>public</specifier> class <name>TypeFieldGroup</name> <super><extends>extends <name>AbstractField</name></extends></super> <block>{

	<comment type="block">/*
	 * (non-Javadoc)
	 * 
	 * @see org.eclipse.ui.views.markers.internal.IField#getDescription()
	 */</comment>
	<function><specifier>public</specifier> <type><name>String</name></type> <name>getDescription</name><parameter_list>()</parameter_list> <block>{
		<return>return <expr><name><name>MarkerMessages</name><operator>.</operator><name>description_type</name></name></expr>;</return>
	}</block></function>

	<comment type="block">/*
	 * (non-Javadoc)
	 * 
	 * @see org.eclipse.ui.views.markers.internal.IField#getDescriptionImage()
	 */</comment>
	<function><specifier>public</specifier> <type><name>Image</name></type> <name>getDescriptionImage</name><parameter_list>()</parameter_list> <block>{
		<return>return <expr><literal type="null">null</literal></expr>;</return>
	}</block></function>

	<comment type="block">/*
	 * (non-Javadoc)
	 * 
	 * @see org.eclipse.ui.views.markers.internal.IField#getColumnHeaderText()
	 */</comment>
	<function><specifier>public</specifier> <type><name>String</name></type> <name>getColumnHeaderText</name><parameter_list>()</parameter_list> <block>{
		<return>return <expr><call><name>getDescription</name><argument_list>()</argument_list></call></expr>;</return>
	}</block></function>

	<comment type="block">/*
	 * (non-Javadoc)
	 * 
	 * @see org.eclipse.ui.views.markers.internal.IField#getColumnHeaderImage()
	 */</comment>
	<function><specifier>public</specifier> <type><name>Image</name></type> <name>getColumnHeaderImage</name><parameter_list>()</parameter_list> <block>{
		<return>return <expr><literal type="null">null</literal></expr>;</return>
	}</block></function>

	<comment type="block">/*
	 * (non-Javadoc)
	 * 
	 * @see org.eclipse.ui.views.markers.internal.IField#getValue(java.lang.Object)
	 */</comment>
	<function><specifier>public</specifier> <type><name>String</name></type> <name>getValue</name><parameter_list>(<parameter><decl><type><name>Object</name></type> <name>obj</name></decl></parameter>)</parameter_list> <block>{

		<decl_stmt><decl><type><name>String</name></type> <name>typeId</name></decl>;</decl_stmt>
		<try>try <block>{
			<expr_stmt><expr><name>typeId</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>IMarker</name><operator>)</operator> <name>obj</name><operator>)</operator><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>CoreException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
			<expr_stmt><expr><call><name><name>MarkerSupportInternalUtilities</name><operator>.</operator><name>handle</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><name><name>MarkerMessages</name><operator>.</operator><name>FieldCategory_Uncategorized</name></name></expr>;</return>
		}</block></catch></try>
		<decl_stmt><decl><type><name>MarkerType</name></type> <name>type</name> <init>= <expr><call><name><name>MarkerTypesModel</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>(<argument><expr><name>typeId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<return>return <expr><call><name><name>type</name><operator>.</operator><name>getLabel</name></name><argument_list>()</argument_list></call></expr>;</return>

	}</block></function>

	<comment type="block">/*
	 * (non-Javadoc)
	 * 
	 * @see org.eclipse.ui.views.markers.internal.IField#getImage(java.lang.Object)
	 */</comment>
	<function><specifier>public</specifier> <type><name>Image</name></type> <name>getImage</name><parameter_list>(<parameter><decl><type><name>Object</name></type> <name>obj</name></decl></parameter>)</parameter_list> <block>{
		<return>return <expr><literal type="null">null</literal></expr>;</return>
	}</block></function>

	<comment type="block">/*
	 * (non-Javadoc)
	 * 
	 * @see org.eclipse.ui.views.markers.internal.IField#compare(java.lang.Object,
	 *      java.lang.Object)
	 */</comment>
	<function><specifier>public</specifier> <type><name>int</name></type> <name>compare</name><parameter_list>(<parameter><decl><type><name>Object</name></type> <name>obj1</name></decl></parameter>, <parameter><decl><type><name>Object</name></type> <name>obj2</name></decl></parameter>)</parameter_list> <block>{
		<return>return <expr><call><name>getValue</name><argument_list>(<argument><expr><name>obj1</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>compareTo</name><argument_list>(<argument><expr><call><name>getValue</name><argument_list>(<argument><expr><name>obj2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
	}</block></function>

	<comment type="block">/*
	 * (non-Javadoc)
	 * 
	 * @see org.eclipse.ui.views.markers.internal.IField#getDefaultDirection()
	 */</comment>
	<function><specifier>public</specifier> <type><name>int</name></type> <name>getDefaultDirection</name><parameter_list>()</parameter_list> <block>{
		<return>return <expr><name><name>TableComparator</name><operator>.</operator><name>ASCENDING</name></name></expr>;</return>
	}</block></function>

	<comment type="block">/*
	 * (non-Javadoc)
	 * 
	 * @see org.eclipse.ui.views.markers.internal.IField#getPreferredWidth()
	 */</comment>
	<function><specifier>public</specifier> <type><name>int</name></type> <name>getPreferredWidth</name><parameter_list>()</parameter_list> <block>{
		<return>return <expr><literal type="number">200</literal></expr>;</return>
	}</block></function>

}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="org.eclipse.ui.ide.markers.compatibility/src/org/eclipse/ui/ide/markers/compatibility/internal/SortFieldContribution.java" hash="f2e42cc0b90d73fedaea8a251fd646de6ac840fe"><comment type="block" format="javadoc">/*******************************************************************************
 * Copyright (c) 2007 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     IBM Corporation - initial API and implementation
 ******************************************************************************/</comment>

<package>package <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>ide</name><operator>.</operator><name>markers</name><operator>.</operator><name>compatibility</name><operator>.</operator><name>internal</name></name>;</package>

<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>jface</name><operator>.</operator><name>action</name><operator>.</operator><name>ContributionItem</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>jface</name><operator>.</operator><name>action</name><operator>.</operator><name>IContributionItem</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>jface</name><operator>.</operator><name>action</name><operator>.</operator><name>Separator</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>swt</name><operator>.</operator><name>SWT</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>swt</name><operator>.</operator><name>widgets</name><operator>.</operator><name>Event</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>swt</name><operator>.</operator><name>widgets</name><operator>.</operator><name>Listener</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>swt</name><operator>.</operator><name>widgets</name><operator>.</operator><name>Menu</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>swt</name><operator>.</operator><name>widgets</name><operator>.</operator><name>MenuItem</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>ide</name><operator>.</operator><name>markers</name><operator>.</operator><name>compatibility</name><operator>.</operator><name>api</name><operator>.</operator><name>MarkerField</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>ide</name><operator>.</operator><name>markers</name><operator>.</operator><name>compatibility</name><operator>.</operator><name>api</name><operator>.</operator><name>internal</name><operator>.</operator><name>MarkerMessages</name></name>;</import>

<comment type="block" format="javadoc">/**
 * SortFieldContribution is the contribution that allows the user to choose
 * which field will become the primary sort field.
 * 
 * @since 3.4
 * 
 */</comment>
<class><specifier>public</specifier> class <name>SortFieldContribution</name> <super><extends>extends <name>MarkersContribution</name></extends></super> <block>{

	<comment type="block" format="javadoc">/**
	 * Create a new instance of the receiver.
	 */</comment>
	<constructor><specifier>public</specifier> <name>SortFieldContribution</name><parameter_list>()</parameter_list> <block>{
		<expr_stmt><expr><call><name>super</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	}</block></constructor>

	<comment type="block" format="javadoc">/**
	 * @param id
	 */</comment>
	<constructor><specifier>public</specifier> <name>SortFieldContribution</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>id</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></constructor>

	<comment type="block">/*
	 * (non-Javadoc)
	 * 
	 * @see org.eclipse.ui.actions.CompoundContributionItem#getContributionItems()
	 */</comment>
	<function><specifier>protected</specifier> <type><name><name>IContributionItem</name><index>[]</index></name></type> <name>getContributionItems</name><parameter_list>()</parameter_list> <block>{

		<decl_stmt><decl><type><name><name>MarkerField</name><index>[]</index></name></type> <name>fields</name> <init>= <expr><call><name>getView</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getBuilder</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getVisibleFields</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

		<if>if <condition>(<expr><name><name>fields</name><operator>.</operator><name>length</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then>
			<block type="pseudo"><return>return <expr><operator>new</operator> <name><name>IContributionItem</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</return></block></then></if>

		<decl_stmt><decl><type><name><name>IContributionItem</name><index>[]</index></name></type> <name>items</name> <init>= <expr><operator>new</operator> <name><name>IContributionItem</name><index>[<expr><name><name>fields</name><operator>.</operator><name>length</name></name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

		<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>fields</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
			<expr_stmt><expr><name><name>items</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>getContributionItem</name><argument_list>(<argument><expr><name><name>fields</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></for>

		<expr_stmt><expr><name><name>items</name><index>[<expr><name><name>fields</name><operator>.</operator><name>length</name></name></expr>]</index></name> <operator>=</operator> <operator>new</operator> <call><name>Separator</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>items</name><index>[<expr><name><name>fields</name><operator>.</operator><name>length</name></name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>getDirectionContribution</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

		<return>return <expr><name>items</name></expr>;</return>

	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Return the ascending/descending contriution.
	 * @return IContributionItem
	 */</comment>
	<function><specifier>private</specifier> <type><name>IContributionItem</name></type> <name>getDirectionContribution</name><parameter_list>()</parameter_list> <block>{
		<return>return <expr><operator>new</operator> <class><super><name>ContributionItem</name></super><argument_list>()</argument_list> <block>{

			<comment type="block">/*
			 * (non-Javadoc)
			 * 
			 * @see org.eclipse.jface.action.ContributionItem#fill(org.eclipse.swt.widgets.Menu,
			 *      int)
			 */</comment>
			<function><specifier>public</specifier> <type><name>void</name></type> <name>fill</name><parameter_list>(<parameter><decl><type><name>Menu</name></type> <name>menu</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>index</name></decl></parameter>)</parameter_list> <block>{
				<decl_stmt><decl><type><name>MenuItem</name></type> <name>item</name> <init>= <expr><operator>new</operator> <call><name>MenuItem</name><argument_list>(<argument><expr><name>menu</name></expr></argument>, <argument><expr><name><name>SWT</name><operator>.</operator><name>CHECK</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><call><name><name>item</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><name><name>MarkerMessages</name><operator>.</operator><name>sortDirectionAscending_text</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<decl_stmt><decl><type><specifier>final</specifier> <name>ExtendedMarkersView</name></type> <name>view</name> <init>= <expr><call><name>getView</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><call><name><name>item</name><operator>.</operator><name>addListener</name></name><argument_list>(<argument><expr><name><name>SWT</name><operator>.</operator><name>Selection</name></name></expr></argument>, <argument><expr><operator>new</operator> <class><super><name>Listener</name></super><argument_list>()</argument_list> <block>{
					<comment type="block">/*
					 * (non-Javadoc)
					 * 
					 * @see org.eclipse.swt.widgets.Listener#handleEvent(org.eclipse.swt.widgets.Event)
					 */</comment>
					<function><specifier>public</specifier> <type><name>void</name></type> <name>handleEvent</name><parameter_list>(<parameter><decl><type><name>Event</name></type> <name>event</name></decl></parameter>)</parameter_list> <block>{

						<if>if <condition>(<expr><name>view</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then>
							<block type="pseudo"><expr_stmt><expr><call><name><name>view</name><operator>.</operator><name>toggleSortDirection</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></then></if>
					}</block></function>
				}</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<if>if <condition>(<expr><name>view</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then>
					<block type="pseudo"><expr_stmt><expr><call><name><name>item</name><operator>.</operator><name>setSelection</name></name><argument_list>(<argument><expr><call><name><name>view</name><operator>.</operator><name>getSortAscending</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>

			}</block></function>

		}</block></class></expr>;</return>
	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Return the IContributionItem for field.
	 * 
	 * @param field
	 * @return IContributionItem
	 */</comment>
	<function><specifier>private</specifier> <type><name>IContributionItem</name></type> <name>getContributionItem</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>MarkerField</name></type> <name>field</name></decl></parameter>)</parameter_list> <block>{
		<return>return <expr><operator>new</operator> <class><super><name>ContributionItem</name></super><argument_list>()</argument_list> <block>{

			<comment type="block">/*
			 * (non-Javadoc)
			 * 
			 * @see org.eclipse.jface.action.ContributionItem#fill(org.eclipse.swt.widgets.Menu,
			 *      int)
			 */</comment>
			<function><specifier>public</specifier> <type><name>void</name></type> <name>fill</name><parameter_list>(<parameter><decl><type><name>Menu</name></type> <name>menu</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>index</name></decl></parameter>)</parameter_list> <block>{
				<decl_stmt><decl><type><name>MenuItem</name></type> <name>item</name> <init>= <expr><operator>new</operator> <call><name>MenuItem</name><argument_list>(<argument><expr><name>menu</name></expr></argument>, <argument><expr><name><name>SWT</name><operator>.</operator><name>RADIO</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>String</name></type> <name>title</name> <init>= <expr><call><name><name>field</name><operator>.</operator><name>getColumnHeaderText</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
				<if>if <condition>(<expr><call><name><name>title</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then>
					<block type="pseudo"><expr_stmt><expr><name>title</name> <operator>=</operator> <call><name><name>field</name><operator>.</operator><name>getColumnTooltipText</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></then></if>
				<expr_stmt><expr><call><name><name>item</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><name>title</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<decl_stmt><decl><type><name>ExtendedMarkersView</name></type> <name>view</name> <init>= <expr><call><name>getView</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><call><name><name>item</name><operator>.</operator><name>addListener</name></name><argument_list>(<argument><expr><name><name>SWT</name><operator>.</operator><name>Selection</name></name></expr></argument>,
						<argument><expr><call><name>getMenuItemListener</name><argument_list>(<argument><expr><name>field</name></expr></argument>, <argument><expr><name>view</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<if>if <condition>(<expr><name>view</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then>
					<block type="pseudo"><expr_stmt><expr><call><name><name>item</name><operator>.</operator><name>setSelection</name></name><argument_list>(<argument><expr><call><name><name>view</name><operator>.</operator><name>isPrimarySortField</name></name><argument_list>(<argument><expr><name>field</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>

			}</block></function>

			<comment type="block" format="javadoc">/**
			 * Return the menu item listener for selection of a field.
			 * 
			 * @param field
			 * @param view
			 * @return Listener
			 */</comment>
			<function><specifier>private</specifier> <type><name>Listener</name></type> <name>getMenuItemListener</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>MarkerField</name></type> <name>field</name></decl></parameter>,
					<parameter><decl><type><specifier>final</specifier> <name>ExtendedMarkersView</name></type> <name>view</name></decl></parameter>)</parameter_list> <block>{
				<return>return <expr><operator>new</operator> <class><super><name>Listener</name></super><argument_list>()</argument_list> <block>{
					<comment type="block">/*
					 * (non-Javadoc)
					 * 
					 * @see org.eclipse.swt.widgets.Listener#handleEvent(org.eclipse.swt.widgets.Event)
					 */</comment>
					<function><specifier>public</specifier> <type><name>void</name></type> <name>handleEvent</name><parameter_list>(<parameter><decl><type><name>Event</name></type> <name>event</name></decl></parameter>)</parameter_list> <block>{

						<decl_stmt><decl><type><name>MenuItem</name></type> <name>item</name> <init>= <expr><operator>(</operator><name>MenuItem</name><operator>)</operator> <name><name>event</name><operator>.</operator><name>widget</name></name></expr></init></decl>;</decl_stmt>

						<if>if <condition>(<expr><call><name><name>item</name><operator>.</operator><name>getSelection</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <name>view</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then>
							<block type="pseudo"><expr_stmt><expr><call><name><name>view</name><operator>.</operator><name>setPrimarySortField</name></name><argument_list>(<argument><expr><name>field</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
					}</block></function>
				}</block></class></expr>;</return>
			}</block></function>
		}</block></class></expr>;</return>
	}</block></function>

}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="org.eclipse.ui.ide.markers.compatibility/src/org/eclipse/ui/ide/markers/compatibility/api/FiltersContributionParameters.java" hash="0c8a7c921aa4de104941e39d69668e496b226f21"><comment type="block" format="javadoc">/*******************************************************************************
 * Copyright (c) 2007 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     IBM Corporation - initial API and implementation
 ******************************************************************************/</comment>

<package>package <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>ide</name><operator>.</operator><name>markers</name><operator>.</operator><name>compatibility</name><operator>.</operator><name>api</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>


<comment type="block" format="javadoc">/**
 * A MarkerFieldParameters is a class that specifies a Map of parameters
 * to be passed to a {@link MarkerFieldFilter}.
 * @since 3.4
 *
 */</comment>
<class><specifier>public</specifier> <specifier>abstract</specifier> class <name>FiltersContributionParameters</name> <block>{
	
	<comment type="block" format="javadoc">/**
	 * Returns a map keyed names for parameter values. The values should be 
	 * actual values that will be interpreted by the {@link MarkerFieldFilter}
	 * these parameters are designed for.
	 * 
	 * Note that these parameters will be sent to the MarkerFieldFilter for
	 * every visible {@link MarkerField} in a markers view.
	 * 
	 * 
	 * @return A map of the name of the parameter value (&lt;code&gt;String&lt;/code&gt;)
	 *         to the actual value of the parameter (&lt;code&gt;String&lt;/code&gt;).
	 */</comment>
	<function_decl><specifier>public</specifier> <specifier>abstract</specifier> <type><name>Map</name></type> <name>getParameterValues</name><parameter_list>()</parameter_list>;</function_decl>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="org.eclipse.ui.ide.markers.compatibility/src/org/eclipse/ui/ide/markers/compatibility/api/FilterConfigurationArea.java" hash="9380decdf54991f18e0f26101dc5505a185fadcc"><comment type="block" format="javadoc">/*******************************************************************************
 * Copyright (c) 2007 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     IBM Corporation - initial API and implementation
 ******************************************************************************/</comment>

<package>package <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>ide</name><operator>.</operator><name>markers</name><operator>.</operator><name>compatibility</name><operator>.</operator><name>api</name></name>;</package>

<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>jface</name><operator>.</operator><name>dialogs</name><operator>.</operator><name>Dialog</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>jface</name><operator>.</operator><name>dialogs</name><operator>.</operator><name>IDialogConstants</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>jface</name><operator>.</operator><name>resource</name><operator>.</operator><name>JFaceResources</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>swt</name><operator>.</operator><name>SWT</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>swt</name><operator>.</operator><name>graphics</name><operator>.</operator><name>FontMetrics</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>swt</name><operator>.</operator><name>graphics</name><operator>.</operator><name>GC</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>swt</name><operator>.</operator><name>graphics</name><operator>.</operator><name>Point</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>swt</name><operator>.</operator><name>layout</name><operator>.</operator><name>GridData</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>swt</name><operator>.</operator><name>widgets</name><operator>.</operator><name>Button</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>swt</name><operator>.</operator><name>widgets</name><operator>.</operator><name>Composite</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>swt</name><operator>.</operator><name>widgets</name><operator>.</operator><name>Control</name></name>;</import>

<comment type="block" format="javadoc">/**
 * FilterConfigurationArea is the area that the user can configure a filter in.
 * 
 * @since 3.4
 * 
 */</comment>
<class><specifier>public</specifier> <specifier>abstract</specifier> class <name>FilterConfigurationArea</name> <block>{

	<decl_stmt><decl><type><name>MarkerField</name></type> <name>field</name></decl>;</decl_stmt>

	<decl_stmt><decl><specifier>private</specifier> <type><name>FontMetrics</name></type> <name>fontMetrics</name></decl>;</decl_stmt>

	<comment type="block" format="javadoc">/**
	 * Apply the current settings to the filter.
	 * 
	 * @param filter
	 */</comment>
	<function_decl><specifier>public</specifier> <specifier>abstract</specifier> <type><name>void</name></type> <name>apply</name><parameter_list>(<parameter><decl><type><name>MarkerFieldFilter</name></type> <name>filter</name></decl></parameter>)</parameter_list>;</function_decl>

	<comment type="block" format="javadoc">/**
	 * Create the contents of the configuration area in the parent.
	 * 
	 * @param parent
	 */</comment>
	<function_decl><specifier>public</specifier> <specifier>abstract</specifier> <type><name>void</name></type> <name>createContents</name><parameter_list>(<parameter><decl><type><name>Composite</name></type> <name>parent</name></decl></parameter>)</parameter_list>;</function_decl>


	<comment type="block" format="javadoc">/**
	 * Return the {@link FontMetrics} for the receiver.
	 * @return {@link FontMetrics} or &lt;code&gt;null&lt;/code&gt; if {@link #initializeFontMetrics(Control)}
	 * has not been called.
	 */</comment>
	<function><specifier>protected</specifier> <type><name>FontMetrics</name></type> <name>getFontMetrics</name><parameter_list>()</parameter_list><block>{
		<return>return <expr><name>fontMetrics</name></expr>;</return>
	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Get the title for the receiver.
	 * 
	 * @return String
	 */</comment>
	<function><specifier>public</specifier> <type><name>String</name></type> <name>getTitle</name><parameter_list>()</parameter_list> <block>{
		<return>return <expr><call><name><name>field</name><operator>.</operator><name>getColumnHeaderText</name></name><argument_list>()</argument_list></call></expr>;</return>
	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Initialise {@link FontMetrics} for the receiver.
	 * 
	 * @param control
	 */</comment>
	<function><specifier>protected</specifier> <type><name>void</name></type> <name>initializeFontMetrics</name><parameter_list>(<parameter><decl><type><name>Control</name></type> <name>control</name></decl></parameter>)</parameter_list> <block>{
		<decl_stmt><decl><type><name>GC</name></type> <name>gc</name> <init>= <expr><operator>new</operator> <call><name>GC</name><argument_list>(<argument><expr><name>control</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>gc</name><operator>.</operator><name>setFont</name></name><argument_list>(<argument><expr><call><name><name>JFaceResources</name><operator>.</operator><name>getDialogFont</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>fontMetrics</name> <operator>=</operator> <call><name><name>gc</name><operator>.</operator><name>getFontMetrics</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>gc</name><operator>.</operator><name>dispose</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Initialise the receiver using the filter.
	 * 
	 * @param filter
	 */</comment>
	<function_decl><specifier>public</specifier> <specifier>abstract</specifier> <type><name>void</name></type> <name>initialize</name><parameter_list>(<parameter><decl><type><name>MarkerFieldFilter</name></type> <name>filter</name></decl></parameter>)</parameter_list>;</function_decl>
	
	<comment type="block" format="javadoc">/**
	 * Set the markerField for the receiver
	 * 
	 * @param markerField
	 */</comment>
	<function><specifier>public</specifier> <type><name>void</name></type> <name>setField</name><parameter_list>(<parameter><decl><type><name>MarkerField</name></type> <name>markerField</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><name>field</name> <operator>=</operator> <name>markerField</name></expr>;</expr_stmt>
	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Set the standard button data for the button.
	 * @param button
	 */</comment>
	<function><specifier>protected</specifier> <type><name>void</name></type> <name>setButtonLayoutData</name><parameter_list>(<parameter><decl><type><name>Button</name></type> <name>button</name></decl></parameter>)</parameter_list> <block>{
		<decl_stmt><decl><type><name>GridData</name></type> <name>data</name> <init>= <expr><operator>new</operator> <call><name>GridData</name><argument_list>(<argument><expr><name><name>GridData</name><operator>.</operator><name>HORIZONTAL_ALIGN_FILL</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>widthHint</name> <init>= <expr><call><name><name>Dialog</name><operator>.</operator><name>convertHorizontalDLUsToPixels</name></name><argument_list>(<argument><expr><call><name>getFontMetrics</name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><name><name>IDialogConstants</name><operator>.</operator><name>BUTTON_WIDTH</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>Point</name></type> <name>minSize</name> <init>= <expr><call><name><name>button</name><operator>.</operator><name>computeSize</name></name><argument_list>(<argument><expr><name><name>SWT</name><operator>.</operator><name>DEFAULT</name></name></expr></argument>, <argument><expr><name><name>SWT</name><operator>.</operator><name>DEFAULT</name></name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name><name>data</name><operator>.</operator><name>widthHint</name></name> <operator>=</operator> <call><name><name>Math</name><operator>.</operator><name>max</name></name><argument_list>(<argument><expr><name>widthHint</name></expr></argument>, <argument><expr><name><name>minSize</name><operator>.</operator><name>x</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>button</name><operator>.</operator><name>setLayoutData</name></name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Return the field for the receiver.
	 * @return MarkerField
	 */</comment>
	<function><specifier>public</specifier> <type><name>MarkerField</name></type> <name>getField</name><parameter_list>()</parameter_list> <block>{
		<return>return <expr><name>field</name></expr>;</return>
	}</block></function>

}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="org.eclipse.ui.ide.markers.compatibility/src/org/eclipse/ui/ide/markers/compatibility/api/MarkerFieldFilter.java" hash="e457c3b29099270c731cf17b645626aa9bc9338d"><comment type="block" format="javadoc">/*******************************************************************************
 * Copyright (c) 2007 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     IBM Corporation - initial API and implementation
 ******************************************************************************/</comment>

<package>package <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>ide</name><operator>.</operator><name>markers</name><operator>.</operator><name>compatibility</name><operator>.</operator><name>api</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>IMemento</name></name>;</import>

<comment type="block" format="javadoc">/**
 * A MarkerFieldFilter is a filter on a particular marker field.
 * @since 3.4
 *
 */</comment>
<class><specifier>public</specifier> <specifier>abstract</specifier> class <name>MarkerFieldFilter</name> <block>{
	
	<decl_stmt><decl><specifier>private</specifier> <type><name>MarkerField</name></type> <name>field</name></decl>;</decl_stmt>

	<comment type="block" format="javadoc">/**
	 * Return whether or not marker should be filtered by the receiver.
	 * @param item
	 * @return boolean &lt;code&gt;true&lt;/code&gt; if the marker should be shown.
	 */</comment>
	<function_decl><specifier>public</specifier> <specifier>abstract</specifier> <type><name>boolean</name></type> <name>select</name><parameter_list>(<parameter><decl><type><name>MarkerItem</name></type> <name>item</name></decl></parameter>)</parameter_list>;</function_decl>
	
	<comment type="block" format="javadoc">/**
	 * Initialise the receiver with the values in the values Map.
	 * @param values
	 * @see FiltersContributionParameters
	 */</comment>
	<function><specifier>public</specifier> <type><name>void</name></type> <name>initialize</name><parameter_list>(<parameter><decl><type><name>Map</name></type> <name>values</name></decl></parameter>)</parameter_list><block>{
		<comment type="line">//Do nothing by default</comment>
	}</block></function>
	
	<comment type="block" format="javadoc">/**
	 * Populate the working copy with the copy of whatever fields are required.
	 * @param copy
	 */</comment>
	<function><specifier>public</specifier> <type><name>void</name></type> <name>populateWorkingCopy</name><parameter_list>(<parameter><decl><type><name>MarkerFieldFilter</name></type> <name>copy</name></decl></parameter>)</parameter_list><block>{
		<expr_stmt><expr><name><name>copy</name><operator>.</operator><name>field</name></name> <operator>=</operator> <name><name>this</name><operator>.</operator><name>field</name></name></expr>;</expr_stmt>
	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Set the field for the receiver.
	 * @param markerField
	 */</comment>
	<function><specifier>public</specifier> <specifier>final</specifier> <type><name>void</name></type> <name>setField</name><parameter_list>(<parameter><decl><type><name>MarkerField</name></type> <name>markerField</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><name>field</name> <operator>=</operator> <name>markerField</name></expr>;</expr_stmt>
		
	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Get the field for the receiver.
	 * @return MarkerField
	 */</comment>
	<function><specifier>public</specifier> <specifier>final</specifier> <type><name>MarkerField</name></type> <name>getField</name><parameter_list>()</parameter_list> <block>{
		<return>return <expr><name>field</name></expr>;</return>
	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Get the id this was registered against.
	 * @return String
	 */</comment>
	<function><specifier>public</specifier> <type><name>String</name></type> <name>getID</name><parameter_list>()</parameter_list> <block>{
		<return>return <expr><call><name>getField</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getId</name><argument_list>()</argument_list></call></expr>;</return>
	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Save any of the relevant state for the receiver in the memento
	 * so that it can be used to restore the user settings.
	 * @param memento
	 * @see #loadSettings(IMemento)
	 */</comment>
	<function_decl><specifier>public</specifier> <specifier>abstract</specifier> <type><name>void</name></type> <name>saveSettings</name><parameter_list>(<parameter><decl><type><name>IMemento</name></type> <name>memento</name></decl></parameter>)</parameter_list> ;</function_decl>

	<comment type="block" format="javadoc">/**
	 * Load any settings for the receiver from the memento.
	 * @param memento
	 * @see #saveSettings(IMemento)
	 */</comment>
	<function_decl><specifier>public</specifier> <specifier>abstract</specifier> <type><name>void</name></type> <name>loadSettings</name><parameter_list>(<parameter><decl><type><name>IMemento</name></type> <name>memento</name></decl></parameter>)</parameter_list> ;</function_decl>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="org.eclipse.ui.ide.markers.compatibility/src/org/eclipse/ui/ide/markers/compatibility/api/MarkerField.java" hash="2f592990d4932fa99acdc012411c6e2c23e22ae1"><comment type="block" format="javadoc">/*******************************************************************************
 * Copyright (c) 2007 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     IBM Corporation - initial API and implementation
 ******************************************************************************/</comment>

<package>package <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>ide</name><operator>.</operator><name>markers</name><operator>.</operator><name>compatibility</name><operator>.</operator><name>api</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>net</name><operator>.</operator><name>URL</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>core</name><operator>.</operator><name>resources</name><operator>.</operator><name>IMarker</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>core</name><operator>.</operator><name>runtime</name><operator>.</operator><name>CoreException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>core</name><operator>.</operator><name>runtime</name><operator>.</operator><name>IConfigurationElement</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>jface</name><operator>.</operator><name>resource</name><operator>.</operator><name>ImageDescriptor</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>jface</name><operator>.</operator><name>viewers</name><operator>.</operator><name>ColumnViewer</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>jface</name><operator>.</operator><name>viewers</name><operator>.</operator><name>EditingSupport</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>swt</name><operator>.</operator><name>graphics</name><operator>.</operator><name>GC</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>swt</name><operator>.</operator><name>graphics</name><operator>.</operator><name>Image</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>swt</name><operator>.</operator><name>widgets</name><operator>.</operator><name>Control</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>ide</name><operator>.</operator><name>markers</name><operator>.</operator><name>compatibility</name><operator>.</operator><name>internal</name><operator>.</operator><name>MarkerEntry</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>ide</name><operator>.</operator><name>markers</name><operator>.</operator><name>compatibility</name><operator>.</operator><name>internal</name><operator>.</operator><name>MarkerSupportInternalUtilities</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>internal</name><operator>.</operator><name>ide</name><operator>.</operator><name>IDEWorkbenchPlugin</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>internal</name><operator>.</operator><name>util</name><operator>.</operator><name>BundleUtility</name></name>;</import>

<comment type="block" format="javadoc">/**
 * MarkerField is the abstract superclass of the definition of the content
 * providers for columns in a Markers View.
 * 
 * @since 3.4
 * 
 */</comment>
<class><specifier>public</specifier> <specifier>abstract</specifier> class <name>MarkerField</name> <block>{

	<decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>ATTRIBUTE_FILTER_CLASS</name> <init>= <expr><literal type="string">"filterClass"</literal></expr></init></decl>;</decl_stmt> <comment type="line">//$NON-NLS-1$</comment>
	<decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>ATTRIBUTE_FILTER_CONFIGURATION_CLASS</name> <init>= <expr><literal type="string">"filterConfigurationClass"</literal></expr></init></decl>;</decl_stmt> <comment type="line">//$NON-NLS-1$</comment>

	<decl_stmt><decl><type><name>IConfigurationElement</name></type> <name>configurationElement</name></decl>;</decl_stmt>

	<comment type="block" format="javadoc">/**
	 * Compare item1 and item2 for sorting purposes.
	 * 
	 * @param item1
	 * @param item2
	 * @return Either:
	 *         &lt;li&gt;a negative number if the value of item1 is less than the
	 *         value of item2 for this field.
	 *         &lt;li&gt;&lt;code&gt;0&lt;/code&gt; if the value of item1 and the value of
	 *         item2 are equal for this field.
	 *         &lt;li&gt;a positive number if the value of item1 is greater than the
	 *         value of item2 for this field.
	 */</comment>
	<function><specifier>public</specifier> <type><name>int</name></type> <name>compare</name><parameter_list>(<parameter><decl><type><name>MarkerItem</name></type> <name>item1</name></decl></parameter>, <parameter><decl><type><name>MarkerItem</name></type> <name>item2</name></decl></parameter>)</parameter_list> <block>{
		<return>return <expr><call><name>getValue</name><argument_list>(<argument><expr><name>item1</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>compareTo</name><argument_list>(<argument><expr><call><name>getValue</name><argument_list>(<argument><expr><name>item2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Generate the filter for the receiver from the configurationElement.
	 * 
	 * @return MarkerFieldFilter or &lt;code&gt;null&lt;/code&gt;.
	 */</comment>
	<function><specifier>public</specifier> <specifier>final</specifier> <type><name>MarkerFieldFilter</name></type> <name>generateFilter</name><parameter_list>()</parameter_list> <block>{
		<try>try <block>{
			<if>if <condition>(<expr><call><name><name>configurationElement</name><operator>.</operator><name>getAttribute</name></name><argument_list>(<argument><expr><name>ATTRIBUTE_FILTER_CLASS</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then>
				<block type="pseudo"><return>return <expr><literal type="null">null</literal></expr>;</return></block></then></if>
			<decl_stmt><decl><type><name>Object</name></type> <name>filter</name> <init>= <expr><call><name><name>IDEWorkbenchPlugin</name><operator>.</operator><name>createExtension</name></name><argument_list>(
					<argument><expr><name>configurationElement</name></expr></argument>, <argument><expr><name>ATTRIBUTE_FILTER_CLASS</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<if>if <condition>(<expr><name>filter</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then>
				<block type="pseudo"><return>return <expr><literal type="null">null</literal></expr>;</return></block></then></if>
			<decl_stmt><decl><type><name>MarkerFieldFilter</name></type> <name>fieldFilter</name> <init>= <expr><operator>(</operator><name>MarkerFieldFilter</name><operator>)</operator> <name>filter</name></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name><name>fieldFilter</name><operator>.</operator><name>setField</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><name>fieldFilter</name></expr>;</return>
		}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>CoreException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
			<expr_stmt><expr><call><name><name>MarkerSupportInternalUtilities</name><operator>.</operator><name>handle</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><literal type="null">null</literal></expr>;</return>
		}</block></catch></try>
	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Create a FilterConfigurationArea for the receiver.
	 * 
	 * @return FilterConfigurationArea or &lt;code&gt;null&lt;/code&gt;
	 */</comment>
	<function><specifier>public</specifier> <specifier>final</specifier> <type><name>FilterConfigurationArea</name></type> <name>generateFilterArea</name><parameter_list>()</parameter_list> <block>{
		<try>try <block>{
			<if>if <condition>(<expr><call><name><name>configurationElement</name>
					<operator>.</operator><name>getAttribute</name></name><argument_list>(<argument><expr><name>ATTRIBUTE_FILTER_CONFIGURATION_CLASS</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then>
				<block type="pseudo"><return>return <expr><literal type="null">null</literal></expr>;</return></block></then></if>
			<decl_stmt><decl><type><name>FilterConfigurationArea</name></type> <name>area</name> <init>= <expr><operator>(</operator><name>FilterConfigurationArea</name><operator>)</operator> <call><name><name>IDEWorkbenchPlugin</name>
					<operator>.</operator><name>createExtension</name></name><argument_list>(<argument><expr><name>configurationElement</name></expr></argument>,
							<argument><expr><name>ATTRIBUTE_FILTER_CONFIGURATION_CLASS</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<if>if <condition>(<expr><name>area</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then>
				<block type="pseudo"><expr_stmt><expr><call><name><name>area</name><operator>.</operator><name>setField</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
			<return>return <expr><name>area</name></expr>;</return>
		}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>CoreException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
			<expr_stmt><expr><call><name><name>MarkerSupportInternalUtilities</name><operator>.</operator><name>handle</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><literal type="null">null</literal></expr>;</return>
		}</block></catch></try>
	}</block></function>

	<comment type="block" format="javadoc">/**
	 * @return The image to be displayed in the column header for this field or
	 *         &lt;code&gt;null&lt;code&gt;.
	 */</comment>
	<function><specifier>public</specifier> <type><name>Image</name></type> <name>getColumnHeaderImage</name><parameter_list>()</parameter_list> <block>{
		<decl_stmt><decl><type><name>String</name></type> <name>path</name> <init>= <expr><call><name><name>configurationElement</name>
				<operator>.</operator><name>getAttribute</name></name><argument_list>(<argument><expr><name><name>MarkerSupportConstants</name><operator>.</operator><name>ATTRIBUTE_ICON</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if>if <condition>(<expr><name>path</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then>
			<block type="pseudo"><return>return <expr><literal type="null">null</literal></expr>;</return></block></then></if>
		<decl_stmt><decl><type><name>URL</name></type> <name>url</name> <init>= <expr><call><name><name>BundleUtility</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><call><name><name>configurationElement</name><operator>.</operator><name>getContributor</name></name><argument_list>()</argument_list></call>
				<operator>.</operator><call><name>getName</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if>if <condition>(<expr><name>url</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then>
			<block type="pseudo"><return>return <expr><literal type="null">null</literal></expr>;</return></block></then></if>
		<return>return <expr><call><name><name>IDEWorkbenchPlugin</name><operator>.</operator><name>getDefault</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getResourceManager</name><argument_list>()</argument_list></call>
				<operator>.</operator><call><name>createImageWithDefault</name><argument_list>(<argument><expr><call><name><name>ImageDescriptor</name><operator>.</operator><name>createFromURL</name></name><argument_list>(<argument><expr><name>url</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Return the text to be displayed in the column header for this field.
	 * 
	 * @return String
	 * @see #getColumnTooltipText() this is the default column tooltip text
	 */</comment>
	<function><specifier>public</specifier> <type><name>String</name></type> <name>getColumnHeaderText</name><parameter_list>()</parameter_list> <block>{
		<return>return <expr><call><name><name>configurationElement</name>
				<operator>.</operator><name>getAttribute</name></name><argument_list>(<argument><expr><name><name>MarkerSupportConstants</name><operator>.</operator><name>ATTRIBUTE_NAME</name></name></expr></argument>)</argument_list></call></expr>;</return>
	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Return the text for the column tooltip.
	 * 
	 * @return String
	 * @see #getColumnHeaderText()
	 */</comment>
	<function><specifier>public</specifier> <type><name>String</name></type> <name>getColumnTooltipText</name><parameter_list>()</parameter_list> <block>{
		<return>return <expr><call><name>getColumnHeaderText</name><argument_list>()</argument_list></call></expr>;</return>
	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Get the number of characters that should be reserved for the receiver.
	 * 
	 * @param control
	 *            the control to scale from
	 * @return int
	 */</comment>
	<function><specifier>public</specifier> <type><name>int</name></type> <name>getDefaultColumnWidth</name><parameter_list>(<parameter><decl><type><name>Control</name></type> <name>control</name></decl></parameter>)</parameter_list> <block>{
		<return>return <expr><literal type="number">15</literal> <operator>*</operator> <call><name>getFontWidth</name><argument_list>(<argument><expr><name>control</name></expr></argument>)</argument_list></call></expr>;</return>
	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Return the editing support for entries for this field. Return null
	 * if it cannot be in-line edited.
	 * @param viewer the viewer this will be applied to
	 * @return {@link EditingSupport} or &lt;code&gt;null&lt;/code&gt;.
	 */</comment>
	<function><specifier>public</specifier> <type><name>EditingSupport</name></type> <name>getEditingSupport</name><parameter_list>(<parameter><decl><type><name>ColumnViewer</name></type> <name>viewer</name></decl></parameter>)</parameter_list> <block>{
		<return>return <expr><literal type="null">null</literal></expr>;</return>
	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Determine the average width of font used by the control.
	 * 
	 * @param control
	 * @return int
	 */</comment>
	<function><specifier>public</specifier> <specifier>final</specifier> <type><name>int</name></type> <name>getFontWidth</name><parameter_list>(<parameter><decl><type><name>Control</name></type> <name>control</name></decl></parameter>)</parameter_list> <block>{
		<decl_stmt><decl><type><name>GC</name></type> <name>gc</name> <init>= <expr><operator>new</operator> <call><name>GC</name><argument_list>(<argument><expr><call><name><name>control</name><operator>.</operator><name>getDisplay</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>width</name> <init>= <expr><call><name><name>gc</name><operator>.</operator><name>getFontMetrics</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getAverageCharWidth</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>gc</name><operator>.</operator><name>dispose</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>width</name></expr>;</return>
	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Return the id for the receiver.
	 * 
	 * @return String
	 */</comment>
	<function><specifier>public</specifier> <type><name>String</name></type> <name>getId</name><parameter_list>()</parameter_list> <block>{
		<return>return <expr><call><name><name>configurationElement</name>
				<operator>.</operator><name>getAttribute</name></name><argument_list>(<argument><expr><name><name>MarkerSupportConstants</name><operator>.</operator><name>ATTRIBUTE_ID</name></name></expr></argument>)</argument_list></call></expr>;</return>
	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Return the image for the receiver. By default return &lt;code&gt;null&lt;/code&gt;.
	 * 
	 * @param item
	 * @return The image value of the object for this particular field to be
	 *         displayed to the user or &lt;code&gt;null&lt;code&gt;.
	 */</comment>
	<function><specifier>public</specifier> <type><name>Image</name></type> <name>getImage</name><parameter_list>(<parameter><decl><type><name>MarkerItem</name></type> <name>item</name></decl></parameter>)</parameter_list> <block>{
		<return>return <expr><literal type="null">null</literal></expr>;</return>
	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Return the value for a marker.
	 * 
	 * @param marker
	 * @return String
	 */</comment>
	<function><specifier>public</specifier> <type><name>String</name></type> <name>getMarkerValue</name><parameter_list>(<parameter><decl><type><name>IMarker</name></type> <name>marker</name></decl></parameter>)</parameter_list> <block>{
		<return>return <expr><call><name>getValue</name><argument_list>(<argument><expr><operator>new</operator> <call><name>MarkerEntry</name><argument_list>(<argument><expr><name>marker</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Get the severity of the element.
	 * 
	 * @param element
	 * @return int
	 * @see IMarker#SEVERITY_ERROR
	 * @see IMarker#SEVERITY_WARNING
	 * @see IMarker#SEVERITY_INFO
	 */</comment>
	<function><specifier>public</specifier> <specifier>final</specifier> <type><name>int</name></type> <name>getSeverity</name><parameter_list>(<parameter><decl><type><name>MarkerItem</name></type> <name>element</name></decl></parameter>)</parameter_list> <block>{
		<if>if <condition>(<expr><call><name><name>element</name><operator>.</operator><name>isConcrete</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
			<block type="pseudo"><return>return <expr><call><name><name>element</name><operator>.</operator><name>getAttributeValue</name></name><argument_list>(<argument><expr><name><name>IMarker</name><operator>.</operator><name>SEVERITY</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return></block></then></if>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	}</block></function>

	<comment type="block" format="javadoc">/**
	 * @param item
	 * @return The String value of the object for this particular field to be
	 *         displayed to the user.
	 */</comment>
	<function_decl><specifier>public</specifier> <specifier>abstract</specifier> <type><name>String</name></type> <name>getValue</name><parameter_list>(<parameter><decl><type><name>MarkerItem</name></type> <name>item</name></decl></parameter>)</parameter_list>;</function_decl>


	<comment type="block" format="javadoc">/**
	 * Set the configuration element used by the receiver.
	 * 
	 * @param element
	 */</comment>
	<function><specifier>public</specifier> <specifier>final</specifier> <type><name>void</name></type> <name>setConfigurationElement</name><parameter_list>(<parameter><decl><type><name>IConfigurationElement</name></type> <name>element</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><name>configurationElement</name> <operator>=</operator> <name>element</name></expr>;</expr_stmt>
	}</block></function>

}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="org.eclipse.ui.ide.markers.compatibility/src/org/eclipse/ui/ide/markers/compatibility/internal/QuickFixPage.java" hash="2b55414a254efe413bb8a53e423fd62d31b2e6bc"><comment type="block" format="javadoc">/*******************************************************************************
 * Copyright (c) 2007 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     IBM Corporation - initial API and implementation
 ******************************************************************************/</comment>

<package>package <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>ide</name><operator>.</operator><name>markers</name><operator>.</operator><name>compatibility</name><operator>.</operator><name>internal</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>reflect</name><operator>.</operator><name>InvocationTargetException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Collection</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>core</name><operator>.</operator><name>resources</name><operator>.</operator><name>IMarker</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>core</name><operator>.</operator><name>runtime</name><operator>.</operator><name>IProgressMonitor</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>jface</name><operator>.</operator><name>dialogs</name><operator>.</operator><name>Dialog</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>jface</name><operator>.</operator><name>dialogs</name><operator>.</operator><name>IDialogConstants</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>jface</name><operator>.</operator><name>operation</name><operator>.</operator><name>IRunnableWithProgress</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>jface</name><operator>.</operator><name>viewers</name><operator>.</operator><name>CheckStateChangedEvent</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>jface</name><operator>.</operator><name>viewers</name><operator>.</operator><name>CheckboxTableViewer</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>jface</name><operator>.</operator><name>viewers</name><operator>.</operator><name>ColumnWeightData</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>jface</name><operator>.</operator><name>viewers</name><operator>.</operator><name>ICheckStateListener</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>jface</name><operator>.</operator><name>viewers</name><operator>.</operator><name>ILabelProviderListener</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>jface</name><operator>.</operator><name>viewers</name><operator>.</operator><name>ISelection</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>jface</name><operator>.</operator><name>viewers</name><operator>.</operator><name>ISelectionChangedListener</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>jface</name><operator>.</operator><name>viewers</name><operator>.</operator><name>IStructuredContentProvider</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>jface</name><operator>.</operator><name>viewers</name><operator>.</operator><name>IStructuredSelection</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>jface</name><operator>.</operator><name>viewers</name><operator>.</operator><name>ITableLabelProvider</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>jface</name><operator>.</operator><name>viewers</name><operator>.</operator><name>LabelProvider</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>jface</name><operator>.</operator><name>viewers</name><operator>.</operator><name>ListViewer</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>jface</name><operator>.</operator><name>viewers</name><operator>.</operator><name>SelectionChangedEvent</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>jface</name><operator>.</operator><name>viewers</name><operator>.</operator><name>StructuredSelection</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>jface</name><operator>.</operator><name>viewers</name><operator>.</operator><name>TableLayout</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>jface</name><operator>.</operator><name>viewers</name><operator>.</operator><name>Viewer</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>jface</name><operator>.</operator><name>viewers</name><operator>.</operator><name>ViewerComparator</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>jface</name><operator>.</operator><name>wizard</name><operator>.</operator><name>WizardPage</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>osgi</name><operator>.</operator><name>util</name><operator>.</operator><name>NLS</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>swt</name><operator>.</operator><name>SWT</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>swt</name><operator>.</operator><name>events</name><operator>.</operator><name>SelectionAdapter</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>swt</name><operator>.</operator><name>events</name><operator>.</operator><name>SelectionEvent</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>swt</name><operator>.</operator><name>graphics</name><operator>.</operator><name>Image</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>swt</name><operator>.</operator><name>layout</name><operator>.</operator><name>FormAttachment</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>swt</name><operator>.</operator><name>layout</name><operator>.</operator><name>FormData</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>swt</name><operator>.</operator><name>layout</name><operator>.</operator><name>FormLayout</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>swt</name><operator>.</operator><name>layout</name><operator>.</operator><name>GridData</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>swt</name><operator>.</operator><name>layout</name><operator>.</operator><name>GridLayout</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>swt</name><operator>.</operator><name>widgets</name><operator>.</operator><name>Button</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>swt</name><operator>.</operator><name>widgets</name><operator>.</operator><name>Composite</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>swt</name><operator>.</operator><name>widgets</name><operator>.</operator><name>Label</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>swt</name><operator>.</operator><name>widgets</name><operator>.</operator><name>Table</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>swt</name><operator>.</operator><name>widgets</name><operator>.</operator><name>TableColumn</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>IMarkerResolution</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>IWorkbenchPage</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>IWorkbenchPartSite</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>IWorkbenchWindow</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>PlatformUI</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>ide</name><operator>.</operator><name>markers</name><operator>.</operator><name>compatibility</name><operator>.</operator><name>api</name><operator>.</operator><name>WorkbenchMarkerResolution</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>ide</name><operator>.</operator><name>markers</name><operator>.</operator><name>compatibility</name><operator>.</operator><name>api</name><operator>.</operator><name>internal</name><operator>.</operator><name>MarkerMessages</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>ide</name><operator>.</operator><name>markers</name><operator>.</operator><name>compatibility</name><operator>.</operator><name>api</name><operator>.</operator><name>internal</name><operator>.</operator><name>Util</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>statushandlers</name><operator>.</operator><name>StatusManager</name></name>;</import>

<comment type="block" format="javadoc">/**
 * QuickFixPage is a page for the quick fixes of a marker.
 * 
 * @since 3.4
 * 
 */</comment>
<class><specifier>public</specifier> class <name>QuickFixPage</name> <super><extends>extends <name>WizardPage</name></extends></super> <block>{

	<decl_stmt><decl><specifier>private</specifier> <type><name>Map</name></type> <name>resolutions</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>private</specifier> <type><name>ListViewer</name></type> <name>resolutionsList</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>private</specifier> <type><name>CheckboxTableViewer</name></type> <name>markersTable</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>private</specifier> <type><name>IWorkbenchPartSite</name></type> <name>site</name></decl>;</decl_stmt>

	<comment type="block" format="javadoc">/**
	 * Create a new instance of the receiver.
	 * 
	 * @param problemDescription
	 *            the description of the problem being fixed
	 * @param resolutions
	 *            {@link Map} with key of {@link IMarkerResolution} and value of
	 *            {@link Collection} of {@link IMarker}
	 * @param site
	 *            The IWorkbenchPartSite to show markers
	 */</comment>
	<constructor><specifier>public</specifier> <name>QuickFixPage</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>problemDescription</name></decl></parameter>, <parameter><decl><type><name>Map</name></type> <name>resolutions</name></decl></parameter>,
			<parameter><decl><type><name>IWorkbenchPartSite</name></type> <name>site</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>problemDescription</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>resolutions</name></name> <operator>=</operator> <name>resolutions</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>site</name></name> <operator>=</operator> <name>site</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>setTitle</name><argument_list>(<argument><expr><name><name>MarkerMessages</name><operator>.</operator><name>resolveMarkerAction_dialogTitle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>setMessage</name><argument_list>(<argument><expr><name>problemDescription</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></constructor>

	<function><specifier>public</specifier> <type><name>void</name></type> <name>createControl</name><parameter_list>(<parameter><decl><type><name>Composite</name></type> <name>parent</name></decl></parameter>)</parameter_list> <block>{

		<expr_stmt><expr><call><name>initializeDialogUnits</name><argument_list>(<argument><expr><name>parent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="line">// Create a new composite as there is the title bar seperator</comment>
		<comment type="line">// to deal with</comment>
		<decl_stmt><decl><type><name>Composite</name></type> <name>control</name> <init>= <expr><operator>new</operator> <call><name>Composite</name><argument_list>(<argument><expr><name>parent</name></expr></argument>, <argument><expr><name><name>SWT</name><operator>.</operator><name>NONE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>control</name><operator>.</operator><name>setLayoutData</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>GridData</name><argument_list>(<argument><expr><name><name>SWT</name><operator>.</operator><name>FILL</name></name></expr></argument>, <argument><expr><name><name>SWT</name><operator>.</operator><name>FILL</name></name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>setControl</name><argument_list>(<argument><expr><name>control</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<decl_stmt><decl><type><name>FormLayout</name></type> <name>layout</name> <init>= <expr><operator>new</operator> <call><name>FormLayout</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name><name>layout</name><operator>.</operator><name>marginHeight</name></name> <operator>=</operator> <call><name>convertVerticalDLUsToPixels</name><argument_list>(<argument><expr><name><name>IDialogConstants</name><operator>.</operator><name>VERTICAL_MARGIN</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>layout</name><operator>.</operator><name>marginWidth</name></name> <operator>=</operator> <call><name>convertHorizontalDLUsToPixels</name><argument_list>(<argument><expr><name><name>IDialogConstants</name><operator>.</operator><name>HORIZONTAL_MARGIN</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>layout</name><operator>.</operator><name>spacing</name></name> <operator>=</operator> <call><name>convertHorizontalDLUsToPixels</name><argument_list>(<argument><expr><name><name>IDialogConstants</name><operator>.</operator><name>HORIZONTAL_SPACING</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>control</name><operator>.</operator><name>setLayout</name></name><argument_list>(<argument><expr><name>layout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<decl_stmt><decl><type><name>Label</name></type> <name>resolutionsLabel</name> <init>= <expr><operator>new</operator> <call><name>Label</name><argument_list>(<argument><expr><name>control</name></expr></argument>, <argument><expr><name><name>SWT</name><operator>.</operator><name>NONE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>resolutionsLabel</name>
				<operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><name><name>MarkerMessages</name><operator>.</operator><name>MarkerResolutionDialog_Resolutions_List_Title</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name><name>resolutionsLabel</name><operator>.</operator><name>setLayoutData</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>FormData</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>createResolutionsList</name><argument_list>(<argument><expr><name>control</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<decl_stmt><decl><type><name>FormData</name></type> <name>listData</name> <init>= <expr><operator>new</operator> <call><name>FormData</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name><name>listData</name><operator>.</operator><name>top</name></name> <operator>=</operator> <operator>new</operator> <call><name>FormAttachment</name><argument_list>(<argument><expr><name>resolutionsLabel</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>listData</name><operator>.</operator><name>left</name></name> <operator>=</operator> <operator>new</operator> <call><name>FormAttachment</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>listData</name><operator>.</operator><name>right</name></name> <operator>=</operator> <operator>new</operator> <call><name>FormAttachment</name><argument_list>(<argument><expr><literal type="number">100</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>listData</name><operator>.</operator><name>height</name></name> <operator>=</operator> <call><name>convertHeightInCharsToPixels</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>resolutionsList</name><operator>.</operator><name>getControl</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>setLayoutData</name><argument_list>(<argument><expr><name>listData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<decl_stmt><decl><type><name>Label</name></type> <name>title</name> <init>= <expr><operator>new</operator> <call><name>Label</name><argument_list>(<argument><expr><name>control</name></expr></argument>, <argument><expr><name><name>SWT</name><operator>.</operator><name>NONE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>title</name>
				<operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><name><name>MarkerMessages</name><operator>.</operator><name>MarkerResolutionDialog_Problems_List_Title</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>FormData</name></type> <name>labelData</name> <init>= <expr><operator>new</operator> <call><name>FormData</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name><name>labelData</name><operator>.</operator><name>top</name></name> <operator>=</operator> <operator>new</operator> <call><name>FormAttachment</name><argument_list>(<argument><expr><call><name><name>resolutionsList</name><operator>.</operator><name>getControl</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>labelData</name><operator>.</operator><name>left</name></name> <operator>=</operator> <operator>new</operator> <call><name>FormAttachment</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>title</name><operator>.</operator><name>setLayoutData</name></name><argument_list>(<argument><expr><name>labelData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<decl_stmt><decl><type><name>Composite</name></type> <name>buttons</name> <init>= <expr><call><name>createTableButtons</name><argument_list>(<argument><expr><name>control</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>FormData</name></type> <name>buttonData</name> <init>= <expr><operator>new</operator> <call><name>FormData</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name><name>buttonData</name><operator>.</operator><name>top</name></name> <operator>=</operator> <operator>new</operator> <call><name>FormAttachment</name><argument_list>(<argument><expr><name>title</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>buttonData</name><operator>.</operator><name>right</name></name> <operator>=</operator> <operator>new</operator> <call><name>FormAttachment</name><argument_list>(<argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>buttonData</name><operator>.</operator><name>height</name></name> <operator>=</operator> <call><name>convertHeightInCharsToPixels</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>buttons</name><operator>.</operator><name>setLayoutData</name></name><argument_list>(<argument><expr><name>buttonData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>createMarkerTable</name><argument_list>(<argument><expr><name>control</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<decl_stmt><decl><type><name>FormData</name></type> <name>tableData</name> <init>= <expr><operator>new</operator> <call><name>FormData</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name><name>tableData</name><operator>.</operator><name>top</name></name> <operator>=</operator> <operator>new</operator> <call><name>FormAttachment</name><argument_list>(<argument><expr><name>buttons</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>SWT</name><operator>.</operator><name>TOP</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>tableData</name><operator>.</operator><name>left</name></name> <operator>=</operator> <operator>new</operator> <call><name>FormAttachment</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>tableData</name><operator>.</operator><name>bottom</name></name> <operator>=</operator> <operator>new</operator> <call><name>FormAttachment</name><argument_list>(<argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>tableData</name><operator>.</operator><name>right</name></name> <operator>=</operator> <operator>new</operator> <call><name>FormAttachment</name><argument_list>(<argument><expr><name>buttons</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>tableData</name><operator>.</operator><name>height</name></name> <operator>=</operator> <call><name>convertHeightInCharsToPixels</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>markersTable</name><operator>.</operator><name>getControl</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>setLayoutData</name><argument_list>(<argument><expr><name>tableData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name><name>Dialog</name><operator>.</operator><name>applyDialogFont</name></name><argument_list>(<argument><expr><name>control</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name><name>resolutionsList</name><operator>.</operator><name>setSelection</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>StructuredSelection</name><argument_list>(<argument><expr><call><name><name>resolutionsList</name>
				<operator>.</operator><name>getElementAt</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name><name>markersTable</name><operator>.</operator><name>setAllChecked</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Create the table buttons for the receiver.
	 * 
	 * @param control
	 * @return {@link Composite}
	 */</comment>
	<function><specifier>private</specifier> <type><name>Composite</name></type> <name>createTableButtons</name><parameter_list>(<parameter><decl><type><name>Composite</name></type> <name>control</name></decl></parameter>)</parameter_list> <block>{

		<decl_stmt><decl><type><name>Composite</name></type> <name>buttonComposite</name> <init>= <expr><operator>new</operator> <call><name>Composite</name><argument_list>(<argument><expr><name>control</name></expr></argument>, <argument><expr><name><name>SWT</name><operator>.</operator><name>NONE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>GridLayout</name></type> <name>layout</name> <init>= <expr><operator>new</operator> <call><name>GridLayout</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name><name>layout</name><operator>.</operator><name>marginWidth</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>layout</name><operator>.</operator><name>marginHeight</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>layout</name><operator>.</operator><name>horizontalSpacing</name></name> <operator>=</operator> <call><name>convertHorizontalDLUsToPixels</name><argument_list>(<argument><expr><name><name>IDialogConstants</name><operator>.</operator><name>HORIZONTAL_SPACING</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>layout</name><operator>.</operator><name>verticalSpacing</name></name> <operator>=</operator> <call><name>convertVerticalDLUsToPixels</name><argument_list>(<argument><expr><name><name>IDialogConstants</name><operator>.</operator><name>VERTICAL_SPACING</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>buttonComposite</name><operator>.</operator><name>setLayout</name></name><argument_list>(<argument><expr><name>layout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<decl_stmt><decl><type><name>Button</name></type> <name>selectAll</name> <init>= <expr><operator>new</operator> <call><name>Button</name><argument_list>(<argument><expr><name>buttonComposite</name></expr></argument>, <argument><expr><name><name>SWT</name><operator>.</operator><name>PUSH</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>selectAll</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><name><name>MarkerMessages</name><operator>.</operator><name>selectAllAction_title</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>selectAll</name><operator>.</operator><name>setLayoutData</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>GridData</name><argument_list>(<argument><expr><name><name>SWT</name><operator>.</operator><name>FILL</name></name></expr></argument>, <argument><expr><name><name>SWT</name><operator>.</operator><name>NONE</name></name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name><name>selectAll</name><operator>.</operator><name>addSelectionListener</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>SelectionAdapter</name></super><argument_list>()</argument_list> <block>{
			<comment type="block">/*
			 * (non-Javadoc)
			 * 
			 * @see org.eclipse.swt.events.SelectionAdapter#widgetSelected(org.eclipse.swt.events.SelectionEvent)
			 */</comment>
			<function><specifier>public</specifier> <type><name>void</name></type> <name>widgetSelected</name><parameter_list>(<parameter><decl><type><name>SelectionEvent</name></type> <name>arg0</name></decl></parameter>)</parameter_list> <block>{
				<expr_stmt><expr><call><name><name>markersTable</name><operator>.</operator><name>setAllChecked</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>setPageComplete</name><argument_list>(<argument><expr><operator>!</operator><call><name><name>resolutionsList</name><operator>.</operator><name>getSelection</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>isEmpty</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></function>
		}</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<decl_stmt><decl><type><name>Button</name></type> <name>deselectAll</name> <init>= <expr><operator>new</operator> <call><name>Button</name><argument_list>(<argument><expr><name>buttonComposite</name></expr></argument>, <argument><expr><name><name>SWT</name><operator>.</operator><name>PUSH</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>deselectAll</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><name><name>MarkerMessages</name><operator>.</operator><name>filtersDialog_deselectAll</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>deselectAll</name>
				<operator>.</operator><name>setLayoutData</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>GridData</name><argument_list>(<argument><expr><name><name>SWT</name><operator>.</operator><name>FILL</name></name></expr></argument>, <argument><expr><name><name>SWT</name><operator>.</operator><name>NONE</name></name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name><name>deselectAll</name><operator>.</operator><name>addSelectionListener</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>SelectionAdapter</name></super><argument_list>()</argument_list> <block>{
			<comment type="block">/*
			 * (non-Javadoc)
			 * 
			 * @see org.eclipse.swt.events.SelectionAdapter#widgetSelected(org.eclipse.swt.events.SelectionEvent)
			 */</comment>
			<function><specifier>public</specifier> <type><name>void</name></type> <name>widgetSelected</name><parameter_list>(<parameter><decl><type><name>SelectionEvent</name></type> <name>arg0</name></decl></parameter>)</parameter_list> <block>{
				<expr_stmt><expr><call><name><name>markersTable</name><operator>.</operator><name>setAllChecked</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>setPageComplete</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></function>
		}</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<return>return <expr><name>buttonComposite</name></expr>;</return>
	}</block></function>

	<comment type="block" format="javadoc">/**
	 * @param control
	 */</comment>
	<function><specifier>private</specifier> <type><name>void</name></type> <name>createResolutionsList</name><parameter_list>(<parameter><decl><type><name>Composite</name></type> <name>control</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><name>resolutionsList</name> <operator>=</operator> <operator>new</operator> <call><name>ListViewer</name><argument_list>(<argument><expr><name>control</name></expr></argument>, <argument><expr><name><name>SWT</name><operator>.</operator><name>BORDER</name></name> <operator>|</operator> <name><name>SWT</name><operator>.</operator><name>SINGLE</name></name>
				<operator>|</operator> <name><name>SWT</name><operator>.</operator><name>V_SCROLL</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>resolutionsList</name><operator>.</operator><name>setContentProvider</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>IStructuredContentProvider</name></super><argument_list>()</argument_list> <block>{
			<comment type="block">/*
			 * (non-Javadoc)
			 * 
			 * @see org.eclipse.jface.viewers.IStructuredContentProvider#getElements(java.lang.Object)
			 */</comment>
			<function><specifier>public</specifier> <type><name><name>Object</name><index>[]</index></name></type> <name>getElements</name><parameter_list>(<parameter><decl><type><name>Object</name></type> <name>inputElement</name></decl></parameter>)</parameter_list> <block>{
				<return>return <expr><call><name><name>resolutions</name><operator>.</operator><name>keySet</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>toArray</name><argument_list>()</argument_list></call></expr>;</return>
			}</block></function>

			<comment type="block">/*
			 * (non-Javadoc)
			 * 
			 * @see org.eclipse.jface.viewers.IContentProvider#dispose()
			 */</comment>
			<function><specifier>public</specifier> <type><name>void</name></type> <name>dispose</name><parameter_list>()</parameter_list> <block>{

			}</block></function>

			<comment type="block">/*
			 * (non-Javadoc)
			 * 
			 * @see org.eclipse.jface.viewers.IContentProvider#inputChanged(org.eclipse.jface.viewers.Viewer,
			 *      java.lang.Object, java.lang.Object)
			 */</comment>
			<function><specifier>public</specifier> <type><name>void</name></type> <name>inputChanged</name><parameter_list>(<parameter><decl><type><name>Viewer</name></type> <name>viewer</name></decl></parameter>, <parameter><decl><type><name>Object</name></type> <name>oldInput</name></decl></parameter>,
					<parameter><decl><type><name>Object</name></type> <name>newInput</name></decl></parameter>)</parameter_list> <block>{

			}</block></function>
		}</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name><name>resolutionsList</name><operator>.</operator><name>setLabelProvider</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>LabelProvider</name></super><argument_list>()</argument_list> <block>{
			<comment type="block">/*
			 * (non-Javadoc)
			 * 
			 * @see org.eclipse.jface.viewers.LabelProvider#getText(java.lang.Object)
			 */</comment>
			<function><specifier>public</specifier> <type><name>String</name></type> <name>getText</name><parameter_list>(<parameter><decl><type><name>Object</name></type> <name>element</name></decl></parameter>)</parameter_list> <block>{
				<return>return <expr><operator>(</operator><operator>(</operator><name>IMarkerResolution</name><operator>)</operator> <name>element</name><operator>)</operator><operator>.</operator><call><name>getLabel</name><argument_list>()</argument_list></call></expr>;</return>
			}</block></function>
		}</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name><name>resolutionsList</name><operator>.</operator><name>setInput</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name><name>resolutionsList</name><operator>.</operator><name>setComparator</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>ViewerComparator</name></super><argument_list>()</argument_list> <block>{
			<comment type="block">/*
			 * (non-Javadoc)
			 * 
			 * @see org.eclipse.jface.viewers.ViewerComparator#compare(org.eclipse.jface.viewers.Viewer,
			 *      java.lang.Object, java.lang.Object)
			 */</comment>
			<function><specifier>public</specifier> <type><name>int</name></type> <name>compare</name><parameter_list>(<parameter><decl><type><name>Viewer</name></type> <name>viewer</name></decl></parameter>, <parameter><decl><type><name>Object</name></type> <name>e1</name></decl></parameter>, <parameter><decl><type><name>Object</name></type> <name>e2</name></decl></parameter>)</parameter_list> <block>{
				<return>return <expr><operator>(</operator><operator>(</operator><name>IMarkerResolution</name><operator>)</operator> <name>e1</name><operator>)</operator><operator>.</operator><call><name>getLabel</name><argument_list>()</argument_list></call><operator>.</operator><call><name>compareTo</name><argument_list>(
						<argument><expr><operator>(</operator><operator>(</operator><name>IMarkerResolution</name><operator>)</operator> <name>e1</name><operator>)</operator><operator>.</operator><call><name>getLabel</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
			}</block></function>
		}</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name><name>resolutionsList</name>
				<operator>.</operator><name>addSelectionChangedListener</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>ISelectionChangedListener</name></super><argument_list>()</argument_list> <block>{
					<comment type="block">/*
					 * (non-Javadoc)
					 * 
					 * @see org.eclipse.jface.viewers.ISelectionChangedListener#selectionChanged(org.eclipse.jface.viewers.SelectionChangedEvent)
					 */</comment>
					<function><specifier>public</specifier> <type><name>void</name></type> <name>selectionChanged</name><parameter_list>(<parameter><decl><type><name>SelectionChangedEvent</name></type> <name>event</name></decl></parameter>)</parameter_list> <block>{

						<expr_stmt><expr><call><name><name>markersTable</name><operator>.</operator><name>refresh</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

						<decl_stmt><decl><type><name>IWorkbenchWindow</name></type> <name>window</name> <init>= <expr><call><name><name>PlatformUI</name><operator>.</operator><name>getWorkbench</name></name><argument_list>()</argument_list></call>
								<operator>.</operator><call><name>getActiveWorkbenchWindow</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
						<if>if <condition>(<expr><name>window</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then>
							<block type="pseudo"><return>return;</return></block></then></if>
						<decl_stmt><decl><type><name>IWorkbenchPage</name></type> <name>page</name> <init>= <expr><call><name><name>window</name><operator>.</operator><name>getActivePage</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
						<if>if <condition>(<expr><name>page</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then>
							<block type="pseudo"><return>return;</return></block></then></if>

					}</block></function>

				}</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Create the table that shows the markers.
	 * 
	 * @param control
	 */</comment>
	<function><specifier>private</specifier> <type><name>void</name></type> <name>createMarkerTable</name><parameter_list>(<parameter><decl><type><name>Composite</name></type> <name>control</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><name>markersTable</name> <operator>=</operator> <call><name><name>CheckboxTableViewer</name><operator>.</operator><name>newCheckList</name></name><argument_list>(<argument><expr><name>control</name></expr></argument>, <argument><expr><name><name>SWT</name><operator>.</operator><name>BORDER</name></name>
				<operator>|</operator> <name><name>SWT</name><operator>.</operator><name>V_SCROLL</name></name> <operator>|</operator> <name><name>SWT</name><operator>.</operator><name>SINGLE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>createTableColumns</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name><name>markersTable</name><operator>.</operator><name>setContentProvider</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>IStructuredContentProvider</name></super><argument_list>()</argument_list> <block>{
			<comment type="block">/*
			 * (non-Javadoc)
			 * 
			 * @see org.eclipse.jface.viewers.IContentProvider#dispose()
			 */</comment>
			<function><specifier>public</specifier> <type><name>void</name></type> <name>dispose</name><parameter_list>()</parameter_list> <block>{

			}</block></function>

			<comment type="block">/*
			 * (non-Javadoc)
			 * 
			 * @see org.eclipse.jface.viewers.IStructuredContentProvider#getElements(java.lang.Object)
			 */</comment>
			<function><specifier>public</specifier> <type><name><name>Object</name><index>[]</index></name></type> <name>getElements</name><parameter_list>(<parameter><decl><type><name>Object</name></type> <name>inputElement</name></decl></parameter>)</parameter_list> <block>{
				<decl_stmt><decl><type><name>IMarkerResolution</name></type> <name>selected</name> <init>= <expr><call><name>getSelectedResolution</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
				<if>if <condition>(<expr><name>selected</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
					<return>return <expr><operator>new</operator> <name><name>Object</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</return>
				}</block></then></if>

				<if>if <condition>(<expr><call><name><name>resolutions</name><operator>.</operator><name>containsKey</name></name><argument_list>(<argument><expr><name>selected</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
					<return>return <expr><operator>(</operator><operator>(</operator><name>Collection</name><operator>)</operator> <call><name><name>resolutions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>selected</name></expr></argument>)</argument_list></call><operator>)</operator><operator>.</operator><call><name>toArray</name><argument_list>()</argument_list></call></expr>;</return>
				}</block></then></if>
				<return>return <expr><name><name>MarkerSupportInternalUtilities</name><operator>.</operator><name>EMPTY_MARKER_ARRAY</name></name></expr>;</return>
			}</block></function>

			<comment type="block">/*
			 * (non-Javadoc)
			 * 
			 * @see org.eclipse.jface.viewers.IContentProvider#inputChanged(org.eclipse.jface.viewers.Viewer,
			 *      java.lang.Object, java.lang.Object)
			 */</comment>
			<function><specifier>public</specifier> <type><name>void</name></type> <name>inputChanged</name><parameter_list>(<parameter><decl><type><name>Viewer</name></type> <name>viewer</name></decl></parameter>, <parameter><decl><type><name>Object</name></type> <name>oldInput</name></decl></parameter>,
					<parameter><decl><type><name>Object</name></type> <name>newInput</name></decl></parameter>)</parameter_list> <block>{

			}</block></function>
		}</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name><name>markersTable</name><operator>.</operator><name>setLabelProvider</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>ITableLabelProvider</name></super><argument_list>()</argument_list> <block>{

			<comment type="block">/*
			 * (non-Javadoc)
			 * 
			 * @see org.eclipse.jface.viewers.ITableLabelProvider#getColumnImage(java.lang.Object,
			 *      int)
			 */</comment>
			<function><specifier>public</specifier> <type><name>Image</name></type> <name>getColumnImage</name><parameter_list>(<parameter><decl><type><name>Object</name></type> <name>element</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>columnIndex</name></decl></parameter>)</parameter_list> <block>{
				<if>if <condition>(<expr><name>columnIndex</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then>
					<block type="pseudo"><return>return <expr><call><name><name>Util</name><operator>.</operator><name>getImage</name></name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>IMarker</name><operator>)</operator> <name>element</name><operator>)</operator><operator>.</operator><call><name>getAttribute</name><argument_list>(
							<argument><expr><name><name>IMarker</name><operator>.</operator><name>SEVERITY</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block></then></if>
				<return>return <expr><literal type="null">null</literal></expr>;</return>
			}</block></function>

			<comment type="block">/*
			 * (non-Javadoc)
			 * 
			 * @see org.eclipse.jface.viewers.ITableLabelProvider#getColumnText(java.lang.Object,
			 *      int)
			 */</comment>
			<function><specifier>public</specifier> <type><name>String</name></type> <name>getColumnText</name><parameter_list>(<parameter><decl><type><name>Object</name></type> <name>element</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>columnIndex</name></decl></parameter>)</parameter_list> <block>{
				<if>if <condition>(<expr><name>columnIndex</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then>
					<block type="pseudo"><return>return <expr><call><name><name>Util</name><operator>.</operator><name>getResourceName</name></name><argument_list>(<argument><expr><operator>(</operator><name>IMarker</name><operator>)</operator> <name>element</name></expr></argument>)</argument_list></call></expr>;</return></block></then></if>
				<decl_stmt><decl><type><name>int</name></type> <name>line</name> <init>= <expr><operator>(</operator><operator>(</operator><name>IMarker</name><operator>)</operator> <name>element</name><operator>)</operator><operator>.</operator><call><name>getAttribute</name><argument_list>(
						<argument><expr><name><name>IMarker</name><operator>.</operator><name>LINE_NUMBER</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<if>if <condition>(<expr><name>line</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
					<return>return <expr><name><name>MarkerMessages</name><operator>.</operator><name>Unknown</name></name></expr>;</return>
				}</block></then></if>
				<return>return <expr><call><name><name>NLS</name><operator>.</operator><name>bind</name></name><argument_list>(<argument><expr><name><name>MarkerMessages</name><operator>.</operator><name>label_lineNumber</name></name></expr></argument>, <argument><expr><call><name><name>Integer</name>
						<operator>.</operator><name>toString</name></name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
			}</block></function>

			<comment type="block">/*
			 * (non-Javadoc)
			 * 
			 * @see org.eclipse.jface.viewers.IBaseLabelProvider#addListener(org.eclipse.jface.viewers.ILabelProviderListener)
			 */</comment>
			<function><specifier>public</specifier> <type><name>void</name></type> <name>addListener</name><parameter_list>(<parameter><decl><type><name>ILabelProviderListener</name></type> <name>listener</name></decl></parameter>)</parameter_list> <block>{
				<comment type="line">// do nothing</comment>

			}</block></function>

			<comment type="block">/*
			 * (non-Javadoc)
			 * 
			 * @see org.eclipse.jface.viewers.IBaseLabelProvider#dispose()
			 */</comment>
			<function><specifier>public</specifier> <type><name>void</name></type> <name>dispose</name><parameter_list>()</parameter_list> <block>{
				<comment type="line">// do nothing</comment>

			}</block></function>

			<comment type="block">/*
			 * (non-Javadoc)
			 * 
			 * @see org.eclipse.jface.viewers.IBaseLabelProvider#isLabelProperty(java.lang.Object,
			 *      java.lang.String)
			 */</comment>
			<function><specifier>public</specifier> <type><name>boolean</name></type> <name>isLabelProperty</name><parameter_list>(<parameter><decl><type><name>Object</name></type> <name>element</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>property</name></decl></parameter>)</parameter_list> <block>{
				<return>return <expr><literal type="boolean">false</literal></expr>;</return>
			}</block></function>

			<comment type="block">/*
			 * (non-Javadoc)
			 * 
			 * @see org.eclipse.jface.viewers.IBaseLabelProvider#removeListener(org.eclipse.jface.viewers.ILabelProviderListener)
			 */</comment>
			<function><specifier>public</specifier> <type><name>void</name></type> <name>removeListener</name><parameter_list>(<parameter><decl><type><name>ILabelProviderListener</name></type> <name>listener</name></decl></parameter>)</parameter_list> <block>{
				<comment type="line">// do nothing</comment>

			}</block></function>
		}</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name><name>markersTable</name><operator>.</operator><name>addCheckStateListener</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>ICheckStateListener</name></super><argument_list>()</argument_list> <block>{
			<comment type="block">/*
			 * (non-Javadoc)
			 * 
			 * @see org.eclipse.jface.viewers.ICheckStateListener#checkStateChanged(org.eclipse.jface.viewers.CheckStateChangedEvent)
			 */</comment>
			<function><specifier>public</specifier> <type><name>void</name></type> <name>checkStateChanged</name><parameter_list>(<parameter><decl><type><name>CheckStateChangedEvent</name></type> <name>event</name></decl></parameter>)</parameter_list> <block>{
				<if>if <condition>(<expr><call><name><name>event</name><operator>.</operator><name>getChecked</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="boolean">true</literal></expr>)</condition><then> <block>{
					<expr_stmt><expr><call><name>setPageComplete</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then> <else>else <block>{
					<expr_stmt><expr><call><name>setPageComplete</name><argument_list>(<argument><expr><call><name><name>markersTable</name><operator>.</operator><name>getCheckedElements</name></name><argument_list>()</argument_list></call><operator>.</operator><name>length</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></else></if>

			}</block></function>
		}</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name><name>markersTable</name>
				<operator>.</operator><name>addSelectionChangedListener</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>ISelectionChangedListener</name></super><argument_list>()</argument_list> <block>{
					<comment type="block">/*
					 * (non-Javadoc)
					 * 
					 * @see org.eclipse.jface.viewers.ISelectionChangedListener#selectionChanged(org.eclipse.jface.viewers.SelectionChangedEvent)
					 */</comment>
					<function><specifier>public</specifier> <type><name>void</name></type> <name>selectionChanged</name><parameter_list>(<parameter><decl><type><name>SelectionChangedEvent</name></type> <name>event</name></decl></parameter>)</parameter_list> <block>{

						<if>if <condition>(<expr><call><name><name>event</name><operator>.</operator><name>getSelection</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>isEmpty</name><argument_list>()</argument_list></call></expr>)</condition><then>
							<block type="pseudo"><return>return;</return></block></then></if>
						<decl_stmt><decl><type><name>IMarker</name></type> <name>marker</name> <init>= <expr><call>(<name>IMarker</name>) <argument_list>(<argument><expr><operator>(</operator><name>IStructuredSelection</name><operator>)</operator> <call><name><name>event</name>
								<operator>.</operator><name>getSelection</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>getFirstElement</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
						<expr_stmt><expr><call><name><name>ExtendedMarkersView</name><operator>.</operator><name>openMarkerInEditor</name></name><argument_list>(<argument><expr><name>marker</name></expr></argument>, <argument><expr><call><name><name>site</name>
								<operator>.</operator><name>getPage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					}</block></function>
				}</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>markersTable</name><operator>.</operator><name>setInput</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Create the table columns for the receiver.
	 */</comment>
	<function><specifier>private</specifier> <type><name>void</name></type> <name>createTableColumns</name><parameter_list>()</parameter_list> <block>{
		<decl_stmt><decl><type><name>TableLayout</name></type> <name>layout</name> <init>= <expr><operator>new</operator> <call><name>TableLayout</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

		<decl_stmt><decl><type><name>Table</name></type> <name>table</name> <init>= <expr><call><name><name>markersTable</name><operator>.</operator><name>getTable</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>table</name><operator>.</operator><name>setLayout</name></name><argument_list>(<argument><expr><name>layout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>table</name><operator>.</operator><name>setLinesVisible</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>table</name><operator>.</operator><name>setHeaderVisible</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name><name>layout</name><operator>.</operator><name>addColumnData</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>ColumnWeightData</name><argument_list>(<argument><expr><literal type="number">70</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>TableColumn</name></type> <name>tc</name> <init>= <expr><operator>new</operator> <call><name>TableColumn</name><argument_list>(<argument><expr><name>table</name></expr></argument>, <argument><expr><name><name>SWT</name><operator>.</operator><name>NONE</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>tc</name>
				<operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><name><name>MarkerMessages</name><operator>.</operator><name>MarkerResolutionDialog_Problems_List_Location</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>layout</name><operator>.</operator><name>addColumnData</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>ColumnWeightData</name><argument_list>(<argument><expr><literal type="number">30</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>tc</name> <operator>=</operator> <operator>new</operator> <call><name>TableColumn</name><argument_list>(<argument><expr><name>table</name></expr></argument>, <argument><expr><name><name>SWT</name><operator>.</operator><name>NONE</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>tc</name>
				<operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><name><name>MarkerMessages</name><operator>.</operator><name>MarkerResolutionDialog_Problems_List_Resource</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Return the marker being edited.
	 * 
	 * @return IMarker or &lt;code&gt;null&lt;/code&gt;
	 */</comment>
	<function><specifier>public</specifier> <type><name>IMarker</name></type> <name>getSelectedMarker</name><parameter_list>()</parameter_list> <block>{
		<decl_stmt><decl><type><name>ISelection</name></type> <name>selection</name> <init>= <expr><call><name><name>markersTable</name><operator>.</operator><name>getSelection</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<if>if <condition>(<expr><operator>!</operator><call><name><name>selection</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <name>selection</name> <operator>instanceof</operator> <name>IStructuredSelection</name></expr>)</condition><then> <block>{
			<decl_stmt><decl><type><name>IStructuredSelection</name></type> <name>struct</name> <init>= <expr><operator>(</operator><name>IStructuredSelection</name><operator>)</operator> <name>selection</name></expr></init></decl>;</decl_stmt>
			<if>if <condition>(<expr><call><name><name>struct</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then>
				<block type="pseudo"><return>return <expr><operator>(</operator><name>IMarker</name><operator>)</operator> <call><name><name>struct</name><operator>.</operator><name>getFirstElement</name></name><argument_list>()</argument_list></call></expr>;</return></block></then></if>
		}</block></then></if>
		<return>return <expr><literal type="null">null</literal></expr>;</return>
	}</block></function>

	<comment type="block">/*
	 * (non-Javadoc)
	 * 
	 * @see org.eclipse.jface.wizard.WizardPage#isPageComplete()
	 */</comment>
	<function><specifier>public</specifier> <type><name>boolean</name></type> <name>isPageComplete</name><parameter_list>()</parameter_list> <block>{
		<return>return <expr><literal type="boolean">true</literal></expr>;</return>
	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Finish has been pressed. Process the resolutions. monitor the monitor to
	 * report to.
	 */</comment>
	<comment type="block" format="javadoc">/**
	 * @param monitor
	 */</comment>
	<comment type="block" format="javadoc">/**
	 * @param monitor
	 */</comment>
	<function><type><name>void</name></type> <name>performFinish</name><parameter_list>(<parameter><decl><type><name>IProgressMonitor</name></type> <name>monitor</name></decl></parameter>)</parameter_list> <block>{

		<decl_stmt><decl><type><specifier>final</specifier> <name>IMarkerResolution</name></type> <name>resolution</name> <init>= <expr><call><name>getSelectedResolution</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<if>if <condition>(<expr><name>resolution</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then>
			<block type="pseudo"><return>return;</return></block></then></if>

		<decl_stmt><decl><type><specifier>final</specifier> <name><name>Object</name><index>[]</index></name></type> <name>checked</name> <init>= <expr><call><name><name>markersTable</name><operator>.</operator><name>getCheckedElements</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<if>if <condition>(<expr><name><name>checked</name><operator>.</operator><name>length</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then>
			<block type="pseudo"><return>return;</return></block></then></if>

		<if>if <condition>(<expr><name>resolution</name> <operator>instanceof</operator> <name>WorkbenchMarkerResolution</name></expr>)</condition><then> <block>{

			<try>try <block>{
				<expr_stmt><expr><call><name>getWizard</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getContainer</name><argument_list>()</argument_list></call><operator>.</operator><call><name>run</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>,
						<argument><expr><operator>new</operator> <class><super><name>IRunnableWithProgress</name></super><argument_list>()</argument_list> <block>{
							<comment type="block">/*
							 * (non-Javadoc)
							 * 
							 * @see org.eclipse.jface.operation.IRunnableWithProgress#run(org.eclipse.core.runtime.IProgressMonitor)
							 */</comment>
							<function><specifier>public</specifier> <type><name>void</name></type> <name>run</name><parameter_list>(<parameter><decl><type><name>IProgressMonitor</name></type> <name>monitor</name></decl></parameter>)</parameter_list> <block>{
								<decl_stmt><decl><type><name><name>IMarker</name><index>[]</index></name></type> <name>markers</name> <init>= <expr><operator>new</operator> <name><name>IMarker</name><index>[<expr><name><name>checked</name><operator>.</operator><name>length</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
								<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>arraycopy</name></name><argument_list>(<argument><expr><name>checked</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>markers</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
										<argument><expr><name><name>checked</name><operator>.</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
								<expr_stmt><expr><operator>(</operator><operator>(</operator><name>WorkbenchMarkerResolution</name><operator>)</operator> <name>resolution</name><operator>)</operator><operator>.</operator><call><name>run</name><argument_list>(
										<argument><expr><name>markers</name></expr></argument>, <argument><expr><name>monitor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							}</block></function>

						}</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>InvocationTargetException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
				<expr_stmt><expr><call><name><name>StatusManager</name><operator>.</operator><name>getManager</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>handle</name><argument_list>(
						<argument><expr><call><name><name>MarkerSupportInternalUtilities</name><operator>.</operator><name>errorFor</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></catch> <catch>catch <parameter_list>(<parameter><decl><type><name>InterruptedException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
				<expr_stmt><expr><call><name><name>StatusManager</name><operator>.</operator><name>getManager</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>handle</name><argument_list>(
						<argument><expr><call><name><name>MarkerSupportInternalUtilities</name><operator>.</operator><name>errorFor</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></catch></try>

		}</block></then> <else>else <block>{

			<try>try <block>{
				<expr_stmt><expr><call><name>getWizard</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getContainer</name><argument_list>()</argument_list></call><operator>.</operator><call><name>run</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>,
						<argument><expr><operator>new</operator> <class><super><name>IRunnableWithProgress</name></super><argument_list>()</argument_list> <block>{
							<comment type="block">/*
							 * (non-Javadoc)
							 * 
							 * @see org.eclipse.jface.operation.IRunnableWithProgress#run(org.eclipse.core.runtime.IProgressMonitor)
							 */</comment>
							<function><specifier>public</specifier> <type><name>void</name></type> <name>run</name><parameter_list>(<parameter><decl><type><name>IProgressMonitor</name></type> <name>monitor</name></decl></parameter>)</parameter_list> <block>{
								<expr_stmt><expr><call><name><name>monitor</name>
										<operator>.</operator><name>beginTask</name></name><argument_list>(
												<argument><expr><name><name>MarkerMessages</name><operator>.</operator><name>MarkerResolutionDialog_Fixing</name></name></expr></argument>,
												<argument><expr><name><name>checked</name><operator>.</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
								<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>checked</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
									<comment type="line">// Allow paint events and wake up the button</comment>
									<expr_stmt><expr><call><name>getShell</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getDisplay</name><argument_list>()</argument_list></call><operator>.</operator><call><name>readAndDispatch</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
									<if>if <condition>(<expr><call><name><name>monitor</name><operator>.</operator><name>isCanceled</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
										<block type="pseudo"><return>return;</return></block></then></if>
									<decl_stmt><decl><type><name>IMarker</name></type> <name>marker</name> <init>= <expr><operator>(</operator><name>IMarker</name><operator>)</operator> <name><name>checked</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
									<expr_stmt><expr><call><name><name>monitor</name><operator>.</operator><name>subTask</name></name><argument_list>(<argument><expr><call><name><name>Util</name><operator>.</operator><name>getProperty</name></name><argument_list>(
											<argument><expr><name><name>IMarker</name><operator>.</operator><name>MESSAGE</name></name></expr></argument>, <argument><expr><name>marker</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
									<expr_stmt><expr><call><name><name>resolution</name><operator>.</operator><name>run</name></name><argument_list>(<argument><expr><name>marker</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
									<expr_stmt><expr><call><name><name>monitor</name><operator>.</operator><name>worked</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
								}</block></for>
							}</block></function>

						}</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>InvocationTargetException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
				<expr_stmt><expr><call><name><name>StatusManager</name><operator>.</operator><name>getManager</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>handle</name><argument_list>(
						<argument><expr><call><name><name>MarkerSupportInternalUtilities</name><operator>.</operator><name>errorFor</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></catch> <catch>catch <parameter_list>(<parameter><decl><type><name>InterruptedException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
				<expr_stmt><expr><call><name><name>StatusManager</name><operator>.</operator><name>getManager</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>handle</name><argument_list>(
						<argument><expr><call><name><name>MarkerSupportInternalUtilities</name><operator>.</operator><name>errorFor</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></catch></try>

		}</block></else></if>

	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Return the marker resolution that is currently selected/
	 * 
	 * @return IMarkerResolution or &lt;code&gt;null&lt;/code&gt; if there is no
	 *         selection.
	 */</comment>
	<function><specifier>private</specifier> <type><name>IMarkerResolution</name></type> <name>getSelectedResolution</name><parameter_list>()</parameter_list> <block>{
		<decl_stmt><decl><type><name>ISelection</name></type> <name>selection</name> <init>= <expr><call><name><name>resolutionsList</name><operator>.</operator><name>getSelection</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>selection</name> <operator>instanceof</operator> <name>IStructuredSelection</name><operator>)</operator></expr>)</condition><then> <block>{
			<return>return <expr><literal type="null">null</literal></expr>;</return>
		}</block></then></if>

		<decl_stmt><decl><type><name>Object</name></type> <name>first</name> <init>= <expr><operator>(</operator><operator>(</operator><name>IStructuredSelection</name><operator>)</operator> <name>selection</name><operator>)</operator><operator>.</operator><call><name>getFirstElement</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

		<return>return <expr><operator>(</operator><name>IMarkerResolution</name><operator>)</operator> <name>first</name></expr>;</return>

	}</block></function>

}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="org.eclipse.ui.ide.markers.compatibility/src/org/eclipse/ui/ide/markers/compatibility/api/MarkerSupportConstants.java" hash="f43dde8f73fd39f26f29e2a4b63eec66ccf2f4f3"><comment type="block" format="javadoc">/*******************************************************************************
 * Copyright (c) 2007 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     IBM Corporation - initial API and implementation
 ******************************************************************************/</comment>

<package>package <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>ide</name><operator>.</operator><name>markers</name><operator>.</operator><name>compatibility</name><operator>.</operator><name>api</name></name>;</package>

<comment type="block" format="javadoc">/**
 * MarkerSupportConstants is a static class that supplies commonly used constants.
 * 
 * @since 3.4
 *
 */</comment>
<class><specifier>public</specifier> class <name>MarkerSupportConstants</name> <block>{
	
	<comment type="block" format="javadoc">/**
	 * The icon attribute name from a configuration element.
	 */</comment>
	<decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>ATTRIBUTE_ICON</name> <init>= <expr><literal type="string">"icon"</literal></expr></init></decl>;</decl_stmt> <comment type="line">//$NON-NLS-1$</comment>
	<comment type="block" format="javadoc">/**
	 * The id attribute name from a configuration element.
	 */</comment>
	<decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>ATTRIBUTE_ID</name> <init>= <expr><literal type="string">"id"</literal></expr></init></decl>;</decl_stmt> <comment type="line">//$NON-NLS-1$</comment>
	<comment type="block" format="javadoc">/**
	 * The name attribute name from a configuration element.
	 */</comment>
	<decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>ATTRIBUTE_NAME</name> <init>= <expr><literal type="string">"name"</literal></expr></init></decl>;</decl_stmt> <comment type="line">//$NON-NLS-1$</comment>
	
	<comment type="block" format="javadoc">/**
	 * The name attribute name from a configuration element.
	 */</comment>
	<decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>ATTRIBUTE_TYPE</name> <init>= <expr><literal type="string">"type"</literal></expr></init></decl>;</decl_stmt> <comment type="line">//$NON-NLS-1$</comment>
	<comment type="block" format="javadoc">/**
	 * A reusable empty {@link String}
	 */</comment>
	<decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>EMPTY_STRING</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt> <comment type="line">//$NON-NLS-1$</comment>
	
	<comment type="block" format="javadoc">/**
	 * The constant used to specify the contains value on 
	 * a {@link FiltersContributionParameters}
	 */</comment>
	<decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>CONTAINS_KEY</name> <init>= <expr><literal type="string">"CONTAINS"</literal></expr></init></decl>;</decl_stmt> <comment type="line">//$NON-NLS-1$</comment>
	
	<comment type="block" format="javadoc">/**
	 * The constant used to specify the does not contain value on 
	 * a {@link FiltersContributionParameters}
	 */</comment>
	<decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>DOES_NOT_CONTAIN_KEY</name> <init>= <expr><literal type="string">"DOES_NOT_CONTAIN"</literal></expr></init></decl>;</decl_stmt> <comment type="line">//$NON-NLS-1$</comment>
	

}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="org.eclipse.ui.ide.markers.compatibility/src/org/eclipse/ui/ide/markers/compatibility/api/MarkerSupportView.java" hash="77fd49142d1f825bcbeadfa40671494d6f3d151b"><comment type="block" format="javadoc">/*******************************************************************************
 * Copyright (c) 2008 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     IBM Corporation - initial API and implementation
 ******************************************************************************/</comment>

<package>package <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>ide</name><operator>.</operator><name>markers</name><operator>.</operator><name>compatibility</name><operator>.</operator><name>api</name></name>;</package>

<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>ide</name><operator>.</operator><name>markers</name><operator>.</operator><name>compatibility</name><operator>.</operator><name>internal</name><operator>.</operator><name>ExtendedMarkersView</name></name>;</import>

<comment type="block" format="javadoc">/**
 * The MarkerSupportView is a view that supports the extensions
 * in the markerSupport extension point.
 * @since 3.4
 *
 */</comment>
<class><specifier>public</specifier> <specifier>abstract</specifier> class <name>MarkerSupportView</name> <super><extends>extends <name>ExtendedMarkersView</name></extends></super> <block>{

	
	<comment type="block" format="javadoc">/**
	 * Create a new instance of the receiver on contentGeneratorId.
	 * @param contentGeneratorId the id of a markerContentGenerator
	 * 	defined in an extension of the markerSupport extension.
	 */</comment>
	<constructor><specifier>public</specifier> <name>MarkerSupportView</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>contentGeneratorId</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>contentGeneratorId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></constructor>

}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="org.eclipse.ui.ide.markers.compatibility/src/org/eclipse/ui/ide/markers/compatibility/api/MarkerItem.java" hash="58efa88c10f78813e487e0fb3f0bb6db211b7e23"><comment type="block" format="javadoc">/*******************************************************************************
 * Copyright (c) 2000, 2006 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     IBM Corporation - initial API and implementation
 *******************************************************************************/</comment>

<package>package <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>ide</name><operator>.</operator><name>markers</name><operator>.</operator><name>compatibility</name><operator>.</operator><name>api</name></name>;</package>

<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>core</name><operator>.</operator><name>resources</name><operator>.</operator><name>IMarker</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>ide</name><operator>.</operator><name>markers</name><operator>.</operator><name>compatibility</name><operator>.</operator><name>internal</name><operator>.</operator><name>MarkerEntry</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>ibm</name><operator>.</operator><name>icu</name><operator>.</operator><name>text</name><operator>.</operator><name>CollationKey</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>ibm</name><operator>.</operator><name>icu</name><operator>.</operator><name>text</name><operator>.</operator><name>Collator</name></name>;</import>

<comment type="block" format="javadoc">/**
 * The MarkerItem class is the class that represents the objects displayed in
 * the ExtendedMarkersView.
 * 
 */</comment>
<class><specifier>public</specifier> <specifier>abstract</specifier> class <name>MarkerItem</name> <block>{

	<decl_stmt><decl><specifier>private</specifier> <type><name>CollationKey</name></type> <name>collationKey</name></decl>;</decl_stmt>

	<comment type="block" format="javadoc">/**
	 * Return the boolean associated with attributeName or defaultValue if
	 * it is not found.
	 * @param attribute
	 * @param defaultValue
	 * @return &lt;code&gt;boolean&lt;/code&gt;
	 */</comment>
	<function><specifier>public</specifier> <type><name>boolean</name></type> <name>getAttributeValue</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>attribute</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>defaultValue</name></decl></parameter>)</parameter_list> <block>{
		<comment type="line">// There are no boolean values by default</comment>
		<return>return <expr><name>defaultValue</name></expr>;</return>

	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Get the value of the attribute in the enclosed marker.
	 * 
	 * @param attribute
	 * @param defaultValue
	 *            the defaultValue if the value is not set
	 * @return int
	 */</comment>
	<function><specifier>public</specifier> <type><name>int</name></type> <name>getAttributeValue</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>attribute</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>defaultValue</name></decl></parameter>)</parameter_list> <block>{
		<comment type="line">// There are no integer values by default</comment>
		<return>return <expr><name>defaultValue</name></expr>;</return>

	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Get the String value of the attribute in the enclosed marker.
	 * 
	 * @param attribute
	 * @param defaultValue
	 *            the defaultValue if the value is not set
	 * @return String
	 */</comment>
	<function><specifier>public</specifier> <type><name>String</name></type> <name>getAttributeValue</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>attribute</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>defaultValue</name></decl></parameter>)</parameter_list> <block>{
		<comment type="line">// All items have messages</comment>
		<if>if <condition>(<expr><name>attribute</name> <operator>==</operator> <name><name>IMarker</name><operator>.</operator><name>MESSAGE</name></name></expr>)</condition><then>
			<block type="pseudo"><return>return <expr><call><name>getDescription</name><argument_list>()</argument_list></call></expr>;</return></block></then></if>
		<return>return <expr><name>defaultValue</name></expr>;</return>

	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Get the children of the node.
	 * 
	 * @return MarkerNode[]
	 */</comment>
	<function_decl><specifier>public</specifier> <specifier>abstract</specifier> <type><name><name>MarkerItem</name><index>[]</index></name></type> <name>getChildren</name><parameter_list>()</parameter_list>;</function_decl>

	<comment type="block" format="javadoc">/**
	 * Get the CollationKey for the string attribute.
	 * 
	 * @param attribute
	 * @param defaultValue
	 *            the defaultValue if the value is not set
	 * @return CollationKey
	 */</comment>
	<function><specifier>public</specifier> <type><name>CollationKey</name></type> <name>getCollationKey</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>attribute</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>defaultValue</name></decl></parameter>)</parameter_list> <block>{
		<if>if <condition>(<expr><name>collationKey</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then>
			<block type="pseudo"><expr_stmt><expr><name>collationKey</name> <operator>=</operator> <call><name><name>Collator</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getCollationKey</name><argument_list>(
					<argument><expr><call><name>getDescription</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
		<return>return <expr><name>collationKey</name></expr>;</return>
	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Get a concrete marker from the receiver. If the receiver is concrete
	 * return the receiver otherwise return one of the concrete markers it
	 * contains.
	 * 
	 * @return MarkerEntry
	 */</comment>
	<function_decl><specifier>public</specifier> <specifier>abstract</specifier> <type><name>MarkerEntry</name></type> <name>getConcreteRepresentative</name><parameter_list>()</parameter_list>;</function_decl>

	<comment type="block" format="javadoc">/**
	 * Return the creation time for the receiver.
	 * @return long
	 */</comment>
	<function><specifier>public</specifier> <type><name>long</name></type> <name>getCreationTime</name><parameter_list>()</parameter_list> <block>{
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Return the description of the receiver.
	 * 
	 * @return String
	 */</comment>
	<function_decl><specifier>public</specifier> <specifier>abstract</specifier> <type><name>String</name></type> <name>getDescription</name><parameter_list>()</parameter_list>;</function_decl>

	<comment type="block" format="javadoc">/**
	 * Return the ID of the receiver
	 * @return String
	 */</comment>
	<function><specifier>public</specifier> <type><name>long</name></type> <name>getID</name><parameter_list>()</parameter_list> <block>{
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
		
	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Get the location string for the receiver.
	 * 
	 * @return String
	 * @see IMarker#LOCATION
	 */</comment>
	<function><specifier>public</specifier> <type><name>String</name></type> <name>getLocation</name><parameter_list>()</parameter_list> <block>{
		<comment type="line">//There is no location by default</comment>
		<return>return <expr><name><name>MarkerSupportConstants</name><operator>.</operator><name>EMPTY_STRING</name></name></expr>;</return>

	}</block></function>
	
	<comment type="block" format="javadoc">/**
	 * Return the marker for the receiver.
	 * @return IMarker
	 */</comment>
	<function><specifier>public</specifier> <type><name>IMarker</name></type> <name>getMarker</name><parameter_list>()</parameter_list> <block>{
		<return>return <expr><literal type="null">null</literal></expr>;</return>
	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Return the parent node or &lt;code&gt;null&lt;/code&gt; if this is a top level
	 * element.
	 * 
	 * @return MarkerNode
	 */</comment>
	<function_decl><specifier>public</specifier> <specifier>abstract</specifier> <type><name>MarkerItem</name></type> <name>getParent</name><parameter_list>()</parameter_list>;</function_decl>

	<comment type="block" format="javadoc">/**
	 * Get the path string for the receiver.
	 * 
	 * @return String
	 * @see MarkerViewUtil#PATH_ATTRIBUTE
	 */</comment>
	<function><specifier>public</specifier> <type><name>String</name></type> <name>getPath</name><parameter_list>()</parameter_list> <block>{
		<comment type="line">//There is no path by default</comment>
		<return>return <expr><name><name>MarkerSupportConstants</name><operator>.</operator><name>EMPTY_STRING</name></name></expr>;</return>

	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Return whether or not this is a concrete node
	 * 
	 * @return boolean
	 */</comment>
	<function_decl><specifier>public</specifier> <specifier>abstract</specifier> <type><name>boolean</name></type> <name>isConcrete</name><parameter_list>()</parameter_list>;</function_decl>

	<comment type="block" format="javadoc">/**
	 * Get the human readable name of the type/
	 * @return String
	 */</comment>
	<function><specifier>public</specifier> <type><name>String</name></type> <name>getMarkerTypeName</name><parameter_list>()</parameter_list> <block>{
		<return>return <expr><name><name>MarkerSupportConstants</name><operator>.</operator><name>EMPTY_STRING</name></name></expr>;</return>
	}</block></function>

}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="org.eclipse.ui.ide.markers.compatibility/src/org/eclipse/ui/ide/markers/compatibility/api/WorkbenchMarkerResolution.java" hash="d7b557caa1ecc6743852dddd7c23d72ae8c82fdf"><comment type="block" format="javadoc">/*******************************************************************************
 * Copyright (c) 2000, 2006 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     IBM Corporation - initial API and implementation
 *******************************************************************************/</comment>

<package>package <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>ide</name><operator>.</operator><name>markers</name><operator>.</operator><name>compatibility</name><operator>.</operator><name>api</name></name>;</package>

<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>core</name><operator>.</operator><name>resources</name><operator>.</operator><name>IMarker</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>core</name><operator>.</operator><name>runtime</name><operator>.</operator><name>IProgressMonitor</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>IMarkerResolution2</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>ide</name><operator>.</operator><name>markers</name><operator>.</operator><name>compatibility</name><operator>.</operator><name>api</name><operator>.</operator><name>internal</name><operator>.</operator><name>Util</name></name>;</import>

<comment type="block" format="javadoc">/**
 * WorkbenchMarkerResolution is the resolution that can be grouped
 * with others that are similar to allow multi selection.
 * @since 3.2
 *
 */</comment>
<class><specifier>public</specifier> <specifier>abstract</specifier> class <name>WorkbenchMarkerResolution</name> <super><implements>implements <name>IMarkerResolution2</name></implements></super> <block>{
	
	<comment type="block" format="javadoc">/**
	 * Iterate through the list of supplied markers. Return any that can also have
	 * the receiver applied to them.
	 * @param markers
	 * @return IMarker[]
	 * 	 
	 * */</comment>
	<function_decl><specifier>public</specifier> <specifier>abstract</specifier> <type><name><name>IMarker</name><index>[]</index></name></type> <name>findOtherMarkers</name><parameter_list>(<parameter><decl><type><name><name>IMarker</name><index>[]</index></name></type> <name>markers</name></decl></parameter>)</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Runs this resolution. Resolve all &lt;code&gt;markers&lt;/code&gt;.
     * &lt;code&gt;markers&lt;/code&gt; must be a subset of the markers returned
     * by &lt;code&gt;findOtherMarkers(IMarker[])&lt;/code&gt;.
	 * 
	 * @param markers The markers to resolve, not null
	 * @param monitor The monitor to report progress
	 */</comment>
	<function><specifier>public</specifier> <type><name>void</name></type> <name>run</name><parameter_list>(<parameter><decl><type><name><name>IMarker</name><index>[]</index></name></type> <name>markers</name></decl></parameter>, <parameter><decl><type><name>IProgressMonitor</name></type> <name>monitor</name></decl></parameter>)</parameter_list> <block>{
		
		<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>markers</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
			<expr_stmt><expr><call><name><name>monitor</name><operator>.</operator><name>subTask</name></name><argument_list>(<argument><expr><call><name><name>Util</name><operator>.</operator><name>getProperty</name></name><argument_list>(<argument><expr><name><name>IMarker</name><operator>.</operator><name>MESSAGE</name></name></expr></argument>, <argument><expr><name><name>markers</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>run</name><argument_list>(<argument><expr><name><name>markers</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></for>
	}</block></function>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="org.eclipse.ui.ide.markers.compatibility/src/org/eclipse/ui/ide/markers/compatibility/api/MarkerViewHandler.java" hash="1c5536c03947618c2ea5f871038e99e613418d37"><comment type="block" format="javadoc">/*******************************************************************************
 * Copyright (c) 2007,2008 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     IBM Corporation - initial API and implementation
 ******************************************************************************/</comment>

<package>package <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>ide</name><operator>.</operator><name>markers</name><operator>.</operator><name>compatibility</name><operator>.</operator><name>api</name></name>;</package>

<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>core</name><operator>.</operator><name>commands</name><operator>.</operator><name>AbstractHandler</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>core</name><operator>.</operator><name>commands</name><operator>.</operator><name>ExecutionEvent</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>core</name><operator>.</operator><name>commands</name><operator>.</operator><name>ExecutionException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>core</name><operator>.</operator><name>commands</name><operator>.</operator><name>operations</name><operator>.</operator><name>IUndoableOperation</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>core</name><operator>.</operator><name>resources</name><operator>.</operator><name>IMarker</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>core</name><operator>.</operator><name>runtime</name><operator>.</operator><name>CoreException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>core</name><operator>.</operator><name>runtime</name><operator>.</operator><name>IAdaptable</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>core</name><operator>.</operator><name>runtime</name><operator>.</operator><name>IProgressMonitor</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>jface</name><operator>.</operator><name>dialogs</name><operator>.</operator><name>ErrorDialog</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>IWorkbenchPart</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>PlatformUI</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>handlers</name><operator>.</operator><name>HandlerUtil</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>ide</name><operator>.</operator><name>undo</name><operator>.</operator><name>WorkspaceUndoUtil</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>internal</name><operator>.</operator><name>ide</name><operator>.</operator><name>IDEWorkbenchPlugin</name></name>;</import>

<comment type="block" format="javadoc">/**
 * MarkerViewHandler is the abstract class of the handlers for the 
 * {@link MarkerSupportView}
 * @since 3.4
 *
 */</comment>
<class><specifier>public</specifier> <specifier>abstract</specifier> class <name>MarkerViewHandler</name> <super><extends>extends <name>AbstractHandler</name></extends></super> <block>{

	<decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name><name>IMarker</name><index>[]</index></name></type> <name>EMPTY_MARKER_ARRAY</name> <init>= <expr><operator>new</operator> <name><name>IMarker</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

	<comment type="block" format="javadoc">/**
	 * Get the view this event occurred on.
	 * @param event
	 * @return {@link MarkerSupportView} or &lt;code&gt;null&lt;/code&gt;
	 */</comment>
	<function><specifier>public</specifier> <type><name>MarkerSupportView</name></type> <name>getView</name><parameter_list>(<parameter><decl><type><name>ExecutionEvent</name></type> <name>event</name></decl></parameter>)</parameter_list> <block>{
		<decl_stmt><decl><type><name>IWorkbenchPart</name></type> <name>part</name> <init>=  <expr><call><name><name>HandlerUtil</name><operator>.</operator><name>getActivePart</name></name><argument_list>(<argument><expr><name>event</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if>if<condition>(<expr><name>part</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then>
			<block type="pseudo"><return>return <expr><literal type="null">null</literal></expr>;</return></block></then></if>
		<return>return <expr><operator>(</operator><name>MarkerSupportView</name><operator>)</operator> <name>part</name></expr>;</return>
	}</block></function>
	
	
	<comment type="block" format="javadoc">/**
	 * Execute the specified undoable operation
	 * @param operation
	 * @param title
	 * @param monitor
	 * @param uiInfo
	 */</comment>
	<function><specifier>public</specifier> <type><name>void</name></type> <name>execute</name><parameter_list>(<parameter><decl><type><name>IUndoableOperation</name></type> <name>operation</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>title</name></decl></parameter>,
			<parameter><decl><type><name>IProgressMonitor</name></type> <name>monitor</name></decl></parameter>, <parameter><decl><type><name>IAdaptable</name></type> <name>uiInfo</name></decl></parameter>)</parameter_list> <block>{
		<try>try <block>{
			<expr_stmt><expr><call><name><name>PlatformUI</name><operator>.</operator><name>getWorkbench</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getOperationSupport</name><argument_list>()</argument_list></call>
					<operator>.</operator><call><name>getOperationHistory</name><argument_list>()</argument_list></call><operator>.</operator><call><name>execute</name><argument_list>(<argument><expr><name>operation</name></expr></argument>, <argument><expr><name>monitor</name></expr></argument>, <argument><expr><name>uiInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>ExecutionException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
			<if>if <condition>(<expr><call><name><name>e</name><operator>.</operator><name>getCause</name></name><argument_list>()</argument_list></call> <operator>instanceof</operator> <name>CoreException</name></expr>)</condition><then> <block>{
				<expr_stmt><expr><call><name><name>ErrorDialog</name>
						<operator>.</operator><name>openError</name></name><argument_list>(<argument><expr><call><name><name>WorkspaceUndoUtil</name><operator>.</operator><name>getShell</name></name><argument_list>(<argument><expr><name>uiInfo</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>title</name></expr></argument>,
								<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>CoreException</name><operator>)</operator> <call><name><name>e</name><operator>.</operator><name>getCause</name></name><argument_list>()</argument_list></call><operator>)</operator>
										<operator>.</operator><call><name>getStatus</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then> <else>else <block>{
				<expr_stmt><expr><call><name><name>IDEWorkbenchPlugin</name><operator>.</operator><name>log</name></name><argument_list>(<argument><expr><name>title</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></else></if>
		}</block></catch></try>
	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Get the selected markers for the receiver in the view from
	 * event. If the view cannot be found then return an empty
	 * array.
	 * @param event
	 * @return {@link IMarker}[]
	 */</comment>
	<function><specifier>public</specifier> <type><name><name>IMarker</name><index>[]</index></name></type> <name>getSelectedMarkers</name><parameter_list>(<parameter><decl><type><name>ExecutionEvent</name></type> <name>event</name></decl></parameter>)</parameter_list><block>{
		<decl_stmt><decl><type><name>MarkerSupportView</name></type> <name>view</name> <init>= <expr><call><name>getView</name><argument_list>(<argument><expr><name>event</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if>if<condition>(<expr><name>view</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then>
			<block type="pseudo"><return>return <expr><name>EMPTY_MARKER_ARRAY</name></expr>;</return></block></then></if>
		<return>return <expr><call><name><name>view</name><operator>.</operator><name>getSelectedMarkers</name></name><argument_list>()</argument_list></call></expr>;</return>
	}</block></function>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="org.eclipse.ui.ide.markers.compatibility/src/org/eclipse/ui/ide/markers/compatibility/api/MarkerViewUtil.java" hash="da7a7ae069c6d1dbd01fbd66a72a242e1556b2b8"><comment type="block" format="javadoc">/*******************************************************************************
 * Copyright (c) 2000, 2006 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     IBM Corporation - initial API and implementation
 *******************************************************************************/</comment>

<package>package <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>ide</name><operator>.</operator><name>markers</name><operator>.</operator><name>compatibility</name><operator>.</operator><name>api</name></name>;</package>

<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>core</name><operator>.</operator><name>resources</name><operator>.</operator><name>IMarker</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>core</name><operator>.</operator><name>runtime</name><operator>.</operator><name>CoreException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>jface</name><operator>.</operator><name>viewers</name><operator>.</operator><name>StructuredSelection</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>IPageLayout</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>IViewPart</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>IWorkbenchPage</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>ide</name><operator>.</operator><name>markers</name><operator>.</operator><name>compatibility</name><operator>.</operator><name>api</name><operator>.</operator><name>internal</name><operator>.</operator><name>MarkerView</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>ide</name><operator>.</operator><name>markers</name><operator>.</operator><name>compatibility</name><operator>.</operator><name>internal</name><operator>.</operator><name>MarkerSupportInternalUtilities</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Utility class for showing markers in the marker views.
 */</comment>
<class><specifier>public</specifier> class <name>MarkerViewUtil</name> <block>{

	<comment type="block" format="javadoc">/**
	 * The PATH_ATTRIBUTE is the tag for the attribute on a marker that can be
	 * used to supply the String for the path rather than using the path of the
	 * underlying resource.
	 * 
	 * @see IMarker#getAttribute(java.lang.String)
	 * @since 3.2
	 */</comment>
	<decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>PATH_ATTRIBUTE</name> <init>= <expr><literal type="string">"org.eclipse.ui.views.markers.path"</literal></expr></init></decl>;</decl_stmt><comment type="line">//$NON-NLS-1$</comment>

	<comment type="block" format="javadoc">/**
	 * The NAME_ATTRIBUTE is the tag for the attribute on a marker that can be
	 * used to supply the String for the name rather than using the name of the
	 * underlying resource.
	 * 
	 * @see IMarker#getAttribute(java.lang.String)
	 * @since 3.2
	 */</comment>
	<decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>NAME_ATTRIBUTE</name> <init>= <expr><literal type="string">"org.eclipse.ui.views.markers.name"</literal></expr></init></decl>;</decl_stmt><comment type="line">//$NON-NLS-1$</comment>

	<comment type="block" format="javadoc">/**
	 * Returns the id of the view used to show markers of the same type as the
	 * given marker.
	 * 
	 * @param marker
	 *            the marker
	 * @return the view id or &lt;code&gt;null&lt;/code&gt; if no appropriate view could
	 *         be determined
	 * @throws CoreException
	 *             if an exception occurs testing the type of the marker
	 */</comment>
	<function><specifier>public</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>getViewId</name><parameter_list>(<parameter><decl><type><name>IMarker</name></type> <name>marker</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>CoreException</name></expr></argument></throws> <block>{
		<if>if <condition>(<expr><call><name><name>marker</name><operator>.</operator><name>isSubtypeOf</name></name><argument_list>(<argument><expr><name><name>IMarker</name><operator>.</operator><name>TASK</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
			<return>return <expr><name><name>IPageLayout</name><operator>.</operator><name>ID_TASK_LIST</name></name></expr>;</return>
		}</block></then> <elseif>else <if>if <condition>(<expr><call><name><name>marker</name><operator>.</operator><name>isSubtypeOf</name></name><argument_list>(<argument><expr><name><name>IMarker</name><operator>.</operator><name>PROBLEM</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
			<return>return <expr><name><name>IPageLayout</name><operator>.</operator><name>ID_PROBLEM_VIEW</name></name></expr>;</return>
		}</block></then></if></elseif> <elseif>else <if>if <condition>(<expr><call><name><name>marker</name><operator>.</operator><name>isSubtypeOf</name></name><argument_list>(<argument><expr><name><name>IMarker</name><operator>.</operator><name>BOOKMARK</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
			<return>return <expr><name><name>IPageLayout</name><operator>.</operator><name>ID_BOOKMARKS</name></name></expr>;</return>
		}</block></then></if></elseif></if>
		<return>return <expr><literal type="null">null</literal></expr>;</return>
	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Shows the given marker in the appropriate view in the given page. This
	 * must be called from the UI thread.
	 * 
	 * @param page
	 *            the workbench page in which to show the marker
	 * @param marker
	 *            the marker to show
	 * @param showView
	 *            &lt;code&gt;true&lt;/code&gt; if the view should be shown first
	 *            &lt;code&gt;false&lt;/code&gt; to only show the marker if the view is
	 *            already showing
	 * @return &lt;code&gt;true&lt;/code&gt; if the marker was successfully shown,
	 *         &lt;code&gt;false&lt;/code&gt; if not
	 * 
	 */</comment>
	<function><specifier>public</specifier> <specifier>static</specifier> <type><name>boolean</name></type> <name>showMarker</name><parameter_list>(<parameter><decl><type><name>IWorkbenchPage</name></type> <name>page</name></decl></parameter>, <parameter><decl><type><name>IMarker</name></type> <name>marker</name></decl></parameter>,
			<parameter><decl><type><name>boolean</name></type> <name>showView</name></decl></parameter>)</parameter_list> <block>{

		<decl_stmt><decl><type><name>boolean</name></type> <name>returnValue</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
		<try>try <block>{
			<decl_stmt><decl><type><name>String</name></type> <name>viewId</name> <init>= <expr><call><name>getViewId</name><argument_list>(<argument><expr><name>marker</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<if>if <condition>(<expr><name>viewId</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <comment type="line">// Use the problem view by default</comment>
				<block type="pseudo"><expr_stmt><expr><name>viewId</name> <operator>=</operator> <name><name>IPageLayout</name><operator>.</operator><name>ID_PROBLEM_VIEW</name></name></expr>;</expr_stmt></block></then></if>

			<decl_stmt><decl><type><name>IViewPart</name></type> <name>view</name> <init>= <expr><ternary><condition><expr><name>showView</name></expr> ?</condition><then> <expr><call><name><name>page</name><operator>.</operator><name>showView</name></name><argument_list>(<argument><expr><name>viewId</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name><name>page</name>
					<operator>.</operator><name>findView</name></name><argument_list>(<argument><expr><name>viewId</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>
			<if>if <condition>(<expr><name>view</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then>
				<block type="pseudo"><expr_stmt><expr><name>returnValue</name> <operator>=</operator> <call><name><name>MarkerSupportInternalUtilities</name><operator>.</operator><name>showMarker</name></name><argument_list>(<argument><expr><name>view</name></expr></argument>,
						<argument><expr><name>marker</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>

			<comment type="line">// If we have already shown the new one do not open another one</comment>
			<expr_stmt><expr><name>viewId</name> <operator>=</operator> <call><name>getLegacyViewId</name><argument_list>(<argument><expr><name>marker</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if>if <condition>(<expr><name>viewId</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
				<if>if <condition>(<expr><name>returnValue</name></expr>)</condition><then>
					<block type="pseudo"><expr_stmt><expr><name>view</name> <operator>=</operator> <call><name><name>page</name><operator>.</operator><name>findView</name></name><argument_list>(<argument><expr><name>viewId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
				<else>else
					<block type="pseudo"><expr_stmt><expr><name>view</name> <operator>=</operator> <ternary><condition><expr><name>showView</name></expr> ?</condition><then> <expr><call><name><name>page</name><operator>.</operator><name>showView</name></name><argument_list>(<argument><expr><name>viewId</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name><name>page</name>
							<operator>.</operator><name>findView</name></name><argument_list>(<argument><expr><name>viewId</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt></block></else></if>
			}</block></then></if>

			<if>if <condition>(<expr><name>view</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <name>view</name> <operator>instanceof</operator> <name>MarkerView</name></expr>)</condition><then> <block>{
				<decl_stmt><decl><type><name>StructuredSelection</name></type> <name>selection</name> <init>= <expr><operator>new</operator> <call><name>StructuredSelection</name><argument_list>(<argument><expr><name>marker</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>MarkerView</name></type> <name>markerView</name> <init>= <expr><operator>(</operator><name>MarkerView</name><operator>)</operator> <name>view</name></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><call><name><name>markerView</name><operator>.</operator><name>setSelection</name></name><argument_list>(<argument><expr><name>selection</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>returnValue</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>

			}</block></then></if>
		}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>CoreException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
			<expr_stmt><expr><call><name><name>MarkerSupportInternalUtilities</name><operator>.</operator><name>handle</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></catch></try>
		<return>return <expr><name>returnValue</name></expr>;</return>
	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Returns the id of the view used to show markers of the same type as the
	 * given marker using.legacy support
	 * 
	 * @param marker
	 *            the marker
	 * @return the view id or &lt;code&gt;null&lt;/code&gt; if no appropriate view could
	 *         be determined
	 * @throws CoreException
	 *             if an exception occurs testing the type of the marker
	 */</comment>
	<function><specifier>private</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>getLegacyViewId</name><parameter_list>(<parameter><decl><type><name>IMarker</name></type> <name>marker</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>CoreException</name></expr></argument></throws> <block>{
		<decl_stmt><decl><type><name>String</name></type> <name>viewId</name> <init>= <expr><call><name>getViewId</name><argument_list>(<argument><expr><name>marker</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if>if <condition>(<expr><name>viewId</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then>
			<block type="pseudo"><return>return <expr><literal type="null">null</literal></expr>;</return></block></then></if>
		<return>return <expr><name>viewId</name> <operator>+</operator> <name><name>MarkerSupportInternalUtilities</name><operator>.</operator><name>LEGACY_SUFFIX</name></name></expr>;</return>
	}</block></function>

}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="org.eclipse.ui.ide.markers.compatibility/src/org/eclipse/ui/ide/markers/compatibility/internal/TypesConfigurationArea.java" hash="d1daa7b1e02c2debee1d7457159edfda6de52630"><comment type="block" format="javadoc">/*******************************************************************************
 * Copyright (c) 2007 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     IBM Corporation - initial API and implementation
 ******************************************************************************/</comment>

<package>package <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>ide</name><operator>.</operator><name>markers</name><operator>.</operator><name>compatibility</name><operator>.</operator><name>internal</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Collection</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashMap</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashSet</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Iterator</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>jface</name><operator>.</operator><name>dialogs</name><operator>.</operator><name>Dialog</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>jface</name><operator>.</operator><name>viewers</name><operator>.</operator><name>CheckStateChangedEvent</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>jface</name><operator>.</operator><name>viewers</name><operator>.</operator><name>CheckboxTreeViewer</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>jface</name><operator>.</operator><name>viewers</name><operator>.</operator><name>ColumnWeightData</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>jface</name><operator>.</operator><name>viewers</name><operator>.</operator><name>ICheckStateListener</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>jface</name><operator>.</operator><name>viewers</name><operator>.</operator><name>ITreeContentProvider</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>jface</name><operator>.</operator><name>viewers</name><operator>.</operator><name>LabelProvider</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>jface</name><operator>.</operator><name>viewers</name><operator>.</operator><name>TableLayout</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>jface</name><operator>.</operator><name>viewers</name><operator>.</operator><name>Viewer</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>jface</name><operator>.</operator><name>viewers</name><operator>.</operator><name>ViewerComparator</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>swt</name><operator>.</operator><name>SWT</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>swt</name><operator>.</operator><name>events</name><operator>.</operator><name>SelectionEvent</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>swt</name><operator>.</operator><name>events</name><operator>.</operator><name>SelectionListener</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>swt</name><operator>.</operator><name>layout</name><operator>.</operator><name>GridData</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>swt</name><operator>.</operator><name>layout</name><operator>.</operator><name>GridLayout</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>swt</name><operator>.</operator><name>widgets</name><operator>.</operator><name>Button</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>swt</name><operator>.</operator><name>widgets</name><operator>.</operator><name>Composite</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>swt</name><operator>.</operator><name>widgets</name><operator>.</operator><name>Tree</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>swt</name><operator>.</operator><name>widgets</name><operator>.</operator><name>TreeColumn</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>ide</name><operator>.</operator><name>markers</name><operator>.</operator><name>compatibility</name><operator>.</operator><name>api</name><operator>.</operator><name>MarkerFieldFilter</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>ide</name><operator>.</operator><name>markers</name><operator>.</operator><name>compatibility</name><operator>.</operator><name>api</name><operator>.</operator><name>internal</name><operator>.</operator><name>MarkerMessages</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>ide</name><operator>.</operator><name>markers</name><operator>.</operator><name>compatibility</name><operator>.</operator><name>api</name><operator>.</operator><name>internal</name><operator>.</operator><name>MarkerSupportRegistry</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>ui</name><operator>.</operator><name>ide</name><operator>.</operator><name>markers</name><operator>.</operator><name>compatibility</name><operator>.</operator><name>api</name><operator>.</operator><name>internal</name><operator>.</operator><name>MarkerType</name></name>;</import>

<comment type="block" format="javadoc">/**
 * TypesConfigurationArea is the FilterConfigurationArea that handles type
 * selection for the filter.
 * 
 * @since 3.4
 * 
 */</comment>
<class><specifier>public</specifier> class <name>TypesConfigurationArea</name> <super><extends>extends <name>GroupFilterConfigurationArea</name></extends></super> <block>{

	<class><specifier>private</specifier> class <name>CategoryEntry</name> <super><extends>extends <name>TypesEntry</name></extends></super> <block>{

		<decl_stmt><decl><specifier>private</specifier> <type><name>Collection</name></type> <name>children</name> <init>= <expr><operator>new</operator> <call><name>ArrayList</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><specifier>private</specifier> <type><name>String</name></type> <name>name</name></decl>;</decl_stmt>

		<comment type="block" format="javadoc">/**
		 * Create a new instance of the receiver.
		 * 
		 * @param categoryName
		 */</comment>
		<constructor><specifier>public</specifier> <name>CategoryEntry</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>categoryName</name></decl></parameter>)</parameter_list> <block>{
			<expr_stmt><expr><name>name</name> <operator>=</operator> <name>categoryName</name></expr>;</expr_stmt>
		}</block></constructor>

		<comment type="block" format="javadoc">/**
		 * Add the node to the receiver.
		 * 
		 * @param node
		 */</comment>
		<function><specifier>public</specifier> <type><name>void</name></type> <name>add</name><parameter_list>(<parameter><decl><type><name>MarkerTypeEntry</name></type> <name>node</name></decl></parameter>)</parameter_list> <block>{
			<expr_stmt><expr><call><name><name>children</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>node</name><operator>.</operator><name>setParent</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		}</block></function>

		<comment type="block">/*
		 * (non-Javadoc)
		 * 
		 * @see org.eclipse.ui.internal.provisional.views.markers.TypesConfigurationArea.TypesEntry#addElementsMatching(java.util.Collection,
		 *      java.util.Collection)
		 */</comment>
		<function><specifier>public</specifier> <type><name>void</name></type> <name>addElementsMatching</name><parameter_list>(<parameter><decl><type><name>Collection</name></type> <name>selectedTypes</name></decl></parameter>,
				<parameter><decl><type><name>Collection</name></type> <name>entries</name></decl></parameter>)</parameter_list> <block>{
			<decl_stmt><decl><type><name>Iterator</name></type> <name>childIterator</name> <init>= <expr><call><name><name>children</name><operator>.</operator><name>iterator</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
			<while>while <condition>(<expr><call><name><name>childIterator</name><operator>.</operator><name>hasNext</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
				<expr_stmt><expr><operator>(</operator><operator>(</operator><name>MarkerTypeEntry</name><operator>)</operator> <call><name><name>childIterator</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call><operator>)</operator><operator>.</operator><call><name>addElementsMatching</name><argument_list>(
						<argument><expr><name>selectedTypes</name></expr></argument>, <argument><expr><name>entries</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></while>

		}</block></function>

		<comment type="block">/*
		 * (non-Javadoc)
		 * 
		 * @see org.eclipse.ui.internal.provisional.views.markers.TypesConfigurationArea.TypesEntry#getChildren()
		 */</comment>
		<function><specifier>public</specifier> <type><name>Collection</name></type> <name>getChildren</name><parameter_list>()</parameter_list> <block>{
			<return>return <expr><name>children</name></expr>;</return>
		}</block></function>

		<comment type="block">/*
		 * (non-Javadoc)
		 * 
		 * @see org.eclipse.ui.internal.provisional.views.markers.TypesConfigurationArea.TypesEntry#getLabel()
		 */</comment>
		<function><specifier>public</specifier> <type><name>String</name></type> <name>getLabel</name><parameter_list>()</parameter_list> <block>{
			<return>return <expr><name>name</name></expr>;</return>
		}</block></function>

		<comment type="block">/*
		 * (non-Javadoc)
		 * 
		 * @see org.eclipse.ui.internal.provisional.views.markers.TypesConfigurationArea.TypesEntry#getParent()
		 */</comment>
		<function><specifier>public</specifier> <type><name>TypesEntry</name></type> <name>getParent</name><parameter_list>()</parameter_list> <block>{
			<return>return <expr><literal type="null">null</literal></expr>;</return>
		}</block></function>

		<comment type="block">/*
		 * (non-Javadoc)
		 * 
		 * @see org.eclipse.ui.internal.provisional.views.markers.TypesConfigurationArea.TypesEntry#hasChildren()
		 */</comment>
		<function><specifier>public</specifier> <type><name>boolean</name></type> <name>hasChildren</name><parameter_list>()</parameter_list> <block>{
			<return>return <expr><call><name><name>children</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</return>
		}</block></function>

	}</block></class>

	<class><specifier>private</specifier> class <name>MarkerTypeEntry</name> <super><extends>extends <name>TypesEntry</name></extends></super> <block>{

		<decl_stmt><decl><specifier>private</specifier> <type><name>CategoryEntry</name></type> <name>category</name></decl>;</decl_stmt>
		<decl_stmt><decl><specifier>private</specifier> <type><name>MarkerType</name></type> <name>markerType</name></decl>;</decl_stmt>

		<comment type="block" format="javadoc">/**
		 * Create an instance of the receiver.
		 * 
		 * @param markerType
		 */</comment>
		<constructor><specifier>public</specifier> <name>MarkerTypeEntry</name><parameter_list>(<parameter><decl><type><name>MarkerType</name></type> <name>markerType</name></decl></parameter>)</parameter_list> <block>{
			<expr_stmt><expr><name><name>this</name><operator>.</operator><name>markerType</name></name> <operator>=</operator> <name>markerType</name></expr>;</expr_stmt>
		}</block></constructor>

		<comment type="block">/*
		 * (non-Javadoc)
		 * 
		 * @see org.eclipse.ui.internal.provisional.views.markers.TypesConfigurationArea.TypesEntry#addElementsMatching(java.util.Collection,
		 *      java.util.Collection)
		 */</comment>
		<function><specifier>public</specifier> <type><name>void</name></type> <name>addElementsMatching</name><parameter_list>(<parameter><decl><type><name>Collection</name></type> <name>selectedTypes</name></decl></parameter>,
				<parameter><decl><type><name>Collection</name></type> <name>entries</name></decl></parameter>)</parameter_list> <block>{
			<if>if <condition>(<expr><call><name><name>selectedTypes</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><name>markerType</name></expr></argument>)</argument_list></call></expr>)</condition><then>
				<block type="pseudo"><expr_stmt><expr><call><name><name>entries</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>

		}</block></function>

		<comment type="block">/*
		 * (non-Javadoc)
		 * 
		 * @see org.eclipse.ui.internal.provisional.views.markers.TypesConfigurationArea.TypesEntry#getChildren()
		 */</comment>
		<function><specifier>public</specifier> <type><name>Collection</name></type> <name>getChildren</name><parameter_list>()</parameter_list> <block>{
			<return>return <expr><name>EMPTY_COLLECTION</name></expr>;</return>
		}</block></function>

		<comment type="block">/*
		 * (non-Javadoc)
		 * 
		 * @see org.eclipse.ui.internal.provisional.views.markers.TypesConfigurationArea.TypesEntry#getLabel()
		 */</comment>
		<function><specifier>public</specifier> <type><name>String</name></type> <name>getLabel</name><parameter_list>()</parameter_list> <block>{
			<return>return <expr><call><name><name>markerType</name><operator>.</operator><name>getLabel</name></name><argument_list>()</argument_list></call></expr>;</return>
		}</block></function>

		<comment type="block" format="javadoc">/**
		 * Return the marker type for the receiver.
		 * 
		 * @return MarkerType
		 */</comment>
		<function><specifier>public</specifier> <type><name>MarkerType</name></type> <name>getMarkerType</name><parameter_list>()</parameter_list> <block>{
			<return>return <expr><name>markerType</name></expr>;</return>
		}</block></function>

		<comment type="block">/*
		 * (non-Javadoc)
		 * 
		 * @see org.eclipse.ui.internal.provisional.views.markers.TypesConfigurationArea.TypesEntry#getParent()
		 */</comment>
		<function><specifier>public</specifier> <type><name>TypesEntry</name></type> <name>getParent</name><parameter_list>()</parameter_list> <block>{
			<return>return <expr><name>category</name></expr>;</return>
		}</block></function>

		<comment type="block">/*
		 * (non-Javadoc)
		 * 
		 * @see org.eclipse.ui.internal.provisional.views.markers.TypesConfigurationArea.TypesEntry#hasChildren()
		 */</comment>
		<function><specifier>public</specifier> <type><name>boolean</name></type> <name>hasChildren</name><parameter_list>()</parameter_list> <block>{
			<return>return <expr><literal type="boolean">false</literal></expr>;</return>
		}</block></function>

		<comment type="block" format="javadoc">/**
		 * Set the category of the receiver.
		 * 
		 * @param categoryEntry
		 */</comment>
		<function><specifier>public</specifier> <type><name>void</name></type> <name>setParent</name><parameter_list>(<parameter><decl><type><name>CategoryEntry</name></type> <name>categoryEntry</name></decl></parameter>)</parameter_list> <block>{
			<expr_stmt><expr><name>category</name> <operator>=</operator> <name>categoryEntry</name></expr>;</expr_stmt>

		}</block></function>

	}</block></class>

	<class><specifier>private</specifier> <specifier>abstract</specifier> class <name>TypesEntry</name> <block>{

		<comment type="block" format="javadoc">/**
		 * Add any elements that contain a type in selectedTypes tp entries.
		 * 
		 * @param selectedTypes
		 * @param entries
		 */</comment>
		<function_decl><specifier>public</specifier> <specifier>abstract</specifier> <type><name>void</name></type> <name>addElementsMatching</name><parameter_list>(<parameter><decl><type><name>Collection</name></type> <name>selectedTypes</name></decl></parameter>,
				<parameter><decl><type><name>Collection</name></type> <name>entries</name></decl></parameter>)</parameter_list>;</function_decl>

		<comment type="block" format="javadoc">/**
		 * Return the children of the receiver.
		 * 
		 * @return TypesEntry[]
		 */</comment>
		<function_decl><specifier>public</specifier> <specifier>abstract</specifier> <type><name>Collection</name></type> <name>getChildren</name><parameter_list>()</parameter_list>;</function_decl>

		<comment type="block" format="javadoc">/**
		 * Return the label for the receiver.
		 * 
		 * @return String
		 */</comment>
		<function_decl><specifier>public</specifier> <specifier>abstract</specifier> <type><name>String</name></type> <name>getLabel</name><parameter_list>()</parameter_list>;</function_decl>

		<comment type="block" format="javadoc">/**
		 * Return the parent of the receiver.
		 * 
		 * @return TypesEntry
		 */</comment>
		<function_decl><specifier>public</specifier> <specifier>abstract</specifier> <type><name>TypesEntry</name></type> <name>getParent</name><parameter_list>()</parameter_list>;</function_decl>

		<comment type="block" format="javadoc">/**
		 * Return whether or not the receiver has children.
		 * 
		 * @return boolean
		 */</comment>
		<function_decl><specifier>public</specifier> <specifier>abstract</specifier> <type><name>boolean</name></type> <name>hasChildren</name><parameter_list>()</parameter_list>;</function_decl>

	}</block></class>

	<decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><name>Collection</name></type> <name>EMPTY_COLLECTION</name> <init>= <expr><operator>new</operator> <call><name>HashSet</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><specifier>private</specifier> <type><name>HashMap</name></type> <name>models</name> <init>= <expr><operator>new</operator> <call><name>HashMap</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><specifier>private</specifier> <type><name>CheckboxTreeViewer</name></type> <name>typesViewer</name></decl>;</decl_stmt>

	<comment type="block">/*
	 * (non-Javadoc)
	 * 
	 * @see org.eclipse.ui.internal.provisional.views.markers.api.FilterConfigurationArea#apply(org.eclipse.ui.internal.provisional.views.markers.api.MarkerFieldFilter)
	 */</comment>
	<function><specifier>public</specifier> <type><name>void</name></type> <name>apply</name><parameter_list>(<parameter><decl><type><name>MarkerFieldFilter</name></type> <name>filter</name></decl></parameter>)</parameter_list> <block>{
		<decl_stmt><decl><type><name>Collection</name></type> <name>selectedTypes</name> <init>= <expr><operator>new</operator> <call><name>ArrayList</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name><name>Object</name><index>[]</index></name></type> <name>elements</name> <init>= <expr><call><name><name>typesViewer</name><operator>.</operator><name>getCheckedElements</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>elements</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
			<if>if <condition>(<expr><name><name>elements</name><index>[<expr><name>i</name></expr>]</index></name> <operator>instanceof</operator> <name>MarkerTypeEntry</name></expr>)</condition><then>
				<block type="pseudo"><expr_stmt><expr><call><name><name>selectedTypes</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>MarkerTypeEntry</name><operator>)</operator> <name><name>elements</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator>
						<operator>.</operator><call><name>getMarkerType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
		}</block></for>
		<expr_stmt><expr><operator>(</operator><operator>(</operator><name>MarkerTypeFieldFilter</name><operator>)</operator> <name>filter</name><operator>)</operator><operator>.</operator><call><name>setSelectedTypes</name><argument_list>(<argument><expr><name>selectedTypes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	}</block></function>

	<comment type="block">/*
	 * (non-Javadoc)
	 * 
	 * @see org.eclipse.ui.internal.provisional.views.markers.FilterConfigurationArea#applyToGroup(org.eclipse.ui.internal.provisional.views.markers.MarkerFieldFilterGroup)
	 */</comment>
	<function><specifier>public</specifier> <type><name>void</name></type> <name>applyToGroup</name><parameter_list>(<parameter><decl><type><name>MarkerFieldFilterGroup</name></type> <name>group</name></decl></parameter>)</parameter_list> <block>{
		<comment type="line">// Nothing to set at the group level</comment>
	}</block></function>

	<comment type="block">/*
	 * (non-Javadoc)
	 * 
	 * @see org.eclipse.ui.internal.provisional.views.markers.FilterConfigurationArea#createContents(org.eclipse.swt.widgets.Composite)
	 */</comment>
	<function><specifier>public</specifier> <type><name>void</name></type> <name>createContents</name><parameter_list>(<parameter><decl><type><name>Composite</name></type> <name>parent</name></decl></parameter>)</parameter_list> <block>{

		<decl_stmt><decl><type><name>Composite</name></type> <name>composite</name> <init>= <expr><operator>new</operator> <call><name>Composite</name><argument_list>(<argument><expr><name>parent</name></expr></argument>, <argument><expr><name><name>SWT</name><operator>.</operator><name>NONE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>composite</name><operator>.</operator><name>setLayoutData</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>GridData</name><argument_list>(<argument><expr><name><name>SWT</name><operator>.</operator><name>FILL</name></name></expr></argument>, <argument><expr><name><name>SWT</name><operator>.</operator><name>FILL</name></name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>GridLayout</name></type> <name>layout</name> <init>= <expr><operator>new</operator> <call><name>GridLayout</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name><name>layout</name><operator>.</operator><name>numColumns</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>composite</name><operator>.</operator><name>setLayout</name></name><argument_list>(<argument><expr><name>layout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<decl_stmt><decl><type><name>Tree</name></type> <name>tree</name> <init>= <expr><operator>new</operator> <call><name>Tree</name><argument_list>(<argument><expr><name>composite</name></expr></argument>, <argument><expr><name><name>SWT</name><operator>.</operator><name>CHECK</name></name> <operator>|</operator> <name><name>SWT</name><operator>.</operator><name>H_SCROLL</name></name> <operator>|</operator> <name><name>SWT</name><operator>.</operator><name>V_SCROLL</name></name>
				<operator>|</operator> <name><name>SWT</name><operator>.</operator><name>MULTI</name></name> <operator>|</operator> <name><name>SWT</name><operator>.</operator><name>FULL_SELECTION</name></name> <operator>|</operator> <name><name>SWT</name><operator>.</operator><name>BORDER</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>tree</name><operator>.</operator><name>setLinesVisible</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>tree</name><operator>.</operator><name>setHeaderVisible</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>TableLayout</name></type> <name>tableLayout</name> <init>= <expr><operator>new</operator> <call><name>TableLayout</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>tree</name><operator>.</operator><name>setLayout</name></name><argument_list>(<argument><expr><name>tableLayout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>tableLayout</name><operator>.</operator><name>addColumnData</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>ColumnWeightData</name><argument_list>(<argument><expr><literal type="number">100</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><operator>new</operator> <call><name>TreeColumn</name><argument_list>(<argument><expr><name>tree</name></expr></argument>, <argument><expr><name><name>SWT</name><operator>.</operator><name>NONE</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>typesViewer</name> <operator>=</operator> <operator>new</operator> <call><name>CheckboxTreeViewer</name><argument_list>(<argument><expr><name>tree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>initializeFontMetrics</name><argument_list>(<argument><expr><name>tree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<decl_stmt><decl><type><name>GridData</name></type> <name>gridData</name> <init>= <expr><operator>new</operator> <call><name>GridData</name><argument_list>(<argument><expr><name><name>SWT</name><operator>.</operator><name>FILL</name></name></expr></argument>, <argument><expr><name><name>SWT</name><operator>.</operator><name>FILL</name></name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name><name>gridData</name><operator>.</operator><name>widthHint</name></name> <operator>=</operator> <call><name><name>Dialog</name><operator>.</operator><name>convertVerticalDLUsToPixels</name></name><argument_list>(
				<argument><expr><call><name>getFontMetrics</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>gridData</name><operator>.</operator><name>heightHint</name></name> <operator>=</operator> <call><name><name>Dialog</name><operator>.</operator><name>convertVerticalDLUsToPixels</name></name><argument_list>(
				<argument><expr><call><name>getFontMetrics</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">75</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<decl_stmt><decl><type><specifier>final</specifier> <name>ITreeContentProvider</name></type> <name>typesContentProvider</name> <init>= <expr><call><name>getTypesContentProvider</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>typesViewer</name><operator>.</operator><name>getControl</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>setLayoutData</name><argument_list>(<argument><expr><name>gridData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>typesViewer</name><operator>.</operator><name>setContentProvider</name></name><argument_list>(<argument><expr><name>typesContentProvider</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>typesViewer</name><operator>.</operator><name>setLabelProvider</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>LabelProvider</name></super><argument_list>()</argument_list> <block>{
			<comment type="block">/*
			 * (non-Javadoc)
			 * 
			 * @see org.eclipse.jface.viewers.LabelProvider#getText(java.lang.Object)
			 */</comment>
			<function><specifier>public</specifier> <type><name>String</name></type> <name>getText</name><parameter_list>(<parameter><decl><type><name>Object</name></type> <name>element</name></decl></parameter>)</parameter_list> <block>{
				<return>return <expr><operator>(</operator><operator>(</operator><name>TypesEntry</name><operator>)</operator> <name>element</name><operator>)</operator><operator>.</operator><call><name>getLabel</name><argument_list>()</argument_list></call></expr>;</return>
			}</block></function>
		}</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>typesViewer</name><operator>.</operator><name>setComparator</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>ViewerComparator</name></super><argument_list>()</argument_list> <block>{
			<comment type="block">/*
			 * (non-Javadoc)
			 * 
			 * @see org.eclipse.jface.viewers.ViewerComparator#compare(org.eclipse.jface.viewers.Viewer,
			 *      java.lang.Object, java.lang.Object)
			 */</comment>
			<function><specifier>public</specifier> <type><name>int</name></type> <name>compare</name><parameter_list>(<parameter><decl><type><name>Viewer</name></type> <name>viewer</name></decl></parameter>, <parameter><decl><type><name>Object</name></type> <name>e1</name></decl></parameter>, <parameter><decl><type><name>Object</name></type> <name>e2</name></decl></parameter>)</parameter_list> <block>{
				<return>return <expr><operator>(</operator><operator>(</operator><name>TypesEntry</name><operator>)</operator> <name>e1</name><operator>)</operator><operator>.</operator><call><name>getLabel</name><argument_list>()</argument_list></call><operator>.</operator><call><name>compareTo</name><argument_list>(
						<argument><expr><operator>(</operator><operator>(</operator><name>TypesEntry</name><operator>)</operator> <name>e2</name><operator>)</operator><operator>.</operator><call><name>getLabel</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
			}</block></function>
		}</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>typesViewer</name><operator>.</operator><name>addCheckStateListener</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>ICheckStateListener</name></super><argument_list>()</argument_list> <block>{
			<function><specifier>public</specifier> <type><name>void</name></type> <name>checkStateChanged</name><parameter_list>(<parameter><decl><type><name>CheckStateChangedEvent</name></type> <name>event</name></decl></parameter>)</parameter_list> <block>{
				<decl_stmt><decl><type><name>Object</name></type> <name>element</name> <init>= <expr><call><name><name>event</name><operator>.</operator><name>getElement</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>boolean</name></type> <name>checked</name> <init>= <expr><call><name><name>event</name><operator>.</operator><name>getChecked</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><call><name>setChildrenChecked</name><argument_list>(<argument><expr><name>element</name></expr></argument>, <argument><expr><name>checked</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>setParentCheckState</name><argument_list>(<argument><expr><name>element</name></expr></argument>, <argument><expr><name>checked</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></function>

			<comment type="block" format="javadoc">/**
			 * Set the check state of the children of element to
			 * &lt;code&gt;true&lt;/code&gt;.
			 * 
			 * @param element
			 * @param checked
			 */</comment>
			<function><specifier>private</specifier> <type><name>void</name></type> <name>setChildrenChecked</name><parameter_list>(<parameter><decl><type><name>Object</name></type> <name>element</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>checked</name></decl></parameter>)</parameter_list> <block>{

				<decl_stmt><decl><type><name><name>Object</name><index>[]</index></name></type> <name>children</name> <init>= <expr><call><name><name>typesContentProvider</name><operator>.</operator><name>getChildren</name></name><argument_list>(<argument><expr><name>element</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<if>if <condition>(<expr><name><name>children</name><operator>.</operator><name>length</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
					<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>children</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
						<expr_stmt><expr><call><name><name>typesViewer</name><operator>.</operator><name>setChecked</name></name><argument_list>(<argument><expr><name><name>children</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>checked</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></for>
				}</block></then></if>

			}</block></function>

			<comment type="block" format="javadoc">/**
			 * Update the parent check state based on the state of the element
			 * 
			 * @param element
			 * @param checked
			 */</comment>
			<function><specifier>private</specifier> <type><name>void</name></type> <name>setParentCheckState</name><parameter_list>(<parameter><decl><type><name>Object</name></type> <name>element</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>checked</name></decl></parameter>)</parameter_list> <block>{

				<decl_stmt><decl><type><name>Object</name></type> <name>parent</name> <init>= <expr><call><name><name>typesContentProvider</name><operator>.</operator><name>getParent</name></name><argument_list>(<argument><expr><name>element</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<if>if <condition>(<expr><name>parent</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then>
					<block type="pseudo"><return>return;</return></block></then></if>

				<decl_stmt><decl><type><name><name>Object</name><index>[]</index></name></type> <name>children</name> <init>= <expr><call><name><name>typesContentProvider</name><operator>.</operator><name>getChildren</name></name><argument_list>(<argument><expr><name>parent</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

				<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>children</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<comment type="line">// At least one</comment>
					<comment type="line">// different</comment>
					<if>if <condition>(<expr><call><name><name>typesViewer</name><operator>.</operator><name>getChecked</name></name><argument_list>(<argument><expr><name><name>children</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>checked</name></expr>)</condition><then> <block>{
						<expr_stmt><expr><call><name><name>typesViewer</name><operator>.</operator><name>setGrayChecked</name></name><argument_list>(<argument><expr><name>parent</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<return>return;</return>
					}</block></then></if>
				}</block></for>
				<comment type="line">// All are the same - update the parent</comment>
				<expr_stmt><expr><call><name><name>typesViewer</name><operator>.</operator><name>setChecked</name></name><argument_list>(<argument><expr><name>parent</name></expr></argument>, <argument><expr><name>checked</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			}</block></function>
		}</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<decl_stmt><decl><type><name>Composite</name></type> <name>buttonComposite</name> <init>= <expr><operator>new</operator> <call><name>Composite</name><argument_list>(<argument><expr><name>composite</name></expr></argument>, <argument><expr><name><name>SWT</name><operator>.</operator><name>NONE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>GridLayout</name></type> <name>buttonLayout</name> <init>= <expr><operator>new</operator> <call><name>GridLayout</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name><name>buttonLayout</name><operator>.</operator><name>marginWidth</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>buttonComposite</name><operator>.</operator><name>setLayout</name></name><argument_list>(<argument><expr><name>buttonLayout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>GridData</name></type> <name>buttonsData</name> <init>= <expr><operator>new</operator> <call><name>GridData</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name><name>buttonsData</name><operator>.</operator><name>verticalAlignment</name></name> <operator>=</operator> <name><name>GridData</name><operator>.</operator><name>BEGINNING</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>buttonComposite</name><operator>.</operator><name>setLayoutData</name></name><argument_list>(<argument><expr><name>buttonsData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<decl_stmt><decl><type><name>Button</name></type> <name>selectAllButton</name> <init>= <expr><operator>new</operator> <call><name>Button</name><argument_list>(<argument><expr><name>buttonComposite</name></expr></argument>, <argument><expr><name><name>SWT</name><operator>.</operator><name>PUSH</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>selectAllButton</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><name><name>MarkerMessages</name><operator>.</operator><name>filtersDialog_selectAllTypes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>selectAllButton</name><operator>.</operator><name>addSelectionListener</name></name><argument_list>(<argument><expr><call><name>getSelectAllButtonListener</name><argument_list>(
				<argument><expr><name>typesContentProvider</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>setButtonLayoutData</name><argument_list>(<argument><expr><name>selectAllButton</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<decl_stmt><decl><type><name>Button</name></type> <name>deselectAllButton</name> <init>= <expr><operator>new</operator> <call><name>Button</name><argument_list>(<argument><expr><name>buttonComposite</name></expr></argument>, <argument><expr><name><name>SWT</name><operator>.</operator><name>PUSH</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>deselectAllButton</name>
				<operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><name><name>MarkerMessages</name><operator>.</operator><name>filtersDialog_deselectAllTypes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>deselectAllButton</name><operator>.</operator><name>addSelectionListener</name></name><argument_list>(<argument><expr><call><name>getSelectAllButtonListener</name><argument_list>(
				<argument><expr><name>typesContentProvider</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>setButtonLayoutData</name><argument_list>(<argument><expr><name>deselectAllButton</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Get the listener for select all and deselect all.
	 * 
	 * @param typesContentProvider
	 * @param checked
	 *            the check state to set
	 * @return SelectionListener
	 */</comment>
	<function><specifier>private</specifier> <type><name>SelectionListener</name></type> <name>getSelectAllButtonListener</name><parameter_list>(
			<parameter><decl><type><specifier>final</specifier> <name>ITreeContentProvider</name></type> <name>typesContentProvider</name></decl></parameter>,
			<parameter><decl><type><specifier>final</specifier> <name>boolean</name></type> <name>checked</name></decl></parameter>)</parameter_list> <block>{
		<return>return <expr><operator>new</operator> <class><super><name>SelectionListener</name></super><argument_list>()</argument_list> <block>{
			<comment type="block">/*
			 * (non-Javadoc)
			 * 
			 * @see org.eclipse.swt.events.SelectionListener#widgetDefaultSelected(org.eclipse.swt.events.SelectionEvent)
			 */</comment>
			<function><specifier>public</specifier> <type><name>void</name></type> <name>widgetDefaultSelected</name><parameter_list>(<parameter><decl><type><name>SelectionEvent</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{

			}</block></function>

			<comment type="block">/*
			 * (non-Javadoc)
			 * 
			 * @see org.eclipse.swt.events.SelectionListener#widgetSelected(org.eclipse.swt.events.SelectionEvent)
			 */</comment>
			<function><specifier>public</specifier> <type><name>void</name></type> <name>widgetSelected</name><parameter_list>(<parameter><decl><type><name>SelectionEvent</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
				<decl_stmt><decl><type><name><name>Object</name><index>[]</index></name></type> <name>elements</name> <init>= <expr><call><name><name>typesContentProvider</name>
						<operator>.</operator><name>getElements</name></name><argument_list>(<argument><expr><call><name><name>typesViewer</name><operator>.</operator><name>getInput</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>elements</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
					<expr_stmt><expr><call><name><name>typesViewer</name><operator>.</operator><name>setSubtreeChecked</name></name><argument_list>(<argument><expr><name><name>elements</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>checked</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				}</block></for>
			}</block></function>
		}</block></class></expr>;</return>
	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Return the elements for MarkerFieldFilterGroup groip.
	 * 
	 * @param group
	 * @return List of TypesEntry
	 */</comment>
	<function><specifier>protected</specifier> <type><name>List</name></type> <name>elementsForGroup</name><parameter_list>(<parameter><decl><type><name>MarkerFieldFilterGroup</name></type> <name>group</name></decl></parameter>)</parameter_list> <block>{

		<if>if <condition>(<expr><call><name><name>models</name><operator>.</operator><name>containsKey</name></name><argument_list>(<argument><expr><name>group</name></expr></argument>)</argument_list></call></expr>)</condition><then>
			<block type="pseudo"><return>return <expr><operator>(</operator><name>List</name><operator>)</operator> <call><name><name>models</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>group</name></expr></argument>)</argument_list></call></expr>;</return></block></then></if>
		<decl_stmt><decl><type><name>Iterator</name></type> <name>roots</name> <init>= <expr><call><name><name>group</name><operator>.</operator><name>getAllTypes</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>iterator</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>List</name></type> <name>markerNodes</name> <init>= <expr><operator>new</operator> <call><name>ArrayList</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>HashMap</name></type> <name>categories</name> <init>= <expr><operator>new</operator> <call><name>HashMap</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<while>while <condition>(<expr><call><name><name>roots</name><operator>.</operator><name>hasNext</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
			<decl_stmt><decl><type><name>MarkerType</name></type> <name>markerType</name> <init>= <expr><operator>(</operator><name>MarkerType</name><operator>)</operator> <call><name><name>roots</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

			<decl_stmt><decl><type><name>String</name></type> <name>categoryName</name> <init>= <expr><call><name><name>MarkerSupportRegistry</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call>
					<operator>.</operator><call><name>getCategory</name><argument_list>(<argument><expr><call><name><name>markerType</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

			<if>if <condition>(<expr><name>categoryName</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
				<expr_stmt><expr><call><name><name>markerNodes</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>MarkerTypeEntry</name><argument_list>(<argument><expr><name>markerType</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then> <else>else <block>{
				<decl_stmt><decl><type><name>CategoryEntry</name></type> <name>category</name></decl>;</decl_stmt>
				<if>if <condition>(<expr><call><name><name>categories</name><operator>.</operator><name>containsKey</name></name><argument_list>(<argument><expr><name>categoryName</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
					<expr_stmt><expr><name>category</name> <operator>=</operator> <operator>(</operator><name>CategoryEntry</name><operator>)</operator> <call><name><name>categories</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>categoryName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then> <else>else <block>{
					<expr_stmt><expr><name>category</name> <operator>=</operator> <operator>new</operator> <call><name>CategoryEntry</name><argument_list>(<argument><expr><name>categoryName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name>categories</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>categoryName</name></expr></argument>, <argument><expr><name>category</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name>markerNodes</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>category</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></else></if>
				<decl_stmt><decl><type><name>MarkerTypeEntry</name></type> <name>node</name> <init>= <expr><operator>new</operator> <call><name>MarkerTypeEntry</name><argument_list>(<argument><expr><name>markerType</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><call><name><name>category</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></else></if>

		}</block></while>
		<expr_stmt><expr><call><name><name>models</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>group</name></expr></argument>, <argument><expr><name>markerNodes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>markerNodes</name></expr>;</return>
	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Find the type entries for group that correspond to it's current selection
	 * and add them to the checked or grey checked lists as appropriate.
	 * 
	 * @param group
	 * @param entries
	 * @param greyEntries
	 */</comment>
	<function><specifier>private</specifier> <type><name>void</name></type> <name>findTypeEntries</name><parameter_list>(<parameter><decl><type><name>MarkerFieldFilterGroup</name></type> <name>group</name></decl></parameter>,
			<parameter><decl><type><name>Collection</name></type> <name>entries</name></decl></parameter>, <parameter><decl><type><name>Collection</name></type> <name>greyEntries</name></decl></parameter>)</parameter_list> <block>{
		<decl_stmt><decl><type><name>Iterator</name></type> <name>elements</name> <init>= <expr><call><name>elementsForGroup</name><argument_list>(<argument><expr><name>group</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>iterator</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

		<decl_stmt><decl><type><name>Collection</name></type> <name>selectedTypes</name> <init>= <expr><operator>(</operator><operator>(</operator><name>MarkerTypeFieldFilter</name><operator>)</operator> <call><name><name>group</name>
				<operator>.</operator><name>getFilter</name></name><argument_list>(<argument><expr><call><name><name>this</name><operator>.</operator><name>getField</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator><operator>.</operator><call><name>getSelectedTypes</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<while>while <condition>(<expr><call><name><name>elements</name><operator>.</operator><name>hasNext</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
			<decl_stmt><decl><type><name>TypesEntry</name></type> <name>entry</name> <init>= <expr><operator>(</operator><name>TypesEntry</name><operator>)</operator> <call><name><name>elements</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name><name>entry</name><operator>.</operator><name>addElementsMatching</name></name><argument_list>(<argument><expr><name>selectedTypes</name></expr></argument>, <argument><expr><name>entries</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if>if <condition>(<expr><call><name><name>entry</name><operator>.</operator><name>hasChildren</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{<comment type="line">// Is it a category?</comment>
				<decl_stmt><decl><type><name>Collection</name></type> <name>children</name> <init>= <expr><call><name><name>entry</name><operator>.</operator><name>getChildren</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
				<if>if <condition>(<expr><call><name><name>entries</name><operator>.</operator><name>containsAll</name></name><argument_list>(<argument><expr><name>children</name></expr></argument>)</argument_list></call></expr>)</condition><then>
					<block type="pseudo"><expr_stmt><expr><call><name><name>entries</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
				<else>else <block>{<comment type="line">// See if we need to gray check it</comment>
					<decl_stmt><decl><type><name>Iterator</name></type> <name>iterator</name> <init>= <expr><call><name><name>children</name><operator>.</operator><name>iterator</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
					<while>while <condition>(<expr><call><name><name>iterator</name><operator>.</operator><name>hasNext</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
						<if>if <condition>(<expr><call><name><name>entries</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><call><name><name>iterator</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
							<expr_stmt><expr><call><name><name>greyEntries</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							<break>break;</break>
						}</block></then></if>
					}</block></while>
				}</block></else></if>
			}</block></then></if>

		}</block></while>
	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Get the content provider for the types.
	 * 
	 * @return ITreeContentProvider
	 */</comment>
	<function><specifier>private</specifier> <type><name>ITreeContentProvider</name></type> <name>getTypesContentProvider</name><parameter_list>()</parameter_list> <block>{
		<return>return <expr><operator>new</operator> <class><super><name>ITreeContentProvider</name></super><argument_list>()</argument_list> <block>{

			<comment type="block">/*
			 * (non-Javadoc)
			 * 
			 * @see org.eclipse.jface.viewers.IContentProvider#dispose()
			 */</comment>
			<function><specifier>public</specifier> <type><name>void</name></type> <name>dispose</name><parameter_list>()</parameter_list> <block>{
			}</block></function>

			<comment type="block">/*
			 * (non-Javadoc)
			 * 
			 * @see org.eclipse.jface.viewers.ITreeContentProvider#getChildren(java.lang.Object)
			 */</comment>
			<function><specifier>public</specifier> <type><name><name>Object</name><index>[]</index></name></type> <name>getChildren</name><parameter_list>(<parameter><decl><type><name>Object</name></type> <name>parentElement</name></decl></parameter>)</parameter_list> <block>{
				<return>return <expr><operator>(</operator><operator>(</operator><name>TypesEntry</name><operator>)</operator> <name>parentElement</name><operator>)</operator><operator>.</operator><call><name>getChildren</name><argument_list>()</argument_list></call><operator>.</operator><call><name>toArray</name><argument_list>()</argument_list></call></expr>;</return>
			}</block></function>

			<comment type="block">/*
			 * (non-Javadoc)
			 * 
			 * @see org.eclipse.jface.viewers.IStructuredContentProvider#getElements(java.lang.Object)
			 */</comment>
			<function><specifier>public</specifier> <type><name><name>Object</name><index>[]</index></name></type> <name>getElements</name><parameter_list>(<parameter><decl><type><name>Object</name></type> <name>inputElement</name></decl></parameter>)</parameter_list> <block>{
				<return>return <expr><call><name>elementsForGroup</name><argument_list>(<argument><expr><operator>(</operator><name>MarkerFieldFilterGroup</name><operator>)</operator> <name>inputElement</name></expr></argument>)</argument_list></call>
						<operator>.</operator><call><name>toArray</name><argument_list>()</argument_list></call></expr>;</return>
			}</block></function>

			<comment type="block">/*
			 * (non-Javadoc)
			 * 
			 * @see org.eclipse.jface.viewers.ITreeContentProvider#getParent(java.lang.Object)
			 */</comment>
			<function><specifier>public</specifier> <type><name>Object</name></type> <name>getParent</name><parameter_list>(<parameter><decl><type><name>Object</name></type> <name>element</name></decl></parameter>)</parameter_list> <block>{
				<return>return <expr><operator>(</operator><operator>(</operator><name>TypesEntry</name><operator>)</operator> <name>element</name><operator>)</operator><operator>.</operator><call><name>getParent</name><argument_list>()</argument_list></call></expr>;</return>
			}</block></function>

			<comment type="block">/*
			 * (non-Javadoc)
			 * 
			 * @see org.eclipse.jface.viewers.ITreeContentProvider#hasChildren(java.lang.Object)
			 */</comment>
			<function><specifier>public</specifier> <type><name>boolean</name></type> <name>hasChildren</name><parameter_list>(<parameter><decl><type><name>Object</name></type> <name>element</name></decl></parameter>)</parameter_list> <block>{
				<return>return <expr><operator>(</operator><operator>(</operator><name>TypesEntry</name><operator>)</operator> <name>element</name><operator>)</operator><operator>.</operator><call><name>hasChildren</name><argument_list>()</argument_list></call></expr>;</return>
			}</block></function>

			<comment type="block">/*
			 * (non-Javadoc)
			 * 
			 * @see org.eclipse.jface.viewers.IContentProvider#inputChanged(org.eclipse.jface.viewers.Viewer,
			 *      java.lang.Object, java.lang.Object)
			 */</comment>
			<function><specifier>public</specifier> <type><name>void</name></type> <name>inputChanged</name><parameter_list>(<parameter><decl><type><name>Viewer</name></type> <name>viewer</name></decl></parameter>, <parameter><decl><type><name>Object</name></type> <name>oldInput</name></decl></parameter>,
					<parameter><decl><type><name>Object</name></type> <name>newInput</name></decl></parameter>)</parameter_list> <block>{
			}</block></function>
		}</block></class></expr>;</return>
	}</block></function>

	<comment type="block">/*
	 * (non-Javadoc)
	 * 
	 * @see org.eclipse.ui.internal.provisional.views.markers.api.FilterConfigurationArea#initialize(org.eclipse.ui.internal.provisional.views.markers.api.MarkerFieldFilter)
	 */</comment>
	<function><specifier>public</specifier> <type><name>void</name></type> <name>initialize</name><parameter_list>(<parameter><decl><type><name>MarkerFieldFilter</name></type> <name>filter</name></decl></parameter>)</parameter_list> <block>{
		<comment type="line">// This was already done when initialising from the group.</comment>

	}</block></function>

	<comment type="block">/*
	 * (non-Javadoc)
	 * 
	 * @see org.eclipse.ui.internal.provisional.views.markers.FilterConfigurationArea#initializeFromGroup(org.eclipse.ui.internal.provisional.views.markers.MarkerFieldFilterGroup)
	 */</comment>
	<function><specifier>public</specifier> <type><name>void</name></type> <name>initializeFromGroup</name><parameter_list>(<parameter><decl><type><name>MarkerFieldFilterGroup</name></type> <name>group</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><call><name><name>typesViewer</name><operator>.</operator><name>setInput</name></name><argument_list>(<argument><expr><name>group</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>typesViewer</name><operator>.</operator><name>refresh</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>Collection</name></type> <name>checked</name> <init>= <expr><operator>new</operator> <call><name>HashSet</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>Collection</name></type> <name>greyed</name> <init>= <expr><operator>new</operator> <call><name>HashSet</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>findTypeEntries</name><argument_list>(<argument><expr><name>group</name></expr></argument>, <argument><expr><name>checked</name></expr></argument>, <argument><expr><name>greyed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>typesViewer</name><operator>.</operator><name>setCheckedElements</name></name><argument_list>(<argument><expr><call><name><name>checked</name><operator>.</operator><name>toArray</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>typesViewer</name><operator>.</operator><name>setGrayedElements</name></name><argument_list>(<argument><expr><call><name><name>greyed</name><operator>.</operator><name>toArray</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>

}</block></class>
</unit>

</unit>
