<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="0.9.5">

<unit revision="0.9.5" language="Java" filename="CrowdCode-com/crowdcoding/util/Pair.java" hash="5917bb6df7daad3f11fa1cfb361a03b831b3f716"><package>package <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>util</name></name>;</package>


<class><specifier>public</specifier> class <name><name>Pair</name><parameter_list>&lt;<parameter><name>A</name></parameter>, <parameter><name>B</name></parameter>&gt;</parameter_list></name> 
<block>{
	<decl_stmt><decl><specifier>public</specifier> <type><name>A</name></type> <name>a</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <type><name>B</name></type> <name>b</name></decl>;</decl_stmt>
	
	<constructor><specifier>public</specifier> <name>Pair</name><parameter_list>(<parameter><decl><type><name>A</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>B</name></type> <name>b</name></decl></parameter>)</parameter_list>
	<block>{
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>a</name></name> <operator>=</operator> <name>a</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>b</name></name> <operator>=</operator> <name>b</name></expr>;</expr_stmt>
	}</block></constructor>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="CrowdCode-com/crowdcoding/util/Util.java" hash="bb12ae7e78dc4034c7817ec6fcb4f15978492b81"><package>package <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>util</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>InputStream</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>NoSuchElementException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Scanner</name></name>;</import>

<class><specifier>public</specifier> class <name>Util</name> 
<block>{
	<function><specifier>public</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>convertStreamToString</name><parameter_list>(<parameter><decl><type><name>InputStream</name></type> <name>is</name></decl></parameter>)</parameter_list> <block>{
	    <try>try <block>{
	        <return>return <expr><operator>new</operator> <call><name>Scanner</name><argument_list>(<argument><expr><name>is</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>useDelimiter</name><argument_list>(<argument><expr><literal type="string">"\\A"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>next</name><argument_list>()</argument_list></call></expr>;</return>
	    }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>NoSuchElementException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
	        <return>return <expr><literal type="string">""</literal></expr>;</return>
	    }</block></catch></try>
	}</block></function>	
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="CrowdCode-com/crowdcoding/servlets/DispatchFilter.java" hash="38acd2ecfc3d23a8cc592ccee7f9d9e36f119376"><package>package <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>servlets</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>

<import>import <name><name>javax</name><operator>.</operator><name>servlet</name><operator>.</operator><name>Filter</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>servlet</name><operator>.</operator><name>FilterChain</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>servlet</name><operator>.</operator><name>FilterConfig</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>servlet</name><operator>.</operator><name>ServletException</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>servlet</name><operator>.</operator><name>ServletRequest</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>servlet</name><operator>.</operator><name>ServletResponse</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>servlet</name><operator>.</operator><name>http</name><operator>.</operator><name>HttpServletRequest</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>servlet</name><operator>.</operator><name>http</name><operator>.</operator><name>HttpServletResponse</name></name>;</import>

<class><specifier>public</specifier> class <name>DispatchFilter</name> <super><implements>implements <name>Filter</name></implements></super>
<block>{
	<function><specifier>public</specifier> <type><name>void</name></type> <name>doFilter</name><parameter_list>(<parameter><decl><type><name>ServletRequest</name></type> <name>request</name></decl></parameter>, <parameter><decl><type><name>ServletResponse</name></type> <name>response</name></decl></parameter>, <parameter><decl><type><name>FilterChain</name></type> <name>chain</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>ServletException</name></expr></argument>, <argument><expr><name>IOException</name></expr></argument></throws> 
	<block>{
		<decl_stmt><decl><type><name>HttpServletRequest</name></type> <name>req</name> <init>= <expr><operator>(</operator><name>HttpServletRequest</name><operator>)</operator> <name>request</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>String</name></type> <name>path</name> <init>= <expr><call><name><name>req</name><operator>.</operator><name>getRequestURI</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>substring</name><argument_list>(<argument><expr><call><name><name>req</name><operator>.</operator><name>getContextPath</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>length</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<if>if<condition>( <expr><call><name><name>path</name><operator>.</operator><name>startsWith</name></name><argument_list>(<argument><expr><literal type="string">"/developments/"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name><name>path</name><operator>.</operator><name>startsWith</name></name><argument_list>(<argument><expr><literal type="string">"/clientDist/"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name><name>path</name><operator>.</operator><name>startsWith</name></name><argument_list>(<argument><expr><literal type="string">"/dist/"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name><name>path</name><operator>.</operator><name>startsWith</name></name><argument_list>(<argument><expr><literal type="string">"/img"</literal></expr></argument>)</argument_list></call> <operator>||</operator><call><name><name>path</name><operator>.</operator><name>startsWith</name></name><argument_list>(<argument><expr><literal type="string">"/include"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name><name>path</name><operator>.</operator><name>startsWith</name></name><argument_list>(<argument><expr><literal type="string">"/_ah"</literal></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
		    <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		    <expr_stmt><expr><call><name><name>chain</name><operator>.</operator><name>doFilter</name></name><argument_list>(<argument><expr><name>request</name></expr></argument>, <argument><expr><name>response</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// Goes to default servlet.</comment>
		}</block></then> <else>else <block>{
		    <expr_stmt><expr><call><name><name>request</name><operator>.</operator><name>getRequestDispatcher</name></name><argument_list>(<argument><expr><literal type="string">"/servlet"</literal> <operator>+</operator> <name>path</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>forward</name><argument_list>(<argument><expr><name>request</name></expr></argument>, <argument><expr><name>response</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></else></if>
	}</block></function>

	<function><specifier>public</specifier> <type><name>void</name></type> <name>destroy</name><parameter_list>()</parameter_list> <block>{
	}</block></function>

	<function><specifier>public</specifier> <type><name>void</name></type> <name>init</name><parameter_list>(<parameter><decl><type><name>FilterConfig</name></type> <name>arg0</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>ServletException</name></expr></argument></throws> <block>{
	}</block></function>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="CrowdCode-com/crowdcoding/servlets/ThreadContext.java" hash="a2d26dc757645ca55504bfa5b7aeaba7f8ee00ff">
	<package>package <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>servlets</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>LinkedList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Queue</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>ConcurrentLinkedQueue</name></name>;</import>

	<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>commands</name><operator>.</operator><name>Command</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>history</name><operator>.</operator><name>HistoryLog</name><operator>.</operator><name>EventNode</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>util</name><operator>.</operator><name>FirebaseService</name><operator>.</operator><name>FirebaseWrite</name></name>;</import>

	<class><specifier>public</specifier> class <name>ThreadContext</name> <block>{

		<decl_stmt><decl><specifier>private</specifier> <type><name><name>Queue</name><argument_list type="generic">&lt;<argument><name>Command</name></argument>&gt;</argument_list></name></type> <name>commandsList</name>							    <init>= <expr><operator>new</operator> <call><name><name>LinkedList</name><argument_list type="generic">&lt;<argument><name>Command</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><specifier>private</specifier> <type><name><name>ConcurrentLinkedQueue</name><argument_list type="generic">&lt;<argument><name>FirebaseWrite</name></argument>&gt;</argument_list></name></type> <name>firebaseWritesList</name> <init>= <expr><operator>new</operator> <call><name><name>ConcurrentLinkedQueue</name><argument_list type="generic">&lt;<argument><name>FirebaseWrite</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><specifier>private</specifier> <type><name><name>ConcurrentLinkedQueue</name><argument_list type="generic">&lt;<argument><name>EventNode</name></argument>&gt;</argument_list></name></type> <name>eventList</name> 				<init>= <expr><operator>new</operator> <call><name><name>ConcurrentLinkedQueue</name><argument_list type="generic">&lt;<argument><name>EventNode</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

	    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><name><name>ThreadLocal</name><argument_list type="generic">&lt;<argument><name>ThreadContext</name></argument>&gt;</argument_list></name></type> <name>threadLocal</name> <init>= <expr><operator>new</operator> <class><super><name><name>ThreadLocal</name><argument_list type="generic">&lt;<argument><name>ThreadContext</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list><block>{
	        <function><annotation>@<name>Override</name></annotation>
	        <specifier>protected</specifier> <type><name>ThreadContext</name></type> <name>initialValue</name><parameter_list>()</parameter_list> <block>{
	            <return>return <expr><operator>new</operator> <call><name>ThreadContext</name><argument_list>()</argument_list></call></expr>;</return>
	        }</block></function>

	    }</block></class></expr></init></decl>;</decl_stmt>
	    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>ThreadContext</name></type> <name>get</name><parameter_list>()</parameter_list> <block>{
	        <return>return <expr><call><name><name>threadLocal</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr>;</return>
	    }</block></function>

	    <function><specifier>public</specifier> <type><name>void</name></type> <name>reset</name><parameter_list>()</parameter_list> <block>{
	    	<expr_stmt><expr><name>eventList</name> 		  	<operator>=</operator> <operator>new</operator> <call><name><name>ConcurrentLinkedQueue</name><argument_list type="generic">&lt;<argument><name>EventNode</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	    	<expr_stmt><expr><name>commandsList</name>		<operator>=</operator> <operator>new</operator> <call><name><name>LinkedList</name><argument_list type="generic">&lt;<argument><name>Command</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>firebaseWritesList</name>	<operator>=</operator> <operator>new</operator> <call><name><name>ConcurrentLinkedQueue</name><argument_list type="generic">&lt;<argument><name>FirebaseWrite</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	    }</block></function>

	    <function><specifier>public</specifier> <type><name>void</name></type> <name>addCommand</name><parameter_list>(<parameter><decl><type><name>Command</name></type> <name>command</name></decl></parameter>)</parameter_list> <block>{
	    	<expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>commandsList</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>command</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></function>

	    <function><specifier>public</specifier> <type><name><name>Queue</name><argument_list type="generic">&lt;<argument><name>Command</name></argument>&gt;</argument_list></name></type> <name>getCommands</name><parameter_list>()</parameter_list> <block>{
			<return>return <expr><name>commandsList</name></expr>;</return>
		}</block></function>

	    <function><specifier>public</specifier> <type><name>void</name></type> <name>addfirebaseWrite</name><parameter_list>(<parameter><decl><type><name>FirebaseWrite</name></type> <name>firebaseWrite</name></decl></parameter>)</parameter_list> <block>{
	    	<expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>firebaseWritesList</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>firebaseWrite</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></function>

	    <function><specifier>public</specifier> <type><name><name>ConcurrentLinkedQueue</name><argument_list type="generic">&lt;<argument><name>FirebaseWrite</name></argument>&gt;</argument_list></name></type> <name>getFirebaseWritesList</name><parameter_list>()</parameter_list> <block>{
			<return>return <expr><name>firebaseWritesList</name></expr>;</return>
		}</block></function>
	    <function><specifier>public</specifier> <type><name>void</name></type> <name>addEventList</name><parameter_list>(<parameter><decl><type><name>EventNode</name></type> <name>eventNode</name></decl></parameter>)</parameter_list> <block>{
	    	<expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>eventList</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>eventNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></function>

	    <function><specifier>public</specifier> <type><name><name>ConcurrentLinkedQueue</name><argument_list type="generic">&lt;<argument><name>EventNode</name></argument>&gt;</argument_list></name></type> <name>getEventList</name><parameter_list>()</parameter_list> <block>{
			<return>return <expr><name>eventList</name></expr>;</return>
		}</block></function>

	}</block></class></unit>

<unit revision="0.9.5" language="Java" filename="CrowdCode-com/crowdcoding/history/ArtifactCreated.java" hash="c854cf5579bd91d40184b2aa05642f3c7bceba45"><package>package <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>history</name></name>;</package>

<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>entities</name><operator>.</operator><name>artifacts</name><operator>.</operator><name>Artifact</name></name>;</import>

<class><specifier>public</specifier> class <name>ArtifactCreated</name> <super><extends>extends <name>HistoryEvent</name></extends></super>
<block>{
	<decl_stmt><decl><specifier>public</specifier> <type><name>String</name></type> <name>eventType</name> <init>= <expr><literal type="string">"artifact.created"</literal></expr></init></decl>;</decl_stmt>

	<constructor><specifier>public</specifier> <name>ArtifactCreated</name><parameter_list>( <parameter><decl><type><name>Artifact</name></type> <name>artifact</name></decl></parameter> )</parameter_list>
	<block>{
		<expr_stmt><expr><call><name>super</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>setArtifact</name></name><argument_list>(<argument><expr><name>artifact</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></constructor>

	<function><specifier>public</specifier> <type><name>String</name></type> <name>getEventType</name><parameter_list>()</parameter_list><block>{
		<return>return <expr><name>eventType</name></expr>;</return>
	}</block></function>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="CrowdCode-com/crowdcoding/history/HistoryEventGroup.java" hash="be3a1360e12edb784525511d7fc47db0d514f199"><package>package <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>history</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>dto</name><operator>.</operator><name>DTO</name></name>;</import>

<comment type="block">/* A HistoryEvent captures a CrowdCoding event that is logged into the history stream.
 */</comment>
<class><specifier>public</specifier> <specifier>abstract</specifier> class <name>HistoryEventGroup</name> <super><extends>extends <name>DTO</name></extends></super>
<block>{
	<decl_stmt><decl><specifier>public</specifier> <type><name><name>List</name><argument_list type="generic">&lt;<argument><name>HistoryEvent</name></argument>&gt;</argument_list></name></type> <name>events</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>HistoryEvent</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

	<constructor><specifier>public</specifier> <name>HistoryEventGroup</name><parameter_list>()</parameter_list>
	<block>{
	}</block></constructor>

	<function><specifier>public</specifier> <type><name>void</name></type> <name>addEvent</name><parameter_list>(<parameter><decl><type><name>HistoryEvent</name></type> <name>event</name></decl></parameter>)</parameter_list><block>{
		<expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>events</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<function><specifier>public</specifier> <type><name>String</name></type> <name>toString</name><parameter_list>()</parameter_list>
	<block>{
		<decl_stmt><decl><type><name>String</name></type> <name>ret</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>Integer</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
		<for>for<control>( <init><decl><type><name>HistoryEvent</name></type> <name>event</name><range>:<expr><name><name>this</name><operator>.</operator><name>events</name></name></expr></range></decl></init> )</control><block>{
			<expr_stmt><expr><name>ret</name> <operator>+=</operator> <literal type="string">"\""</literal><operator>+</operator><call><name><name>event</name><operator>.</operator><name>generateID</name></name><argument_list>()</argument_list></call><operator>+</operator><literal type="string">"\":"</literal> <operator>+</operator> <call><name><name>event</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr> ;</expr_stmt>
			<if>if<condition>( <expr><operator>++</operator><name>i</name> <operator>&lt;</operator> <call><name><name>this</name><operator>.</operator><name>events</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr> )</condition><then>
				<block type="pseudo"><expr_stmt><expr><name>ret</name> <operator>+=</operator> <literal type="string">","</literal></expr>;</expr_stmt></block></then></if>
		}</block></for>
		<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"Events obj = "</literal><operator>+</operator><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><literal type="string">"{"</literal> <operator>+</operator> <literal type="string">"}"</literal></expr>;</return>
	}</block></function>


}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="CrowdCode-com/crowdcoding/history/HistoryEvent.java" hash="c92e71aebede641d55d53c1a8d4db1dcabd7393a"><package>package <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>history</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Date</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>dto</name><operator>.</operator><name>DTO</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>entities</name><operator>.</operator><name>artifacts</name><operator>.</operator><name>Artifact</name></name>;</import>

<comment type="block">/* A HistoryEvent captures a CrowdCoding event that is logged into the history stream.
 */</comment>
<class><specifier>public</specifier> <specifier>abstract</specifier> class <name>HistoryEvent</name> <super><extends>extends <name>DTO</name></extends></super> 
<block>{
	<decl_stmt><decl><specifier>public</specifier> <type><name>String</name></type> <name>parentID</name></decl>;</decl_stmt>			<comment type="line">// ID of the parent. Null if there is no parent.</comment>
	
	<decl_stmt><decl><specifier>public</specifier> <type><name>String</name></type> <name>artifactType</name></decl>;</decl_stmt>     <comment type="line">// { Entrypoint, Function, UserStory, Test } </comment>
	<decl_stmt><decl><specifier>public</specifier> <type><name>String</name></type> <name>artifactID</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <type><name>String</name></type> <name>artifactName</name></decl>;</decl_stmt>		<comment type="line">// may be empty for artifacts with no name</comment>
	
	<decl_stmt><decl><specifier>public</specifier> <type><name>String</name></type> <name>timestamp</name></decl>;</decl_stmt>		<comment type="line">// timestamp of the event to the nearest second</comment>
	<decl_stmt><decl><specifier>public</specifier> <type><name>String</name></type> <name>timeInMillis</name></decl>;</decl_stmt>		<comment type="line">// more accurate timestamp, formatted as milliseconds since Jan 1, 1970</comment>
	
	<constructor><specifier>public</specifier> <name>HistoryEvent</name><parameter_list>()</parameter_list>
	<block>{	
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>artifactID</name></name>   <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>artifactType</name></name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>artifactName</name></name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt>
		
		<decl_stmt><decl><type><name>Date</name></type> <name>currentTime</name> <init>= <expr><operator>new</operator> <call><name>Date</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>		
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>timestamp</name></name>    <operator>=</operator> <call><name><name>currentTime</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>timeInMillis</name></name> <operator>=</operator> <call><name><name>Long</name><operator>.</operator><name>toString</name></name><argument_list>(<argument><expr><call><name><name>System</name><operator>.</operator><name>currentTimeMillis</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>		
	}</block></constructor>
	
	<function><specifier>protected</specifier> <type><name>void</name></type> <name>setArtifact</name><parameter_list>(<parameter><decl><type><name>Artifact</name></type> <name>artifact</name></decl></parameter>)</parameter_list><block>{
		<if>if <condition>(<expr><name>artifact</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then>
		<block>{
			<expr_stmt><expr><name><name>this</name><operator>.</operator><name>artifactID</name></name>   <operator>=</operator> <call><name><name>Long</name><operator>.</operator><name>toString</name></name><argument_list>(<argument><expr><call><name><name>artifact</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>this</name><operator>.</operator><name>artifactType</name></name> <operator>=</operator> <call><name><name>artifact</name><operator>.</operator><name>getArtifactType</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>this</name><operator>.</operator><name>artifactName</name></name> <operator>=</operator> <call><name><name>artifact</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>
	}</block></function>
	
	<comment type="line">// Generates the unique ID for this history event.</comment>
	<function><specifier>public</specifier> <type><name>String</name></type> <name>generateID</name><parameter_list>()</parameter_list>
	<block>{
		<comment type="line">// Concatenate timeInMillis with the artifact type and ID. The goal is to have an id</comment>
		<comment type="line">// that is highly likely to be globally unique across the entire project. As long as there are not</comment>
		<comment type="line">// multiple changes to the same artifact within a single millisecond, this is true.</comment>
		<return>return <expr><name>timeInMillis</name> <operator>+</operator> <literal type="string">"-"</literal> <operator>+</operator> <name>artifactType</name> <operator>+</operator> <literal type="string">"-"</literal><operator>+</operator> <name>artifactID</name></expr>;</return>		
	}</block></function>
	
	<function><specifier>public</specifier> <type><name>String</name></type> <name>getEventType</name><parameter_list>()</parameter_list><block>{
		<return>return <expr><literal type="string">""</literal></expr>;</return>
	}</block></function>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="CrowdCode-com/crowdcoding/history/HistoryLog.java" hash="a1d98d77084b5f91f09f59f07f326db70e203173"><package>package <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>history</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Iterator</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>LinkedList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Stack</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>ConcurrentLinkedQueue</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>logging</name><operator>.</operator><name>Logger</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>servlets</name><operator>.</operator><name>ThreadContext</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>util</name><operator>.</operator><name>FirebaseService</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>util</name><operator>.</operator><name>Pair</name></name>;</import>

<comment type="block">/* HistoryLogs capture the events that occur during a session. As they only persist for the life
 * of a session, they are not stored in the DataStore. A HistoryLog consists of a tree of events.
 * Calling beginEvent begins a list of entries that are the child of the previously active entry.
 *
 * Note: there must be a single root event. All events may have multiple children.
 */</comment>
<class><specifier>public</specifier> class <name>HistoryLog</name>
<block>{
	<decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><name>HistoryLog</name></type> <name>historyLog</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>private</specifier> <type><name>String</name></type> <name>projectId</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>

	<constructor><specifier>public</specifier> <name>HistoryLog</name><parameter_list>()</parameter_list><block>{
	}</block></constructor>

	<function><specifier>public</specifier> <specifier>static</specifier> <type><name>HistoryLog</name></type> <name>Init</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>projectId</name></decl></parameter>)</parameter_list><block>{
		<if>if<condition>( <expr><name>historyLog</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <name><name>historyLog</name><operator>.</operator><name>projectId</name></name><operator>!=</operator><name>projectId</name></expr> )</condition><then><block>{
			<expr_stmt><expr><name>historyLog</name> <operator>=</operator> <operator>new</operator> <call><name>HistoryLog</name><argument_list>(<argument><expr><name>projectId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>
		<return>return <expr><name>historyLog</name></expr>;</return>
	}</block></function>

	<constructor><specifier>public</specifier> <name>HistoryLog</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>projectId</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>projectId</name></name> <operator>=</operator> <name>projectId</name></expr>;</expr_stmt>
	}</block></constructor>

	<function><specifier>public</specifier> <type><name>void</name></type> <name>addEvent</name><parameter_list>(<parameter><decl><type><name>HistoryEvent</name></type> <name>event</name></decl></parameter>)</parameter_list><block>{
	    <expr_stmt><expr><call><name><name>FirebaseService</name><operator>.</operator><name>writeHistoryEvent</name></name><argument_list>(<argument><expr><name>event</name></expr></argument>,<argument><expr><name>projectId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<class><specifier>public</specifier> class <name>EventNode</name>
	<block>{
		<decl_stmt><decl><specifier>public</specifier> <type><name><name>List</name><argument_list type="generic">&lt;<argument><name>EventNode</name></argument>&gt;</argument_list></name></type> <name>children</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>EventNode</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><specifier>public</specifier> <type><name>HistoryEvent</name></type> <name>event</name></decl>;</decl_stmt>

		<constructor><specifier>public</specifier> <name>EventNode</name><parameter_list>(<parameter><decl><type><name>HistoryEvent</name></type> <name>event</name></decl></parameter>)</parameter_list>
		<block>{
			<expr_stmt><expr><name><name>this</name><operator>.</operator><name>event</name></name> <operator>=</operator> <name>event</name></expr>;</expr_stmt>
		}</block></constructor>
	}</block></class>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="CrowdCode-com/crowdcoding/history/MessageReceived.java" hash="20acd86f50ac9f9c0f3bbdf9f1de0ae973149bcb"><package>package <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>history</name></name>;</package>

<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>entities</name><operator>.</operator><name>artifacts</name><operator>.</operator><name>Artifact</name></name>;</import>

<class><specifier>public</specifier> class <name>MessageReceived</name> <super><extends>extends <name>HistoryEvent</name></extends></super> 
<block>{
	<decl_stmt><decl><specifier>public</specifier> <type><name>String</name></type> <name>eventType</name> <init>= <expr><literal type="string">"message.received"</literal></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><specifier>public</specifier> <type><name>String</name></type> <name>messageType</name></decl>;</decl_stmt>		<comment type="line">// { AddCall, PassedTests, FailedTests } </comment>
	
	<constructor><specifier>public</specifier> <name>MessageReceived</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>messageType</name></decl></parameter>, <parameter><decl><type><name>Artifact</name></type> <name>artifact</name></decl></parameter>)</parameter_list>
	<block>{
		<expr_stmt><expr><call><name>super</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>setArtifact</name></name><argument_list>(<argument><expr><name>artifact</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>messageType</name></name> <operator>=</operator> <name>messageType</name></expr>;</expr_stmt>
	}</block></constructor>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="CrowdCode-com/crowdcoding/history/MicrotaskAccepted.java" hash="c771a8c0d4583b287ea76e55c8602de191e888a8"><package>package <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>history</name></name>;</package>

<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>entities</name><operator>.</operator><name>artifacts</name><operator>.</operator><name>Artifact</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>entities</name><operator>.</operator><name>microtasks</name><operator>.</operator><name>Microtask</name></name>;</import>

<class><specifier>public</specifier> class <name>MicrotaskAccepted</name> <super><extends>extends <name>MicrotaskEvent</name></extends></super> 
<block>{
	<decl_stmt><decl><specifier>public</specifier> <type><name>String</name></type> <name>workerID</name></decl>;</decl_stmt>
	
	<constructor><specifier>public</specifier> <name>MicrotaskAccepted</name><parameter_list>(<parameter><decl><type><name>Microtask</name></type> <name>microtask</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>reviewerID</name></decl></parameter>)</parameter_list>
	<block>{
		<expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><literal type="string">"accepted"</literal></expr></argument>, <argument><expr><name>microtask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>workerID</name></name>    <operator>=</operator> <name>reviewerID</name></expr>;</expr_stmt>
	}</block></constructor>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="CrowdCode-com/crowdcoding/history/MicrotaskDequeued.java" hash="2364c8b9559d251807a92f89df9d810d582fe12e"><package>package <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>history</name></name>;</package>

<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>entities</name><operator>.</operator><name>artifacts</name><operator>.</operator><name>Artifact</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>entities</name><operator>.</operator><name>microtasks</name><operator>.</operator><name>Microtask</name></name>;</import>

<class><specifier>public</specifier> class <name>MicrotaskDequeued</name> <super><extends>extends <name>MicrotaskEvent</name></extends></super> 
<block>{	
	<constructor><specifier>public</specifier> <name>MicrotaskDequeued</name><parameter_list>(<parameter><decl><type><name>Microtask</name></type> <name>microtask</name></decl></parameter>)</parameter_list>
	<block>{
		<expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><literal type="string">"dequeued"</literal></expr></argument>, <argument><expr><name>microtask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></constructor>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="CrowdCode-com/crowdcoding/history/MicrotaskAssigned.java" hash="d3b8d717acc000ed386aa8c60649af8275cf7743"><package>package <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>history</name></name>;</package>

<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>entities</name><operator>.</operator><name>artifacts</name><operator>.</operator><name>Artifact</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>entities</name><operator>.</operator><name>microtasks</name><operator>.</operator><name>Microtask</name></name>;</import>

<class><specifier>public</specifier> class <name>MicrotaskAssigned</name> <super><extends>extends <name>MicrotaskEvent</name></extends></super> 
<block>{
	<decl_stmt><decl><specifier>public</specifier> <type><name>String</name></type> <name>workerID</name></decl>;</decl_stmt>
	
	
	<constructor><specifier>public</specifier> <name>MicrotaskAssigned</name><parameter_list>(<parameter><decl><type><name>Microtask</name></type> <name>microtask</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>workerID</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>type</name></decl></parameter>)</parameter_list>
	<block>{
		<expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>type</name></expr></argument>,<argument><expr><name>microtask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>workerID</name></name> <operator>=</operator> <name>workerID</name></expr>;</expr_stmt>
	}</block></constructor>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="CrowdCode-com/crowdcoding/history/MicrotaskDequeuedFromWorkerQueue.java" hash="16d8900d5bc429d7d46acc68cadc908cbe1602cd"><package>package <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>history</name></name>;</package>

<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>entities</name><operator>.</operator><name>artifacts</name><operator>.</operator><name>Artifact</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>entities</name><operator>.</operator><name>microtasks</name><operator>.</operator><name>Microtask</name></name>;</import>

<class><specifier>public</specifier> class <name>MicrotaskDequeuedFromWorkerQueue</name> <super><extends>extends <name>MicrotaskEvent</name></extends></super>
<block>{
	<constructor><specifier>public</specifier> <name>MicrotaskDequeuedFromWorkerQueue</name><parameter_list>(<parameter><decl><type><name>Microtask</name></type> <name>microtask</name></decl></parameter>)</parameter_list>
	<block>{
		<expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><literal type="string">"dequeuedFromWorkerQueue"</literal></expr></argument>, <argument><expr><name>microtask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></constructor>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="CrowdCode-com/crowdcoding/history/MicrotaskQueued.java" hash="2b385a6e02129a0d725d174ff5292ea0a1be0215"><package>package <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>history</name></name>;</package>

<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>entities</name><operator>.</operator><name>artifacts</name><operator>.</operator><name>Artifact</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>entities</name><operator>.</operator><name>microtasks</name><operator>.</operator><name>Microtask</name></name>;</import>

<class><specifier>public</specifier> class <name>MicrotaskQueued</name> <super><extends>extends <name>MicrotaskEvent</name></extends></super> 
<block>{	
	<constructor><specifier>public</specifier> <name>MicrotaskQueued</name><parameter_list>(<parameter><decl><type><name>Microtask</name></type> <name>microtask</name></decl></parameter>)</parameter_list>
	<block>{
		<expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><literal type="string">"queued"</literal></expr></argument>, <argument><expr><name>microtask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></constructor>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="CrowdCode-com/crowdcoding/history/MicrotaskReissued.java" hash="29280f4a7f5fc8bcbac0e1a6608d70894770af16"><package>package <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>history</name></name>;</package>

<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>entities</name><operator>.</operator><name>artifacts</name><operator>.</operator><name>Artifact</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>entities</name><operator>.</operator><name>microtasks</name><operator>.</operator><name>Microtask</name></name>;</import>

<class><specifier>public</specifier> class <name>MicrotaskReissued</name> <super><extends>extends <name>MicrotaskEvent</name></extends></super> 
<block>{
	<decl_stmt><decl><specifier>public</specifier> <type><name>String</name></type> <name>workerID</name></decl>;</decl_stmt>
	
	<constructor><specifier>public</specifier> <name>MicrotaskReissued</name><parameter_list>(<parameter><decl><type><name>Microtask</name></type> <name>microtask</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>reviewerID</name></decl></parameter>)</parameter_list>
	<block>{
		<expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><literal type="string">"reissued"</literal></expr></argument>, <argument><expr><name>microtask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>workerID</name></name>    <operator>=</operator> <name>reviewerID</name></expr>;</expr_stmt>
	}</block></constructor>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="CrowdCode-com/crowdcoding/history/MicrotaskEvent.java" hash="b20a98e469a9cf8dd49159d4c76353f45e7cce6b"><package>package <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>history</name></name>;</package>

<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>entities</name><operator>.</operator><name>artifacts</name><operator>.</operator><name>Artifact</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>entities</name><operator>.</operator><name>microtasks</name><operator>.</operator><name>Microtask</name></name>;</import>

<class><specifier>public</specifier> class <name>MicrotaskEvent</name> <super><extends>extends <name>HistoryEvent</name></extends></super>
<block>{
	<decl_stmt><decl><specifier>public</specifier> <type><name>String</name></type> <name>eventType</name> <init>= <expr><literal type="string">"microtask"</literal></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><specifier>public</specifier> <type><name>String</name></type> <name>microtaskType</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <type><name>String</name></type> <name>microtaskKey</name></decl>;</decl_stmt>

	<constructor><specifier>public</specifier> <name>MicrotaskEvent</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>eventType</name></decl></parameter>, <parameter><decl><type><name>Microtask</name></type> <name>microtask</name></decl></parameter>)</parameter_list>
	<block>{
		<expr_stmt><expr><call><name>super</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<if>if<condition>(<expr><name>microtask</name><operator>!=</operator><literal type="null">null</literal></expr>)</condition><then>
		<block>{
			<expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>setArtifact</name></name><argument_list>(<argument><expr><call><name><name>microtask</name><operator>.</operator><name>getOwningArtifact</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>this</name><operator>.</operator><name>eventType</name></name>     <operator>+=</operator> <literal type="string">"."</literal> <operator>+</operator> <name>eventType</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>this</name><operator>.</operator><name>microtaskType</name></name> <operator>=</operator> <call><name><name>microtask</name><operator>.</operator><name>microtaskName</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>this</name><operator>.</operator><name>microtaskKey</name></name>  <operator>=</operator> <call><name><name>Microtask</name><operator>.</operator><name>keyToString</name></name><argument_list>(<argument><expr><call><name><name>microtask</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>
	}</block></constructor>

	<function><specifier>public</specifier> <type><name>String</name></type> <name>getEventType</name><parameter_list>()</parameter_list><block>{
		<return>return <expr><name>eventType</name></expr>;</return>
	}</block></function>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="CrowdCode-com/crowdcoding/history/MicrotaskRejected.java" hash="ab3b2883b1384f5f9dc8f6550052e5d4baa60b57"><package>package <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>history</name></name>;</package>

<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>entities</name><operator>.</operator><name>artifacts</name><operator>.</operator><name>Artifact</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>entities</name><operator>.</operator><name>microtasks</name><operator>.</operator><name>Microtask</name></name>;</import>

<class><specifier>public</specifier> class <name>MicrotaskRejected</name> <super><extends>extends <name>MicrotaskEvent</name></extends></super> 
<block>{
	<decl_stmt><decl><specifier>public</specifier> <type><name>String</name></type> <name>workerID</name></decl>;</decl_stmt>
	
	<constructor><specifier>public</specifier> <name>MicrotaskRejected</name><parameter_list>(<parameter><decl><type><name>Microtask</name></type> <name>microtask</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>reviewerID</name></decl></parameter>)</parameter_list>
	<block>{
		<expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><literal type="string">"rejected"</literal></expr></argument>,<argument><expr><name>microtask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>workerID</name></name> <operator>=</operator> <name>reviewerID</name></expr>;</expr_stmt>
	}</block></constructor>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="CrowdCode-com/crowdcoding/history/MicrotaskSkipped.java" hash="8b14eb8e434ae6034555af74a4df87518380c285"><package>package <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>history</name></name>;</package>

<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>entities</name><operator>.</operator><name>microtasks</name><operator>.</operator><name>Microtask</name></name>;</import>

<class><specifier>public</specifier> class <name>MicrotaskSkipped</name> <super><extends>extends <name>MicrotaskEvent</name></extends></super>
<block>{
	<decl_stmt><decl><specifier>public</specifier> <type><name>String</name></type> <name>workerID</name></decl>;</decl_stmt>
	
	<constructor><specifier>public</specifier> <name>MicrotaskSkipped</name><parameter_list>(<parameter><decl><type><name>Microtask</name></type> <name>microtask</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>workerID</name></decl></parameter>)</parameter_list>
	<block>{
		<expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><literal type="string">"skipped"</literal></expr></argument>,<argument><expr><name>microtask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>workerID</name></name> <operator>=</operator> <name>workerID</name></expr>;</expr_stmt>
	}</block></constructor>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="CrowdCode-com/crowdcoding/history/MicrotaskSpawned.java" hash="dc6410d982f8adbf057e5ef0da33118d9d351282"><package>package <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>history</name></name>;</package>

<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>entities</name><operator>.</operator><name>artifacts</name><operator>.</operator><name>Artifact</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>entities</name><operator>.</operator><name>microtasks</name><operator>.</operator><name>Microtask</name></name>;</import>

<class><specifier>public</specifier> class <name>MicrotaskSpawned</name> <super><extends>extends <name>MicrotaskEvent</name></extends></super> 
<block>{
	<decl_stmt><decl><specifier>public</specifier> <type><name>String</name></type> <name>eventType</name> <init>= <expr><literal type="string">"microtask.spawned"</literal></expr></init></decl>;</decl_stmt>
	
	<constructor><specifier>public</specifier> <name>MicrotaskSpawned</name><parameter_list>(<parameter><decl><type><name>Microtask</name></type> <name>microtask</name></decl></parameter>)</parameter_list>
	<block>{
		<expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><literal type="string">"spawned"</literal></expr></argument>,<argument><expr><name>microtask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></constructor>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="CrowdCode-com/crowdcoding/history/MicrotaskSubmitted.java" hash="f0493f9b8d74df01a28312880e89176b34bc0e1c"><package>package <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>history</name></name>;</package>

<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>entities</name><operator>.</operator><name>microtasks</name><operator>.</operator><name>Microtask</name></name>;</import>

<class><specifier>public</specifier> class <name>MicrotaskSubmitted</name> <super><extends>extends <name>MicrotaskEvent</name></extends></super> 
<block>{
	<decl_stmt><decl><specifier>public</specifier> <type><name>String</name></type> <name>workerID</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <type><name>String</name></type> <name>timeWorkedOn</name></decl>;</decl_stmt>		<comment type="line">// in milliseconds</comment>
	
	<constructor><specifier>public</specifier> <name>MicrotaskSubmitted</name><parameter_list>(<parameter><decl><type><name>Microtask</name></type> <name>microtask</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>workerID</name></decl></parameter>)</parameter_list>
	<block>{
		<expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><literal type="string">"submitted"</literal></expr></argument>,<argument><expr><name>microtask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>workerID</name></name> <operator>=</operator> <name>workerID</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>timeWorkedOn</name></name> <operator>=</operator> <call><name><name>Long</name><operator>.</operator><name>toString</name></name><argument_list>(<argument><expr><call><name><name>System</name><operator>.</operator><name>currentTimeMillis</name></name><argument_list>()</argument_list></call> <operator>-</operator> <call><name><name>microtask</name><operator>.</operator><name>assignmentTimeInMillis</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></constructor>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="CrowdCode-com/crowdcoding/history/MicrotaskUnassigned.java" hash="0a98e8f68f476b97715bde492eb5a39957903db2"><package>package <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>history</name></name>;</package>

<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>entities</name><operator>.</operator><name>artifacts</name><operator>.</operator><name>Artifact</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>entities</name><operator>.</operator><name>microtasks</name><operator>.</operator><name>Microtask</name></name>;</import>

<class><specifier>public</specifier> class <name>MicrotaskUnassigned</name> <super><extends>extends <name>MicrotaskEvent</name></extends></super> 
<block>{
	<decl_stmt><decl><specifier>public</specifier> <type><name>String</name></type> <name>workerID</name></decl>;</decl_stmt>
	
	<constructor><specifier>public</specifier> <name>MicrotaskUnassigned</name><parameter_list>(<parameter><decl><type><name>Microtask</name></type> <name>microtask</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>workerID</name></decl></parameter>)</parameter_list>
	<block>{
		<expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><literal type="string">"unassigned"</literal></expr></argument>,<argument><expr><name>microtask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>workerID</name></name> <operator>=</operator> <name>workerID</name></expr>;</expr_stmt>
	}</block></constructor>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="CrowdCode-com/crowdcoding/history/ProjectCreated.java" hash="95da3c7255d03b8d8f6ed888e7ae0a053fb878b6"><package>package <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>history</name></name>;</package>

<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>entities</name><operator>.</operator><name>Project</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>entities</name><operator>.</operator><name>artifacts</name><operator>.</operator><name>Artifact</name></name>;</import>

<class><specifier>public</specifier> class <name>ProjectCreated</name> <super><extends>extends <name>HistoryEvent</name></extends></super> 
<block>{
	<decl_stmt><decl><specifier>public</specifier> <type><name>String</name></type> <name>eventType</name> <init>= <expr><literal type="string">"project.create"</literal></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><specifier>public</specifier> <type><name>String</name></type> <name>projectID</name></decl>;</decl_stmt>
	
	<constructor><specifier>public</specifier> <name>ProjectCreated</name><parameter_list>(<parameter><decl><type><name>Project</name></type> <name>project</name></decl></parameter>)</parameter_list>
	<block>{
		<expr_stmt><expr><call><name>super</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>projectID</name></name> <operator>=</operator> <call><name><name>project</name><operator>.</operator><name>getID</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	}</block></constructor>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="CrowdCode-com/crowdcoding/history/PropertyChange.java" hash="1c6551cc797c6389fc1edb64d9e6d8f5ed5a7d59"><package>package <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>history</name></name>;</package>

<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>entities</name><operator>.</operator><name>artifacts</name><operator>.</operator><name>Artifact</name></name>;</import>

<class><specifier>public</specifier> class <name>PropertyChange</name> <super><extends>extends <name>HistoryEvent</name></extends></super> 
<block>{
	<decl_stmt><decl><specifier>public</specifier> <type><name>String</name></type> <name>eventType</name> <init>= <expr><literal type="string">"artifact.property.change"</literal></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><specifier>public</specifier> <type><name>String</name></type> <name>propertyName</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <type><name>String</name></type> <name>propertyValue</name></decl>;</decl_stmt>
	
	<constructor><specifier>public</specifier> <name>PropertyChange</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>propertyName</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>propertyValue</name></decl></parameter>, <parameter><decl><type><name>Artifact</name></type> <name>artifact</name></decl></parameter>)</parameter_list>
	<block>{
		<expr_stmt><expr><call><name>super</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>setArtifact</name></name><argument_list>(<argument><expr><name>artifact</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>propertyName</name></name> <operator>=</operator> <name>propertyName</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>propertyValue</name></name> <operator>=</operator> <name>propertyValue</name></expr>;</expr_stmt>		
	}</block></constructor>

	<function><specifier>public</specifier> <type><name>String</name></type> <name>getEventType</name><parameter_list>()</parameter_list><block>{
		<return>return <expr><name>eventType</name></expr>;</return>
	}</block></function>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="CrowdCode-com/crowdcoding/history/QuestionViewed.java" hash="9c9efc422b2b2d3e5750c56f2d588e0e0313c6f2"><package>package <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>history</name></name>;</package>


<class><specifier>public</specifier> class <name>QuestionViewed</name> <super><extends>extends <name>HistoryEvent</name></extends></super> 
<block>{
	<decl_stmt><decl><specifier>public</specifier> <type><name>String</name></type> <name>eventType</name> <init>= <expr><literal type="string">"question.viewed"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <type><name>String</name></type> <name>projectId</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <type><name>String</name></type> <name>questionId</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <type><name>String</name></type> <name>workerId</name></decl>;</decl_stmt>
	
	<constructor><specifier>public</specifier> <name>QuestionViewed</name><parameter_list>(<parameter><decl><type><name>Long</name></type> <name>questionId</name></decl></parameter>,<parameter><decl><type><name>String</name></type> <name>workerId</name></decl></parameter>,<parameter><decl><type><name>String</name></type> <name>projectId</name></decl></parameter>)</parameter_list>
	<block>{
		<expr_stmt><expr><call><name>super</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>projectId</name></name>  <operator>=</operator> <name>projectId</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>questionId</name></name> <operator>=</operator> <call><name><name>questionId</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>workerId</name></name>   <operator>=</operator> <name>workerId</name></expr>;</expr_stmt>
		
	}</block></constructor>

	<function><specifier>public</specifier> <type><name>String</name></type> <name>getEventType</name><parameter_list>()</parameter_list><block>{
		<return>return <expr><name>eventType</name></expr>;</return>
	}</block></function>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="CrowdCode-com/crowdcoding/entities/AchievementManager.java" hash="c00b02322b5ce0cd963c10bdbe5c285989b16982"><comment type="line">//package com.crowdcoding.entities;</comment>
<comment type="line">//</comment>
<comment type="line">////import static com.googlecode.objectify.ObjectifyService.ofy;</comment>
<comment type="line">//</comment>
<comment type="line">//import static com.googlecode.objectify.ObjectifyService.ofy;</comment>
<comment type="line">//</comment>
<comment type="line">//import java.io.File;</comment>
<comment type="line">//import java.io.FileNotFoundException;</comment>
<comment type="line">//import java.io.IOException;</comment>
<comment type="line">//import java.util.ArrayList;</comment>
<comment type="line">//import java.util.HashMap;</comment>
<comment type="line">//import java.util.List;</comment>
<comment type="line">//import java.util.Random;</comment>
<comment type="line">//import java.util.Scanner;</comment>
<comment type="line">//</comment>
<comment type="line">//import org.apache.tools.ant.Main;</comment>
<comment type="line">//</comment>
<comment type="line">//import com.crowdcoding.commands.WorkerCommand;</comment>
<comment type="line">//import com.crowdcoding.dto.firebase.NewsItemInFirebase;</comment>
<comment type="line">//import com.crowdcoding.dto.firebase.NotificationInFirebase;</comment>
<comment type="line">//import com.crowdcoding.dto.firebase.TestInFirebase;</comment>
<comment type="line">//import com.crowdcoding.dto.firebase.WorkerInFirebase;</comment>
<comment type="line">//import com.crowdcoding.entities.microtasks.Microtask;</comment>
<comment type="line">//import com.crowdcoding.util.FirebaseService;</comment>
<comment type="line">//import com.fasterxml.jackson.databind.ObjectMapper;</comment>
<comment type="line">//import com.google.appengine.api.users.User;</comment>
<comment type="line">//import com.googlecode.objectify.Key;</comment>
<comment type="line">//import com.googlecode.objectify.Ref;</comment>
<comment type="line">//import com.googlecode.objectify.annotation.Entity;</comment>
<comment type="line">//import com.googlecode.objectify.annotation.Id;</comment>
<comment type="line">//import com.googlecode.objectify.annotation.Index;</comment>
<comment type="line">//import com.googlecode.objectify.annotation.Parent;</comment>
<comment type="line">//import com.googlecode.objectify.cmd.Query;</comment>
<comment type="line">//</comment>
<comment type="line">//</comment>
<comment type="line">//</comment>
<comment type="line">//@Entity</comment>
<comment type="line">//public class AchievementManager</comment>
<comment type="line">//{</comment>
<comment type="line">//	static AchievementManager instance = null;</comment>
<comment type="line">//	private List&lt;Achievement&gt; availableAchievements = new ArrayList&lt;Achievement&gt;();</comment>
<comment type="line">//	private int id;</comment>
<comment type="line">//	</comment>
<comment type="line">//	public static AchievementManager getInstance(){</comment>
<comment type="line">//		if( instance == null )</comment>
<comment type="line">//			instance = new AchievementManager();</comment>
<comment type="line">//		</comment>
<comment type="line">//		return instance;</comment>
<comment type="line">//	}</comment>
<comment type="line">//	</comment>
<comment type="line">//	// Default constructor for deserialization</comment>
<comment type="line">//	public AchievementManager()</comment>
<comment type="line">//	{</comment>
<comment type="line">//		id =  5 + (int)(Math.random()*100); </comment>
<comment type="line">//		setAchievements();</comment>
<comment type="line">//		System.out.println("my id is "+id);</comment>
<comment type="line">//	}</comment>
<comment type="line">//</comment>
<comment type="line">//	private void setAchievements() {	</comment>
<comment type="line">//		Scanner fileIn = null;</comment>
<comment type="line">//			</comment>
<comment type="line">//		try {</comment>
<comment type="line">//			fileIn = new Scanner(new File("WEB-INF/achievements.txt"));</comment>
<comment type="line">//		} catch (FileNotFoundException e) {</comment>
<comment type="line">//			e.printStackTrace();</comment>
<comment type="line">//		}</comment>
<comment type="line">//		if(fileIn != null){</comment>
<comment type="line">//			int totalAchievements = fileIn.nextInt();</comment>
<comment type="line">//			for(int i = 0;i&lt;totalAchievements;i++){</comment>
<comment type="line">//				Achievement newObjective = new Achievement(fileIn.next(), fileIn.nextInt());</comment>
<comment type="line">//				System.out.println(newObjective.getCondition() + " " +  newObjective.getRequirement());</comment>
<comment type="line">//				availableAchievements.add(newObjective);</comment>
<comment type="line">//			}</comment>
<comment type="line">//			fileIn.close();</comment>
<comment type="line">//		}</comment>
<comment type="line">//	}</comment>
<comment type="line">//	</comment>
<comment type="line">//	public void checkNewAchievement(String workerID, String projectId, HashMap&lt;String,Integer&gt; workerHistory){</comment>
<comment type="line">//		int value = 0;</comment>
<comment type="line">//		for(int i = 0;i&lt;availableAchievements.size();i++){</comment>
<comment type="line">//			String label = availableAchievements.get(i).getCondition();</comment>
<comment type="line">//			if( workerHistory.get(label)!= null){</comment>
<comment type="line">//				value = 0;</comment>
<comment type="line">//				value = workerHistory.get(label);</comment>
<comment type="line">//				if(value &gt;= availableAchievements.get(i).getRequirement()){</comment>
<comment type="line">//					//&amp;&amp; !availableAchievements.get(i).getList().contains(workerID)){</comment>
<comment type="line">//					//awardAchievement(availableAchievements.get(i),workerID,projectId);</comment>
<comment type="line">//					//availableAchievements.get(i).addWorker(workerID);</comment>
<comment type="line">//				}</comment>
<comment type="line">//			}</comment>
<comment type="line">//		}		</comment>
<comment type="line">//	}</comment>
<comment type="line">//</comment>
<comment type="line">//	private void awardAchievement(Achievement workerAchievement, String workerID, String projectId) {</comment>
<comment type="line">//		WorkerCommand.addAchievement(workerAchievement, workerID);</comment>
<comment type="line">//		FirebaseService.writeAchievementNotification(new NotificationInFirebase("new.achievement",workerAchievement.getMessage(), </comment>
<comment type="line">//				workerAchievement.getCondition(), workerAchievement.getRequirement()), workerID, projectId);</comment>
<comment type="line">//	}</comment>
<comment type="line">//</comment>
<comment type="line">//}</comment></unit>

<unit revision="0.9.5" language="Java" filename="CrowdCode-com/crowdcoding/entities/Achievement.java" hash="5be7259e368aaa9b8a755ec84a755396f0bbfc21"><package>package <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>entities</name></name>;</package>

<comment type="line">//import static com.googlecode.objectify.ObjectifyService.ofy;</comment>

<import>import static <name><name>com</name><operator>.</operator><name>googlecode</name><operator>.</operator><name>objectify</name><operator>.</operator><name>ObjectifyService</name><operator>.</operator><name>ofy</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashMap</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>dto</name><operator>.</operator><name>firebase</name><operator>.</operator><name>NewsItemInFirebase</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>dto</name><operator>.</operator><name>firebase</name><operator>.</operator><name>WorkerInFirebase</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>entities</name><operator>.</operator><name>microtasks</name><operator>.</operator><name>Microtask</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>util</name><operator>.</operator><name>FirebaseService</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>fasterxml</name><operator>.</operator><name>jackson</name><operator>.</operator><name>databind</name><operator>.</operator><name>ObjectMapper</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>appengine</name><operator>.</operator><name>api</name><operator>.</operator><name>users</name><operator>.</operator><name>User</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>googlecode</name><operator>.</operator><name>objectify</name><operator>.</operator><name>Key</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>googlecode</name><operator>.</operator><name>objectify</name><operator>.</operator><name>Ref</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>googlecode</name><operator>.</operator><name>objectify</name><operator>.</operator><name>annotation</name><operator>.</operator><name>Entity</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>googlecode</name><operator>.</operator><name>objectify</name><operator>.</operator><name>annotation</name><operator>.</operator><name>Id</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>googlecode</name><operator>.</operator><name>objectify</name><operator>.</operator><name>annotation</name><operator>.</operator><name>Index</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>googlecode</name><operator>.</operator><name>objectify</name><operator>.</operator><name>annotation</name><operator>.</operator><name>Parent</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>googlecode</name><operator>.</operator><name>objectify</name><operator>.</operator><name>cmd</name><operator>.</operator><name>Query</name></name>;</import>



<comment type="line">//@Entity</comment>
<class><specifier>public</specifier> class <name>Achievement</name>
<block>{
    
	<comment type="line">//@Id private long id;</comment>
	<decl_stmt><decl><specifier>public</specifier> <type><name>String</name></type> <name>condition</name></decl>, <decl><type ref="prev"/><name>message</name></decl>, <decl><type ref="prev"/><name>title</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <type><name>int</name></type> <name>requirement</name></decl>, <decl><type ref="prev"/><name>current</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <type><name>Boolean</name></type> <name>isUnlocked</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
	<comment type="line">// Default constructor for deserialization</comment>
	<constructor><specifier>private</specifier> <name>Achievement</name><parameter_list>()</parameter_list>
	<block>{
	}</block></constructor>

	<comment type="line">// Initialization constructor</comment>
	<constructor><specifier>public</specifier> <name>Achievement</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>condition</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>requirement</name></decl></parameter>,<parameter><decl><type><name>String</name></type> <name>title</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>message</name></decl></parameter>)</parameter_list>
	<block>{
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>condition</name></name> <operator>=</operator> <name>condition</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>requirement</name></name> <operator>=</operator> <name>requirement</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>current</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>title</name></name> <operator>=</operator> <name>title</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>message</name></name> <operator>=</operator> <name>message</name></expr>;</expr_stmt>
		<comment type="line">//ofy().save().entity(this).now();</comment>
	}</block></constructor>


	<function><specifier>public</specifier> <type><name>String</name></type> <name>getMessage</name><parameter_list>()</parameter_list><block>{
		<return>return <expr><name><name>this</name><operator>.</operator><name>message</name></name></expr>;</return>
	}</block></function>

	<function><specifier>public</specifier> <type><name>String</name></type> <name>getCondition</name><parameter_list>()</parameter_list><block>{
		<return>return <expr><name><name>this</name><operator>.</operator><name>condition</name></name></expr>;</return>
	}</block></function>

	<function><specifier>public</specifier> <type><name>void</name></type> <name>updateCurrent</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>current</name></decl></parameter>)</parameter_list><block>{
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>current</name></name> <operator>=</operator> <name>current</name></expr>;</expr_stmt>
	}</block></function>

	<function><specifier>public</specifier> <type><name>int</name></type> <name>getRequirement</name><parameter_list>()</parameter_list><block>{
		<return>return <expr><name><name>this</name><operator>.</operator><name>requirement</name></name></expr>;</return>
	}</block></function>

}</block></class></unit>

<unit revision="0.9.5" language="Java" filename="CrowdCode-com/crowdcoding/entities/UserPicture.java" hash="0c571748c735b9e2c01ebc90130621512c6827b0"><package>package <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>entities</name></name>;</package>

<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>appengine</name><operator>.</operator><name>api</name><operator>.</operator><name>datastore</name><operator>.</operator><name>Blob</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>appengine</name><operator>.</operator><name>api</name><operator>.</operator><name>users</name><operator>.</operator><name>User</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>googlecode</name><operator>.</operator><name>objectify</name><operator>.</operator><name>annotation</name><operator>.</operator><name>Entity</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>googlecode</name><operator>.</operator><name>objectify</name><operator>.</operator><name>annotation</name><operator>.</operator><name>Id</name></name>;</import>
<class><annotation>@<name>Entity</name></annotation>

<specifier>public</specifier> class <name>UserPicture</name> <block>{
	<decl_stmt><decl><annotation>@<name>Id</name></annotation> <specifier>private</specifier> <type><name>String</name></type> <name>userId</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>Blob</name></type> <name>image</name></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>UserPicture</name><parameter_list>()</parameter_list> <block>{ }</block></constructor>
    <constructor><specifier>public</specifier> <name>UserPicture</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>userId</name></decl></parameter>, <parameter><decl><type><name>Blob</name></type> <name>image</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>userId</name></name> <operator>=</operator> <name>userId</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>image</name></name>  <operator>=</operator> <name>image</name></expr>;</expr_stmt>
    }</block></constructor>
    <constructor><specifier>public</specifier> <name>UserPicture</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>userId</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>userId</name></name> <operator>=</operator> <name>userId</name></expr>;</expr_stmt>
    }</block></constructor>

    <function><specifier>public</specifier> <type><name>Blob</name></type> <name>getImage</name><parameter_list>()</parameter_list>              <block>{ <return>return <expr><name>image</name></expr>;</return> }</block></function>
    <function><specifier>public</specifier> <type><name>void</name></type> <name>setImage</name><parameter_list>(<parameter><decl><type><name>Blob</name></type> <name>image</name></decl></parameter>)</parameter_list>    <block>{ <expr_stmt><expr><name><name>this</name><operator>.</operator><name>image</name></name> <operator>=</operator> <name>image</name></expr>;</expr_stmt> }</block></function>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="CrowdCode-com/crowdcoding/entities/Worker.java" hash="321d75480b770da2e4f45cede395a81536331aed"><package>package <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>entities</name></name>;</package>

<import>import static <name><name>com</name><operator>.</operator><name>googlecode</name><operator>.</operator><name>objectify</name><operator>.</operator><name>ObjectifyService</name><operator>.</operator><name>ofy</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>File</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>FileNotFoundException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Collections</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashMap</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Scanner</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>dto</name><operator>.</operator><name>firebase</name><operator>.</operator><name>NewsItemInFirebase</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>dto</name><operator>.</operator><name>firebase</name><operator>.</operator><name>WorkerInFirebase</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>dto</name><operator>.</operator><name>firebase</name><operator>.</operator><name>notification</name><operator>.</operator><name>AchievementNotificationInFirebase</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>dto</name><operator>.</operator><name>firebase</name><operator>.</operator><name>notification</name><operator>.</operator><name>NotificationInFirebase</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>entities</name><operator>.</operator><name>microtasks</name><operator>.</operator><name>Microtask</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>util</name><operator>.</operator><name>FirebaseService</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>fasterxml</name><operator>.</operator><name>jackson</name><operator>.</operator><name>databind</name><operator>.</operator><name>ObjectMapper</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>appengine</name><operator>.</operator><name>api</name><operator>.</operator><name>users</name><operator>.</operator><name>User</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>googlecode</name><operator>.</operator><name>objectify</name><operator>.</operator><name>Key</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>googlecode</name><operator>.</operator><name>objectify</name><operator>.</operator><name>Ref</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>googlecode</name><operator>.</operator><name>objectify</name><operator>.</operator><name>annotation</name><operator>.</operator><name>Entity</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>googlecode</name><operator>.</operator><name>objectify</name><operator>.</operator><name>annotation</name><operator>.</operator><name>Id</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>googlecode</name><operator>.</operator><name>objectify</name><operator>.</operator><name>annotation</name><operator>.</operator><name>Index</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>googlecode</name><operator>.</operator><name>objectify</name><operator>.</operator><name>annotation</name><operator>.</operator><name>Parent</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>googlecode</name><operator>.</operator><name>objectify</name><operator>.</operator><name>cmd</name><operator>.</operator><name>Query</name></name>;</import>

<comment type="block">/* Represents a crowd worker.
 *
 */</comment>

<class><annotation>@<name>Entity</name></annotation>
<specifier>public</specifier> class <name>Worker</name>
<block>{

	<decl_stmt><decl><annotation>@<name>Parent</name></annotation> <type><name><name>Key</name><argument_list type="generic">&lt;<argument><name>Project</name></argument>&gt;</argument_list></name></type> <name>project</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>private</specifier> <type><name>String</name></type> <name>nickname</name></decl>;</decl_stmt>
	<decl_stmt><decl><annotation>@<name>Id</name></annotation> <specifier>private</specifier> <type><name>String</name></type> <name>userid</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>private</specifier> <type><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>Integer</name></argument>&gt;</argument_list></name></type> <name>microtaskHistory</name> <init>=  <expr><operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>Integer</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>private</specifier> <type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Achievement</name></argument>&gt;</argument_list></name></type> <name>listOfAchievements</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Achievement</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <type><name>int</name></type> <name>score</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <type><name>int</name></type> <name>level</name></decl>;</decl_stmt>

	<comment type="line">// Default constructor for deserialization</comment>
	<constructor><specifier>private</specifier> <name>Worker</name><parameter_list>()</parameter_list>
	<block>{
	}</block></constructor>

	<comment type="line">// Initialization constructor</comment>
	<constructor><specifier>private</specifier> <name>Worker</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>userid</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>nickname</name></decl></parameter>, <parameter><decl><type><name>Project</name></type> <name>project</name></decl></parameter>)</parameter_list>
	<block>{
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>project</name></name> <operator>=</operator> <call><name><name>project</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>userid</name></name> <operator>=</operator> <name>userid</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>nickname</name></name> <operator>=</operator> <name>nickname</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>score</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>level</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>listOfAchievements</name></name> <operator>=</operator> <call><name>setAchievements</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ofy</name><argument_list>()</argument_list></call><operator>.</operator><call><name>save</name><argument_list>()</argument_list></call><operator>.</operator><call><name>entity</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>now</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>storeToFirebase</name></name><argument_list>(<argument><expr><call><name><name>project</name><operator>.</operator><name>getID</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></constructor>

	<comment type="line">// Finds, or if it does not exist creates, a CrowdUser corresponding to user</comment>
	<comment type="line">// Preconditions:</comment>
	<comment type="line">//                user != null</comment>
	<function><specifier>public</specifier> <specifier>static</specifier> <type><name>Worker</name></type> <name>Create</name><parameter_list>(<parameter><decl><type><name>User</name></type> <name>user</name></decl></parameter>, <parameter><decl><type><name>Project</name></type> <name>project</name></decl></parameter>)</parameter_list>
	<block>{
		<decl_stmt><decl><type><name>Worker</name></type> <name>worker</name> <init>= <expr><call><name>ofy</name><argument_list>()</argument_list></call><operator>.</operator><call><name>load</name><argument_list>()</argument_list></call><operator>.</operator><call><name>key</name><argument_list>(<argument><expr><call><name>getKey</name><argument_list>(<argument><expr><call><name><name>project</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>user</name><operator>.</operator><name>getUserId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>now</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<if>if <condition>(<expr><name>worker</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then><block>{
			<expr_stmt><expr><name>worker</name> <operator>=</operator> <operator>new</operator> <call><name>Worker</name><argument_list>(<argument><expr><call><name><name>user</name><operator>.</operator><name>getUserId</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>user</name><operator>.</operator><name>getNickname</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>project</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>FirebaseService</name><operator>.</operator><name>setPoints</name></name><argument_list>( <argument><expr><name><name>worker</name><operator>.</operator><name>userid</name></name></expr></argument>, <argument><expr><name><name>worker</name><operator>.</operator><name>nickname</name></name></expr></argument>, <argument><expr><name><name>worker</name><operator>.</operator><name>score</name></name></expr></argument>, <argument><expr><call><name><name>project</name><operator>.</operator><name>getID</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>FirebaseService</name><operator>.</operator><name>publish</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>
		<return>return <expr><name>worker</name></expr>;</return>
	}</block></function>

	<function><specifier>public</specifier> <type><name>String</name></type> <name>getUserid</name><parameter_list>()</parameter_list> <block>{
		<return>return <expr><name>userid</name></expr>;</return>
	}</block></function>

	<function><specifier>public</specifier> <type><name>String</name></type> <name>getNickname</name><parameter_list>()</parameter_list> <block>{
		<return>return <expr><name>nickname</name></expr>;</return>
	}</block></function>

	<comment type="line">// returns all workers in the specified project</comment>
	<function><specifier>public</specifier> <specifier>static</specifier> <type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Worker</name></argument>&gt;</argument_list></name></type> <name>allWorkers</name><parameter_list>(<parameter><decl><type><name>Project</name></type> <name>project</name></decl></parameter>)</parameter_list>
	<block>{
		<return>return <expr><call><name>ofy</name><argument_list>()</argument_list></call><operator>.</operator><call><name>load</name><argument_list>()</argument_list></call><operator>.</operator><call><name>type</name><argument_list>(<argument><expr><name><name>Worker</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>ancestor</name><argument_list>(<argument><expr><name>project</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>list</name><argument_list>()</argument_list></call></expr>;</return>
	}</block></function>

	<comment type="line">// Adds the specified number of points to the score.</comment>
	<function><specifier>public</specifier> <type><name>void</name></type> <name>awardPoints</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>points</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>projectId</name></decl></parameter>)</parameter_list>
	<block>{
		<expr_stmt><expr><name>score</name> <operator>+=</operator> <name>points</name></expr>;</expr_stmt>	
		<expr_stmt><expr><call><name>ofy</name><argument_list>()</argument_list></call><operator>.</operator><call><name>save</name><argument_list>()</argument_list></call><operator>.</operator><call><name>entity</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>now</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>FirebaseService</name><operator>.</operator><name>setPoints</name></name><argument_list>(<argument><expr><name>userid</name></expr></argument>, <argument><expr><name>nickname</name></expr></argument>, <argument><expr><name>score</name></expr></argument>, <argument><expr><name>projectId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<function><specifier>private</specifier> <type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Achievement</name></argument>&gt;</argument_list></name></type> <name>setAchievements</name><parameter_list>()</parameter_list> <block>{	
		<decl_stmt><decl><type><name>Scanner</name></type> <name>fileIn</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Achievement</name></argument>&gt;</argument_list></name></type> <name>achievementList</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Achievement</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<try>try <block>{
			<expr_stmt><expr><name>fileIn</name> <operator>=</operator> <operator>new</operator> <call><name>Scanner</name><argument_list>(<argument><expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><literal type="string">"WEB-INF/achievements.txt"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>FileNotFoundException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
			<expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		}</block></catch></try>
		<if>if<condition>(<expr><name>fileIn</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then><block>{
			<decl_stmt><decl><type><name>int</name></type> <name>totalAchievements</name> <init>= <expr><call><name><name>fileIn</name><operator>.</operator><name>nextInt</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
			<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>totalAchievements</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
				<decl_stmt><decl><type><name>String</name></type> <name>condition</name> <init>= <expr><call><name><name>fileIn</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>int</name></type> <name>requirement</name> <init>= <expr><call><name><name>fileIn</name><operator>.</operator><name>nextInt</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><call><name><name>fileIn</name><operator>.</operator><name>nextLine</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				<decl_stmt><decl><type><name>String</name></type> <name>title</name> <init>= <expr><call><name><name>fileIn</name><operator>.</operator><name>nextLine</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>String</name></type> <name>message</name> <init>= <expr><call><name><name>fileIn</name><operator>.</operator><name>nextLine</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>Achievement</name></type> <name>newObjective</name> <init>= <expr><operator>new</operator> <call><name>Achievement</name><argument_list>(<argument><expr><name>condition</name></expr></argument>,<argument><expr><name>requirement</name></expr></argument> ,<argument><expr><name>title</name></expr></argument>, <argument><expr><name>message</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><call><name><name>achievementList</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>newObjective</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></for>
			<expr_stmt><expr><call><name><name>fileIn</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>
		<return>return <expr><name>achievementList</name></expr>;</return>
	}</block></function>
	
	
	<function><type><name>void</name></type> <name>checkNewAchievement</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>label</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>projectId</name></decl></parameter>)</parameter_list><block>{
		<decl_stmt><decl><type><name>int</name></type> <name>value</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
		<for>for<control>(<init><decl><type><name>Achievement</name></type> <name>achievement</name> <range>: <expr><name>listOfAchievements</name></expr></range></decl></init>)</control><block>{
			<if>if<condition>(<expr><call><name><name>achievement</name><operator>.</operator><name>getCondition</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name>label</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>achievement</name><operator>.</operator><name>isUnlocked</name></name></expr>)</condition><then><block>{
				<expr_stmt><expr><name>value</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
				<expr_stmt><expr><name>value</name> <operator>=</operator> <call><name><name>microtaskHistory</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>label</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>achievement</name><operator>.</operator><name>updateCurrent</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if>if<condition>(<expr><name>value</name> <operator>&gt;=</operator> <call><name><name>achievement</name><operator>.</operator><name>getRequirement</name></name><argument_list>()</argument_list></call></expr> )</condition><then><block>{
					<expr_stmt><expr><call><name>addAchievement</name><argument_list>(<argument><expr><name>achievement</name></expr></argument>, <argument><expr><name>projectId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then></if>
			}</block></then></if>
		}</block></for>
		<if>if<condition>(<expr><name>level</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition><then><block>{ 
			<if>if<condition>(<expr><call><name><name>listOfAchievements</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><name>isUnlocked</name> <operator>&amp;&amp;</operator> <call><name><name>listOfAchievements</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>.</operator><name>isUnlocked</name></expr>)</condition><then><block>{
				<expr_stmt><expr><call><name><name>FirebaseService</name><operator>.</operator><name>writeLevelUpNotification</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>NotificationInFirebase</name><argument_list>(<argument><expr><literal type="string">"dashboard"</literal></expr></argument>)</argument_list></call></expr></argument>, 
				<argument><expr><call><name><name>this</name><operator>.</operator><name>getUserid</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>projectId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>level</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
			}</block></then></if>
		}</block></then></if>
		<expr_stmt><expr><call><name>ofy</name><argument_list>()</argument_list></call><operator>.</operator><call><name>save</name><argument_list>()</argument_list></call><operator>.</operator><call><name>entity</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>now</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>storeToFirebase</name></name><argument_list>(<argument><expr><name>projectId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>
	<comment type="line">// keep a list of microtasks done by the worker</comment>
	<function><specifier>public</specifier> <type><name>void</name></type> <name>increaseStat</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>label</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>amount</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>projectId</name></decl></parameter>)</parameter_list>
	<block>{
		<decl_stmt><decl><type><name>int</name></type> <name>value</name> <init>= <expr><name>amount</name></expr></init></decl>;</decl_stmt>
		<if>if<condition>( <expr><call><name><name>microtaskHistory</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>label</name></expr></argument>)</argument_list></call><operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then><block>{
			<expr_stmt><expr><name>value</name> <operator>+=</operator> <call><name><name>microtaskHistory</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>label</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if>if<condition>(<expr><name>label</name> <operator>==</operator><literal type="string">"skips"</literal></expr>)</condition><then><block>{
				<expr_stmt><expr><call><name><name>microtaskHistory</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><literal type="string">"submits"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>
		}</block></then></if>
		<expr_stmt><expr><call><name><name>microtaskHistory</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>label</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ofy</name><argument_list>()</argument_list></call><operator>.</operator><call><name>save</name><argument_list>()</argument_list></call><operator>.</operator><call><name>entity</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>now</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>storeToFirebase</name></name><argument_list>(<argument><expr><name>projectId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>checkNewAchievement</name><argument_list>(<argument><expr><name>label</name></expr></argument>, <argument><expr><name>projectId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<function><specifier>public</specifier> <type><name><name>Key</name><argument_list type="generic">&lt;<argument><name>Worker</name></argument>&gt;</argument_list></name></type> <name>getKey</name><parameter_list>()</parameter_list>
	<block>{
		<return>return <expr><call><name>getKey</name><argument_list>(<argument><expr><name>project</name></expr></argument>, <argument><expr><name>userid</name></expr></argument>)</argument_list></call></expr>;</return>
	}</block></function>

	<function><specifier>public</specifier> <specifier>static</specifier> <type><name><name>Key</name><argument_list type="generic">&lt;<argument><name>Worker</name></argument>&gt;</argument_list></name></type> <name>getKey</name><parameter_list>(<parameter><decl><type><name><name>Key</name><argument_list type="generic">&lt;<argument><name>Project</name></argument>&gt;</argument_list></name></type> <name>project</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>userid</name></decl></parameter>)</parameter_list>
	<block>{
		<return>return <expr><call><name><name>Key</name><operator>.</operator><name>create</name></name><argument_list>(<argument><expr><name>project</name></expr></argument>, <argument><expr><name><name>Worker</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><name>userid</name></expr></argument>)</argument_list></call></expr>;</return>
	}</block></function>
	
	
	<function><specifier>public</specifier> <type><name>void</name></type> <name>storeToFirebase</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>projectId</name></decl></parameter>)</parameter_list>
	<block>{
		<expr_stmt><expr><call><name><name>FirebaseService</name><operator>.</operator><name>writeWorker</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>WorkerInFirebase</name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>userid</name></name></expr></argument>, <argument><expr><name>score</name></expr></argument> , <argument><expr><name>level</name></expr></argument>, <argument><expr><name>nickname</name></expr></argument>,<argument><expr><name>listOfAchievements</name></expr></argument>, <argument><expr><name>microtaskHistory</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>this</name><operator>.</operator><name>userid</name></name></expr></argument>, <argument><expr><name>projectId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>
	
	<function><annotation>@<name>Override</name></annotation>
	<specifier>public</specifier> <type><name>int</name></type> <name>hashCode</name><parameter_list>()</parameter_list> <block>{
		<decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>prime</name> <init>= <expr><literal type="number">31</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>result</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name>result</name> <operator>=</operator> <name>prime</name> <operator>*</operator> <name>result</name> <operator>+</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><name>userid</name> <operator>==</operator> <literal type="null">null</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><call><name><name>userid</name><operator>.</operator><name>hashCode</name></name><argument_list>()</argument_list></call></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
		<return>return <expr><name>result</name></expr>;</return>
	}</block></function>

	<function><annotation>@<name>Override</name></annotation>
	<specifier>public</specifier> <type><name>boolean</name></type> <name>equals</name><parameter_list>(<parameter><decl><type><name>Object</name></type> <name>obj</name></decl></parameter>)</parameter_list> <block>{
		<if>if <condition>(<expr><name>this</name> <operator>==</operator> <name>obj</name></expr>)</condition><then>
			<block type="pseudo"><return>return <expr><literal type="boolean">true</literal></expr>;</return></block></then></if>
		<if>if <condition>(<expr><name>obj</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then>
			<block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr>;</return></block></then></if>
		<if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>obj</name> <operator>instanceof</operator> <name>Worker</name><operator>)</operator></expr>)</condition><then>
			<block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr>;</return></block></then></if>
		<decl_stmt><decl><type><name>Worker</name></type> <name>other</name> <init>= <expr><operator>(</operator><name>Worker</name><operator>)</operator> <name>obj</name></expr></init></decl>;</decl_stmt>
		<if>if <condition>(<expr><name>userid</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
			<if>if <condition>(<expr><name><name>other</name><operator>.</operator><name>userid</name></name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then>
				<block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr>;</return></block></then></if>
		}</block></then> <elseif>else <if>if <condition>(<expr><operator>!</operator><call><name><name>userid</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>other</name><operator>.</operator><name>userid</name></name></expr></argument>)</argument_list></call></expr>)</condition><then>
			<block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr>;</return></block></then></if></elseif></if>
		<return>return <expr><literal type="boolean">true</literal></expr>;</return>
	}</block></function>
	
	<function><specifier>public</specifier> <type><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>Integer</name></argument>&gt;</argument_list></name></type> <name>getHistory</name><parameter_list>()</parameter_list><block>{
		<return>return <expr><name>microtaskHistory</name></expr>;</return>
	}</block></function>
	
	<function><specifier>public</specifier> <type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Achievement</name></argument>&gt;</argument_list></name></type> <name>getAchievements</name><parameter_list>()</parameter_list><block>{
		<return>return <expr><name>listOfAchievements</name></expr>;</return>
	}</block></function>
		
	<function><specifier>public</specifier> <type><name>void</name></type> <name>addAchievement</name><parameter_list>(<parameter><decl><type><name>Achievement</name></type> <name>achievement</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>projectId</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><name><name>achievement</name><operator>.</operator><name>isUnlocked</name></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>FirebaseService</name><operator>.</operator><name>writeAchievementNotification</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>AchievementNotificationInFirebase</name><argument_list>(<argument><expr><literal type="string">"new.achievement"</literal></expr></argument>,<argument><expr><call><name><name>achievement</name><operator>.</operator><name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>, 
				<argument><expr><call><name><name>achievement</name><operator>.</operator><name>getCondition</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>achievement</name><operator>.</operator><name>getRequirement</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>this</name><operator>.</operator><name>userid</name></name></expr></argument>, <argument><expr><name>projectId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>	
	}</block></function>
	


}</block></class></unit>

<unit revision="0.9.5" language="Java" filename="CrowdCode-com/crowdcoding/entities/questions/Answer.java" hash="326aa8529737a40d8a49030d304e20ff03b9f82a"><package>package <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>entities</name><operator>.</operator><name>questions</name></name>;</package>

<import>import static <name><name>com</name><operator>.</operator><name>googlecode</name><operator>.</operator><name>objectify</name><operator>.</operator><name>ObjectifyService</name><operator>.</operator><name>ofy</name></name>;</import>




<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>commands</name><operator>.</operator><name>QuestioningCommand</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>commands</name><operator>.</operator><name>WorkerCommand</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>dto</name><operator>.</operator><name>firebase</name><operator>.</operator><name>notification</name><operator>.</operator><name>AnswerNotificationInFirebase</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>dto</name><operator>.</operator><name>firebase</name><operator>.</operator><name>questions</name><operator>.</operator><name>AnswerInFirebase</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>util</name><operator>.</operator><name>FirebaseService</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>googlecode</name><operator>.</operator><name>objectify</name><operator>.</operator><name>annotation</name><operator>.</operator><name>Subclass</name></name>;</import>

<class><annotation>@<name>Subclass</name><argument_list>(<argument><expr><name>index</name><operator>=</operator><literal type="boolean">true</literal></expr></argument>)</argument_list></annotation>
<specifier>public</specifier> class <name>Answer</name> <super><extends>extends <name>Questioning</name></extends></super>
<block>{
	<decl_stmt><decl><specifier>private</specifier> <type><name>Long</name></type> <name>questionId</name></decl>;</decl_stmt>

	<constructor><specifier>public</specifier> <name>Answer</name><parameter_list>()</parameter_list><block>{}</block></constructor>

	<constructor><specifier>public</specifier> <name>Answer</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>text</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>questionId</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>ownerId</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>ownerHandle</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>projectId</name></decl></parameter>)</parameter_list>
	<block>{
		<expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>text</name></expr></argument>, <argument><expr><name>ownerId</name></expr></argument>, <argument><expr><name>ownerHandle</name></expr></argument>, <argument><expr><name>projectId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>questionId</name></name> <operator>=</operator> <name>questionId</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>subsribersId</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>ownerId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>points</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ofy</name><argument_list>()</argument_list></call><operator>.</operator><call><name>save</name><argument_list>()</argument_list></call><operator>.</operator><call><name>entity</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>now</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>firebasePath</name></name><operator>=</operator> <literal type="string">"/questions/"</literal> <operator>+</operator> <name>questionId</name> <operator>+</operator> <literal type="string">"/answers/"</literal><operator>+</operator> <name><name>this</name><operator>.</operator><name>id</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ofy</name><argument_list>()</argument_list></call><operator>.</operator><call><name>save</name><argument_list>()</argument_list></call><operator>.</operator><call><name>entity</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>now</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name><name>FirebaseService</name><operator>.</operator><name>writeAnswerCreated</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>AnswerInFirebase</name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>id</name></name></expr></argument>, <argument><expr><name><name>this</name><operator>.</operator><name>ownerId</name></name></expr></argument>, <argument><expr><name><name>this</name><operator>.</operator><name>ownerHandle</name></name></expr></argument>, <argument><expr><name><name>this</name><operator>.</operator><name>text</name></name></expr></argument>, <argument><expr><name><name>this</name><operator>.</operator><name>createdAt</name></name></expr></argument>, <argument><expr><name><name>this</name><operator>.</operator><name>score</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>this</name><operator>.</operator><name>firebasePath</name></name></expr></argument>, <argument><expr><name>projectId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name><name>QuestioningCommand</name><operator>.</operator><name>setClosed</name></name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>questionId</name></name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name><name>QuestioningCommand</name><operator>.</operator><name>incrementQuestionAnswers</name></name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>questionId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name><name>QuestioningCommand</name><operator>.</operator><name>subscribeWorker</name></name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>questionId</name></name></expr></argument>, <argument><expr><name>ownerId</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	
		<expr_stmt><expr><call><name><name>WorkerCommand</name><operator>.</operator><name>increaseStat</name></name><argument_list>(<argument><expr><name>ownerId</name></expr></argument>, <argument><expr><literal type="string">"answers"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<decl_stmt><decl><type><name>AnswerNotificationInFirebase</name></type> <name>notification</name> <init>= <expr><operator>new</operator> <call><name>AnswerNotificationInFirebase</name><argument_list>( <argument><expr><literal type="string">"answer.added"</literal></expr></argument>, <argument><expr><name><name>this</name><operator>.</operator><name>questionId</name></name></expr></argument>, <argument><expr><name><name>this</name><operator>.</operator><name>ownerHandle</name></name></expr></argument>, <argument><expr><call><name><name>this</name><operator>.</operator><name>questionId</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><call><name><name>QuestioningCommand</name><operator>.</operator><name>notifySubscribers</name></name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>questionId</name></name></expr></argument>, <argument><expr><name>notification</name></expr></argument>, <argument><expr><name>ownerId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	}</block></constructor>

}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="CrowdCode-com/crowdcoding/entities/questions/Comment.java" hash="4f5a63a6d6972c24d1061e4acc30e7bfb1be3492"><package>package <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>entities</name><operator>.</operator><name>questions</name></name>;</package>

<import>import static <name><name>com</name><operator>.</operator><name>googlecode</name><operator>.</operator><name>objectify</name><operator>.</operator><name>ObjectifyService</name><operator>.</operator><name>ofy</name></name>;</import>



<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>commands</name><operator>.</operator><name>QuestioningCommand</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>dto</name><operator>.</operator><name>firebase</name><operator>.</operator><name>notification</name><operator>.</operator><name>CommentNotificationInFirebase</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>util</name><operator>.</operator><name>FirebaseService</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>googlecode</name><operator>.</operator><name>objectify</name><operator>.</operator><name>annotation</name><operator>.</operator><name>Subclass</name></name>;</import>

<class><annotation>@<name>Subclass</name><argument_list>(<argument><expr><name>index</name><operator>=</operator><literal type="boolean">true</literal></expr></argument>)</argument_list></annotation>
<specifier>public</specifier> class <name>Comment</name> <super><extends>extends <name>Questioning</name></extends></super>
<block>{

	<decl_stmt><decl><specifier>private</specifier> <type><name>Long</name></type> <name>questionId</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>private</specifier> <type><name>Long</name></type> <name>answerId</name></decl>;</decl_stmt>

	<constructor><specifier>protected</specifier> <name>Comment</name><parameter_list>()</parameter_list><block>{}</block></constructor>

	<constructor><specifier>public</specifier> <name>Comment</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>text</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>questionId</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>answerId</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>ownerId</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>ownerHandle</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>projectId</name></decl></parameter>)</parameter_list>
	<block>{
		<expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>text</name></expr></argument>, <argument><expr><name>ownerId</name></expr></argument>, <argument><expr><name>ownerHandle</name></expr></argument>, <argument><expr><name>projectId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>questionId</name></name> <operator>=</operator> <name>questionId</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>answerId</name></name> <operator>=</operator> <name>answerId</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>points</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ofy</name><argument_list>()</argument_list></call><operator>.</operator><call><name>save</name><argument_list>()</argument_list></call><operator>.</operator><call><name>entity</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>now</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>firebasePath</name></name><operator>=</operator> <literal type="string">"/questions/"</literal> <operator>+</operator> <name>questionId</name> <operator>+</operator> <literal type="string">"/answers/"</literal><operator>+</operator> <name>answerId</name> <operator>+</operator><literal type="string">"/comments/"</literal> <operator>+</operator> <name><name>this</name><operator>.</operator><name>id</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ofy</name><argument_list>()</argument_list></call><operator>.</operator><call><name>save</name><argument_list>()</argument_list></call><operator>.</operator><call><name>entity</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>now</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name><name>FirebaseService</name><operator>.</operator><name>writeCommentCreated</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>dto</name><operator>.</operator><name>firebase</name><operator>.</operator><name>questions</name><operator>.</operator><name>CommentInFirebase</name></name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>id</name></name></expr></argument>, <argument><expr><name><name>this</name><operator>.</operator><name>ownerId</name></name></expr></argument>, <argument><expr><name>ownerHandle</name></expr></argument>, <argument><expr><name><name>this</name><operator>.</operator><name>text</name></name></expr></argument>, <argument><expr><name><name>this</name><operator>.</operator><name>createdAt</name></name></expr></argument>, <argument><expr><name><name>this</name><operator>.</operator><name>score</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>this</name><operator>.</operator><name>firebasePath</name></name></expr></argument>, <argument><expr><name>projectId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name><name>QuestioningCommand</name><operator>.</operator><name>incrementQuestionComments</name></name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>questionId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name><name>QuestioningCommand</name><operator>.</operator><name>setClosed</name></name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>questionId</name></name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


		<expr_stmt><expr><call><name><name>QuestioningCommand</name><operator>.</operator><name>subscribeWorker</name></name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>questionId</name></name></expr></argument>, <argument><expr><name>ownerId</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<decl_stmt><decl><type><name>CommentNotificationInFirebase</name></type> <name>notification</name> <init>= <expr><operator>new</operator> <call><name>CommentNotificationInFirebase</name><argument_list>( <argument><expr><literal type="string">"comment.added"</literal></expr></argument>, <argument><expr><name><name>this</name><operator>.</operator><name>questionId</name></name></expr></argument>, <argument><expr><name><name>this</name><operator>.</operator><name>answerId</name></name></expr></argument>, <argument><expr><name><name>this</name><operator>.</operator><name>ownerHandle</name></name></expr></argument>, <argument><expr><name><name>this</name><operator>.</operator><name>text</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>QuestioningCommand</name><operator>.</operator><name>notifySubscribers</name></name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>questionId</name></name></expr></argument>, <argument><expr><name>notification</name></expr></argument>, <argument><expr><name>ownerId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></constructor>

}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="CrowdCode-com/crowdcoding/util/FirebaseService.java" hash="e35faa1ad2248e502c783149a77a2b27fcb5aaec"><package>package <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>util</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>net</name><operator>.</operator><name>MalformedURLException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>net</name><operator>.</operator><name>URL</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashMap</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Iterator</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>LinkedList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>NoSuchElementException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>ConcurrentLinkedQueue</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>locks</name><operator>.</operator><name>ReentrantReadWriteLock</name><operator>.</operator><name>WriteLock</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>logging</name><operator>.</operator><name>Logger</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>commands</name><operator>.</operator><name>Command</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>dto</name><operator>.</operator><name>ajax</name><operator>.</operator><name>microtask</name><operator>.</operator><name>submission</name><operator>.</operator><name>ReviewDTO</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>dto</name><operator>.</operator><name>firebase</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>dto</name><operator>.</operator><name>firebase</name><operator>.</operator><name>artifacts</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>dto</name><operator>.</operator><name>firebase</name><operator>.</operator><name>microtasks</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>dto</name><operator>.</operator><name>firebase</name><operator>.</operator><name>notification</name><operator>.</operator><name>NotificationInFirebase</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>dto</name><operator>.</operator><name>firebase</name><operator>.</operator><name>questions</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>history</name><operator>.</operator><name>HistoryEvent</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>servlets</name><operator>.</operator><name>ThreadContext</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>appengine</name><operator>.</operator><name>api</name><operator>.</operator><name>urlfetch</name><operator>.</operator><name>HTTPMethod</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>appengine</name><operator>.</operator><name>api</name><operator>.</operator><name>urlfetch</name><operator>.</operator><name>HTTPRequest</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>appengine</name><operator>.</operator><name>api</name><operator>.</operator><name>urlfetch</name><operator>.</operator><name>HTTPResponse</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>appengine</name><operator>.</operator><name>api</name><operator>.</operator><name>urlfetch</name><operator>.</operator><name>URLFetchService</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>appengine</name><operator>.</operator><name>api</name><operator>.</operator><name>urlfetch</name><operator>.</operator><name>URLFetchServiceFactory</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>appengine</name><operator>.</operator><name>labs</name><operator>.</operator><name>repackaged</name><operator>.</operator><name>org</name><operator>.</operator><name>json</name><operator>.</operator><name>JSONException</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>appengine</name><operator>.</operator><name>labs</name><operator>.</operator><name>repackaged</name><operator>.</operator><name>org</name><operator>.</operator><name>json</name><operator>.</operator><name>JSONObject</name></name>;</import>


<comment type="block">/* Wrapper service that handles all interactions with Firebase, providing an API
 * for interacting with Firebase that hides all its implementation details.
 */</comment>
<class><specifier>public</specifier> class <name>FirebaseService</name>
<block>{

	<comment type="line">// Writes the specified data using the URL, relative to the BaseURL.</comment>
	<comment type="line">// Operation specifies the type of http request to make (e.g., PUT, POST, DELETE)</comment>
	<function><specifier>private</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>writeData</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>data</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>relativeURL</name></decl></parameter>, <parameter><decl><type><name>HTTPMethod</name></type> <name>operation</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>projectId</name></decl></parameter>)</parameter_list>
	<block>{
		<expr_stmt><expr><call><name>writeDataAbsolute</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><call><name>getBaseURL</name><argument_list>(<argument><expr><name>projectId</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>relativeURL</name></expr></argument>, <argument><expr><name>operation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<comment type="line">// Writes the specified data using specified absolute URL asyncrhonously (does not block waiting on write).</comment>
	<comment type="line">// Operation specifies the type of http request to make (e.g., PUT, POST, DELETE)</comment>
	<function><specifier>private</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>writeDataAbsolute</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>data</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>absoluteURL</name></decl></parameter>, <parameter><decl><type><name>HTTPMethod</name></type> <name>operation</name></decl></parameter>)</parameter_list>
	<block>{
		<try>try
		<block>{
			<decl_stmt><decl><type><name>URLFetchService</name></type> <name>fetchService</name> <init>= <expr><call><name><name>URLFetchServiceFactory</name><operator>.</operator><name>getURLFetchService</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>HTTPRequest</name></type>     <name>request</name>      <init>= <expr><operator>new</operator> <call><name>HTTPRequest</name><argument_list>(<argument><expr><operator>new</operator> <call><name>URL</name><argument_list>(<argument><expr><name>absoluteURL</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>operation</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name><name>request</name><operator>.</operator><name>setPayload</name></name><argument_list>(<argument><expr><call><name><name>data</name><operator>.</operator><name>getBytes</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<comment type="line">//			Future&lt;HTTPResponse&gt; fetchAsync = fetchService.fetchAsync(request);</comment>
			<decl_stmt><decl><type><name>HTTPResponse</name></type>    <name>response</name>     <init>= <expr><call><name><name>fetchService</name><operator>.</operator><name>fetch</name></name><argument_list>(<argument><expr><name>request</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

			<if>if<condition>( <expr><call><name><name>response</name><operator>.</operator><name>getResponseCode</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="number">200</literal></expr>)</condition><then><block>{
				<expr_stmt><expr><call><name><name>Logger</name><operator>.</operator><name>getLogger</name></name><argument_list>(<argument><expr><literal type="string">"LOGGER"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>severe</name><argument_list>(<argument><expr><literal type="string">"FIREBASE WRITE FAILED: "</literal><operator>+</operator><call><name><name>response</name><operator>.</operator><name>getResponseCode</name></name><argument_list>()</argument_list></call><operator>+</operator><literal type="string">" - "</literal><operator>+</operator><name>absoluteURL</name><operator>+</operator><literal type="string">" - "</literal><operator>+</operator><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>
		}</block>
		<catch>catch <parameter_list>(<parameter><decl><type><name>MalformedURLException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
			<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"Malformed url: "</literal><operator>+</operator><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></catch> <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
			<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"IOException url: "</literal><operator>+</operator><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></catch></try>
	}</block></function>

	<comment type="line">// Reads a JSON string from the specified absolute URL synchronously (blocks waiting on read to return).</comment>
	<comment type="line">// Uses the GET operation to read the data.</comment>
	<function><specifier>private</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>readDataAbsolute</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>absoluteURL</name></decl></parameter>)</parameter_list>
	<block>{
		<try>try
		<block>{
			<decl_stmt><decl><type><name>URLFetchService</name></type> <name>fetchService</name> <init>= <expr><call><name><name>URLFetchServiceFactory</name><operator>.</operator><name>getURLFetchService</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>HTTPRequest</name></type> <name>request</name> <init>= <expr><operator>new</operator> <call><name>HTTPRequest</name><argument_list>(<argument><expr><operator>new</operator> <call><name>URL</name><argument_list>(<argument><expr><name>absoluteURL</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>HTTPMethod</name><operator>.</operator><name>GET</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>HTTPResponse</name></type> <name>response</name> <init>= <expr><call><name><name>fetchService</name><operator>.</operator><name>fetch</name></name><argument_list>(<argument><expr><name>request</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>payload</name> <init>= <expr><call><name><name>response</name><operator>.</operator><name>getContent</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
			<if>if <condition>(<expr><name>payload</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then>
				<block type="pseudo"><return>return <expr><operator>new</operator> <call><name>String</name><argument_list>(<argument><expr><name>payload</name></expr></argument>)</argument_list></call></expr>;</return></block></then></if>
		}</block>
		<catch>catch <parameter_list>(<parameter><decl><type><name>MalformedURLException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
			<comment type="line">// ...</comment>
		}</block></catch>
		<catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
			<comment type="line">// ...</comment>
		}</block></catch></try>

		<return>return <expr><literal type="string">""</literal></expr>;</return>
	}</block></function>

	<comment type="line">// Gets the base URL for the current deployment project</comment>
	<function><specifier>private</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>getBaseURL</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>projectId</name></decl></parameter>)</parameter_list>
	<block>{
		<return>return <expr><literal type="string">"https://crowdcode.firebaseio.com/projects/"</literal> <operator>+</operator> <name>projectId</name></expr>;</return>
	}</block></function>



	<function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>enqueueWrite</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>data</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>relativeURL</name></decl></parameter>, <parameter><decl><type><name>HTTPMethod</name></type> <name>operation</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>projectId</name></decl></parameter>)</parameter_list><block>{

		<decl_stmt><decl><type><name>ThreadContext</name></type> <name>threadContext</name> <init>= <expr><call><name><name>ThreadContext</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>threadContext</name><operator>.</operator><name>addfirebaseWrite</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>FirebaseWrite</name><argument_list>(<argument><expr><name>data</name></expr></argument>,<argument><expr><name>relativeURL</name></expr></argument>,<argument><expr><name>operation</name></expr></argument>,<argument><expr><name>projectId</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>publish</name><parameter_list>()</parameter_list><block>{

		<decl_stmt><decl><type><name><name>ConcurrentLinkedQueue</name><argument_list type="generic">&lt;<argument><name>FirebaseWrite</name></argument>&gt;</argument_list></name></type> <name>firebaseWriteList</name> <init>= <expr><call><name><name>ThreadContext</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getFirebaseWritesList</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name><name>Iterator</name><argument_list type="generic">&lt;<argument><name>FirebaseWrite</name></argument>&gt;</argument_list></name></type> <name>writeIterator</name> <init>= <expr><call><name><name>firebaseWriteList</name><operator>.</operator><name>iterator</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	    <while>while<condition>(<expr><call><name><name>writeIterator</name><operator>.</operator><name>hasNext</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
    		<decl_stmt><decl><type><name>FirebaseWrite</name></type> <name>write</name> <init>= <expr><call><name><name>writeIterator</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    		<if>if<condition>( <expr><name>write</name> <operator>!=</operator> <literal type="null">null</literal></expr> )</condition><then><block>{
    			<expr_stmt><expr><call><name><name>write</name><operator>.</operator><name>publish</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    			<expr_stmt><expr><call><name><name>writeIterator</name><operator>.</operator><name>remove</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    		}</block></then></if>
	    }</block></while>
	}</block></function>

	<class><specifier>public</specifier> <specifier>static</specifier> class <name>FirebaseWrite</name>
	<block>{
		<decl_stmt><decl><specifier>private</specifier> <type><name>String</name></type>     <name>data</name></decl>;</decl_stmt>
		<decl_stmt><decl><specifier>private</specifier> <type><name>String</name></type>     <name>relativeURL</name></decl>;</decl_stmt>
		<decl_stmt><decl><specifier>private</specifier> <type><name>HTTPMethod</name></type> <name>operation</name></decl>;</decl_stmt>
		<decl_stmt><decl><specifier>private</specifier> <type><name>String</name></type>     <name>projectId</name></decl>;</decl_stmt>

		<constructor><specifier>public</specifier> <name>FirebaseWrite</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>data</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>relativeURL</name></decl></parameter>, <parameter><decl><type><name>HTTPMethod</name></type> <name>operation</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>projectId</name></decl></parameter>)</parameter_list><block>{
			<expr_stmt><expr><name><name>this</name><operator>.</operator><name>data</name></name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>this</name><operator>.</operator><name>relativeURL</name></name> <operator>=</operator> <name>relativeURL</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>this</name><operator>.</operator><name>operation</name></name> <operator>=</operator> <name>operation</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>this</name><operator>.</operator><name>projectId</name></name> <operator>=</operator> <name>projectId</name></expr>;</expr_stmt>
		}</block></constructor>

		<function><specifier>public</specifier> <type><name>void</name></type> <name>publish</name><parameter_list>()</parameter_list><block>{
			<expr_stmt><expr><call><name><name>FirebaseService</name><operator>.</operator><name>writeData</name></name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>relativeURL</name></expr></argument>, <argument><expr><name>operation</name></expr></argument>, <argument><expr><name>projectId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></function>
	}</block></class>



	<comment type="line">// Writes the specified microtask to firebase</comment>
	<function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>writeMicrotaskCreated</name><parameter_list>(<parameter><decl><type><name>MicrotaskInFirebase</name></type> <name>dto</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>microtaskKey</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>projectId</name></decl></parameter>)</parameter_list>
	<block>{
		<expr_stmt><expr><call><name>enqueueWrite</name><argument_list>(<argument><expr><call><name><name>dto</name><operator>.</operator><name>json</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"/microtasks/"</literal> <operator>+</operator> <name>microtaskKey</name> <operator>+</operator> <literal type="string">".json"</literal></expr></argument>, <argument><expr><name><name>HTTPMethod</name><operator>.</operator><name>PATCH</name></name></expr></argument>, <argument><expr><name>projectId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	}</block></function>
	<comment type="line">// Writes the specified microtask to firebase</comment>
	<function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>writeMicrotaskSubmission</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>submissionDto</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>microtaskKey</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>projectId</name></decl></parameter>)</parameter_list>
	<block>{
		<expr_stmt><expr><call><name>enqueueWrite</name><argument_list>(<argument><expr><literal type="string">"{\"submission\": "</literal> <operator>+</operator> <name>submissionDto</name> <operator>+</operator> <literal type="string">"}"</literal></expr></argument>, <argument><expr><literal type="string">"/microtasks/"</literal> <operator>+</operator> <name>microtaskKey</name> <operator>+</operator> <literal type="string">".json"</literal></expr></argument>, <argument><expr><name><name>HTTPMethod</name><operator>.</operator><name>PATCH</name></name></expr></argument>, <argument><expr><name>projectId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	}</block></function>

	<comment type="line">// Writes information about microtask assignment to Firebase</comment>
	<function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>writeMicrotaskAssigned</name><parameter_list>( <parameter><decl><type><name>String</name></type> <name>microtaskKey</name></decl></parameter>,
			<parameter><decl><type><name>String</name></type> <name>workerId</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>projectId</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>assigned</name></decl></parameter>)</parameter_list>
	<block>{
		<expr_stmt><expr><call><name>enqueueWrite</name><argument_list>(<argument><expr><literal type="string">"{\"assigned\": "</literal><operator>+</operator><call><name><name>Boolean</name><operator>.</operator><name>toString</name></name><argument_list>(<argument><expr><name>assigned</name></expr></argument>)</argument_list></call><operator>+</operator><literal type="string">", \"workerId\": \""</literal> <operator>+</operator> <name>workerId</name> <operator>+</operator> <literal type="string">"\"}"</literal></expr></argument>, <argument><expr><literal type="string">"/microtasks/"</literal> <operator>+</operator> <name>microtaskKey</name> <operator>+</operator> <literal type="string">".json"</literal></expr></argument>, <argument><expr><name><name>HTTPMethod</name><operator>.</operator><name>PATCH</name></name></expr></argument>, <argument><expr><name>projectId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>
	
	
	<comment type="line">// Writes information about excluded workers to Firebase</comment>
	<function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>writeMicrotaskExcludedWorkers</name><parameter_list>( <parameter><decl><type><name>String</name></type> <name>microtaskKey</name></decl></parameter>,
			<parameter><decl><type><name>String</name></type> <name>projectId</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>workerIDs</name></decl></parameter>)</parameter_list>
	<block>{
		<expr_stmt><expr><call><name>enqueueWrite</name><argument_list>(<argument><expr><literal type="string">"{\"excluded\": \""</literal> <operator>+</operator><name>workerIDs</name><operator>+</operator> <literal type="string">"\"}"</literal></expr></argument>, <argument><expr><literal type="string">"/microtasks/"</literal> <operator>+</operator> <name>microtaskKey</name> <operator>+</operator> <literal type="string">".json"</literal></expr></argument>, <argument><expr><name><name>HTTPMethod</name><operator>.</operator><name>PATCH</name></name></expr></argument>, <argument><expr><name>projectId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>
	
	

	<comment type="line">// Show if microtask is waiting for review</comment>
	<function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>writeMicrotaskWaitingReview</name><parameter_list>( <parameter><decl><type><name>String</name></type> <name>microtaskKey</name></decl></parameter>,
			<parameter><decl><type><name>String</name></type> <name>workerId</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>projectId</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>waiting</name></decl></parameter>)</parameter_list>
	<block>{
		<expr_stmt><expr><call><name>enqueueWrite</name><argument_list>(<argument><expr><literal type="string">"{\"waitingReview\": "</literal> <operator>+</operator> <name>waiting</name> <operator>+</operator> <literal type="string">"}"</literal></expr></argument>, <argument><expr><literal type="string">"/microtasks/"</literal> <operator>+</operator> <name>microtaskKey</name> <operator>+</operator> <literal type="string">"/.json"</literal></expr></argument>, <argument><expr><name><name>HTTPMethod</name><operator>.</operator><name>PATCH</name></name></expr></argument>, <argument><expr><name>projectId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	
	<comment type="line">// Writes information about microtask completition to Firebase</comment>
	<function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>writeMicrotaskCompleted</name><parameter_list>( <parameter><decl><type><name>String</name></type> <name>microtaskKey</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>workerID</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>projectId</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>completed</name></decl></parameter>)</parameter_list><block>{
		<expr_stmt><expr><call><name>enqueueWrite</name><argument_list>(<argument><expr><literal type="string">"{\"completed\": "</literal> <operator>+</operator> <name>completed</name> <operator>+</operator> <literal type="string">"}"</literal></expr></argument>, <argument><expr><literal type="string">"/microtasks/"</literal> <operator>+</operator> <name>microtaskKey</name> <operator>+</operator> <literal type="string">"/.json"</literal></expr></argument>, <argument><expr><name><name>HTTPMethod</name><operator>.</operator><name>PATCH</name></name></expr></argument>, <argument><expr><name>projectId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>writeMicrotaskWaitingReview</name><argument_list>(<argument><expr><name>microtaskKey</name></expr></argument>,<argument><expr><name>workerID</name></expr></argument>, <argument><expr><name>projectId</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>
	<comment type="line">// Writes information about microtask completition to Firebase</comment>
	<function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>writeMicrotaskDeleted</name><parameter_list>( <parameter><decl><type><name>String</name></type> <name>microtaskKey</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>projectId</name></decl></parameter>)</parameter_list><block>{
		<expr_stmt><expr><call><name>enqueueWrite</name><argument_list>(<argument><expr><literal type="string">"{\"deleted\": \"true\"}"</literal></expr></argument>, <argument><expr><literal type="string">"/microtasks/"</literal> <operator>+</operator> <name>microtaskKey</name> <operator>+</operator> <literal type="string">"/.json"</literal></expr></argument>, <argument><expr><name><name>HTTPMethod</name><operator>.</operator><name>PATCH</name></name></expr></argument>, <argument><expr><name>projectId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<comment type="line">// Writes information about an old microtask to retrieve the information to Firebase</comment>
	<function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>writeMicrotaskReissuedFrom</name><parameter_list>( <parameter><decl><type><name>String</name></type> <name>microtaskKey</name></decl></parameter>, <parameter><decl><type><name>ReissueInFirebase</name></type> <name>reiussueInFirebase</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>reissuedSubmission</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>projectId</name></decl></parameter>)</parameter_list>
	<block>{

		<expr_stmt><expr><call><name>enqueueWrite</name><argument_list>(<argument><expr><literal type="string">"{\"reissuedSubmission\": "</literal> <operator>+</operator> <name>reissuedSubmission</name> <operator>+</operator> <literal type="string">"}"</literal></expr></argument>, <argument><expr><literal type="string">"/microtasks/"</literal> <operator>+</operator> <name>microtaskKey</name><operator>+</operator> <literal type="string">".json"</literal></expr></argument>, <argument><expr><name><name>HTTPMethod</name><operator>.</operator><name>PATCH</name></name></expr></argument>, <argument><expr><name>projectId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>enqueueWrite</name><argument_list>(<argument><expr><call><name><name>reiussueInFirebase</name><operator>.</operator><name>json</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"/microtasks/"</literal> <operator>+</operator> <name>microtaskKey</name><operator>+</operator> <literal type="string">".json"</literal></expr></argument>, <argument><expr><name><name>HTTPMethod</name><operator>.</operator><name>PATCH</name></name></expr></argument>, <argument><expr><name>projectId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>writeMicrotaskCanceled</name><parameter_list>( <parameter><decl><type><name>String</name></type> <name>microtaskKey</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>canceled</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>projectId</name></decl></parameter>)</parameter_list>
	<block>{
		<expr_stmt><expr><call><name>enqueueWrite</name><argument_list>( <argument><expr><literal type="string">"{\"canceled\": \""</literal> <operator>+</operator> <name>canceled</name> <operator>+</operator> <literal type="string">"\"}"</literal></expr></argument>, <argument><expr><literal type="string">"/microtasks/"</literal> <operator>+</operator> <name>microtaskKey</name> <operator>+</operator> <literal type="string">".json"</literal></expr></argument>, <argument><expr><name><name>HTTPMethod</name><operator>.</operator><name>PATCH</name></name></expr></argument>, <argument><expr><name>projectId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>writeTestJobQueue</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>functionID</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>functionVersion</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>testSuiteVersion</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>projectId</name></decl></parameter>)</parameter_list>
	<block>{
		<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"ASKING FOR TEST RUN for function "</literal><operator>+</operator><name>functionID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>enqueueWrite</name><argument_list>(<argument><expr><literal type="string">"{\"functionId\": "</literal> <operator>+</operator> <name>functionID</name> <operator>+</operator> <literal type="string">", \"functionVersion\" : \""</literal> <operator>+</operator><name>functionVersion</name> <operator>+</operator><literal type="string">"\", \"testSuiteVersion\" : \""</literal> <operator>+</operator><name>testSuiteVersion</name> <operator>+</operator><literal type="string">"\", \"bounceCounter\" : \"0\"}"</literal></expr></argument>, <argument><expr><literal type="string">"/status/testJobQueue/"</literal><operator>+</operator><name>functionID</name><operator>+</operator><literal type="string">".json"</literal></expr></argument>, <argument><expr><name><name>HTTPMethod</name><operator>.</operator><name>PUT</name></name></expr></argument>, <argument><expr><name>projectId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>


	<function><specifier>public</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>getAllCode</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>projectId</name></decl></parameter>)</parameter_list>
	<block>{
		<decl_stmt><decl><type><name>String</name></type> <name>absoluteUrl</name> <init>= <expr><call><name>getBaseURL</name><argument_list>( <argument><expr><name>projectId</name></expr></argument> )</argument_list></call> <operator>+</operator> <literal type="string">"/code.json"</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>String</name></type> <name>result</name> <init>= <expr><call><name>readDataAbsolute</name><argument_list>( <argument><expr><name>absoluteUrl</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

		<comment type="line">// check if exist the reference on firebase, if not returns false</comment>
		<if>if <condition>( <expr><name>result</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <call><name><name>result</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><literal type="string">"null"</literal></expr></argument>)</argument_list></call></expr> )</condition><then>
			<block type="pseudo"><return>return <expr><literal type="string">""</literal></expr>;</return></block></then>
		<else>else<block>{
			<expr_stmt><expr><name>result</name><operator>=</operator> <call><name><name>result</name><operator>.</operator><name>substring</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name><name>result</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>result</name><operator>=</operator> <call><name><name>result</name><operator>.</operator><name>replaceAll</name></name><argument_list>(<argument><expr><literal type="string">"\\\\\""</literal></expr></argument>, <argument><expr><literal type="string">"\""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>result</name><operator>=</operator> <call><name><name>result</name><operator>.</operator><name>replaceAll</name></name><argument_list>(<argument><expr><literal type="string">"debug\\.log"</literal></expr></argument>, <argument><expr><literal type="string">"console.log"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>result</name><operator>=</operator> <call><name><name>result</name><operator>.</operator><name>replaceAll</name></name><argument_list>(<argument><expr><literal type="string">"\\\\n"</literal></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>result</name><operator>=</operator> <call><name><name>result</name><operator>.</operator><name>replaceAll</name></name><argument_list>(<argument><expr><literal type="string">"\\\\t"</literal></expr></argument>, <argument><expr><literal type="string">"\t"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><name>result</name></expr>;</return>
		}</block></else></if>
	}</block></function>
	<function><specifier>public</specifier> <specifier>static</specifier> <type><name>boolean</name></type> <name>isWorkerLoggedIn</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>workerID</name></decl></parameter>,<parameter><decl><type><name>String</name></type> <name>projectId</name></decl></parameter>)</parameter_list><block>{
		<decl_stmt><decl><type><name>String</name></type> <name>absoluteUrl</name> <init>= <expr><call><name>getBaseURL</name><argument_list>(<argument><expr><name>projectId</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">"/status/loggedInWorkers/"</literal> <operator>+</operator> <name>workerID</name> <operator>+</operator> <literal type="string">".json"</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>String</name></type> <name>result</name> <init>= <expr><call><name>readDataAbsolute</name><argument_list>( <argument><expr><name>absoluteUrl</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
		<comment type="line">// check if exist the reference on firebase, if not returns false</comment>
		<if>if <condition>( <expr><name>result</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <call><name><name>result</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><literal type="string">"null"</literal></expr></argument>)</argument_list></call></expr> )</condition><then>
			<block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr>;</return></block></then></if>

		<comment type="line">//try to convert the object into json format</comment>
		<try>try <block>{
			<decl_stmt><decl><type><name>JSONObject</name></type> <name>user</name>  <init>= <expr><operator>new</operator> <call><name>JSONObject</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>long</name></type> <name>lastUpdateLogin</name> <init>= <expr><call><name><name>user</name><operator>.</operator><name>getLong</name></name><argument_list>(<argument><expr><literal type="string">"time"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<comment type="line">// the user on client side will update the login time every 30 seconds,</comment>
			<comment type="line">// so if has passed more than 30 seconds since the last update means that the user is logged out</comment>
			<if>if<condition>( <expr><operator>(</operator> <call><name><name>System</name><operator>.</operator><name>currentTimeMillis</name></name><argument_list>()</argument_list></call> <operator>-</operator> <name>lastUpdateLogin</name> <operator>)</operator> <operator>&lt;</operator> <literal type="number">30</literal><operator>*</operator><literal type="number">1000</literal></expr>)</condition><then>
				<block type="pseudo"><return>return <expr><literal type="boolean">true</literal></expr>;</return></block></then>
			<else>else
				<block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr>;</return></block></else></if>

		}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>JSONException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{

			<expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		}</block></catch></try>

		<return>return <expr><literal type="boolean">false</literal></expr>;</return>
	}</block></function>


	<function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>writeWorkerLoggedIn</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>workerID</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>workerDisplayName</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>projectId</name></decl></parameter>)</parameter_list><block>{
		<expr_stmt><expr><call><name>enqueueWrite</name><argument_list>(<argument><expr><literal type="string">"{\"workerHandle\": \""</literal> <operator>+</operator> <name>workerDisplayName</name> <operator>+</operator> <literal type="string">"\"}"</literal></expr></argument>, <argument><expr><literal type="string">"/status/loggedInWorkers/"</literal> <operator>+</operator> <name>workerID</name> <operator>+</operator> <literal type="string">".json"</literal></expr></argument>, <argument><expr><name><name>HTTPMethod</name><operator>.</operator><name>PUT</name></name></expr></argument>, <argument><expr><name>projectId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>writeWorkerLoggedOut</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>workerID</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>projectId</name></decl></parameter>)</parameter_list><block>{
		<expr_stmt><expr><call><name>enqueueWrite</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="string">"/status/loggedInWorkers/"</literal> <operator>+</operator> <name>workerID</name> <operator>+</operator> <literal type="string">".json"</literal></expr></argument>, <argument><expr><name><name>HTTPMethod</name><operator>.</operator><name>DELETE</name></name></expr></argument>, <argument><expr><name>projectId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>writeMicrotaskQueue</name><parameter_list>(<parameter><decl><type><name>QueueInFirebase</name></type> <name>dto</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>projectId</name></decl></parameter>)</parameter_list><block>{
		<expr_stmt><expr><call><name>enqueueWrite</name><argument_list>(<argument><expr><call><name><name>dto</name><operator>.</operator><name>json</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"/status/microtaskQueue.json"</literal></expr></argument>, <argument><expr><name><name>HTTPMethod</name><operator>.</operator><name>PUT</name></name></expr></argument>, <argument><expr><name>projectId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>writeReviewQueue</name><parameter_list>(<parameter><decl><type><name>QueueInFirebase</name></type> <name>dto</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>projectId</name></decl></parameter>)</parameter_list><block>{
		<expr_stmt><expr><call><name>enqueueWrite</name><argument_list>(<argument><expr><call><name><name>dto</name><operator>.</operator><name>json</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"/status/reviewQueue.json"</literal></expr></argument>, <argument><expr><name><name>HTTPMethod</name><operator>.</operator><name>PUT</name></name></expr></argument>, <argument><expr><name>projectId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>incrementTestSuiteVersion</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>functionID</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>testSuiteVersion</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>projectId</name></decl></parameter>)</parameter_list><block>{
		<expr_stmt><expr><call><name>enqueueWrite</name><argument_list>(<argument><expr><literal type="string">"{\"testSuiteVersion\" : \""</literal> <operator>+</operator> <name>testSuiteVersion</name> <operator>+</operator><literal type="string">"\"}"</literal></expr></argument> , <argument><expr><literal type="string">"/artifacts/functions/"</literal> <operator>+</operator> <name>functionID</name> <operator>+</operator> <literal type="string">".json"</literal></expr></argument>, <argument><expr><name><name>HTTPMethod</name><operator>.</operator><name>PATCH</name></name></expr></argument>, <argument><expr><name>projectId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<comment type="line">// Stores the specified function to Firebase</comment>
	<function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>writeFunction</name><parameter_list>(<parameter><decl><type><name>FunctionInFirebase</name></type> <name>dto</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>functionID</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>version</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>projectId</name></decl></parameter>)</parameter_list><block>{
		<expr_stmt><expr><call><name>enqueueWrite</name><argument_list>(<argument><expr><call><name><name>dto</name><operator>.</operator><name>json</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"/artifacts/functions/"</literal> <operator>+</operator> <name>functionID</name> <operator>+</operator> <literal type="string">".json"</literal></expr></argument>, <argument><expr><name><name>HTTPMethod</name><operator>.</operator><name>PATCH</name></name></expr></argument>, <argument><expr><name>projectId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>enqueueWrite</name><argument_list>(<argument><expr><call><name><name>dto</name><operator>.</operator><name>json</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"/history/artifacts/functions/"</literal> <operator>+</operator> <name>functionID</name> <operator>+</operator> <literal type="string">"/"</literal> <operator>+</operator> <name>version</name> <operator>+</operator> <literal type="string">".json"</literal></expr></argument>, <argument><expr><name><name>HTTPMethod</name><operator>.</operator><name>PUT</name></name></expr></argument>, <argument><expr><name>projectId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>


	<comment type="line">// Stores the specified test to Firebase</comment>
	<function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>writeAdvancedTest</name><parameter_list>(<parameter><decl><type><name>AdvancedTestInFirebase</name></type> <name>dto</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>functionId</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>testID</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>version</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>projectId</name></decl></parameter>)</parameter_list><block>{
		<expr_stmt><expr><call><name>enqueueWrite</name><argument_list>(<argument><expr><call><name><name>dto</name><operator>.</operator><name>json</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"/artifacts/functions/"</literal><operator>+</operator><name>functionId</name><operator>+</operator><literal type="string">"/tests/"</literal> <operator>+</operator> <name>testID</name> <operator>+</operator> <literal type="string">".json"</literal></expr></argument>, <argument><expr><name><name>HTTPMethod</name><operator>.</operator><name>PUT</name></name></expr></argument>, <argument><expr><name>projectId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>enqueueWrite</name><argument_list>(<argument><expr><call><name><name>dto</name><operator>.</operator><name>json</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"/history/artifacts/tests/"</literal> <operator>+</operator> <name>testID</name> <operator>+</operator> <literal type="string">"/"</literal> <operator>+</operator> <name>version</name> <operator>+</operator> <literal type="string">".json"</literal></expr></argument>, <argument><expr><name><name>HTTPMethod</name><operator>.</operator><name>PUT</name></name></expr></argument>, <argument><expr><name>projectId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<comment type="line">// Stores the specified Stub to Firebase</comment>
	<function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>writeSimpleTest</name><parameter_list>(<parameter><decl><type><name>SimpleTestInFirebase</name></type> <name>dto</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>functionId</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>stubId</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>version</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>projectId</name></decl></parameter>)</parameter_list><block>{
		<expr_stmt><expr><call><name>enqueueWrite</name><argument_list>(<argument><expr><call><name><name>dto</name><operator>.</operator><name>json</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"/artifacts/functions/"</literal> <operator>+</operator> <name>functionId</name> <operator>+</operator> <literal type="string">"/tests/"</literal> <operator>+</operator> <name>stubId</name> <operator>+</operator> <literal type="string">".json"</literal></expr></argument>, <argument><expr><name><name>HTTPMethod</name><operator>.</operator><name>PUT</name></name></expr></argument>, <argument><expr><name>projectId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>enqueueWrite</name><argument_list>(<argument><expr><call><name><name>dto</name><operator>.</operator><name>json</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"/history/artifacts/tests/"</literal> <operator>+</operator> <name>stubId</name> <operator>+</operator> <literal type="string">"/"</literal> <operator>+</operator> <name>version</name> <operator>+</operator> <literal type="string">".json"</literal></expr></argument>, <argument><expr><name><name>HTTPMethod</name><operator>.</operator><name>PUT</name></name></expr></argument>, <argument><expr><name>projectId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<comment type="line">// Stores the specified adt to Firebase</comment>
	<function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>writeADT</name><parameter_list>(<parameter><decl><type><name>ADTInFirebase</name></type> <name>dto</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>ADTId</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>version</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>projectId</name></decl></parameter>)</parameter_list><block>{
		<expr_stmt><expr><call><name>enqueueWrite</name><argument_list>(<argument><expr><call><name><name>dto</name><operator>.</operator><name>json</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"/artifacts/ADTs/"</literal> <operator>+</operator> <name>ADTId</name> <operator>+</operator> <literal type="string">".json"</literal></expr></argument>, <argument><expr><name><name>HTTPMethod</name><operator>.</operator><name>PUT</name></name></expr></argument>, <argument><expr><name>projectId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>enqueueWrite</name><argument_list>(<argument><expr><literal type="string">"{ \".priority\": \""</literal><operator>+</operator><call><name><name>System</name><operator>.</operator><name>currentTimeMillis</name></name><argument_list>()</argument_list></call><operator>+</operator><literal type="string">"\" }"</literal></expr></argument>, <argument><expr><literal type="string">"/artifacts/ADTs/"</literal> <operator>+</operator> <name>ADTId</name> <operator>+</operator> <literal type="string">".json"</literal></expr></argument>, <argument><expr><name><name>HTTPMethod</name><operator>.</operator><name>PATCH</name></name></expr></argument>, <argument><expr><name>projectId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>enqueueWrite</name><argument_list>(<argument><expr><call><name><name>dto</name><operator>.</operator><name>json</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"/history/artifacts/ADTs/"</literal> <operator>+</operator> <name>ADTId</name> <operator>+</operator> <literal type="string">"/"</literal> <operator>+</operator> <name>version</name> <operator>+</operator> <literal type="string">".json"</literal></expr></argument>, <argument><expr><name><name>HTTPMethod</name><operator>.</operator><name>PUT</name></name></expr></argument>, <argument><expr><name>projectId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>


	<comment type="line">// Deletes the specified test in Firebase</comment>
	<function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>deleteTest</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>testID</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>projectId</name></decl></parameter>)</parameter_list><block>{
		<expr_stmt><expr><call><name>enqueueWrite</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="string">"/artifacts/tests/"</literal> <operator>+</operator> <name>testID</name> <operator>+</operator> <literal type="string">".json"</literal></expr></argument>, <argument><expr><name><name>HTTPMethod</name><operator>.</operator><name>DELETE</name></name></expr></argument>, <argument><expr><name>projectId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>
	
	
	<comment type="line">//stores worker information</comment>
	<function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>writeWorker</name><parameter_list>(<parameter><decl><type><name>WorkerInFirebase</name></type> <name>dto</name></decl></parameter>,
			<parameter><decl><type><name>String</name></type> <name>userid</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>projectId</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><call><name>enqueueWrite</name><argument_list>(<argument><expr><call><name><name>dto</name><operator>.</operator><name>json</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"/workers/"</literal> <operator>+</operator> <name>userid</name> <operator>+</operator> <literal type="string">".json"</literal></expr></argument>, <argument><expr><name><name>HTTPMethod</name><operator>.</operator><name>PATCH</name></name></expr></argument>, <argument><expr><name>projectId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>		
	}</block></function>

	<comment type="line">// Stores the specified review to firebase</comment>
	<function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>writeReview</name><parameter_list>(<parameter><decl><type><name>ReviewSubmissionInFirebase</name></type> <name>reviewSubmission</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>microtaskKey</name></decl></parameter> , <parameter><decl><type><name>String</name></type> <name>projectId</name></decl></parameter>)</parameter_list><block>{
		<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><call><name><name>reviewSubmission</name><operator>.</operator><name>json</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>enqueueWrite</name><argument_list>(<argument><expr><call><name><name>reviewSubmission</name><operator>.</operator><name>json</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"/microtasks/"</literal> <operator>+</operator> <name>microtaskKey</name> <operator>+</operator> <literal type="string">"/review.json"</literal></expr></argument>, <argument><expr><name><name>HTTPMethod</name><operator>.</operator><name>PUT</name></name></expr></argument>, <argument><expr><name>projectId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></function>

	<function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>writeSetting</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>value</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>projectId</name></decl></parameter>)</parameter_list><block>{
		<expr_stmt><expr><call><name>enqueueWrite</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="string">"/status/settings/"</literal><operator>+</operator><name>name</name><operator>+</operator><literal type="string">".json"</literal></expr></argument>, <argument><expr><name><name>HTTPMethod</name><operator>.</operator><name>PUT</name></name></expr></argument>, <argument><expr><name>projectId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<comment type="line">// Reads the ADTs for the specified project. If there are no ADTs, returns an empty string.</comment>
	<function><specifier>public</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>readADTs</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>projectId</name></decl></parameter>)</parameter_list><block>{
		<decl_stmt><decl><type><name>String</name></type> <name>result</name> <init>= <expr><call><name>readDataAbsolute</name><argument_list>(<argument><expr><literal type="string">"https://crowdcode.firebaseio.com/clientRequests/"</literal> <operator>+</operator> <name>projectId</name> <operator>+</operator> <literal type="string">"/ADTs.json"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if>if <condition>(<expr><name>result</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <call><name><name>result</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><literal type="string">"null"</literal></expr></argument>)</argument_list></call></expr>)</condition><then>
			<block type="pseudo"><expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt></block></then></if>
		<return>return <expr><name>result</name></expr>;</return>
	}</block></function>

	<comment type="line">// Copies the specified ADTs from the client request into the project</comment>
	<function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>copyADTs</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>projectId</name></decl></parameter>)</parameter_list><block>{
		<decl_stmt><decl><type><name>String</name></type> <name>adts</name> <init>= <expr><call><name>readDataAbsolute</name><argument_list>(<argument><expr><literal type="string">"https://crowdcode.firebaseio.com/clientRequests/"</literal> <operator>+</operator> <name>projectId</name> <operator>+</operator> <literal type="string">"/ADTs.json"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if>if <condition>(<expr><name>adts</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <call><name><name>adts</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><literal type="string">"null"</literal></expr></argument>)</argument_list></call></expr>)</condition><then>
			<block type="pseudo"><expr_stmt><expr><name>adts</name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt></block></then>
		<else>else
			<block type="pseudo"><expr_stmt><expr><call><name>enqueueWrite</name><argument_list>(<argument><expr><name>adts</name></expr></argument>, <argument><expr><literal type="string">"/ADTs.json"</literal></expr></argument>, <argument><expr><name><name>HTTPMethod</name><operator>.</operator><name>PUT</name></name></expr></argument>, <argument><expr><name>projectId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>
	}</block></function>

	<comment type="line">// Reads the functions for the specified project. If there are no functions, returns an empty string.</comment>
	<function><specifier>public</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>readClientRequest</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>projectId</name></decl></parameter>)</parameter_list><block>{
		<decl_stmt><decl><type><name>String</name></type> <name>result</name> <init>= <expr><call><name>readDataAbsolute</name><argument_list>(<argument><expr><literal type="string">"https://crowdcode.firebaseio.com/clientRequests/"</literal> <operator>+</operator> <name>projectId</name> <operator>+</operator> <literal type="string">".json"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if>if <condition>(<expr><name>result</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <call><name><name>result</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><literal type="string">"null"</literal></expr></argument>)</argument_list></call></expr>)</condition><then>
			<block type="pseudo"><expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt></block></then></if>
		<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>result</name></expr>;</return>
	}</block></function>

	<function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>setPoints</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>workerID</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>workerDisplayName</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>points</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>projectId</name></decl></parameter>)</parameter_list><block>{
		<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"SETTING POINTS TO WORKER "</literal> <operator>+</operator> <name>workerDisplayName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>enqueueWrite</name><argument_list>(<argument><expr><call><name><name>Integer</name><operator>.</operator><name>toString</name></name><argument_list>(<argument><expr><name>points</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"/workers/"</literal> <operator>+</operator> <name>workerID</name> <operator>+</operator> <literal type="string">"/score.json"</literal></expr></argument>, <argument><expr><name><name>HTTPMethod</name><operator>.</operator><name>PUT</name></name></expr></argument>, <argument><expr><name>projectId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>LeaderboardEntry</name></type> <name>leader</name> <init>= <expr><operator>new</operator> <call><name>LeaderboardEntry</name><argument_list>(<argument><expr><name>points</name></expr></argument>, <argument><expr><name>workerDisplayName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>enqueueWrite</name><argument_list>(<argument><expr><call><name><name>leader</name><operator>.</operator><name>json</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"/leaderboard/leaders/"</literal> <operator>+</operator> <name>workerID</name> <operator>+</operator> <literal type="string">".json"</literal></expr></argument>, <argument><expr><name><name>HTTPMethod</name><operator>.</operator><name>PUT</name></name></expr></argument>, <argument><expr><name>projectId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>writeWorkerNotification</name><parameter_list>(<parameter><decl><type><name>NotificationInFirebase</name></type> <name>notification</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>workerID</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>projectId</name></decl></parameter>)</parameter_list><block>{
		<expr_stmt><expr><call><name>enqueueWrite</name><argument_list>(<argument><expr><call><name><name>notification</name><operator>.</operator><name>json</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"/notifications/"</literal> <operator>+</operator> <name>workerID</name> <operator>+</operator> <literal type="string">".json"</literal></expr></argument>, <argument><expr><name><name>HTTPMethod</name><operator>.</operator><name>POST</name></name></expr></argument>, <argument><expr><name>projectId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>
	
	<function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>writeLevelUpNotification</name><parameter_list>(<parameter><decl><type><name>NotificationInFirebase</name></type> <name>notification</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>workerID</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>projectId</name></decl></parameter>)</parameter_list><block>{
		<expr_stmt><expr><call><name>enqueueWrite</name><argument_list>(<argument><expr><call><name><name>notification</name><operator>.</operator><name>json</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"/notifications/"</literal> <operator>+</operator> <name>workerID</name> <operator>+</operator> <literal type="string">".json"</literal></expr></argument>, <argument><expr><name><name>HTTPMethod</name><operator>.</operator><name>POST</name></name></expr></argument>, <argument><expr><name>projectId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>
	
	<function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>writeAchievementNotification</name><parameter_list>(<parameter><decl><type><name>NotificationInFirebase</name></type> <name>notification</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>workerID</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>projectId</name></decl></parameter>)</parameter_list><block>{
		<expr_stmt><expr><call><name>enqueueWrite</name><argument_list>(<argument><expr><call><name><name>notification</name><operator>.</operator><name>json</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"/notifications/"</literal> <operator>+</operator> <name>workerID</name> <operator>+</operator> <literal type="string">".json"</literal></expr></argument>, <argument><expr><name><name>HTTPMethod</name><operator>.</operator><name>POST</name></name></expr></argument>, <argument><expr><name>projectId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>microtaskAssigned</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>workerID</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>projectId</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><call><name>enqueueWrite</name><argument_list>(<argument><expr><literal type="string">"{\"fetchTime\" : \""</literal> <operator>+</operator><call><name><name>System</name><operator>.</operator><name>currentTimeMillis</name></name><argument_list>()</argument_list></call> <operator>+</operator><literal type="string">"\"}"</literal></expr></argument>, <argument><expr><literal type="string">"/workers/"</literal> <operator>+</operator> <name>workerID</name> <operator>+</operator> <literal type="string">".json"</literal></expr></argument>, <argument><expr><name><name>HTTPMethod</name><operator>.</operator><name>PATCH</name></name></expr></argument>, <argument><expr><name>projectId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>


	<comment type="line">// Writes information about microtask assignment to Firebase</comment>
	<function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>writeMicrotaskPoints</name><parameter_list>( <parameter><decl><type><name>String</name></type> <name>microtaskKey</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>points</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>projectId</name></decl></parameter>)</parameter_list><block>{
		<expr_stmt><expr><call><name>enqueueWrite</name><argument_list>(<argument><expr><literal type="string">"{\"points\": "</literal> <operator>+</operator> <name>points</name> <operator>+</operator> <literal type="string">"}"</literal></expr></argument>, <argument><expr><literal type="string">"/microtasks/"</literal> <operator>+</operator> <name>microtaskKey</name> <operator>+</operator> <literal type="string">".json"</literal></expr></argument>, <argument><expr><name><name>HTTPMethod</name><operator>.</operator><name>PATCH</name></name></expr></argument>, <argument><expr><name>projectId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<comment type="line">// Posts the specified JSON message to the specified workers newsfeed</comment>
	<function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>postToNewsfeed</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>workerID</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>message</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>microtaskKey</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>projectId</name></decl></parameter>)</parameter_list><block>{
		<expr_stmt><expr><call><name>enqueueWrite</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><literal type="string">"/workers/"</literal> <operator>+</operator> <name>workerID</name> <operator>+</operator> <literal type="string">"/newsfeed/"</literal><operator>+</operator> <name>microtaskKey</name> <operator>+</operator><literal type="string">".json"</literal></expr></argument>, <argument><expr><name><name>HTTPMethod</name><operator>.</operator><name>PATCH</name></name></expr></argument>, <argument><expr><name>projectId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>
	<comment type="line">// change the status of a challenge to the specified workers newsfeed</comment>
	<function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>updateNewsfeed</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>workerID</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>data</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>microtaskKey</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>projectId</name></decl></parameter>)</parameter_list><block>{
		<expr_stmt><expr><call><name>enqueueWrite</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"/workers/"</literal> <operator>+</operator> <name>workerID</name> <operator>+</operator> <literal type="string">"/newsfeed/"</literal><operator>+</operator> <name>microtaskKey</name> <operator>+</operator><literal type="string">".json"</literal></expr></argument>, <argument><expr><name><name>HTTPMethod</name><operator>.</operator><name>PATCH</name></name></expr></argument>, <argument><expr><name>projectId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<comment type="line">// Writes the specified question to firebase</comment>
	<function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>writeQuestion</name><parameter_list>(<parameter><decl><type><name>QuestionInFirebase</name></type> <name>dto</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>projectId</name></decl></parameter>)</parameter_list><block>{
		<expr_stmt><expr><call><name>enqueueWrite</name><argument_list>(<argument><expr><call><name><name>dto</name><operator>.</operator><name>json</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"/questions/"</literal><operator>+</operator><name><name>dto</name><operator>.</operator><name>id</name></name><operator>+</operator><literal type="string">".json"</literal></expr></argument>, <argument><expr><name><name>HTTPMethod</name><operator>.</operator><name>PATCH</name></name></expr></argument>, <argument><expr><name>projectId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>writeQuestionVersion</name><parameter_list>(<parameter><decl><type><name>QuestionInFirebase</name></type> <name>dto</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>projectId</name></decl></parameter>)</parameter_list><block>{
		<expr_stmt><expr><call><name>enqueueWrite</name><argument_list>(<argument><expr><call><name><name>dto</name><operator>.</operator><name>json</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"/history/questions/"</literal> <operator>+</operator> <name><name>dto</name><operator>.</operator><name>id</name></name> <operator>+</operator> <literal type="string">"/"</literal> <operator>+</operator> <name><name>dto</name><operator>.</operator><name>version</name></name> <operator>+</operator> <literal type="string">".json"</literal></expr></argument>, <argument><expr><name><name>HTTPMethod</name><operator>.</operator><name>PUT</name></name></expr></argument>, <argument><expr><name>projectId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<comment type="line">// Writes the specified question to firebase</comment>
	<function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>writeAnswerCreated</name><parameter_list>(<parameter><decl><type><name>AnswerInFirebase</name></type> <name>dto</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>path</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>projectId</name></decl></parameter>)</parameter_list><block>{
		<expr_stmt><expr><call><name>enqueueWrite</name><argument_list>(<argument><expr><call><name><name>dto</name><operator>.</operator><name>json</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>path</name> <operator>+</operator><literal type="string">".json"</literal></expr></argument>, <argument><expr><name><name>HTTPMethod</name><operator>.</operator><name>PATCH</name></name></expr></argument>, <argument><expr><name>projectId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<comment type="line">// Writes the specified question to firebase</comment>
	<function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>writeCommentCreated</name><parameter_list>(<parameter><decl><type><name>CommentInFirebase</name></type> <name>dto</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>path</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>projectId</name></decl></parameter>)</parameter_list><block>{
		<expr_stmt><expr><call><name>enqueueWrite</name><argument_list>(<argument><expr><call><name><name>dto</name><operator>.</operator><name>json</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>path</name> <operator>+</operator><literal type="string">".json"</literal></expr></argument>, <argument><expr><name><name>HTTPMethod</name><operator>.</operator><name>PATCH</name></name></expr></argument>, <argument><expr><name>projectId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>


	<function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>updateQuestioningVoters</name><parameter_list>(<parameter><decl><type><name>VotersIdInFirebase</name></type> <name>votersId</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>path</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>projectId</name></decl></parameter>)</parameter_list>	<block>{
		<expr_stmt><expr><call><name>enqueueWrite</name><argument_list>(<argument><expr><call><name><name>votersId</name><operator>.</operator><name>json</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>path</name> <operator>+</operator><literal type="string">".json"</literal></expr></argument>, <argument><expr><name><name>HTTPMethod</name><operator>.</operator><name>PATCH</name></name></expr></argument>, <argument><expr><name>projectId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>updateQuestioningReporters</name><parameter_list>(<parameter><decl><type><name>ReportersIdInFirebase</name></type> <name>reportersId</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>path</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>projectId</name></decl></parameter>)</parameter_list><block>{
		<expr_stmt><expr><call><name>enqueueWrite</name><argument_list>(<argument><expr><call><name><name>reportersId</name><operator>.</operator><name>json</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>path</name> <operator>+</operator><literal type="string">".json"</literal></expr></argument>, <argument><expr><name><name>HTTPMethod</name><operator>.</operator><name>PATCH</name></name></expr></argument>, <argument><expr><name>projectId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>updateQuestioningScore</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>score</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>path</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>projectId</name></decl></parameter>)</parameter_list><block>{
		<expr_stmt><expr><call><name>enqueueWrite</name><argument_list>(<argument><expr><literal type="string">"{\"score\": "</literal> <operator>+</operator> <name>score</name> <operator>+</operator> <literal type="string">"}"</literal></expr></argument>, <argument><expr><name>path</name> <operator>+</operator><literal type="string">".json"</literal></expr></argument>, <argument><expr><name><name>HTTPMethod</name><operator>.</operator><name>PATCH</name></name></expr></argument>, <argument><expr><name>projectId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>updateQuestioningSubscribers</name><parameter_list>(<parameter><decl><type><name>SubscribersInFirebase</name></type> <name>subscribersId</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>path</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>projectId</name></decl></parameter>)</parameter_list><block>{
		<expr_stmt><expr><call><name>enqueueWrite</name><argument_list>(<argument><expr><call><name><name>subscribersId</name><operator>.</operator><name>json</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>path</name> <operator>+</operator><literal type="string">".json"</literal></expr></argument>, <argument><expr><name><name>HTTPMethod</name><operator>.</operator><name>PATCH</name></name></expr></argument>, <argument><expr><name>projectId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>updateQuestioningLinkedArtifacts</name><parameter_list>(<parameter><decl><type><name>ArtifactsIdInFirebase</name></type> <name>artifactsId</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>path</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>projectId</name></decl></parameter>)</parameter_list><block>{
		<expr_stmt><expr><call><name>enqueueWrite</name><argument_list>(<argument><expr><call><name><name>artifactsId</name><operator>.</operator><name>json</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>path</name> <operator>+</operator><literal type="string">".json"</literal></expr></argument>, <argument><expr><name><name>HTTPMethod</name><operator>.</operator><name>PATCH</name></name></expr></argument>, <argument><expr><name>projectId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>updateQuestioningClosed</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>closed</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>path</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>projectId</name></decl></parameter>)</parameter_list><block>{
		<expr_stmt><expr><call><name>enqueueWrite</name><argument_list>(<argument><expr><literal type="string">"{ \"closed\": "</literal><operator>+</operator><name>closed</name><operator>+</operator><literal type="string">" }"</literal></expr></argument>, <argument><expr><name>path</name> <operator>+</operator><literal type="string">".json"</literal></expr></argument>, <argument><expr><name><name>HTTPMethod</name><operator>.</operator><name>PATCH</name></name></expr></argument>, <argument><expr><name>projectId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>writeHistoryEvent</name><parameter_list>(<parameter><decl><type><name>HistoryEvent</name></type> <name>event</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>projectId</name></decl></parameter>)</parameter_list><block>{
		<expr_stmt><expr><call><name>enqueueWrite</name><argument_list>( <argument><expr><call><name><name>event</name><operator>.</operator><name>json</name></name><argument_list>()</argument_list></call></expr></argument> , <argument><expr><literal type="string">"/history/events/"</literal><operator>+</operator><call><name><name>event</name><operator>.</operator><name>generateID</name></name><argument_list>()</argument_list></call><operator>+</operator><literal type="string">".json"</literal></expr></argument>, <argument><expr><name><name>HTTPMethod</name><operator>.</operator><name>PATCH</name></name></expr></argument>, <argument><expr><name>projectId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<comment type="line">// Clears all data in the current project, reseting it to an empty, initial state</comment>
	<function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>clear</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>projectID</name></decl></parameter>)</parameter_list><block>{
		<expr_stmt><expr><call><name>writeDataAbsolute</name><argument_list>(<argument><expr><literal type="string">"{ \""</literal> <operator>+</operator> <name>projectID</name> <operator>+</operator> <literal type="string">"\" : null }"</literal></expr></argument>,<argument><expr><literal type="string">"https://crowdcode.firebaseio.com/projects/"</literal> <operator>+</operator> <name>projectID</name> <operator>+</operator> <literal type="string">".json"</literal></expr></argument>, <argument><expr><name><name>HTTPMethod</name><operator>.</operator><name>PUT</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<comment type="line">// check if a project exists in firebase</comment>
	<function><specifier>public</specifier> <specifier>static</specifier> <type><name>boolean</name></type> <name>existsProject</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>projectID</name></decl></parameter>)</parameter_list><block>{
		<decl_stmt><decl><type><name>String</name></type> <name>payload</name> <init>= <expr><call><name>readDataAbsolute</name><argument_list>(<argument><expr><literal type="string">"https://crowdcode.firebaseio.com/clientRequests/"</literal> <operator>+</operator> <name>projectID</name> <operator>+</operator> <literal type="string">".json"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<return>return <expr><operator>!</operator><call><name><name>payload</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><literal type="string">"null"</literal></expr></argument>)</argument_list></call></expr>;</return>
	}</block></function>

	<comment type="line">// check if the client request for a given projectId exists in firebase</comment>
	<function><specifier>public</specifier> <specifier>static</specifier> <type><name>boolean</name></type> <name>existsClientRequest</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>projectID</name></decl></parameter>)</parameter_list><block>{
		<decl_stmt><decl><type><name>String</name></type> <name>payload</name> <init>= <expr><call><name>readDataAbsolute</name><argument_list>(<argument><expr><literal type="string">"https://crowdcode.firebaseio.com/clientRequests/"</literal> <operator>+</operator> <name>projectID</name> <operator>+</operator> <literal type="string">".json"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<return>return <expr><operator>!</operator><call><name><name>payload</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><literal type="string">"null"</literal></expr></argument>)</argument_list></call></expr>;</return>
	}</block></function>

	




}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="CrowdCode-com/crowdcoding/entities/questions/Questioning.java" hash="d3d9d01b5e519201b3c225f24bc4af2a03db1ede"><package>package <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>entities</name><operator>.</operator><name>questions</name></name>;</package>

<import>import static <name><name>com</name><operator>.</operator><name>googlecode</name><operator>.</operator><name>objectify</name><operator>.</operator><name>ObjectifyService</name><operator>.</operator><name>ofy</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>commands</name><operator>.</operator><name>WorkerCommand</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>dto</name><operator>.</operator><name>firebase</name><operator>.</operator><name>notification</name><operator>.</operator><name>NotificationInFirebase</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>dto</name><operator>.</operator><name>firebase</name><operator>.</operator><name>questions</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>util</name><operator>.</operator><name>FirebaseService</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>googlecode</name><operator>.</operator><name>objectify</name><operator>.</operator><name>Key</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>googlecode</name><operator>.</operator><name>objectify</name><operator>.</operator><name>annotation</name><operator>.</operator><name>Entity</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>googlecode</name><operator>.</operator><name>objectify</name><operator>.</operator><name>annotation</name><operator>.</operator><name>Id</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>googlecode</name><operator>.</operator><name>objectify</name><operator>.</operator><name>annotation</name><operator>.</operator><name>Index</name></name>;</import>

<comment type="block">/*
 * NOTE: Artifact classes are abstract and SHOULD NOT be instantiated, except for internally inside objectify
 * which needs to instantiate them to register subclasses.
 */</comment>

<class><annotation>@<name>Entity</name></annotation>
<specifier>public</specifier> <comment type="block">/*abstract*/</comment> class <name>Questioning</name>
<block>{
	<decl_stmt><decl><annotation>@<name>Id</name></annotation> <specifier>protected</specifier> <type><name>Long</name></type> <name>id</name></decl>;</decl_stmt>
	<decl_stmt><decl><annotation>@<name>Index</name></annotation> <type><name>String</name></type> <name>projectId</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>protected</specifier> <type><name>String</name></type> <name>text</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>protected</specifier> <type><name>String</name></type> <name>ownerId</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>protected</specifier> <type><name>String</name></type> <name>ownerHandle</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>protected</specifier> <type><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>votersId</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>protected</specifier> <type><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>removedVotersId</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>protected</specifier> <type><name>int</name></type> <name>points</name> <init>= <expr><literal type="number">10</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>protected</specifier> <type><name>boolean</name></type> <name>isReported</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>protected</specifier> <type><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>reportersId</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>protected</specifier> <type><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>subsribersId</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>protected</specifier> <type><name>String</name></type> <name>firebasePath</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>protected</specifier> <type><name>long</name></type> <name>createdAt</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>protected</specifier> <type><name>long</name></type> <name>updatedAt</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>protected</specifier> <type><name>int</name></type> <name>score</name></decl>;</decl_stmt>


	<comment type="line">// Default constructor for deserialization</comment>
	<constructor><specifier>protected</specifier> <name>Questioning</name><parameter_list>()</parameter_list>
	<block>{
	}</block></constructor>

	<comment type="line">// Constructor for initialization.</comment>
	<constructor><specifier>protected</specifier> <name>Questioning</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>text</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>ownerId</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>ownerHandle</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>projectId</name></decl></parameter>)</parameter_list>
	<block>{
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>text</name></name>	     <operator>=</operator> <name>text</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>ownerId</name></name>     <operator>=</operator> <name>ownerId</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>ownerHandle</name></name> <operator>=</operator> <name>ownerHandle</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>projectId</name></name>   <operator>=</operator> <name>projectId</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>isReported</name></name>  <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>createdAt</name></name>   <operator>=</operator> <call><name><name>System</name><operator>.</operator><name>currentTimeMillis</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>updatedAt</name></name>   <operator>=</operator> <call><name><name>System</name><operator>.</operator><name>currentTimeMillis</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>score</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	}</block></constructor>

	<function><specifier>public</specifier> <type><name><name>Key</name><argument_list type="generic">&lt;<argument><name>?</name> <extends>extends <name>Questioning</name></extends></argument>&gt;</argument_list></name></type> <name>getKey</name><parameter_list>()</parameter_list>
	<block>{
		<return>return <expr><call><name><name>Key</name><operator>.</operator><name>create</name></name><argument_list>(<argument><expr><name><name>Questioning</name><operator>.</operator><name>class</name></name></expr></argument>,<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</return>
	}</block></function>

	<comment type="line">// Gets the corresponding key for an questioning based on its id</comment>
	<function><specifier>public</specifier> <specifier>static</specifier> <type><name><name>Key</name><argument_list type="generic">&lt;<argument><name>?</name> <extends>extends <name>Questioning</name></extends></argument>&gt;</argument_list></name></type> <name>getKey</name><parameter_list>(<parameter><decl><type><name>Long</name></type> <name>id</name></decl></parameter>)</parameter_list>
	<block>{
		<return>return <expr><call><name><name>Key</name><operator>.</operator><name>create</name></name><argument_list>( <argument><expr><name><name>Questioning</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><name>id</name></expr></argument> )</argument_list></call></expr>;</return>
	}</block></function>


	<function><specifier>public</specifier> <type><name>long</name></type> <name>getID</name><parameter_list>()</parameter_list>
	<block>{
		<return>return <expr><name>id</name></expr>;</return>
	}</block></function>

	<function><specifier>public</specifier> <type><name>void</name></type> <name>addVote</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>workerId</name></decl></parameter>)</parameter_list>
	<block>{
		<comment type="line">//checks if the worker that is voting is not the owner of the artifact or already voted</comment>
		<if>if<condition>( <expr><operator>!</operator> <call><name><name>workerId</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>ownerId</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator> <call><name><name>votersId</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><name>workerId</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<block>{
			<expr_stmt><expr><call><name><name>votersId</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>workerId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<comment type="line">//if the worker is in the reporters list remove from that list</comment>
			<comment type="line">//because a worker can't at the same time vote + and -</comment>
			<expr_stmt><expr><call><name><name>reportersId</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><name>workerId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>updateScore</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>ofy</name><argument_list>()</argument_list></call><operator>.</operator><call><name>save</name><argument_list>()</argument_list></call><operator>.</operator><call><name>entity</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>now</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>WorkerCommand</name><operator>.</operator><name>increaseStat</name></name><argument_list>(<argument><expr><name>ownerId</name></expr></argument>, <argument><expr><literal type="string">"upvotes"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if>if<condition>(<expr><operator>!</operator><call><name><name>removedVotersId</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><name>workerId</name></expr></argument>)</argument_list></call></expr>)</condition><then>
				<block type="pseudo"><expr_stmt><expr><call><name><name>WorkerCommand</name><operator>.</operator><name>awardPoints</name></name><argument_list>(<argument><expr><name>ownerId</name></expr></argument>, <argument><expr><name>points</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>

			<expr_stmt><expr><call><name><name>FirebaseService</name><operator>.</operator><name>updateQuestioningVoters</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>VotersIdInFirebase</name><argument_list>(<argument><expr><name>votersId</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>firebasePath</name></expr></argument>, <argument><expr><name>projectId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>FirebaseService</name><operator>.</operator><name>updateQuestioningReporters</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>ReportersIdInFirebase</name><argument_list>(<argument><expr><name>reportersId</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>firebasePath</name></expr></argument>, <argument><expr><name>projectId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>

	}</block></function>

	<function><specifier>public</specifier> <type><name>void</name></type> <name>removeVote</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>workerId</name></decl></parameter>)</parameter_list>
	<block>{
		<if>if<condition>( <expr><operator>!</operator> <call><name><name>workerId</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>ownerId</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>votersId</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><name>workerId</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<block>{
			<if>if<condition>(<expr><operator>!</operator><call><name><name>removedVotersId</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><name>workerId</name></expr></argument>)</argument_list></call></expr>)</condition><then>
				<block type="pseudo"><expr_stmt><expr><call><name><name>removedVotersId</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>workerId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
			<expr_stmt><expr><call><name><name>votersId</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><name>workerId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>updateScore</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>ofy</name><argument_list>()</argument_list></call><operator>.</operator><call><name>save</name><argument_list>()</argument_list></call><operator>.</operator><call><name>entity</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>now</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>FirebaseService</name><operator>.</operator><name>updateQuestioningVoters</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>VotersIdInFirebase</name><argument_list>(<argument><expr><name>votersId</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>firebasePath</name></expr></argument>, <argument><expr><name>projectId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>
	}</block></function>


	<function><specifier>public</specifier> <type><name>void</name></type> <name>addReport</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>workerId</name></decl></parameter>)</parameter_list>
	<block>{
		<if>if<condition>( <expr><operator>!</operator> <call><name><name>workerId</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>ownerId</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator> <call><name><name>reportersId</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><name>workerId</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<block>{
			<expr_stmt><expr><call><name><name>votersId</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><name>workerId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>reportersId</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>workerId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>updateScore</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>ofy</name><argument_list>()</argument_list></call><operator>.</operator><call><name>save</name><argument_list>()</argument_list></call><operator>.</operator><call><name>entity</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>now</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"addReport"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>FirebaseService</name><operator>.</operator><name>updateQuestioningVoters</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>VotersIdInFirebase</name><argument_list>(<argument><expr><name>votersId</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>firebasePath</name></expr></argument>, <argument><expr><name>projectId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>FirebaseService</name><operator>.</operator><name>updateQuestioningReporters</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>ReportersIdInFirebase</name><argument_list>(<argument><expr><name>reportersId</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>firebasePath</name></expr></argument>, <argument><expr><name>projectId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>
	}</block></function>

	<function><specifier>public</specifier> <type><name>void</name></type> <name>removeReport</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>workerId</name></decl></parameter>)</parameter_list>
	<block>{

		<if>if<condition>( <expr><operator>!</operator> <call><name><name>workerId</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>ownerId</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>reportersId</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><name>workerId</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<block>{
			<expr_stmt><expr><call><name><name>reportersId</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><name>workerId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>updateScore</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>ofy</name><argument_list>()</argument_list></call><operator>.</operator><call><name>save</name><argument_list>()</argument_list></call><operator>.</operator><call><name>entity</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>now</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"removeReport"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>FirebaseService</name><operator>.</operator><name>updateQuestioningReporters</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>ReportersIdInFirebase</name><argument_list>(<argument><expr><name>reportersId</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>firebasePath</name></expr></argument>, <argument><expr><name>projectId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		}</block></then></if>
	}</block></function>

	<function><specifier>private</specifier> <type><name>void</name></type> <name>updateScore</name><parameter_list>()</parameter_list>
	<block>{
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>score</name></name> <operator>=</operator> <call><name><name>votersId</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>-</operator> <call><name><name>reportersId</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>FirebaseService</name><operator>.</operator><name>updateQuestioningScore</name></name><argument_list>(<argument><expr><name>score</name></expr></argument>, <argument><expr><name>firebasePath</name></expr></argument>, <argument><expr><name>projectId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<function><specifier>public</specifier> <type><name>void</name></type> <name>notifySubscribers</name><parameter_list>(<parameter><decl><type><name>NotificationInFirebase</name></type> <name>notification</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>excludedWorkerId</name></decl></parameter>)</parameter_list> <block>{
		<for>for<control>(<init><decl><type><name>String</name></type> <name>subscriberId</name><range>:<expr><name><name>this</name><operator>.</operator><name>subsribersId</name></name></expr></range></decl></init>)</control><block>{
			<if>if<condition>( <expr><operator>!</operator> <call><name><name>subscriberId</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>excludedWorkerId</name></expr></argument>)</argument_list></call></expr> )</condition><then><block>{
				<expr_stmt><expr><call><name><name>FirebaseService</name><operator>.</operator><name>writeWorkerNotification</name></name><argument_list>( <argument><expr><name>notification</name></expr></argument>, <argument><expr><name>subscriberId</name></expr></argument>, <argument><expr><name>projectId</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>
		}</block></for>
	}</block></function>



}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="CrowdCode-com/crowdcoding/entities/questions/Question.java" hash="605c1cee3a84fe17d9f27277592c91a819c5a763"><package>package <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>entities</name><operator>.</operator><name>questions</name></name>;</package>

<import>import static <name><name>com</name><operator>.</operator><name>googlecode</name><operator>.</operator><name>objectify</name><operator>.</operator><name>ObjectifyService</name><operator>.</operator><name>ofy</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>LinkedList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>commands</name><operator>.</operator><name>FunctionCommand</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>commands</name><operator>.</operator><name>MicrotaskCommand</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>commands</name><operator>.</operator><name>ProjectCommand</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>commands</name><operator>.</operator><name>QuestioningCommand</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>commands</name><operator>.</operator><name>WorkerCommand</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>dto</name><operator>.</operator><name>DTO</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>dto</name><operator>.</operator><name>firebase</name><operator>.</operator><name>notification</name><operator>.</operator><name>NotificationInFirebase</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>dto</name><operator>.</operator><name>firebase</name><operator>.</operator><name>notification</name><operator>.</operator><name>QuestionNotificationInFirebase</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>dto</name><operator>.</operator><name>firebase</name><operator>.</operator><name>questions</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>entities</name><operator>.</operator><name>microtasks</name><operator>.</operator><name>Microtask</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>history</name><operator>.</operator><name>HistoryLog</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>history</name><operator>.</operator><name>PropertyChange</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>util</name><operator>.</operator><name>FirebaseService</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>googlecode</name><operator>.</operator><name>objectify</name><operator>.</operator><name>LoadResult</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>googlecode</name><operator>.</operator><name>objectify</name><operator>.</operator><name>Ref</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>googlecode</name><operator>.</operator><name>objectify</name><operator>.</operator><name>annotation</name><operator>.</operator><name>Subclass</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>googlecode</name><operator>.</operator><name>objectify</name><operator>.</operator><name>annotation</name><operator>.</operator><name>Index</name></name>;</import>

<class><annotation>@<name>Subclass</name><argument_list>(<argument><expr><name>index</name><operator>=</operator><literal type="boolean">true</literal></expr></argument>)</argument_list></annotation>
<specifier>public</specifier> class <name>Question</name> <super><extends>extends <name>Questioning</name></extends></super>
<block>{

	<decl_stmt><decl><specifier>private</specifier> <type><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>artifactsId</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>private</specifier> <type><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>tags</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>private</specifier> <type><name>long</name></type> <name>answersCount</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>private</specifier> <type><name>long</name></type> <name>commentsCount</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>private</specifier> <type><name>int</name></type> <name>version</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>private</specifier> <type><name>boolean</name></type> <name>closed</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>private</specifier> <type><name>String</name></type> <name>title</name></decl>;</decl_stmt>


	<constructor><specifier>public</specifier> <name>Question</name><parameter_list>()</parameter_list><block>{}</block></constructor>

	<constructor><specifier>public</specifier> <name>Question</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>title</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>text</name></decl></parameter>, <parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>tags</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>artifactId</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>ownerId</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>ownerHandle</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>projectId</name></decl></parameter>)</parameter_list>
	<block>{
		<expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>text</name></expr></argument>, <argument><expr><name>ownerId</name></expr></argument>, <argument><expr><name>ownerHandle</name></expr></argument>, <argument><expr><name>projectId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>title</name></name> <operator>=</operator> <name>title</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>tags</name></name><operator>=</operator> <name>tags</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>artifactsId</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>artifactId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>subsribersId</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>ownerId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>points</name></name>        <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>answersCount</name></name>  <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>commentsCount</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>version</name></name>       <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>ofy</name><argument_list>()</argument_list></call><operator>.</operator><call><name>save</name><argument_list>()</argument_list></call><operator>.</operator><call><name>entity</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>now</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>firebasePath</name></name><operator>=</operator> <literal type="string">"/questions/"</literal> <operator>+</operator> <name><name>this</name><operator>.</operator><name>id</name></name></expr> ;</expr_stmt>

		<expr_stmt><expr><call><name>save</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>storeVersionToFirebase</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

		<decl_stmt><decl><type><name>QuestionNotificationInFirebase</name></type> <name>notification</name> <init>= <expr><operator>new</operator> <call><name>QuestionNotificationInFirebase</name><argument_list>( <argument><expr><literal type="string">"question.added"</literal></expr></argument>, <argument><expr><name><name>this</name><operator>.</operator><name>id</name></name></expr></argument>, <argument><expr><name><name>this</name><operator>.</operator><name>title</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>ProjectCommand</name><operator>.</operator><name>notifyLoggedInWorkers</name></name><argument_list>(<argument><expr><name>notification</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>WorkerCommand</name><operator>.</operator><name>increaseStat</name></name><argument_list>(<argument><expr><name>ownerId</name></expr></argument>, <argument><expr><literal type="string">"questions"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></constructor>


	<function><specifier>public</specifier> <type><name>String</name></type> <name>getTitle</name><parameter_list>()</parameter_list> <block>{
		<return>return <expr><name>title</name></expr>;</return>
	}</block></function>

	<function><specifier>public</specifier> <type><name>void</name></type> <name>setTitle</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>title</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>title</name></name> <operator>=</operator> <name>title</name></expr>;</expr_stmt>
	}</block></function>

	<function><specifier>public</specifier> <type><name>void</name></type> <name>setText</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>text</name></decl></parameter>)</parameter_list><block>{
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>text</name></name> <operator>=</operator> <name>text</name></expr>;</expr_stmt>
	}</block></function>

	<function><specifier>public</specifier> <type><name>void</name></type> <name>setTags</name><parameter_list>(<parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>tags</name></decl></parameter>)</parameter_list><block>{
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>tags</name></name> <operator>=</operator> <name>tags</name></expr>;</expr_stmt>
	}</block></function>

	<function><specifier>public</specifier> <type><name>void</name></type> <name>addArtifactLink</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>artifactId</name></decl></parameter>)</parameter_list>
	<block>{
		<expr_stmt><expr><call><name><name>artifactsId</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>artifactId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ofy</name><argument_list>()</argument_list></call><operator>.</operator><call><name>save</name><argument_list>()</argument_list></call><operator>.</operator><call><name>entity</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>now</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>FirebaseService</name><operator>.</operator><name>updateQuestioningLinkedArtifacts</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>ArtifactsIdInFirebase</name><argument_list>(<argument><expr><name>artifactsId</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>this</name><operator>.</operator><name>firebasePath</name></name></expr></argument>, <argument><expr><name>projectId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<function><specifier>public</specifier> <type><name>void</name></type> <name>removeArtifactLink</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>artifactId</name></decl></parameter>)</parameter_list>
	<block>{
		<expr_stmt><expr><call><name><name>artifactsId</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><name>artifactId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ofy</name><argument_list>()</argument_list></call><operator>.</operator><call><name>save</name><argument_list>()</argument_list></call><operator>.</operator><call><name>entity</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>now</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>FirebaseService</name><operator>.</operator><name>updateQuestioningLinkedArtifacts</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>ArtifactsIdInFirebase</name><argument_list>(<argument><expr><name>artifactsId</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>this</name><operator>.</operator><name>firebasePath</name></name></expr></argument>, <argument><expr><name>projectId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<function><specifier>public</specifier> <type><name>void</name></type> <name>unsubscribeWorker</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>workerId</name></decl></parameter>)</parameter_list>
	<block>{
		<if>if<condition>(<expr><call><name><name>subsribersId</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><name>workerId</name></expr></argument>)</argument_list></call></expr>)</condition><then><block>{
			<expr_stmt><expr><call><name>ofy</name><argument_list>()</argument_list></call><operator>.</operator><call><name>save</name><argument_list>()</argument_list></call><operator>.</operator><call><name>entity</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>now</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>FirebaseService</name><operator>.</operator><name>updateQuestioningSubscribers</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>SubscribersInFirebase</name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>subsribersId</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>this</name><operator>.</operator><name>firebasePath</name></name></expr></argument>, <argument><expr><name>projectId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>
	}</block></function>

	<function><specifier>public</specifier> <type><name>void</name></type> <name>subscribeWorker</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>workerId</name></decl></parameter>)</parameter_list>
	<block>{
		<if>if<condition>(<expr><operator>!</operator> <call><name><name>subsribersId</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><name>workerId</name></expr></argument>)</argument_list></call></expr>)</condition><then><block>{
			<expr_stmt><expr><call><name><name>subsribersId</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>workerId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>ofy</name><argument_list>()</argument_list></call><operator>.</operator><call><name>save</name><argument_list>()</argument_list></call><operator>.</operator><call><name>entity</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>now</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>FirebaseService</name><operator>.</operator><name>updateQuestioningSubscribers</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>SubscribersInFirebase</name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>subsribersId</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>this</name><operator>.</operator><name>firebasePath</name></name></expr></argument>, <argument><expr><name>projectId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>
	}</block></function>

	<function><specifier>public</specifier> <type><name>void</name></type> <name>setClosed</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>closed</name></decl></parameter>)</parameter_list><block>{
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>closed</name></name> <operator>=</operator> <name>closed</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ofy</name><argument_list>()</argument_list></call><operator>.</operator><call><name>save</name><argument_list>()</argument_list></call><operator>.</operator><call><name>entity</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>now</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>storeToFirebase</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<function><specifier>public</specifier> <type><name>void</name></type> <name>incrementAnswers</name><parameter_list>()</parameter_list> <block>{
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>answersCount</name></name> <operator>++</operator></expr>;</expr_stmt>
	}</block></function>

	<function><specifier>public</specifier> <type><name>void</name></type> <name>incrementComments</name><parameter_list>()</parameter_list> <block>{
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>commentsCount</name></name> <operator>++</operator></expr>;</expr_stmt>
	}</block></function>

	<function><specifier>public</specifier> <type><name>long</name></type> <name>getUpdatedAt</name><parameter_list>()</parameter_list> <block>{
		<return>return <expr><name><name>this</name><operator>.</operator><name>updatedAt</name></name></expr>;</return>
	}</block></function>

	<function><specifier>public</specifier> <type><name>long</name></type> <name>getAnswers</name><parameter_list>()</parameter_list> <block>{
		<return>return <expr><name><name>this</name><operator>.</operator><name>answersCount</name></name></expr>;</return>
	}</block></function>

	<function><specifier>public</specifier> <type><name>long</name></type> <name>getComments</name><parameter_list>()</parameter_list> <block>{
		<return>return <expr><name><name>this</name><operator>.</operator><name>commentsCount</name></name></expr>;</return>
	}</block></function>

	<function><specifier>public</specifier> <type><name>long</name></type> <name>getVersion</name><parameter_list>()</parameter_list> <block>{
		<return>return <expr><name><name>this</name><operator>.</operator><name>version</name></name></expr>;</return>
	}</block></function>

	<function><specifier>public</specifier> <type><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>getTags</name><parameter_list>()</parameter_list> <block>{
		<return>return <expr><name><name>this</name><operator>.</operator><name>tags</name></name></expr>;</return>
	}</block></function>

	<function><specifier>public</specifier> <type><name>void</name></type> <name>save</name><parameter_list>()</parameter_list> <block>{
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>version</name></name><operator>++</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>updatedAt</name></name> <operator>=</operator> <call><name><name>System</name><operator>.</operator><name>currentTimeMillis</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>storeToFirebase</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ofy</name><argument_list>()</argument_list></call><operator>.</operator><call><name>save</name><argument_list>()</argument_list></call><operator>.</operator><call><name>entity</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>now</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	}</block></function>


	<function><specifier>public</specifier> <type><name>void</name></type> <name>storeVersionToFirebase</name><parameter_list>()</parameter_list><block>{
		<expr_stmt><expr><call><name><name>FirebaseService</name><operator>.</operator><name>writeQuestionVersion</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>QuestionInFirebase</name><argument_list>(
				<argument><expr><name><name>this</name><operator>.</operator><name>id</name></name></expr></argument>,
				<argument><expr><name><name>this</name><operator>.</operator><name>ownerId</name></name></expr></argument>,
				<argument><expr><name><name>this</name><operator>.</operator><name>ownerHandle</name></name></expr></argument>,
				<argument><expr><name><name>this</name><operator>.</operator><name>title</name></name></expr></argument>,
				<argument><expr><name><name>this</name><operator>.</operator><name>text</name></name></expr></argument>,
				<argument><expr><name><name>this</name><operator>.</operator><name>tags</name></name></expr></argument>,
				<argument><expr><name><name>this</name><operator>.</operator><name>createdAt</name></name></expr></argument>,
				<argument><expr><name><name>this</name><operator>.</operator><name>updatedAt</name></name></expr></argument>,
				<argument><expr><name><name>this</name><operator>.</operator><name>score</name></name></expr></argument>,
				<argument><expr><name><name>this</name><operator>.</operator><name>version</name></name></expr></argument>,
				<argument><expr><name><name>this</name><operator>.</operator><name>answersCount</name></name></expr></argument>,
				<argument><expr><name><name>this</name><operator>.</operator><name>commentsCount</name></name></expr></argument>,
				<argument><expr><name><name>this</name><operator>.</operator><name>subsribersId</name></name></expr></argument>,
				<argument><expr><name><name>this</name><operator>.</operator><name>artifactsId</name></name></expr></argument>,
				<argument><expr><name><name>this</name><operator>.</operator><name>closed</name></name></expr></argument>
			)</argument_list></call></expr></argument>,
			<argument><expr><name>projectId</name></expr></argument>
		)</argument_list></call></expr>;</expr_stmt>
	}</block></function>
	<function><specifier>private</specifier> <type><name>void</name></type> <name>storeToFirebase</name><parameter_list>()</parameter_list> <block>{
		<expr_stmt><expr><call><name><name>FirebaseService</name><operator>.</operator><name>writeQuestion</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>QuestionInFirebase</name><argument_list>(
				<argument><expr><name><name>this</name><operator>.</operator><name>id</name></name></expr></argument>,
				<argument><expr><name><name>this</name><operator>.</operator><name>ownerId</name></name></expr></argument>,
				<argument><expr><name><name>this</name><operator>.</operator><name>ownerHandle</name></name></expr></argument>,
				<argument><expr><name><name>this</name><operator>.</operator><name>title</name></name></expr></argument>,
				<argument><expr><name><name>this</name><operator>.</operator><name>text</name></name></expr></argument>,
				<argument><expr><name><name>this</name><operator>.</operator><name>tags</name></name></expr></argument>,
				<argument><expr><name><name>this</name><operator>.</operator><name>createdAt</name></name></expr></argument>,
				<argument><expr><name><name>this</name><operator>.</operator><name>updatedAt</name></name></expr></argument>,
				<argument><expr><name><name>this</name><operator>.</operator><name>score</name></name></expr></argument>,
				<argument><expr><name><name>this</name><operator>.</operator><name>version</name></name></expr></argument>,
				<argument><expr><name><name>this</name><operator>.</operator><name>answersCount</name></name></expr></argument>,
				<argument><expr><name><name>this</name><operator>.</operator><name>commentsCount</name></name></expr></argument>,
				<argument><expr><name><name>this</name><operator>.</operator><name>subsribersId</name></name></expr></argument>,
				<argument><expr><name><name>this</name><operator>.</operator><name>artifactsId</name></name></expr></argument>,
				<argument><expr><name><name>this</name><operator>.</operator><name>closed</name></name></expr></argument>
			)</argument_list></call></expr></argument>,
			<argument><expr><name>projectId</name></expr></argument>
		)</argument_list></call></expr>;</expr_stmt>
	}</block></function>

}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="CrowdCode-com/crowdcoding/entities/Project.java" hash="268ed72fe9c56e905b3d3f94e6b098cc82353b57"><package>package <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>entities</name></name>;</package>

<import>import static <name><name>com</name><operator>.</operator><name>googlecode</name><operator>.</operator><name>objectify</name><operator>.</operator><name>ObjectifyService</name><operator>.</operator><name>ofy</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashMap</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashSet</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>LinkedList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>logging</name><operator>.</operator><name>Logger</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>commands</name><operator>.</operator><name>ADTCommand</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>commands</name><operator>.</operator><name>FunctionCommand</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>commands</name><operator>.</operator><name>MicrotaskCommand</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>commands</name><operator>.</operator><name>WorkerCommand</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>dto</name><operator>.</operator><name>ClientRequestDTO</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>dto</name><operator>.</operator><name>DTO</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>dto</name><operator>.</operator><name>ajax</name><operator>.</operator><name>microtask</name><operator>.</operator><name>submission</name><operator>.</operator><name>ADTDTO</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>dto</name><operator>.</operator><name>ajax</name><operator>.</operator><name>microtask</name><operator>.</operator><name>submission</name><operator>.</operator><name>ADTStructureDTO</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>dto</name><operator>.</operator><name>ajax</name><operator>.</operator><name>microtask</name><operator>.</operator><name>submission</name><operator>.</operator><name>FunctionDTO</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>dto</name><operator>.</operator><name>ajax</name><operator>.</operator><name>microtask</name><operator>.</operator><name>submission</name><operator>.</operator><name>FunctionDescriptionDTO</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>dto</name><operator>.</operator><name>ajax</name><operator>.</operator><name>microtask</name><operator>.</operator><name>submission</name><operator>.</operator><name>ImplementBehaviorDTO</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>dto</name><operator>.</operator><name>ajax</name><operator>.</operator><name>microtask</name><operator>.</operator><name>submission</name><operator>.</operator><name>TestDTO</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>dto</name><operator>.</operator><name>firebase</name><operator>.</operator><name>QueueInFirebase</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>entities</name><operator>.</operator><name>artifacts</name><operator>.</operator><name>Artifact</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>entities</name><operator>.</operator><name>microtasks</name><operator>.</operator><name>ChallengeReview</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>entities</name><operator>.</operator><name>microtasks</name><operator>.</operator><name>ImplementBehavior</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>entities</name><operator>.</operator><name>microtasks</name><operator>.</operator><name>Microtask</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>entities</name><operator>.</operator><name>microtasks</name><operator>.</operator><name>Review</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>history</name><operator>.</operator><name>HistoryLog</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>history</name><operator>.</operator><name>MicrotaskAssigned</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>history</name><operator>.</operator><name>MicrotaskDequeued</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>history</name><operator>.</operator><name>MicrotaskQueued</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>history</name><operator>.</operator><name>MicrotaskSubmitted</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>history</name><operator>.</operator><name>MicrotaskUnassigned</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>history</name><operator>.</operator><name>ProjectCreated</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>util</name><operator>.</operator><name>FirebaseService</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>fasterxml</name><operator>.</operator><name>jackson</name><operator>.</operator><name>core</name><operator>.</operator><name>JsonParseException</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>fasterxml</name><operator>.</operator><name>jackson</name><operator>.</operator><name>databind</name><operator>.</operator><name>JsonMappingException</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>fasterxml</name><operator>.</operator><name>jackson</name><operator>.</operator><name>databind</name><operator>.</operator><name>deser</name><operator>.</operator><name>DefaultDeserializationContext</name><operator>.</operator><name>Impl</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>googlecode</name><operator>.</operator><name>objectify</name><operator>.</operator><name>Key</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>googlecode</name><operator>.</operator><name>objectify</name><operator>.</operator><name>Ref</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>googlecode</name><operator>.</operator><name>objectify</name><operator>.</operator><name>annotation</name><operator>.</operator><name>Entity</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>googlecode</name><operator>.</operator><name>objectify</name><operator>.</operator><name>annotation</name><operator>.</operator><name>Id</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>googlecode</name><operator>.</operator><name>objectify</name><operator>.</operator><name>annotation</name><operator>.</operator><name>Serialize</name></name>;</import>

<comment type="block">/*
 * Projects are the root of the artifact and microtask graphs. A project instance MUST be created before
 * any interactions with artifacts or microtasks can take place.
 */</comment>
<class><annotation>@<name>Entity</name></annotation>
<specifier>public</specifier> class <name>Project</name>
<block>{
	<comment type="line">// The one and only project, which is always initialized in Create (which must be called first</comment>
	<comment type="line">// when a servlet begins).</comment>
	<decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><name>Project</name></type> <name>project</name></decl>;</decl_stmt>

	<decl_stmt><decl><annotation>@<name>Id</name></annotation> <specifier>private</specifier> <type><name>String</name></type> <name>id</name></decl>;</decl_stmt>

	<decl_stmt><decl><specifier>private</specifier> <type><name>Boolean</name></type> <name>reviewsEnabled</name> <init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>			<comment type="line">// Disabling this flag stops new review microtasks from being generated</comment>
	<decl_stmt><decl><specifier>private</specifier> <type><name>Boolean</name></type> <name>tutorialsEnabled</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>

	<comment type="line">// logged in workers</comment>
	<decl_stmt><decl><annotation>@<name>Serialize</name></annotation> <specifier>private</specifier> <type><name><name>HashSet</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>loggedInWorkers</name> <init>= <expr><operator>new</operator> <call><name><name>HashSet</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="line">// Global queue of microtasks waiting to be done</comment>
	<decl_stmt><decl><specifier>private</specifier> <type><name><name>LinkedList</name><argument_list type="generic">&lt; <argument><name>String</name></argument> &gt;</argument_list></name></type> <name>microtaskQueue</name> <init>= <expr><operator>new</operator> <call><name><name>LinkedList</name><argument_list type="generic">&lt; <argument><name>String</name></argument> &gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="line">// Global queue of review microtasks waiting to be done</comment>
	<decl_stmt><decl><specifier>private</specifier> <type><name><name>LinkedList</name><argument_list type="generic">&lt; <argument><name>String</name></argument> &gt;</argument_list></name></type> <name>reviewQueue</name>    <init>= <expr><operator>new</operator> <call><name><name>LinkedList</name><argument_list type="generic">&lt; <argument><name>String</name></argument> &gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="line">// Map from  &lt; workerId, microtaskKey &gt;; workers with no microtask have a null entry</comment>
	<decl_stmt><decl><annotation>@<name>Serialize</name></annotation> <specifier>private</specifier> <type><name><name>Map</name><argument_list type="generic">&lt; <argument><name>String</name></argument>, <argument><name>String</name></argument> &gt;</argument_list></name></type> <name>microtaskAssignments</name> <init>= <expr><operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument> &gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="line">// Workers that are currently excluded from doing the microtask. This set may change over time as workers</comment>
	<comment type="line">// skip and this count is reset. This list is always a superset of permanentlyExcludedWorkers.</comment>
	<comment type="line">// Map from microtaskID to a set of workerIDs.</comment>
	<comment type="line">// &lt; microtaskKey, &lt; worker1Id, worker2Id, ... &gt; &gt;</comment>
	<decl_stmt><decl><annotation>@<name>Serialize</name></annotation> <specifier>private</specifier> <type><name><name>Map</name><argument_list type="generic">&lt; <argument><name>String</name></argument>, <argument><name><name>HashSet</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>excludedWorkers</name> <init>= <expr><operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt; <argument><name>String</name></argument>, <argument><name><name>HashSet</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></argument> &gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="line">// Workers that are permanently excluded from doing a microtask. In constrast to excludedWorkers, this set only</comment>
	<comment type="line">// grows over time. Map from microtaskKey to a set of workerIDs</comment>
	<comment type="line">// &lt; microtaskKey, &lt; worker1Id, worker2Id, ... &gt; &gt;</comment>
	<decl_stmt><decl><annotation>@<name>Serialize</name></annotation> <specifier>private</specifier> <type><name><name>Map</name><argument_list type="generic">&lt; <argument><name>String</name></argument>, <argument><name><name>HashSet</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></argument> &gt;</argument_list></name></type> <name>permanentlyExcludedWorkers</name> <init>= <expr><operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt; <argument><name>String</name></argument>, <argument><name><name>HashSet</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></argument> &gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>


	<comment type="line">//////////////////////////////////////////////////////////////////////////////</comment>
	<comment type="line">//  Project Management</comment>
	<comment type="line">//////////////////////////////////////////////////////////////////////////////</comment>

	<function><specifier>public</specifier> <type><name><name>Key</name><argument_list type="generic">&lt;<argument><name>Project</name></argument>&gt;</argument_list></name></type> <name>getKey</name><parameter_list>()</parameter_list><block>{ <return>return <expr><call><name><name>Key</name><operator>.</operator><name>create</name></name><argument_list>(<argument><expr><name><name>Project</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</return> }</block></function>

	<function><specifier>public</specifier> <type><name>String</name></type> <name>getID</name><parameter_list>()</parameter_list><block>{ <return>return <expr><name>id</name></expr>;</return> }</block></function>

	<comment type="line">// Default constructor for deserialization only</comment>
	<constructor><specifier>private</specifier> <name>Project</name><parameter_list>()</parameter_list><block>{}</block></constructor>

	<comment type="line">// Constructor for initial creation (flag is ignored)</comment>
	<comment type="line">// this is called ONCE per project by Construct</comment>
	<constructor><specifier>private</specifier> <name>Project</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>id</name></decl></parameter>)</parameter_list>
	<block>{
		<comment type="line">// set the id</comment>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>id</name></name> <operator>=</operator> <name>id</name></expr>;</expr_stmt>

		<comment type="line">// save the project</comment>
		<expr_stmt><expr><call><name>ofy</name><argument_list>()</argument_list></call><operator>.</operator><call><name>save</name><argument_list>()</argument_list></call><operator>.</operator><call><name>entity</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>now</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

		<comment type="line">// create log entry for the project created</comment>
		<expr_stmt><expr><call><name><name>HistoryLog</name><operator>.</operator><name>Init</name></name><argument_list>(<argument><expr><call><name><name>this</name><operator>.</operator><name>getID</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>addEvent</name><argument_list>(<argument><expr><operator>new</operator> <call><name>ProjectCreated</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="line">// Load functions from Firebase and</comment>
		<comment type="line">// for each function queue a function create command</comment>
		<decl_stmt><decl><type><name>String</name></type> <name>functions</name> <init>= <expr><call><name><name>FirebaseService</name><operator>.</operator><name>readClientRequest</name></name><argument_list>(<argument><expr><call><name><name>this</name><operator>.</operator><name>getID</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>ClientRequestDTO</name></type> <name>dto</name></decl>;</decl_stmt>
		<try>try <block>{

			<expr_stmt><expr><name>dto</name> <operator>=</operator> <operator>(</operator><name>ClientRequestDTO</name><operator>)</operator> <call><name><name>DTO</name><operator>.</operator><name>read</name></name><argument_list>(<argument><expr><name>functions</name></expr></argument>, <argument><expr><name><name>ClientRequestDTO</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


			<expr_stmt><expr><call><name><name>ADTCommand</name><operator>.</operator><name>create</name></name><argument_list>(
					<argument><expr><literal type="string">"A Boolean represents one of two values: true or false."</literal></expr></argument>,
					<argument><expr><literal type="string">"Boolean"</literal></expr></argument>,
					<argument><expr><operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></argument>,
					<argument><expr><operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></argument>,
					<argument><expr><literal type="boolean">true</literal></expr></argument>,
					<argument><expr><literal type="boolean">true</literal></expr></argument>
			)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><call><name><name>ADTCommand</name><operator>.</operator><name>create</name></name><argument_list>(
					<argument><expr><literal type="string">"Number is the only type of number. Numbers can be written with, or without, decimals."</literal></expr></argument>,
					<argument><expr><literal type="string">"Number"</literal></expr></argument>,
					<argument><expr><operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></argument>,
					<argument><expr><operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></argument>,
					<argument><expr><literal type="boolean">true</literal></expr></argument>,
					<argument><expr><literal type="boolean">true</literal></expr></argument>
			)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><call><name><name>ADTCommand</name><operator>.</operator><name>create</name></name><argument_list>(
					<argument><expr><literal type="string">"A String simply stores a series of characters like \"John Doe\". A string can be any text inside double quotes."</literal></expr></argument>,
					<argument><expr><literal type="string">"String"</literal></expr></argument>,
					<argument><expr><operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></argument>,
					<argument><expr><operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></argument>,
					<argument><expr><literal type="boolean">true</literal></expr></argument>,
					<argument><expr><literal type="boolean">true</literal></expr></argument>
			)</argument_list></call></expr>;</expr_stmt>

			<for>for<control>(<init><decl><type><name>ADTDTO</name></type> <name>ADT</name> <range>: <expr><name><name>dto</name><operator>.</operator><name>ADTs</name></name></expr></range></decl></init>)</control><block>{
				<expr_stmt><expr><call><name><name>ADTCommand</name><operator>.</operator><name>create</name></name><argument_list>(<argument><expr><name><name>ADT</name><operator>.</operator><name>description</name></name></expr></argument>, <argument><expr><name><name>ADT</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><call><name><name>ADT</name><operator>.</operator><name>getStructure</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>ADT</name><operator>.</operator><name>getExamples</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><name><name>ADT</name><operator>.</operator><name>isReadOnly</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></for>


			<for>for <control>(<init><decl><type><name>FunctionDTO</name></type> <name>functionDTO</name> <range>: <expr><name><name>dto</name><operator>.</operator><name>functions</name></name></expr></range></decl></init>)</control>
			<block>{
				<expr_stmt><expr><call><name><name>FunctionCommand</name><operator>.</operator><name>addClientRequestsArtifacts</name></name><argument_list>(<argument><expr><name>functionDTO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></for>
			<comment type="line">// save project settings into firebase</comment>

			<expr_stmt><expr><call><name><name>FirebaseService</name><operator>.</operator><name>writeSetting</name></name><argument_list>(<argument><expr><literal type="string">"reviews"</literal></expr></argument>, <argument><expr><call><name><name>this</name><operator>.</operator><name>reviewsEnabled</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument> , <argument><expr><call><name><name>this</name><operator>.</operator><name>getID</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>FirebaseService</name><operator>.</operator><name>writeSetting</name></name><argument_list>(<argument><expr><literal type="string">"tutorials"</literal></expr></argument>, <argument><expr><call><name><name>this</name><operator>.</operator><name>tutorialsEnabled</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument> , <argument><expr><call><name><name>this</name><operator>.</operator><name>getID</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<comment type="line">// save again the entity with the created functions</comment>
			<expr_stmt><expr><call><name>ofy</name><argument_list>()</argument_list></call><operator>.</operator><call><name>save</name><argument_list>()</argument_list></call><operator>.</operator><call><name>entity</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>now</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

		}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>JsonParseException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
			<comment type="line">// TODO Auto-generated catch block</comment>
			<expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		}</block></catch> <catch>catch <parameter_list>(<parameter><decl><type><name>JsonMappingException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
			<comment type="line">// TODO Auto-generated catch block</comment>
			<expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		}</block></catch> <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
			<comment type="line">// TODO Auto-generated catch block</comment>
			<expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		}</block></catch></try>


	}</block></constructor>


	<comment type="line">// Creates a new project instance. This can only be called for a project that does not yet exist</comment>
	<comment type="line">// (or that has been reset using Clear).</comment>
	<function><specifier>public</specifier> <specifier>static</specifier> <type><name>Project</name></type> <name>Construct</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>id</name></decl></parameter>)</parameter_list>
	<block>{
		<return>return <expr><operator>new</operator> <call><name>Project</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</return>
	}</block></function>


	<comment type="line">// Loads a project instance from the datastore.</comment>
	<comment type="line">// this is called every time a project is instantiated</comment>
	<function><specifier>public</specifier> <specifier>static</specifier> <type><name>Project</name></type> <name>Create</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>id</name></decl></parameter>)</parameter_list>
	<block>{
		<comment type="line">// Need to use an ancestor query to do this inside a transaction.</comment>
		<comment type="line">// But the ancestor of project is project.</comment>
		<comment type="line">// So we just create a normal key with only the type and id</comment>
		<expr_stmt><expr><name>project</name> <operator>=</operator> <call><name>ofy</name><argument_list>()</argument_list></call><operator>.</operator><call><name>load</name><argument_list>()</argument_list></call><operator>.</operator><call><name>key</name><argument_list>(<argument><expr><call><name><name>Key</name><operator>.</operator><name>create</name></name><argument_list>(<argument><expr><name><name>Project</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>now</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

		<return>return <expr><name>project</name></expr>;</return>
	}</block></function>

	<comment type="line">// Clears the project, returning it to the initial state</comment>
	<function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>Clear</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>projectID</name></decl></parameter>)</parameter_list>
	<block>{
		<comment type="line">// Clear data for the project in firebase</comment>
		<expr_stmt><expr><call><name><name>FirebaseService</name><operator>.</operator><name>clear</name></name><argument_list>(<argument><expr><name>projectID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="line">// retrieve the project key</comment>
		<decl_stmt><decl><type><name><name>Key</name><argument_list type="generic">&lt;<argument><name>Project</name></argument>&gt;</argument_list></name></type> <name>projectKey</name> <init>= <expr><call><name><name>Key</name><operator>.</operator><name>create</name></name><argument_list>(<argument><expr><name><name>Project</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><name>projectID</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<comment type="line">// DELETE THE WORKERS</comment>
		<comment type="line">// by an anchestor query</comment>
		<decl_stmt><decl><type><name><name>Iterable</name><argument_list type="generic">&lt;<argument><name><name>Key</name><argument_list type="generic">&lt;<argument><name>Worker</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type>    <name>workers</name>    <init>= <expr><call><name>ofy</name><argument_list>()</argument_list></call><operator>.</operator><call><name>transactionless</name><argument_list>()</argument_list></call><operator>.</operator><call><name>load</name><argument_list>()</argument_list></call><operator>.</operator><call><name>type</name><argument_list>(<argument><expr><name><name>Worker</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>ancestor</name><argument_list>(<argument><expr><name>projectKey</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>keys</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>ofy</name><argument_list>()</argument_list></call><operator>.</operator><call><name>transactionless</name><argument_list>()</argument_list></call><operator>.</operator><call><name>delete</name><argument_list>()</argument_list></call><operator>.</operator><call><name>keys</name><argument_list>(<argument><expr><name>workers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="line">// DELETE THE ARTIFACTS</comment>
		<comment type="line">// filtering per projectId</comment>
		<decl_stmt><decl><type><name><name>Iterable</name><argument_list type="generic">&lt;<argument><name><name>Key</name><argument_list type="generic">&lt;<argument><name>Artifact</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type>  <name>artifacts</name>  <init>= <expr><call><name>ofy</name><argument_list>()</argument_list></call><operator>.</operator><call><name>transactionless</name><argument_list>()</argument_list></call><operator>.</operator><call><name>load</name><argument_list>()</argument_list></call><operator>.</operator><call><name>type</name><argument_list>(<argument><expr><name><name>Artifact</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>filter</name><argument_list>(<argument><expr><literal type="string">"projectId"</literal></expr></argument>,<argument><expr><name>projectID</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>keys</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>ofy</name><argument_list>()</argument_list></call><operator>.</operator><call><name>transactionless</name><argument_list>()</argument_list></call><operator>.</operator><call><name>delete</name><argument_list>()</argument_list></call><operator>.</operator><call><name>keys</name><argument_list>(<argument><expr><name>artifacts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="line">// DELETE THE MICROTASKS</comment>
		<comment type="line">// filtering per projectId</comment>
		<decl_stmt><decl><type><name><name>Iterable</name><argument_list type="generic">&lt;<argument><name><name>Key</name><argument_list type="generic">&lt;<argument><name>Microtask</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type>  <name>microtasks</name>  <init>= <expr><call><name>ofy</name><argument_list>()</argument_list></call><operator>.</operator><call><name>transactionless</name><argument_list>()</argument_list></call><operator>.</operator><call><name>load</name><argument_list>()</argument_list></call><operator>.</operator><call><name>type</name><argument_list>(<argument><expr><name><name>Microtask</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>filter</name><argument_list>(<argument><expr><literal type="string">"projectId"</literal></expr></argument>,<argument><expr><name>projectID</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>keys</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>ofy</name><argument_list>()</argument_list></call><operator>.</operator><call><name>transactionless</name><argument_list>()</argument_list></call><operator>.</operator><call><name>delete</name><argument_list>()</argument_list></call><operator>.</operator><call><name>keys</name><argument_list>(<argument><expr><name>microtasks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="line">// finally delete the project</comment>
		<expr_stmt><expr><call><name>ofy</name><argument_list>()</argument_list></call><operator>.</operator><call><name>transactionless</name><argument_list>()</argument_list></call><operator>.</operator><call><name>delete</name><argument_list>()</argument_list></call><operator>.</operator><call><name>key</name><argument_list>(<argument><expr><name>projectKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<comment type="line">//////////////////////////////////////////////////////////////////////////////</comment>
	<comment type="line">//  Microtask Queue Management</comment>
	<comment type="line">//////////////////////////////////////////////////////////////////////////////</comment>

	<comment type="line">// Queues the microtask onto the project's global queue</comment>
	<comment type="line">// Provides an optional parameter (which may be left null) for an excludedWorker,</comment>
	<comment type="line">// who, if provided, will be permanently excluded from doing the microtask.</comment>
	<function><specifier>public</specifier> <type><name>void</name></type> <name>queueMicrotask</name><parameter_list>( <parameter><decl><type><name><name>Key</name><argument_list type="generic">&lt;<argument><name>Microtask</name></argument>&gt;</argument_list></name></type> <name>microtaskKey</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>excludedWorkerID</name></decl></parameter>)</parameter_list>
	<block>{
		<comment type="line">// if the microtask is not in the queue, add it</comment>
		<if>if<condition>( <expr><operator>!</operator> <call><name><name>microtaskQueue</name><operator>.</operator><name>contains</name></name><argument_list>( <argument><expr><call><name><name>Microtask</name><operator>.</operator><name>keyToString</name></name><argument_list>(<argument><expr><name>microtaskKey</name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>  )</condition><then><block>{
			<expr_stmt><expr><call><name><name>microtaskQueue</name><operator>.</operator><name>addLast</name></name><argument_list>( <argument><expr><call><name><name>Microtask</name><operator>.</operator><name>keyToString</name></name><argument_list>(<argument><expr><name>microtaskKey</name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr> ;</expr_stmt>
			<expr_stmt><expr><call><name><name>HistoryLog</name>
				<operator>.</operator><name>Init</name></name><argument_list>(<argument><expr><call><name><name>this</name><operator>.</operator><name>getID</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
				<operator>.</operator><call><name>addEvent</name><argument_list>( <argument><expr><operator>new</operator> <call><name>MicrotaskQueued</name><argument_list>(  <argument><expr><call><name>ofy</name><argument_list>()</argument_list></call><operator>.</operator><call><name>load</name><argument_list>()</argument_list></call><operator>.</operator><call><name>key</name><argument_list>(<argument><expr><name>microtaskKey</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>now</name><argument_list>()</argument_list></call></expr></argument> )</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>

		<comment type="line">// if is there an excluded workerId,</comment>
		<comment type="line">// add the workerId to the excluded workers for this microtask</comment>
		<if>if <condition>( <expr><name>excludedWorkerID</name> <operator>!=</operator> <literal type="null">null</literal></expr> )</condition><then><block>{
			<expr_stmt><expr><call><name>addPermExcludedWorkerForMicrotask</name><argument_list>( <argument><expr><name>microtaskKey</name></expr></argument>, <argument><expr><name>excludedWorkerID</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>

		<comment type="line">// save the queue in Objectify and Firebase</comment>
		<expr_stmt><expr><call><name>ofy</name><argument_list>()</argument_list></call><operator>.</operator><call><name>save</name><argument_list>()</argument_list></call><operator>.</operator><call><name>entity</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>now</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>FirebaseService</name><operator>.</operator><name>writeMicrotaskQueue</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>QueueInFirebase</name><argument_list>(<argument><expr><name>microtaskQueue</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>this</name><operator>.</operator><name>getID</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<comment type="line">// Queues the microtask onto the project's review microtask queue</comment>
	<function><specifier>public</specifier> <type><name>void</name></type> <name>queueReviewMicrotask</name><parameter_list>(<parameter><decl><type><name><name>Key</name><argument_list type="generic">&lt;<argument><name>Microtask</name></argument>&gt;</argument_list></name></type> <name>microtaskKey</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>excludedWorkerID</name></decl></parameter>)</parameter_list>
	<block>{
		<comment type="line">// add the review microtask to the reviews queue</comment>
		<if>if<condition>( <expr><operator>!</operator> <call><name><name>reviewQueue</name><operator>.</operator><name>contains</name></name><argument_list>( <argument><expr><call><name><name>Microtask</name><operator>.</operator><name>keyToString</name></name><argument_list>(<argument><expr><name>microtaskKey</name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>  )</condition><then><block>{
			<expr_stmt><expr><call><name><name>reviewQueue</name><operator>.</operator><name>addLast</name></name><argument_list>( <argument><expr><call><name><name>Microtask</name><operator>.</operator><name>keyToString</name></name><argument_list>(<argument><expr><name>microtaskKey</name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr> ;</expr_stmt>
			<expr_stmt><expr><call><name><name>HistoryLog</name>
			<operator>.</operator><name>Init</name></name><argument_list>(<argument><expr><call><name><name>this</name><operator>.</operator><name>getID</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
			<operator>.</operator><call><name>addEvent</name><argument_list>( <argument><expr><operator>new</operator> <call><name>MicrotaskQueued</name><argument_list>(  <argument><expr><call><name>ofy</name><argument_list>()</argument_list></call><operator>.</operator><call><name>load</name><argument_list>()</argument_list></call><operator>.</operator><call><name>key</name><argument_list>(<argument><expr><name>microtaskKey</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>now</name><argument_list>()</argument_list></call></expr></argument> )</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>

		<comment type="line">// exclude the worker who submitted the microtask that spawned the review</comment>
		<comment type="line">// from the workers that can reach this review</comment>
		<if>if<condition>(<expr><name>excludedWorkerID</name><operator>!=</operator><literal type="null">null</literal></expr>)</condition><then><block>{
			<expr_stmt><expr><call><name>addPermExcludedWorkerForMicrotask</name><argument_list>(<argument><expr><name>microtaskKey</name></expr></argument>, <argument><expr><name>excludedWorkerID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>
		<comment type="line">// save the review queue in Objectify and Firebase</comment>
		<expr_stmt><expr><call><name>ofy</name><argument_list>()</argument_list></call><operator>.</operator><call><name>save</name><argument_list>()</argument_list></call><operator>.</operator><call><name>entity</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>now</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>FirebaseService</name><operator>.</operator><name>writeReviewQueue</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>QueueInFirebase</name><argument_list>(<argument><expr><name>reviewQueue</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>this</name><operator>.</operator><name>getID</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>
	<comment type="line">// Queues the microtask onto the project's microtask queue with 2 excluded workerID, the challenger and the challengee workers</comment>
	<function><specifier>public</specifier> <type><name>void</name></type> <name>queueChellengeReviewMicrotask</name><parameter_list>( <parameter><decl><type><name><name>Key</name><argument_list type="generic">&lt;<argument><name>Microtask</name></argument>&gt;</argument_list></name></type> <name>microtaskKey</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>firstExcludedWorkerID</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>secondExcludedWorkerID</name></decl></parameter>)</parameter_list>
	<block>{
		<comment type="line">// if the microtask is not in the queue, add it</comment>
		<if>if<condition>( <expr><operator>!</operator> <call><name><name>microtaskQueue</name><operator>.</operator><name>contains</name></name><argument_list>( <argument><expr><call><name><name>Microtask</name><operator>.</operator><name>keyToString</name></name><argument_list>(<argument><expr><name>microtaskKey</name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>  )</condition><then><block>{
			<expr_stmt><expr><call><name><name>microtaskQueue</name><operator>.</operator><name>addLast</name></name><argument_list>( <argument><expr><call><name><name>Microtask</name><operator>.</operator><name>keyToString</name></name><argument_list>(<argument><expr><name>microtaskKey</name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr> ;</expr_stmt>
			<expr_stmt><expr><call><name><name>HistoryLog</name>
				<operator>.</operator><name>Init</name></name><argument_list>(<argument><expr><call><name><name>this</name><operator>.</operator><name>getID</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
				<operator>.</operator><call><name>addEvent</name><argument_list>( <argument><expr><operator>new</operator> <call><name>MicrotaskQueued</name><argument_list>(  <argument><expr><call><name>ofy</name><argument_list>()</argument_list></call><operator>.</operator><call><name>load</name><argument_list>()</argument_list></call><operator>.</operator><call><name>key</name><argument_list>(<argument><expr><name>microtaskKey</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>now</name><argument_list>()</argument_list></call></expr></argument> )</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>

		<comment type="line">// add the workerId to the excluded workers for this microtask</comment>
		<expr_stmt><expr><call><name>addPermExcludedWorkerForMicrotask</name><argument_list>( <argument><expr><name>microtaskKey</name></expr></argument>, <argument><expr><name>firstExcludedWorkerID</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>addPermExcludedWorkerForMicrotask</name><argument_list>( <argument><expr><name>microtaskKey</name></expr></argument>, <argument><expr><name>secondExcludedWorkerID</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>


		<comment type="line">// save the queue in Objectify and Firebase</comment>
		<expr_stmt><expr><call><name>ofy</name><argument_list>()</argument_list></call><operator>.</operator><call><name>save</name><argument_list>()</argument_list></call><operator>.</operator><call><name>entity</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>now</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>FirebaseService</name><operator>.</operator><name>writeMicrotaskQueue</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>QueueInFirebase</name><argument_list>(<argument><expr><name>microtaskQueue</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>this</name><operator>.</operator><name>getID</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<comment type="line">// adds a workerId to the permanent excluded workers for the microtask with microtaskKey</comment>
	<function><specifier>private</specifier> <type><name>void</name></type> <name>addPermExcludedWorkerForMicrotask</name><parameter_list>( <parameter><decl><type><name><name>Key</name><argument_list type="generic">&lt;<argument><name>Microtask</name></argument>&gt;</argument_list></name></type> <name>microtaskKey</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>excludedWorkerID</name></decl></parameter>)</parameter_list>
	<block>{
		<comment type="line">// retrieve the current permanently excluded workers for the microtask</comment>
		<decl_stmt><decl><type><name><name>HashSet</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>permExcludedForMicrotask</name> <init>= <expr><call><name><name>permanentlyExcludedWorkers</name><operator>.</operator><name>get</name></name><argument_list>( <argument><expr><call><name><name>Microtask</name><operator>.</operator><name>keyToString</name></name><argument_list>(<argument><expr><name>microtaskKey</name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

		<comment type="line">// if there aren't permanently excluded workers</comment>
		<if>if <condition>(<expr><name>permExcludedForMicrotask</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then><block>{

			<comment type="line">// create a new hash set</comment>
			<expr_stmt><expr><name>permExcludedForMicrotask</name> <operator>=</operator> <operator>new</operator> <call><name><name>HashSet</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>permanentlyExcludedWorkers</name><operator>.</operator><name>put</name></name><argument_list>(  <argument><expr><call><name><name>Microtask</name><operator>.</operator><name>keyToString</name></name><argument_list>(<argument><expr><name>microtaskKey</name></expr></argument>)</argument_list></call></expr></argument> , <argument><expr><name>permExcludedForMicrotask</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>

		<comment type="line">// add the worker to the permanently excluded workers for this microtask</comment>
		<expr_stmt><expr><call><name><name>permExcludedForMicrotask</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>excludedWorkerID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="line">// add the worker to the actual excluded</comment>
		<expr_stmt><expr><call><name>addExcludedWorkerForMicrotask</name><argument_list>( <argument><expr><name>microtaskKey</name></expr></argument> , <argument><expr><name>excludedWorkerID</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<comment type="line">// adds a workerId to the excluded workers for the microtask with microtaskKey</comment>
	<function><specifier>private</specifier> <type><name>void</name></type> <name>addExcludedWorkerForMicrotask</name><parameter_list>(<parameter><decl><type><name><name>Key</name><argument_list type="generic">&lt;<argument><name>Microtask</name></argument>&gt;</argument_list></name></type> <name>microtaskKey</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>workerID</name></decl></parameter>)</parameter_list>
	<block>{
		<comment type="line">// retrieve the current permanently excluded workers for the microtask</comment>
		<comment type="line">// if is empty create one</comment>
		<decl_stmt><decl><type><name>String</name></type> <name>microtaskKeyString</name> <init>=  <expr><call><name><name>Microtask</name><operator>.</operator><name>keyToString</name></name><argument_list>(<argument><expr><name>microtaskKey</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name><name>HashSet</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>excludedWorkersForMicrotask</name> <init>= <expr><call><name><name>excludedWorkers</name><operator>.</operator><name>get</name></name><argument_list>( <argument><expr><name>microtaskKeyString</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
		<if>if <condition>(<expr><name>excludedWorkersForMicrotask</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then>
		<block>{
			<expr_stmt><expr><name>excludedWorkersForMicrotask</name> <operator>=</operator> <operator>new</operator> <call><name><name>HashSet</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>excludedWorkers</name><operator>.</operator><name>put</name></name><argument_list>( <argument><expr><name>microtaskKeyString</name></expr></argument> , <argument><expr><name>excludedWorkersForMicrotask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>
		
		<expr_stmt><expr><call><name><name>excludedWorkersForMicrotask</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>workerID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<comment type="line">//add/update excluded list inside firebase	</comment>
		<decl_stmt><decl><type><name>String</name></type> <name>workerList</name> <init>= <expr><call><name>excludedWorkersToString</name><argument_list>(<argument><expr><name>excludedWorkersForMicrotask</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>FirebaseService</name><operator>.</operator><name>writeMicrotaskExcludedWorkers</name></name><argument_list>(<argument><expr><name>microtaskKeyString</name></expr></argument>,
			<argument><expr><call><name><name>this</name><operator>.</operator><name>getID</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>workerList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>
	
	<comment type="line">//transforms excluded workers IDs into one string, to save in firebase</comment>
	<function><specifier>private</specifier> <specifier>final</specifier> <type><name>String</name></type> <name>excludedWorkersToString</name><parameter_list>(<parameter><decl><type><name><name>HashSet</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>WorkersList</name></decl></parameter>)</parameter_list><block>{
		<decl_stmt><decl><type><name>String</name></type> <name>Ids</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>
		<for>for<control>(<init><decl><type><name>String</name></type> <name>id</name> <range>: <expr><name>WorkersList</name></expr></range></decl></init>)</control><block>{
			<expr_stmt><expr><name>Ids</name> <operator>+=</operator> <name>id</name> <operator>+</operator><literal type="string">","</literal></expr>;</expr_stmt>
		}</block></for>
		<return>return <expr><name>Ids</name></expr>;</return>
	}</block></function>
	<comment type="line">// Gets the currently assigned microtask for the specified worker or returns null if the worker</comment>
	<comment type="line">// does not have a currently assigned microtask. Returns the microtaskID of the microtask.</comment>
	<function><specifier>public</specifier> <type><name><name>Key</name><argument_list type="generic">&lt;<argument><name>Microtask</name></argument>&gt;</argument_list></name></type> <name>lookupMicrotaskAssignment</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>workerID</name></decl></parameter>)</parameter_list>
	<block>{
		<decl_stmt><decl><type><name>String</name></type> <name>microtaskKeyString</name> <init>=  <expr><call><name><name>microtaskAssignments</name><operator>.</operator><name>get</name></name><argument_list>( <argument><expr><name>workerID</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
		<if>if<condition>( <expr><name>microtaskKeyString</name> <operator>==</operator> <literal type="null">null</literal></expr> )</condition><then>
			<block type="pseudo"><return>return <expr><literal type="null">null</literal></expr>;</return></block></then></if>

		<return>return <expr><call><name><name>Microtask</name><operator>.</operator><name>stringToKey</name></name><argument_list>(<argument><expr><name>microtaskKeyString</name></expr></argument>)</argument_list></call></expr>;</return>
	}</block></function>

	<function><specifier>public</specifier> <type><name>void</name></type> <name>unassignMicrotask</name><parameter_list>( <parameter><decl><type><specifier>final</specifier> <name>String</name></type> <name>workerID</name></decl></parameter> )</parameter_list><block>{
		<decl_stmt><decl><type><name>String</name></type> <name>assignedMicrotaskKey</name> <init>= <expr><call><name><name>microtaskAssignments</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>workerID</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if>if<condition>( <expr><name>assignedMicrotaskKey</name> <operator>!=</operator> <literal type="null">null</literal></expr> )</condition><then><block>{

			<expr_stmt><expr><call><name><name>microtaskAssignments</name><operator>.</operator><name>put</name></name><argument_list>( <argument><expr><name>workerID</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<decl_stmt><decl><type><name>Microtask</name></type> <name>assignedMtask</name> <init>= <expr><call><name>ofy</name><argument_list>()</argument_list></call><operator>.</operator><call><name>load</name><argument_list>()</argument_list></call><operator>.</operator><call><name>key</name><argument_list>( <argument><expr><call><name><name>Microtask</name><operator>.</operator><name>stringToKey</name></name><argument_list>(<argument><expr><name>assignedMicrotaskKey</name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call><operator>.</operator><call><name>now</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name><name>HistoryLog</name>
				<operator>.</operator><name>Init</name></name><argument_list>(<argument><expr><call><name><name>this</name><operator>.</operator><name>getID</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
				<operator>.</operator><call><name>addEvent</name><argument_list>(<argument><expr><operator>new</operator> <call><name>MicrotaskUnassigned</name><argument_list>( <argument><expr><name>assignedMtask</name></expr></argument>, <argument><expr><name>workerID</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			
			<expr_stmt><expr><call><name><name>FirebaseService</name><operator>.</operator><name>writeMicrotaskAssigned</name></name><argument_list>( <argument><expr><name>assignedMicrotaskKey</name></expr></argument> , <argument><expr><name>workerID</name></expr></argument>, <argument><expr><call><name><name>project</name><operator>.</operator><name>getID</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		}</block></then></if>
		
	}</block></function>

	<comment type="line">// Assigns a microtask to worker and returns its microtaskKey.</comment>
	<comment type="line">// Returns null if no microtasks are available.</comment>
	<function><specifier>public</specifier> <type><name><name>Key</name><argument_list type="generic">&lt;<argument><name>Microtask</name></argument>&gt;</argument_list></name></type> <name>assignMicrotask</name><parameter_list>( <parameter><decl><type><specifier>final</specifier> <name>String</name></type> <name>workerID</name></decl></parameter>)</parameter_list>
	<block>{
		<comment type="line">// Ensure that the worker is marked as logged in</comment>
		<expr_stmt><expr><call><name><name>loggedInWorkers</name><operator>.</operator><name>add</name></name><argument_list>( <argument><expr><name>workerID</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

		<comment type="line">// Look for a microtask, checking constraints on it along the way</comment>
		<decl_stmt><decl><type><name>String</name></type>  <name>microtaskKey</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>Boolean</name></type> <name>isReview</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
		<comment type="line">// First, check if there any review microtasks queued.</comment>
		<comment type="line">// Review microtasks get priority, as they need to be done quickly.</comment>
		<for>for <control>( <init><decl><type><name>String</name></type> <name>potentialMicrotaskKey</name> <range>: <expr><name>reviewQueue</name></expr></range></decl></init> )</control><block>{
			<if>if <condition>( <expr><name>microtaskKey</name> <operator>==</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name>assignmentIsValid</name><argument_list>( <argument><expr><name>potentialMicrotaskKey</name></expr></argument>, <argument><expr><name>workerID</name></expr></argument> )</argument_list></call></expr> )</condition><then><block>{
				<expr_stmt><expr><name>microtaskKey</name> <operator>=</operator> <name>potentialMicrotaskKey</name></expr>;</expr_stmt>
				<expr_stmt><expr><name>isReview</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
			}</block></then></if>
		}</block></for>

		<if>if<condition>( <expr><name>microtaskKey</name> <operator>==</operator> <literal type="null">null</literal></expr> )</condition><then><block>{
			<for>for <control>( <init><decl><type><name>String</name></type> <name>potentialMicrotaskKey</name> <range>: <expr><name>microtaskQueue</name></expr></range></decl></init> )</control><block>{
				<if>if <condition>( <expr><name>microtaskKey</name> <operator>==</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name>assignmentIsValid</name><argument_list>( <argument><expr><name>potentialMicrotaskKey</name></expr></argument>, <argument><expr><name>workerID</name></expr></argument>)</argument_list></call></expr> )</condition><then><block>{
					<expr_stmt><expr><name>microtaskKey</name> <operator>=</operator> <name>potentialMicrotaskKey</name></expr>;</expr_stmt>
				}</block></then></if>
			}</block></for>
		}</block></then></if>
		<decl_stmt><decl><type><name>Microtask</name></type> <name>microtask</name><init>=<expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
		<comment type="line">// If there are no more microtasks currently available, return null</comment>
		<if>if <condition>( <expr><name>microtaskKey</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
			<decl_stmt><decl><type><name>Microtask</name></type> <name>mtask</name> <init>= <expr><call><name>ofy</name><argument_list>()</argument_list></call><operator>.</operator><call><name>load</name><argument_list>()</argument_list></call><operator>.</operator><call><name>key</name><argument_list>( <argument><expr><call><name><name>Microtask</name><operator>.</operator><name>stringToKey</name></name><argument_list>(<argument><expr><name>microtaskKey</name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call><operator>.</operator><call><name>now</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
			<if>if<condition>( <expr><name>mtask</name><operator>!=</operator><literal type="null">null</literal></expr> )</condition><then><block>{

				<if>if<condition>( <expr><name>isReview</name></expr> )</condition><then><block>{
					<expr_stmt><expr><call><name><name>reviewQueue</name><operator>.</operator><name>remove</name></name><argument_list>( <argument><expr><name>microtaskKey</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name>FirebaseService</name><operator>.</operator><name>writeReviewQueue</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>QueueInFirebase</name><argument_list>(<argument><expr><name>reviewQueue</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>project</name><operator>.</operator><name>getID</name></name><argument_list>()</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
				}</block></then> <else>else <block>{
					<expr_stmt><expr><call><name><name>microtaskQueue</name><operator>.</operator><name>remove</name></name><argument_list>( <argument><expr><name>microtaskKey</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name>FirebaseService</name><operator>.</operator><name>writeMicrotaskQueue</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>QueueInFirebase</name><argument_list>(<argument><expr><name>microtaskQueue</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>project</name><operator>.</operator><name>getID</name></name><argument_list>()</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
				}</block></else></if>
				<comment type="line">// assign it to the worker</comment>
				<expr_stmt><expr><call><name><name>mtask</name><operator>.</operator><name>setWorkerId</name></name><argument_list>( <argument><expr><name>workerID</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>microtaskAssignments</name><operator>.</operator><name>put</name></name><argument_list>( <argument><expr><name>workerID</name></expr></argument>,  <argument><expr><call><name><name>Microtask</name><operator>.</operator><name>keyToString</name></name><argument_list>( <argument><expr><call><name><name>mtask</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

				<comment type="line">//ofy().save().entity(mtask).now();</comment>
				<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"assigning "</literal><operator>+</operator> <call><name><name>mtask</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call> <operator>+</operator><literal type="string">" to worker "</literal><operator>+</operator><name>workerID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>microtask</name><operator>=</operator><name>mtask</name></expr>;</expr_stmt>
			}</block></then>
			<else>else<block>{
				<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"((((((((((((erroooor mtask null"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></else></if>
		}</block></then></if>



		<if>if<condition>( <expr><name>microtask</name> <operator>!=</operator> <literal type="null">null</literal></expr> )</condition><then><block>{

			<expr_stmt><expr><call><name><name>FirebaseService</name><operator>.</operator><name>writeMicrotaskAssigned</name></name><argument_list>( <argument><expr><call><name><name>Microtask</name><operator>.</operator><name>keyToString</name></name><argument_list>( <argument><expr><call><name><name>microtask</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument> )</argument_list></call></expr></argument>, <argument><expr><name>workerID</name></expr></argument>, <argument><expr><call><name><name>project</name><operator>.</operator><name>getID</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><call><name><name>HistoryLog</name>
				<operator>.</operator><name>Init</name></name><argument_list>(<argument><expr><call><name><name>project</name><operator>.</operator><name>getID</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
				<operator>.</operator><call><name>addEvent</name><argument_list>( <argument><expr><operator>new</operator> <call><name>MicrotaskDequeued</name><argument_list>(<argument><expr><name>microtask</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><call><name><name>HistoryLog</name>
				<operator>.</operator><name>Init</name></name><argument_list>(<argument><expr><call><name><name>project</name><operator>.</operator><name>getID</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
				<operator>.</operator><call><name>addEvent</name><argument_list>(<argument><expr><operator>new</operator> <call><name>MicrotaskAssigned</name><argument_list>(<argument><expr><name>microtask</name></expr></argument>,<argument><expr><name>workerID</name></expr></argument>,<argument><expr><literal type="string">"assigned"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<comment type="line">// return the assigned microtask key</comment>
			<return>return <expr><call><name><name>microtask</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr>;</return>
		}</block></then></if>

		<return>return <expr><literal type="null">null</literal></expr>;</return>
	}</block></function>

	<function><specifier>public</specifier> <type><name><name>Key</name><argument_list type="generic">&lt;<argument><name>Microtask</name></argument>&gt;</argument_list></name></type> <name>assignSpecificMicrotask</name><parameter_list>( <parameter><decl><type><specifier>final</specifier> <name>String</name></type> <name>workerID</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>String</name></type> <name>currentKey</name></decl></parameter>)</parameter_list>
	<block>{
		<comment type="line">// Ensure that the worker is marked as logged in</comment>
		<expr_stmt><expr><call><name><name>loggedInWorkers</name><operator>.</operator><name>add</name></name><argument_list>( <argument><expr><name>workerID</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

		<comment type="line">// Look for a microtask, checking constraints on it along the way</comment>
		<decl_stmt><decl><type><name>String</name></type>  <name>microtaskKey</name> <init>= <expr><name>currentKey</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>Boolean</name></type> <name>isReview</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>, <decl><type ref="prev"/><name>canAssign</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
		
		<comment type="line">//Checks if microtask is in Review or Microtask Queue</comment>
		<if>if<condition>(<expr><call><name><name>reviewQueue</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><name>microtaskKey</name></expr></argument>)</argument_list></call></expr>)</condition><then><block>{
			<expr_stmt><expr><name>isReview</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>canAssign</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
		}</block></then>
		<elseif>else <if>if<condition>(<expr><call><name><name>microtaskQueue</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><name>microtaskKey</name></expr></argument>)</argument_list></call></expr>)</condition><then><block>{
			<expr_stmt><expr><name>canAssign</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>			
		}</block></then></if></elseif></if>
		
		<decl_stmt><decl><type><name>Microtask</name></type> <name>microtask</name><init>=<expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
		<comment type="line">// If there are no more microtasks currently available, return null</comment>
		<comment type="line">//&amp;&amp; assignmentIsValid( microtaskKey, workerID)</comment>
		<if>if <condition>( <expr><name>microtaskKey</name> <operator>!=</operator> <literal type="null">null</literal>  <operator>&amp;&amp;</operator> <name>canAssign</name></expr> )</condition><then> <block>{
			<decl_stmt><decl><type><name>Microtask</name></type> <name>mtask</name> <init>= <expr><call><name>ofy</name><argument_list>()</argument_list></call><operator>.</operator><call><name>load</name><argument_list>()</argument_list></call><operator>.</operator><call><name>key</name><argument_list>( <argument><expr><call><name><name>Microtask</name><operator>.</operator><name>stringToKey</name></name><argument_list>(<argument><expr><name>microtaskKey</name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call><operator>.</operator><call><name>now</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
			<if>if<condition>( <expr><name>mtask</name><operator>!=</operator><literal type="null">null</literal></expr> )</condition><then><block>{

				<if>if<condition>( <expr><name>isReview</name></expr> )</condition><then><block>{
					<expr_stmt><expr><call><name><name>reviewQueue</name><operator>.</operator><name>remove</name></name><argument_list>( <argument><expr><name>microtaskKey</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name>FirebaseService</name><operator>.</operator><name>writeReviewQueue</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>QueueInFirebase</name><argument_list>(<argument><expr><name>reviewQueue</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>project</name><operator>.</operator><name>getID</name></name><argument_list>()</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
				}</block></then> <else>else <block>{
					<expr_stmt><expr><call><name><name>microtaskQueue</name><operator>.</operator><name>remove</name></name><argument_list>( <argument><expr><name>microtaskKey</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name>FirebaseService</name><operator>.</operator><name>writeMicrotaskQueue</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>QueueInFirebase</name><argument_list>(<argument><expr><name>microtaskQueue</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>project</name><operator>.</operator><name>getID</name></name><argument_list>()</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
				}</block></else></if>
				<comment type="line">// assign it to the worker</comment>
				<expr_stmt><expr><call><name><name>mtask</name><operator>.</operator><name>setWorkerId</name></name><argument_list>( <argument><expr><name>workerID</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>microtaskAssignments</name><operator>.</operator><name>put</name></name><argument_list>( <argument><expr><name>workerID</name></expr></argument>,  <argument><expr><call><name><name>Microtask</name><operator>.</operator><name>keyToString</name></name><argument_list>( <argument><expr><call><name><name>mtask</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

				<comment type="line">//ofy().save().entity(mtask).now();</comment>
				<expr_stmt><expr><name>microtask</name><operator>=</operator><name>mtask</name></expr>;</expr_stmt>
			}</block></then>
			<else>else<block>{
				<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"((((((((((((erroooor mtask null"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></else></if>
		}</block></then></if>



		<if>if<condition>( <expr><name>microtask</name> <operator>!=</operator> <literal type="null">null</literal></expr> )</condition><then><block>{

			<expr_stmt><expr><call><name><name>FirebaseService</name><operator>.</operator><name>writeMicrotaskAssigned</name></name><argument_list>( <argument><expr><call><name><name>Microtask</name><operator>.</operator><name>keyToString</name></name><argument_list>( <argument><expr><call><name><name>microtask</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument> )</argument_list></call></expr></argument>, <argument><expr><name>workerID</name></expr></argument>, <argument><expr><call><name><name>project</name><operator>.</operator><name>getID</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><call><name><name>HistoryLog</name>
				<operator>.</operator><name>Init</name></name><argument_list>(<argument><expr><call><name><name>project</name><operator>.</operator><name>getID</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
				<operator>.</operator><call><name>addEvent</name><argument_list>( <argument><expr><operator>new</operator> <call><name>MicrotaskDequeued</name><argument_list>(<argument><expr><name>microtask</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><call><name><name>HistoryLog</name>
				<operator>.</operator><name>Init</name></name><argument_list>(<argument><expr><call><name><name>project</name><operator>.</operator><name>getID</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
				<operator>.</operator><call><name>addEvent</name><argument_list>(<argument><expr><operator>new</operator> <call><name>MicrotaskAssigned</name><argument_list>(<argument><expr><name>microtask</name></expr></argument>,<argument><expr><name>workerID</name></expr></argument>,<argument><expr><literal type="string">"picked"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<comment type="line">// return the assigned microtask key</comment>
			<return>return <expr><call><name><name>microtask</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr>;</return>
		}</block></then></if>

		<return>return <expr><literal type="null">null</literal></expr>;</return>
	}</block></function>
	
	
	<comment type="line">// Checks both the excludedWorkers and skippedWorkers to see if microtaskKey is a valid</comment>
	<comment type="line">// microtask assignment for workerID. Returns true iff this is the case.</comment>
	<function><specifier>private</specifier> <type><name>boolean</name></type> <name>assignmentIsValid</name><parameter_list>( <parameter><decl><type><name>String</name></type> <name>potentialMicrotaskKey</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>workerID</name></decl></parameter>)</parameter_list>
	<block>{
		<comment type="line">// retrieve the excluded workers</comment>
		<decl_stmt><decl><type><name><name>HashSet</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>excludedWorkersForMicrotask</name> <init>= <expr><call><name><name>excludedWorkers</name><operator>.</operator><name>get</name></name><argument_list>( <argument><expr><name>potentialMicrotaskKey</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

		<comment type="line">// if the excluded workers is empty and</comment>
		<comment type="line">// contains the workerId</comment>
		<if>if <condition>( <expr><name>excludedWorkersForMicrotask</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>excludedWorkersForMicrotask</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><name>workerID</name></expr></argument>)</argument_list></call></expr>)</condition><then>
			<block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr>;</return></block></then>
		<else>else
			<block type="pseudo"><return>return <expr><literal type="boolean">true</literal></expr>;</return></block></else></if>
	}</block></function>

	<comment type="line">// Called to process a microtask submission based on form data (in json format)</comment>
	<comment type="line">// If the microtask has previously been submitted or is no longer open, the submission is</comment>
	<comment type="line">// dropped, ensuring workers cannot submit against already completed microtasks.</comment>
	<function><specifier>public</specifier> <type><name>void</name></type> <name>submitMicrotask</name><parameter_list>(<parameter><decl><type><name><name>Key</name><argument_list type="generic">&lt;<argument><name>Microtask</name></argument>&gt;</argument_list></name></type> <name>microtaskKey</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>jsonDTOData</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>workerID</name></decl></parameter>, <parameter><decl><type><name>Project</name></type> <name>project</name></decl></parameter>)</parameter_list><block>{
		<expr_stmt><expr><call><name><name>WorkerCommand</name><operator>.</operator><name>increaseStat</name></name><argument_list>(<argument><expr><name>workerID</name></expr></argument>, <argument><expr><literal type="string">"submits"</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>Microtask</name></type> <name>microtask</name> <init>= <expr><call><name>ofy</name><argument_list>()</argument_list></call><operator>.</operator><call><name>load</name><argument_list>()</argument_list></call><operator>.</operator><call><name>key</name><argument_list>( <argument><expr><name>microtaskKey</name></expr></argument> )</argument_list></call><operator>.</operator><call><name>now</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<if>if<condition>(<expr><name>microtask</name><operator>!=</operator><literal type="null">null</literal></expr>)</condition><then><block>{			
			<comment type="line">// submit only if the request come from</comment>
			<comment type="line">// the current assigned worker of the microtask</comment>
			<if>if<condition>(<expr><call><name><name>microtask</name><operator>.</operator><name>isAssignedTo</name></name><argument_list>(<argument><expr><name>workerID</name></expr></argument>)</argument_list></call></expr> )</condition><then><block>{		
				<comment type="line">//boolean to signal if review microtask was created -&gt; microtask is waiting review</comment>
				<decl_stmt><decl><type><name>boolean</name></type> <name>waitReview</name> <init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>
				
				<comment type="line">// If reviewing is enabled and the microtask</comment>
				<comment type="line">// is not in [Review, ReuseSearch,DebugTestFailure],</comment>
				<comment type="line">// spawn a new review microtask</comment>
				<if>if <condition>(<expr><name>reviewsEnabled</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator> <call><name><name>microtask</name><operator>.</operator><name>getClass</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name><name>Review</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name><name>microtask</name><operator>.</operator><name>getClass</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name><name>ChallengeReview</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr> )</condition><then><block>{
					<expr_stmt><expr><call><name><name>MicrotaskCommand</name><operator>.</operator><name>createReview</name></name><argument_list>(<argument><expr><name>microtaskKey</name></expr></argument>, <argument><expr><name>workerID</name></expr></argument>, <argument><expr><name>jsonDTOData</name></expr></argument>, <argument><expr><name>workerID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				}</block></then>
				<comment type="line">// else submit the microtask</comment>
				<else>else <block>{
					<expr_stmt><expr><call><name><name>MicrotaskCommand</name><operator>.</operator><name>submit</name></name><argument_list>(<argument><expr><name>microtaskKey</name></expr></argument>, <argument><expr><name>jsonDTOData</name></expr></argument>, <argument><expr><name>workerID</name></expr></argument>, <argument><expr><call><name><name>microtask</name><operator>.</operator><name>getSubmitValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name>waitReview</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
				}</block></else></if>

				<expr_stmt><expr><call><name><name>FirebaseService</name><operator>.</operator><name>writeMicrotaskWaitingReview</name></name><argument_list>(<argument><expr><call><name><name>Microtask</name><operator>.</operator><name>keyToString</name></name><argument_list>(<argument><expr><name>microtaskKey</name></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><name>workerID</name></expr></argument>, <argument><expr><name><name>this</name><operator>.</operator><name>id</name></name></expr></argument>, <argument><expr><name>waitReview</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<comment type="line">// write the history log entry about the microtask submission</comment>
				<expr_stmt><expr><call><name><name>HistoryLog</name><operator>.</operator><name>Init</name></name><argument_list>(<argument><expr><call><name><name>this</name><operator>.</operator><name>getID</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>addEvent</name><argument_list>(<argument><expr><operator>new</operator> <call><name>MicrotaskSubmitted</name><argument_list>(<argument><expr><name>microtask</name></expr></argument>, <argument><expr><name>workerID</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>FirebaseService</name><operator>.</operator><name>writeMicrotaskSubmission</name></name><argument_list>(<argument><expr><name>jsonDTOData</name></expr></argument>, <argument><expr><call><name><name>Microtask</name><operator>.</operator><name>keyToString</name></name><argument_list>(<argument><expr><name>microtaskKey</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>this</name><operator>.</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>
		}</block></then>
		<else>else
		<block>{
			<expr_stmt><expr><call><name><name>Logger</name><operator>.</operator><name>getLogger</name></name><argument_list>(<argument><expr><literal type="string">"LOGGER"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>severe</name><argument_list>(<argument><expr><literal type="string">"LOAD FAILED: MICROTASK "</literal><operator>+</operator><name>microtaskKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></else></if>


	}</block></function>

	<comment type="line">// Unassigns worker from this microtask</comment>
	<comment type="line">// Precondition - the worker must be assigned to this microtask</comment>
	<function><specifier>public</specifier> <type><name>void</name></type> <name>skipMicrotask</name><parameter_list>(<parameter><decl><type><name><name>Key</name><argument_list type="generic">&lt;<argument><name>Microtask</name></argument>&gt;</argument_list></name></type> <name>microtaskKey</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>workerID</name></decl></parameter>, <parameter><decl><type><name>Boolean</name></type> <name>disablePoint</name></decl></parameter>)</parameter_list>
	<block>{
		<expr_stmt><expr><call><name><name>WorkerCommand</name><operator>.</operator><name>increaseStat</name></name><argument_list>(<argument><expr><name>workerID</name></expr></argument>, <argument><expr><literal type="string">"skips"</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>Microtask</name></type> <name>microtask</name> <init>= <expr><call><name>ofy</name><argument_list>()</argument_list></call><operator>.</operator><call><name>load</name><argument_list>()</argument_list></call><operator>.</operator><call><name>key</name><argument_list>(<argument><expr><name>microtaskKey</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>now</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<if>if<condition>( <expr><name>microtask</name><operator>!=</operator><literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>microtask</name><operator>.</operator><name>isAssignedTo</name></name><argument_list>(<argument><expr><name>workerID</name></expr></argument>)</argument_list></call></expr>)</condition><then><block>{

			<expr_stmt><expr><call><name><name>microtask</name><operator>.</operator><name>setWorkerId</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>addExcludedWorkerForMicrotask</name><argument_list>( <argument><expr><name>microtaskKey</name></expr></argument>, <argument><expr><name>workerID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


			<comment type="line">// Add the work back to the appropriate queue</comment>
			<if>if<condition>(<expr><call><name><name>microtask</name><operator>.</operator><name>microtaskName</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="string">"Review"</literal></expr>)</condition><then>
				<block type="pseudo"><expr_stmt><expr><call><name>queueMicrotask</name><argument_list>( <argument><expr><name>microtaskKey</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
			<else>else
				<block type="pseudo"><expr_stmt><expr><call><name>queueReviewMicrotask</name><argument_list>(<argument><expr><name>microtaskKey</name></expr></argument>, <argument><expr><name>workerID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>

			<expr_stmt><expr><call><name>resetIfAllSkipped</name><argument_list>( <argument><expr><name>microtaskKey</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>ofy</name><argument_list>()</argument_list></call><operator>.</operator><call><name>save</name><argument_list>()</argument_list></call><operator>.</operator><call><name>entity</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>now</name><argument_list>()</argument_list></call></expr>;</expr_stmt>


			<expr_stmt><expr><call><name><name>MicrotaskCommand</name><operator>.</operator><name>skip</name></name><argument_list>( <argument><expr><name>microtaskKey</name></expr></argument>, <argument><expr><name>workerID</name></expr></argument>, <argument><expr><name>disablePoint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>FirebaseService</name><operator>.</operator><name>writeMicrotaskAssigned</name></name><argument_list>( <argument><expr><call><name><name>Microtask</name><operator>.</operator><name>keyToString</name></name><argument_list>(<argument><expr><name>microtaskKey</name></expr></argument>)</argument_list></call></expr></argument> , <argument><expr><name>workerID</name></expr></argument>, <argument><expr><call><name><name>project</name><operator>.</operator><name>getID</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>	
		}</block></then></if>

	}</block></function>


	<comment type="line">// Checks the microtask to see if all workers have skipped it.</comment>
	<comment type="line">// If so, resets the excluded workers to give workers another chance.</comment>
	<function><specifier>private</specifier> <type><name>void</name></type> <name>resetIfAllSkipped</name><parameter_list>( <parameter><decl><type><name><name>Key</name><argument_list type="generic">&lt;<argument><name>Microtask</name></argument>&gt;</argument_list></name></type> <name>microtaskKey</name></decl></parameter> )</parameter_list>
	<block>{
		<decl_stmt><decl><type><name>String</name></type> <name>microtaskKeyStringified</name> <init>= <expr><call><name><name>Microtask</name><operator>.</operator><name>keyToString</name></name><argument_list>(<argument><expr><name>microtaskKey</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<comment type="line">// retrieve the excluded workers for the microtask</comment>
		<decl_stmt><decl><type><name><name>HashSet</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>excludedWorkersForMicrotask</name> <init>= <expr><call><name><name>excludedWorkers</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>microtaskKeyStringified</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<comment type="line">// if all the logged in workers are excluded</comment>
		<if>if <condition>(<expr><name>excludedWorkersForMicrotask</name><operator>!=</operator><literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>excludedWorkersForMicrotask</name><operator>.</operator><name>containsAll</name></name><argument_list>(<argument><expr><name>loggedInWorkers</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<block>{
			<comment type="line">// Add back the permanently excluded workers</comment>
			<decl_stmt><decl><type><name><name>HashSet</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>permanentlyExcludedWorkersForMicrotask</name> <init>= <expr><call><name><name>permanentlyExcludedWorkers</name><operator>.</operator><name>get</name></name><argument_list>( <argument><expr><name>microtaskKeyStringified</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
			
			<comment type="line">//clean excluded list inside firebase	</comment>
			<expr_stmt><expr><call><name><name>FirebaseService</name><operator>.</operator><name>writeMicrotaskExcludedWorkers</name></name><argument_list>(<argument><expr><name>microtaskKeyStringified</name></expr></argument>,
				<argument><expr><call><name><name>this</name><operator>.</operator><name>getID</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			
			<expr_stmt><expr><call><name><name>excludedWorkers</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><name>microtaskKeyStringified</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<if>if <condition>(<expr><name>permanentlyExcludedWorkersForMicrotask</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then><block>{
				<expr_stmt><expr><call><name><name>excludedWorkers</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>microtaskKeyStringified</name></expr></argument>, <argument><expr><name>permanentlyExcludedWorkersForMicrotask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<decl_stmt><decl><type><name>String</name></type> <name>workerList</name> <init>= <expr><call><name>excludedWorkersToString</name><argument_list>(<argument><expr><name>permanentlyExcludedWorkersForMicrotask</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><call><name><name>FirebaseService</name><operator>.</operator><name>writeMicrotaskExcludedWorkers</name></name><argument_list>(<argument><expr><name>microtaskKeyStringified</name></expr></argument>,
					<argument><expr><call><name><name>this</name><operator>.</operator><name>getID</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>workerList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>
			<expr_stmt><expr><call><name>ofy</name><argument_list>()</argument_list></call><operator>.</operator><call><name>save</name><argument_list>()</argument_list></call><operator>.</operator><call><name>entity</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>now</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>

	}</block></function>


	<comment type="line">//////////////////////////////////////////////////////////////////////////////</comment>
	<comment type="line">//  Workers Management</comment>
	<comment type="line">//////////////////////////////////////////////////////////////////////////////</comment>

	<function><specifier>public</specifier> <type><name>void</name></type> <name>logoutInactiveWorkers</name><parameter_list>()</parameter_list><block>{
		<for>for <control>( <init><decl><type><name>String</name></type> <name>workerId</name> <range>: <expr><name>loggedInWorkers</name></expr></range></decl></init>)</control><block>{
			<if>if<condition>( <expr><operator>!</operator> <call><name><name>FirebaseService</name><operator>.</operator><name>isWorkerLoggedIn</name></name><argument_list>( <argument><expr><name>workerId</name></expr></argument>, <argument><expr><call><name><name>this</name><operator>.</operator><name>getID</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr> )</condition><then><block>{
				<expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>logoutWorker</name></name><argument_list>( <argument><expr><name>workerId</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>
		}</block></for>
	}</block></function>

	<comment type="line">// Logs out the specified worker, clearing all of their current assigned work</comment>
	<function><specifier>public</specifier> <type><name>void</name></type> <name>logoutWorker</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>workerID</name></decl></parameter>)</parameter_list>
	<block>{
		<comment type="line">// retrieve the assigned microtask for the workerId</comment>
		<decl_stmt><decl><type><name>String</name></type> <name>microtaskKeyString</name>        <init>= <expr><call><name><name>microtaskAssignments</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>workerID</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if>if<condition>(<expr><name>microtaskKeyString</name><operator>!=</operator><literal type="null">null</literal></expr>)</condition><then>
		<block>{
			<decl_stmt><decl><type><name><name>Key</name><argument_list type="generic">&lt;<argument><name>Microtask</name></argument>&gt;</argument_list></name></type> <name>currentAssignment</name> <init>= <expr><call><name><name>Microtask</name><operator>.</operator><name>stringToKey</name></name><argument_list>(<argument><expr><name>microtaskKeyString</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

			<comment type="line">// TODO: if the current assignment is a review, this should go in the review queue!</comment>
			<comment type="line">// if a current assignment exists requeue it</comment>
			<if>if <condition>(<expr><name>currentAssignment</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then><block>{
				<decl_stmt><decl><type><name>Microtask</name></type> <name>microtask</name><init>= <expr><call><name>ofy</name><argument_list>()</argument_list></call><operator>.</operator><call><name>load</name><argument_list>()</argument_list></call><operator>.</operator><call><name>key</name><argument_list>(<argument><expr><name>currentAssignment</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>now</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
				<if>if<condition>(<expr><call><name><name>microtask</name><operator>.</operator><name>microtaskName</name></name><argument_list>()</argument_list></call><operator>!=</operator><literal type="string">"Review"</literal></expr>)</condition><then>
					<block type="pseudo"><expr_stmt><expr><call><name>queueMicrotask</name><argument_list>( <argument><expr><name>currentAssignment</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
				<else>else
					<block type="pseudo"><expr_stmt><expr><call><name>queueReviewMicrotask</name><argument_list>( <argument><expr><name>currentAssignment</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>
			}</block></then></if>

			<comment type="line">// set null to the assignments of the workerID</comment>
			<expr_stmt><expr><call><name><name>microtaskAssignments</name><operator>.</operator><name>put</name></name><argument_list>( <argument><expr><name>workerID</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<comment type="line">// save the queue and the assignments</comment>
			<expr_stmt><expr><call><name>ofy</name><argument_list>()</argument_list></call><operator>.</operator><call><name>save</name><argument_list>()</argument_list></call><operator>.</operator><call><name>entity</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>now</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				
			<expr_stmt><expr><call><name><name>FirebaseService</name><operator>.</operator><name>writeMicrotaskQueue</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>QueueInFirebase</name><argument_list>(<argument><expr><name>microtaskQueue</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>this</name><operator>.</operator><name>getID</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>FirebaseService</name><operator>.</operator><name>writeMicrotaskAssigned</name></name><argument_list>( <argument><expr><call><name><name>Microtask</name><operator>.</operator><name>keyToString</name></name><argument_list>(<argument><expr><name>currentAssignment</name></expr></argument>)</argument_list></call></expr></argument> , <argument><expr><name>workerID</name></expr></argument>, <argument><expr><call><name><name>project</name><operator>.</operator><name>getID</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>
		<comment type="line">// write to firebase that the worker logged out</comment>
		<expr_stmt><expr><call><name><name>FirebaseService</name><operator>.</operator><name>writeWorkerLoggedOut</name></name><argument_list>( <argument><expr><name>workerID</name></expr></argument>, <argument><expr><call><name><name>this</name><operator>.</operator><name>getID</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>


	<comment type="line">//////////////////////////////////////////////////////////////////////////////</comment>
	<comment type="line">//  Test Management</comment>
	<comment type="line">//////////////////////////////////////////////////////////////////////////////</comment>

<comment type="line">//	// Requests that the tests be run for the project</comment>
<comment type="line">//	public void requestTestRun()</comment>
<comment type="line">//	{</comment>
<comment type="line">//		// Schedule a MachineUnitTest to be run, if one is not already scheduled</comment>
<comment type="line">//		if (!waitingForTestRun)</comment>
<comment type="line">//		{</comment>
<comment type="line">//			waitingForTestRun = true;</comment>
<comment type="line">//			ofy().save().entity(this).now();</comment>
<comment type="line">//			//Microtask microtask = new MachineUnitTest(this);</comment>
<comment type="line">//			//ProjectCommand.queueMicrotask(microtask.getID(), null);</comment>
<comment type="line">//		}</comment>
<comment type="line">//	}</comment>
<comment type="line">//</comment>
<comment type="line">//	// Notifies the project that tests are currently out and about to run</comment>
<comment type="line">//	public void testsAboutToRun()</comment>
<comment type="line">//	{</comment>
<comment type="line">//		// Reset the waitingForTestRun, as the current tests to be run are now frozen and any</comment>
<comment type="line">//		// subsequent changes to the tests or functions will not be reflected in the current test</comment>
<comment type="line">//		// run.</comment>
<comment type="line">//		waitingForTestRun = false;</comment>
<comment type="line">//		ofy().save().entity(this).now();</comment>
<comment type="line">//	}</comment>



	<comment type="line">//////////////////////////////////////////////////////////////////////////////</comment>
	<comment type="line">//  Other Stuff</comment>
	<comment type="line">//////////////////////////////////////////////////////////////////////////////</comment>

	<function><specifier>public</specifier> <type><name>void</name></type> <name>enableReviews</name><parameter_list>(<parameter><decl><type><name>Boolean</name></type> <name>reviewsEnabled</name></decl></parameter>)</parameter_list>
	<block>{
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>reviewsEnabled</name></name> <operator>=</operator> <name>reviewsEnabled</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>FirebaseService</name><operator>.</operator><name>writeSetting</name></name><argument_list>(<argument><expr><literal type="string">"reviews"</literal></expr></argument>, <argument><expr><call><name><name>reviewsEnabled</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument> , <argument><expr><call><name><name>this</name><operator>.</operator><name>getID</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ofy</name><argument_list>()</argument_list></call><operator>.</operator><call><name>save</name><argument_list>()</argument_list></call><operator>.</operator><call><name>entity</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>now</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	}</block></function>


	<function><specifier>public</specifier> <type><name><name>HashSet</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>getLoggedInWorkers</name><parameter_list>()</parameter_list> <block>{
		<return>return <expr><name>loggedInWorkers</name></expr>;</return>
	}</block></function>


	<function><specifier>public</specifier> <type><name>void</name></type> <name>enableTutorials</name><parameter_list>(<parameter><decl><type><name>Boolean</name></type> <name>tutorialsEnabled</name></decl></parameter>)</parameter_list> <block>{
		<comment type="line">// TODO Auto-generated method stub</comment>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>tutorialsEnabled</name></name> <operator>=</operator> <name>tutorialsEnabled</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>FirebaseService</name><operator>.</operator><name>writeSetting</name></name><argument_list>(<argument><expr><literal type="string">"tutorials"</literal></expr></argument>, <argument><expr><call><name><name>tutorialsEnabled</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument> , <argument><expr><call><name><name>project</name><operator>.</operator><name>getID</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ofy</name><argument_list>()</argument_list></call><operator>.</operator><call><name>save</name><argument_list>()</argument_list></call><operator>.</operator><call><name>entity</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>now</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	}</block></function>

}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="CrowdCode-com/crowdcoding/entities/microtasks/ChallengeReview.java" hash="c7e0a841fe7cc960ce0488940bb8f1f0c6b8644a"><package>package <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>entities</name><operator>.</operator><name>microtasks</name></name>;</package>

<import>import static <name><name>com</name><operator>.</operator><name>googlecode</name><operator>.</operator><name>objectify</name><operator>.</operator><name>ObjectifyService</name><operator>.</operator><name>ofy</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>commands</name><operator>.</operator><name>MicrotaskCommand</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>commands</name><operator>.</operator><name>WorkerCommand</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>dto</name><operator>.</operator><name>ChallengeDTO</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>dto</name><operator>.</operator><name>DTO</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>dto</name><operator>.</operator><name>ajax</name><operator>.</operator><name>microtask</name><operator>.</operator><name>submission</name><operator>.</operator><name>ChallengeReviewDTO</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>dto</name><operator>.</operator><name>ajax</name><operator>.</operator><name>microtask</name><operator>.</operator><name>submission</name><operator>.</operator><name>ReviewDTO</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>dto</name><operator>.</operator><name>firebase</name><operator>.</operator><name>NewsItemInFirebase</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>dto</name><operator>.</operator><name>firebase</name><operator>.</operator><name>microtasks</name><operator>.</operator><name>ChallengeReviewInFirebase</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>dto</name><operator>.</operator><name>firebase</name><operator>.</operator><name>notification</name><operator>.</operator><name>ChallengeNotificationInFirebase</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>dto</name><operator>.</operator><name>firebase</name><operator>.</operator><name>notification</name><operator>.</operator><name>NotificationInFirebase</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>entities</name><operator>.</operator><name>Project</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>entities</name><operator>.</operator><name>artifacts</name><operator>.</operator><name>Artifact</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>entities</name><operator>.</operator><name>artifacts</name><operator>.</operator><name>Function</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>history</name><operator>.</operator><name>HistoryLog</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>history</name><operator>.</operator><name>MicrotaskAccepted</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>history</name><operator>.</operator><name>MicrotaskReissued</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>history</name><operator>.</operator><name>MicrotaskRejected</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>history</name><operator>.</operator><name>MicrotaskSpawned</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>util</name><operator>.</operator><name>FirebaseService</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>fasterxml</name><operator>.</operator><name>jackson</name><operator>.</operator><name>core</name><operator>.</operator><name>JsonParseException</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>fasterxml</name><operator>.</operator><name>jackson</name><operator>.</operator><name>databind</name><operator>.</operator><name>JsonMappingException</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>googlecode</name><operator>.</operator><name>objectify</name><operator>.</operator><name>Key</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>googlecode</name><operator>.</operator><name>objectify</name><operator>.</operator><name>Ref</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>googlecode</name><operator>.</operator><name>objectify</name><operator>.</operator><name>annotation</name><operator>.</operator><name>Subclass</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>googlecode</name><operator>.</operator><name>objectify</name><operator>.</operator><name>annotation</name><operator>.</operator><name>Load</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>googlecode</name><operator>.</operator><name>objectify</name><operator>.</operator><name>annotation</name><operator>.</operator><name>Parent</name></name>;</import>

<class><annotation>@<name>Subclass</name><argument_list>(<argument><expr><name>index</name><operator>=</operator><literal type="boolean">true</literal></expr></argument>)</argument_list></annotation>
<specifier>public</specifier> class <name>ChallengeReview</name> <super><extends>extends <name>Microtask</name></extends></super>
<block>{
	<decl_stmt><decl><annotation>@<name>Parent</name></annotation> <annotation>@<name>Load</name></annotation> <specifier>private</specifier> <type><name><name>Ref</name><argument_list type="generic">&lt;<argument><name>Artifact</name></argument>&gt;</argument_list></name></type> <name>artifact</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>private</specifier> <type><name><name>Key</name><argument_list type="generic">&lt;<argument><name>Microtask</name></argument>&gt;</argument_list></name></type> <name>microtaskKeyUnderChallenge</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>private</specifier> <type><name>String</name></type> <name>challengeeWorkerId</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>private</specifier> <type><name>String</name></type> <name>challengerWorkerId</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>private</specifier> <type><name>String</name></type> <name>challengeText</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>private</specifier> <type><name><name>Key</name><argument_list type="generic">&lt;<argument><name>Microtask</name></argument>&gt;</argument_list></name></type> <name>reviewKeyUnderChallenge</name></decl>;</decl_stmt>


	<comment type="line">// Default constructor for deserialization</comment>
	<constructor><specifier>private</specifier> <name>ChallengeReview</name><parameter_list>()</parameter_list>
	<block>{
	}</block></constructor>

	<comment type="line">// Constructor for initial construction</comment>
	<constructor><specifier>public</specifier> <name>ChallengeReview</name><parameter_list>( <parameter><decl><type><name>String</name></type> <name>challengeText</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>challengerWorkerId</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>challengeeWorkerId</name></decl></parameter>, <parameter><decl><type><name><name>Key</name><argument_list type="generic">&lt;<argument><name>Microtask</name></argument>&gt;</argument_list></name></type> <name>microtaskKeyUnderChallenge</name></decl></parameter>, <parameter><decl><type><name><name>Key</name><argument_list type="generic">&lt;<argument><name>Microtask</name></argument>&gt;</argument_list></name></type> <name>reviewKeyUnderChallenge</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>functionId</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>projectId</name></decl></parameter>)</parameter_list>
	<block>{
		<expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>projectId</name></expr></argument>,<argument><expr><name>functionId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>submitValue</name></name> 				<operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>challengeText</name></name> 				<operator>=</operator> <name>challengeText</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>challengerWorkerId</name></name>			<operator>=</operator> <name>challengerWorkerId</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>challengeeWorkerId</name></name>			<operator>=</operator> <name>challengeeWorkerId</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>microtaskKeyUnderChallenge</name></name> <operator>=</operator> <name>microtaskKeyUnderChallenge</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>reviewKeyUnderChallenge</name></name>	<operator>=</operator> <name>reviewKeyUnderChallenge</name></expr>;</expr_stmt>

		<decl_stmt><decl><type><name>Microtask</name></type> <name>microtaskUnderChallenge</name> 	<init>= <expr><call><name>ofy</name><argument_list>()</argument_list></call><operator>.</operator><call><name>load</name><argument_list>()</argument_list></call><operator>.</operator><call><name>key</name><argument_list>(<argument><expr><name>microtaskKeyUnderChallenge</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>now</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>Microtask</name></type> <name>reviewUnderChallenge</name>		<init>= <expr><call><name>ofy</name><argument_list>()</argument_list></call><operator>.</operator><call><name>load</name><argument_list>()</argument_list></call><operator>.</operator><call><name>key</name><argument_list>(<argument><expr><name>reviewKeyUnderChallenge</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>now</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>artifact</name></name> <operator>=</operator> <operator>(</operator><name><name>Ref</name><argument_list type="generic">&lt;<argument><name>Artifact</name></argument>&gt;</argument_list></name><operator>)</operator> <call><name><name>Ref</name><operator>.</operator><name>create</name></name><argument_list>(<argument><expr><operator>(</operator><name><name>Key</name><argument_list type="generic">&lt;<argument><name>Artifact</name></argument>&gt;</argument_list></name><operator>)</operator> <call><name><name>microtaskUnderChallenge</name><operator>.</operator><name>getOwningArtifact</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getKey</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"micrtoask created"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ofy</name><argument_list>()</argument_list></call><operator>.</operator><call><name>save</name><argument_list>()</argument_list></call><operator>.</operator><call><name>entity</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>now</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name><name>FirebaseService</name><operator>.</operator><name>writeMicrotaskCreated</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>ChallengeReviewInFirebase</name><argument_list>(
				<argument><expr><name>id</name></expr></argument>,
				<argument><expr><call><name><name>this</name><operator>.</operator><name>microtaskTitle</name></name><argument_list>()</argument_list></call></expr></argument>,
				<argument><expr><call><name><name>this</name><operator>.</operator><name>microtaskName</name></name><argument_list>()</argument_list></call></expr></argument>,
				<argument><expr><call><name><name>this</name><operator>.</operator><name>artifact</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getName</name><argument_list>()</argument_list></call></expr></argument>,
				<argument><expr><call><name><name>this</name><operator>.</operator><name>artifact</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getId</name><argument_list>()</argument_list></call></expr></argument>,
				<argument><expr><name>functionId</name></expr></argument>,
				<argument><expr><name>submitValue</name></expr></argument>,
				<argument><expr><name><name>this</name><operator>.</operator><name>challengeText</name></name></expr></argument>,
				<argument><expr><name>microtaskKeyUnderChallenge</name></expr></argument>
				)</argument_list></call></expr></argument>,
				<argument><expr><call><name><name>Microtask</name><operator>.</operator><name>keyToString</name></name><argument_list>(<argument><expr><call><name><name>this</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
				<argument><expr><name>projectId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="line">// send feedback</comment>
		<decl_stmt><decl><type><name>String</name></type> <name>udpatedData</name><init>=<expr><literal type="string">"{\"challengeStatus\": \"inProgress\", \"canBeChallenged\": false}"</literal></expr></init></decl>;</decl_stmt>
    	<expr_stmt><expr><call><name><name>FirebaseService</name><operator>.</operator><name>updateNewsfeed</name></name><argument_list>(
    			<argument><expr><name>challengeeWorkerId</name></expr></argument>,
    			<argument><expr><name>udpatedData</name></expr></argument>,
    			<argument><expr><call><name><name>Microtask</name><operator>.</operator><name>keyToString</name></name><argument_list>(<argument><expr><name>reviewKeyUnderChallenge</name></expr></argument>)</argument_list></call></expr></argument>,
    			<argument><expr><name>projectId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    	<expr_stmt><expr><call><name><name>FirebaseService</name><operator>.</operator><name>updateNewsfeed</name></name><argument_list>(
    			<argument><expr><name>challengerWorkerId</name></expr></argument>,
    			<argument><expr><name>udpatedData</name></expr></argument>,
    			<argument><expr><call><name><name>Microtask</name><operator>.</operator><name>keyToString</name></name><argument_list>(<argument><expr><name>microtaskKeyUnderChallenge</name></expr></argument>)</argument_list></call></expr></argument>,
    			<argument><expr><name>projectId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name><name>FirebaseService</name><operator>.</operator><name>writeWorkerNotification</name></name><argument_list>(
				<argument><expr><operator>new</operator> <call><name>ChallengeNotificationInFirebase</name><argument_list>(
						<argument><expr><literal type="string">"challenge.inProgress"</literal></expr></argument>,
						<argument><expr><call><name><name>Microtask</name><operator>.</operator><name>keyToString</name></name><argument_list>(<argument><expr><name>reviewKeyUnderChallenge</name></expr></argument>)</argument_list></call></expr></argument>,
						<argument><expr><call><name><name>microtaskUnderChallenge</name><operator>.</operator><name>microtaskName</name></name><argument_list>()</argument_list></call></expr></argument>,
						<argument><expr><call><name><name>microtaskUnderChallenge</name><operator>.</operator><name>getOwningArtifact</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getName</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
				<argument><expr><name>challengeeWorkerId</name></expr></argument>,
				<argument><expr><name>projectId</name></expr></argument>
		)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name><name>HistoryLog</name><operator>.</operator><name>Init</name></name><argument_list>(<argument><expr><name>projectId</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>addEvent</name><argument_list>(<argument><expr><operator>new</operator> <call><name>MicrotaskSpawned</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></constructor>

    <function><specifier>public</specifier> <type><name>Microtask</name></type> <name>copy</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>projectId</name></decl></parameter>,<parameter><decl><type><name>Long</name></type> <name>functionId</name></decl></parameter>)</parameter_list>
    <block>{
    	<return>return <expr><operator>new</operator> <call><name>ChallengeReview</name><argument_list>( <argument><expr><name><name>this</name><operator>.</operator><name>challengeText</name></name></expr></argument>, <argument><expr><name><name>this</name><operator>.</operator><name>challengerWorkerId</name></name></expr></argument>, <argument><expr><name><name>this</name><operator>.</operator><name>challengeeWorkerId</name></name></expr></argument>, <argument><expr><name><name>this</name><operator>.</operator><name>microtaskKeyUnderChallenge</name></name></expr></argument>, <argument><expr><name><name>this</name><operator>.</operator><name>reviewKeyUnderChallenge</name></name></expr></argument>, <argument><expr><name><name>this</name><operator>.</operator><name>functionId</name></name></expr></argument>, <argument><expr><name><name>this</name><operator>.</operator><name>projectId</name></name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

	<function><specifier>protected</specifier> <type><name>void</name></type> <name>doSubmitWork</name><parameter_list>(<parameter><decl><type><name>DTO</name></type> <name>dto</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>workerID</name></decl></parameter>)</parameter_list>
	<block>{
		<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"submitting"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<decl_stmt><decl><type><name>ChallengeReviewDTO</name></type> <name>challengeDTO</name> <init>= <expr><operator>(</operator><name>ChallengeReviewDTO</name><operator>)</operator> <name>dto</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>Microtask</name></type> <name>microtaskUnderChallenge</name> <init>= <expr><call><name>ofy</name><argument_list>()</argument_list></call><operator>.</operator><call><name>load</name><argument_list>()</argument_list></call><operator>.</operator><call><name>key</name><argument_list>(<argument><expr><name>microtaskKeyUnderChallenge</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>now</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>Microtask</name></type> <name>reviewUnderChallenge</name> <init>= <expr><call><name>ofy</name><argument_list>()</argument_list></call><operator>.</operator><call><name>load</name><argument_list>()</argument_list></call><operator>.</operator><call><name>key</name><argument_list>(<argument><expr><name>reviewKeyUnderChallenge</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>now</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

		<decl_stmt><decl><type><name>String</name></type> <name>challengerResult</name> <init>= <expr><ternary><condition><expr><name><name>challengeDTO</name><operator>.</operator><name>isChallengeWon</name></name></expr> ?</condition><then> <expr><literal type="string">"won"</literal></expr> </then><else>: <expr><literal type="string">"lost"</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>String</name></type> <name>challengeeResult</name> <init>= <expr><ternary><condition><expr><name><name>challengeDTO</name><operator>.</operator><name>isChallengeWon</name></name></expr> ?</condition><then> <expr><literal type="string">"lost"</literal></expr> </then><else>: <expr><literal type="string">"won"</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>


		<comment type="line">// send feedback</comment>
    	<expr_stmt><expr><call><name><name>FirebaseService</name><operator>.</operator><name>postToNewsfeed</name></name><argument_list>(<argument><expr><name>workerID</name></expr></argument>, <argument><expr><operator>(</operator>
    		<operator>new</operator> <call><name>NewsItemInFirebase</name><argument_list>(
        		<argument><expr><name><name>this</name><operator>.</operator><name>submitValue</name></name></expr></argument>,
    			<argument><expr><name><name>this</name><operator>.</operator><name>submitValue</name></name></expr></argument>,
    			<argument><expr><call><name><name>this</name><operator>.</operator><name>microtaskName</name></name><argument_list>()</argument_list></call></expr></argument>,
				<argument><expr><literal type="string">"Challenge Reviewed"</literal></expr></argument>,
				<argument><expr><call><name><name>Microtask</name><operator>.</operator><name>keyToString</name></name><argument_list>(<argument><expr><call><name><name>this</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
				<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>,
				<argument><expr><literal type="string">"none"</literal></expr></argument>,
				<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call>
	    	<operator>)</operator><operator>.</operator><call><name>json</name><argument_list>()</argument_list></call></expr></argument>,
	    	<argument><expr><call><name><name>Microtask</name><operator>.</operator><name>keyToString</name></name><argument_list>(<argument><expr><name>reviewKeyUnderChallenge</name></expr></argument>)</argument_list></call></expr></argument>,
    		<argument><expr><name>projectId</name></expr></argument>
	    )</argument_list></call></expr>;</expr_stmt>
    	<decl_stmt><decl><type><name>String</name></type> <name>challengeeUpdatedData</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>String</name></type> <name>challengerUpdatedData</name></decl>;</decl_stmt>
    	<if>if<condition>(<expr><name><name>challengeDTO</name><operator>.</operator><name>isChallengeWon</name></name></expr>)</condition><then><block>{
			<expr_stmt><expr><name>challengeeUpdatedData</name><operator>=</operator><literal type="string">"{\"challengeStatus\": \"lost\", \"awardedPoints\": \"0\"}"</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>challengerUpdatedData</name><operator>=</operator><literal type="string">"{\"challengeStatus\": \"won\", \"awardedPoints\": \""</literal><operator>+</operator><name><name>microtaskUnderChallenge</name><operator>.</operator><name>submitValue</name></name><operator>+</operator><literal type="string">"\"}"</literal></expr>;</expr_stmt>
    	}</block></then>
    	<else>else
    	<block>{
    		<expr_stmt><expr><name>challengeeUpdatedData</name><operator>=</operator><literal type="string">"{\"challengeStatus\": \"won\", \"awardedPoints\": \""</literal><operator>+</operator><call><name><name>reviewUnderChallenge</name><operator>.</operator><name>getSubmitValue</name></name><argument_list>()</argument_list></call><operator>+</operator><literal type="string">"\"}"</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>challengerUpdatedData</name><operator>=</operator><literal type="string">"{\"challengeStatus\": \"lost\", \"awardedPoints\": \"0\"}"</literal></expr>;</expr_stmt>
    	}</block></else></if>

    	<expr_stmt><expr><call><name><name>FirebaseService</name><operator>.</operator><name>updateNewsfeed</name></name><argument_list>(
    			<argument><expr><name>challengeeWorkerId</name></expr></argument>,
    			<argument><expr><name>challengeeUpdatedData</name></expr></argument>,
    			<argument><expr><call><name><name>Microtask</name><operator>.</operator><name>keyToString</name></name><argument_list>(<argument><expr><name>reviewKeyUnderChallenge</name></expr></argument>)</argument_list></call></expr></argument>,
    			<argument><expr><name>projectId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    	<expr_stmt><expr><call><name><name>FirebaseService</name><operator>.</operator><name>updateNewsfeed</name></name><argument_list>(
    			<argument><expr><name>challengerWorkerId</name></expr></argument>,
    			<argument><expr><name>challengerUpdatedData</name></expr></argument>,
    			<argument><expr><call><name><name>Microtask</name><operator>.</operator><name>keyToString</name></name><argument_list>(<argument><expr><name>microtaskKeyUnderChallenge</name></expr></argument>)</argument_list></call></expr></argument>,
    			<argument><expr><name>projectId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


    	<comment type="line">// send notification</comment>
		<expr_stmt><expr><call><name><name>FirebaseService</name><operator>.</operator><name>writeWorkerNotification</name></name><argument_list>(
				<argument><expr><operator>new</operator> <call><name>ChallengeNotificationInFirebase</name><argument_list>(
						<argument><expr><literal type="string">"challenge."</literal><operator>+</operator><name>challengeeResult</name></expr></argument>,
						<argument><expr><call><name><name>Microtask</name><operator>.</operator><name>keyToString</name></name><argument_list>(<argument><expr><name>reviewKeyUnderChallenge</name></expr></argument>)</argument_list></call></expr></argument>,
						<argument><expr><call><name><name>reviewUnderChallenge</name><operator>.</operator><name>microtaskName</name></name><argument_list>()</argument_list></call></expr></argument>,
						<argument><expr><call><name><name>reviewUnderChallenge</name><operator>.</operator><name>getOwningArtifact</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getName</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
				<argument><expr><name>challengeeWorkerId</name></expr></argument>,
				<argument><expr><name>projectId</name></expr></argument>
		)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>FirebaseService</name><operator>.</operator><name>writeWorkerNotification</name></name><argument_list>(
				 <argument><expr><operator>new</operator> <call><name>ChallengeNotificationInFirebase</name><argument_list>(
							<argument><expr><literal type="string">"challenge."</literal><operator>+</operator><name>challengerResult</name></expr></argument>,
							<argument><expr><call><name><name>Microtask</name><operator>.</operator><name>keyToString</name></name><argument_list>(<argument><expr><name>microtaskKeyUnderChallenge</name></expr></argument>)</argument_list></call></expr></argument>,
							<argument><expr><call><name><name>microtaskUnderChallenge</name><operator>.</operator><name>microtaskName</name></name><argument_list>()</argument_list></call></expr></argument>,
							<argument><expr><call><name><name>microtaskUnderChallenge</name><operator>.</operator><name>getOwningArtifact</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getName</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
				<argument><expr><name>challengerWorkerId</name></expr></argument>,
				<argument><expr><name>projectId</name></expr></argument>
		)</argument_list></call></expr>;</expr_stmt>

		<comment type="line">// increase the stats counter</comment>
		<comment type="line">//WorkerCommand.increaseStat(workerID, "reviews",1);</comment>

	}</block></function>

    <function><specifier>public</specifier> <type><name><name>Key</name><argument_list type="generic">&lt;<argument><name>Microtask</name></argument>&gt;</argument_list></name></type> <name>getKey</name><parameter_list>()</parameter_list>
	<block>{
		<return>return <expr><call><name><name>Key</name><operator>.</operator><name>create</name></name><argument_list>( <argument><expr><call><name><name>artifact</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>Microtask</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><name><name>this</name><operator>.</operator><name>id</name></name></expr></argument> )</argument_list></call></expr>;</return>
	}</block></function>

	<function><specifier>protected</specifier> <type><name>Class</name></type> <name>getDTOClass</name><parameter_list>()</parameter_list>
	<block>{
		<return>return <expr><name><name>ChallengeReviewDTO</name><operator>.</operator><name>class</name></name></expr>;</return>
	}</block></function>

	<function><specifier>public</specifier> <type><name><name>Key</name><argument_list type="generic">&lt;<argument><name>Microtask</name></argument>&gt;</argument_list></name></type> <name>getMicrotaskUnderChallengeKey</name><parameter_list>()</parameter_list>
	<block>{
		<return>return <expr><name>microtaskKeyUnderChallenge</name></expr>;</return>
	}</block></function>



	<function><specifier>public</specifier> <type><name>Artifact</name></type> <name>getOwningArtifact</name><parameter_list>()</parameter_list>
	<block>{
		<decl_stmt><decl><type><name>Artifact</name></type> <name>owning</name></decl>;</decl_stmt>
		<try>try <block>{
			<return>return <expr><call><name><name>artifact</name><operator>.</operator><name>safe</name></name><argument_list>()</argument_list></call></expr>;</return>
		}</block> <catch>catch <parameter_list>( <parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter> )</parameter_list><block>{
			<expr_stmt><expr><call><name>ofy</name><argument_list>()</argument_list></call><operator>.</operator><call><name>load</name><argument_list>()</argument_list></call><operator>.</operator><call><name>ref</name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>artifact</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><call><name><name>artifact</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr>;</return>
		}</block></catch></try>
	}</block></function>

	<function><specifier>public</specifier> <type><name>String</name></type> <name>microtaskTitle</name><parameter_list>()</parameter_list>
	<block>{
		<return>return <expr><literal type="string">"Challenge Review"</literal></expr>;</return>
	}</block></function>

	<function><specifier>public</specifier> <type><name>String</name></type> <name>microtaskDescription</name><parameter_list>()</parameter_list>
	<block>{
		<return>return <expr><literal type="string">"challenge a submitted review"</literal></expr>;</return>
	}</block></function>

}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="CrowdCode-com/crowdcoding/entities/microtasks/DescribeFunctionBehavior.java" hash="9d031d44fda3a318ae8b40ab0cb35b60b3ccf608"><package>package <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>entities</name><operator>.</operator><name>microtasks</name></name>;</package>

<import>import static <name><name>com</name><operator>.</operator><name>googlecode</name><operator>.</operator><name>objectify</name><operator>.</operator><name>ObjectifyService</name><operator>.</operator><name>ofy</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>commands</name><operator>.</operator><name>WorkerCommand</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>dto</name><operator>.</operator><name>DTO</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>dto</name><operator>.</operator><name>ajax</name><operator>.</operator><name>microtask</name><operator>.</operator><name>submission</name><operator>.</operator><name>DescribeFunctionBehaviorDTO</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>dto</name><operator>.</operator><name>ajax</name><operator>.</operator><name>microtask</name><operator>.</operator><name>submission</name><operator>.</operator><name>TestDisputedDTO</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>dto</name><operator>.</operator><name>firebase</name><operator>.</operator><name>microtasks</name><operator>.</operator><name>DescribeFunctionBehaviourInFirebase</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>entities</name><operator>.</operator><name>Project</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>entities</name><operator>.</operator><name>artifacts</name><operator>.</operator><name>Artifact</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>entities</name><operator>.</operator><name>artifacts</name><operator>.</operator><name>Function</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>entities</name><operator>.</operator><name>artifacts</name><operator>.</operator><name>Test</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>history</name><operator>.</operator><name>HistoryLog</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>history</name><operator>.</operator><name>MicrotaskSpawned</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>util</name><operator>.</operator><name>FirebaseService</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>appengine</name><operator>.</operator><name>labs</name><operator>.</operator><name>repackaged</name><operator>.</operator><name>org</name><operator>.</operator><name>json</name><operator>.</operator><name>JSONException</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>appengine</name><operator>.</operator><name>labs</name><operator>.</operator><name>repackaged</name><operator>.</operator><name>org</name><operator>.</operator><name>json</name><operator>.</operator><name>JSONObject</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>googlecode</name><operator>.</operator><name>objectify</name><operator>.</operator><name>Key</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>googlecode</name><operator>.</operator><name>objectify</name><operator>.</operator><name>Ref</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>googlecode</name><operator>.</operator><name>objectify</name><operator>.</operator><name>annotation</name><operator>.</operator><name>Subclass</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>googlecode</name><operator>.</operator><name>objectify</name><operator>.</operator><name>annotation</name><operator>.</operator><name>Load</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>googlecode</name><operator>.</operator><name>objectify</name><operator>.</operator><name>annotation</name><operator>.</operator><name>Parent</name></name>;</import>

<class><annotation>@<name>Subclass</name><argument_list>(<argument><expr><name>index</name><operator>=</operator><literal type="boolean">true</literal></expr></argument>)</argument_list></annotation>
<specifier>public</specifier> class <name>DescribeFunctionBehavior</name> <super><extends>extends <name>Microtask</name></extends></super>
<block>{
	<enum><specifier>public</specifier> enum <name>PromptType</name> <block>{ <decl><name>WRITE</name></decl>, <decl><name>CORRECT</name></decl>, <decl><name>FUNCTION_CHANGED</name></decl>, <decl><name>CALLEE_CHANGED</name></decl>, <decl><name>ADT_CHANGED</name></decl> }</block></enum><empty_stmt>;</empty_stmt>

	<decl_stmt><decl><annotation>@<name>Parent</name></annotation> <annotation>@<name>Load</name></annotation> <type><name><name>Ref</name><argument_list type="generic">&lt;<argument><name>Function</name></argument>&gt;</argument_list></name></type> <name>functionRef</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>private</specifier> <type><name>Long</name></type> <name>functionId</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>private</specifier> <type><name>String</name></type> <name>functionName</name></decl>;</decl_stmt>

	<decl_stmt><decl><specifier>private</specifier> <type><name>PromptType</name></type> <name>promptType</name></decl>;</decl_stmt>

	<comment type="line">//Data for FUNCTION_CHANGED</comment>
	<decl_stmt><decl><specifier>private</specifier> <type><name>int</name></type> <name>oldFunctionVersion</name></decl>;</decl_stmt>

	<comment type="line">//Data for ADT_CHANGED</comment>
	<decl_stmt><decl><specifier>private</specifier> <type><name>int</name></type> <name>oldADTVersion</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>private</specifier> <type><name>long</name></type> <name>ADTId</name></decl>;</decl_stmt>

	<comment type="line">// Data for CORRECT</comment>
	<decl_stmt><decl><specifier>private</specifier> <type><name><name>List</name><argument_list type="generic">&lt;<argument><name>TestDisputedDTO</name></argument>&gt;</argument_list></name></type> <name>disputedTests</name></decl>;</decl_stmt>    <comment type="line">// Description of the problem with the test case</comment>
	

	<comment type="line">//Data for CALLEE_CHANGED</comment>
	<decl_stmt><decl><specifier>private</specifier> <type><name>int</name></type> <name>oldCalleeVersion</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>private</specifier> <type><name>long</name></type> <name>calleeId</name></decl>;</decl_stmt>


	<comment type="line">// Default constructor for deserialization</comment>
	<constructor><specifier>private</specifier> <name>DescribeFunctionBehavior</name><parameter_list>()</parameter_list>
	<block>{
	}</block></constructor>
		
	<comment type="line">// Constructor for WRITE Prompt Type for write a new behaviour and test of a function</comment>
	<constructor><specifier>public</specifier> <name>DescribeFunctionBehavior</name><parameter_list>(<parameter><decl><type><name><name>Ref</name><argument_list type="generic">&lt;<argument><name>Function</name></argument>&gt;</argument_list></name></type> <name>Function</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>functionId</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>functionName</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>projectId</name></decl></parameter> )</parameter_list>
	<block>{
		<expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>projectId</name></expr></argument>,<argument><expr><name>functionId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>promptType</name></name>	  <operator>=</operator> <name><name>PromptType</name><operator>.</operator><name>WRITE</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>describeFunctionBehavior</name><argument_list>( <argument><expr><name>Function</name></expr></argument>, <argument><expr><name>functionId</name></expr></argument>, <argument><expr><name>functionName</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

	}</block></constructor>

	<comment type="line">// Constructor for FUNCTION_CHANGED Prompt Type for ask to edit the test code on a change of a function signature</comment>
	<constructor><specifier>public</specifier> <name>DescribeFunctionBehavior</name><parameter_list>(<parameter><decl><type><name><name>Ref</name><argument_list type="generic">&lt;<argument><name>Function</name></argument>&gt;</argument_list></name></type> <name>Function</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>functionId</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>functionName</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>oldFunctionVersion</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>projectId</name></decl></parameter>)</parameter_list>
	<block>{
		<expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>projectId</name></expr></argument>,<argument><expr><name>functionId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>promptType</name></name>	  		<operator>=</operator> <name><name>PromptType</name><operator>.</operator><name>FUNCTION_CHANGED</name></name></expr>;</expr_stmt>

		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>oldFunctionVersion</name></name> <operator>=</operator> <name>oldFunctionVersion</name></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>describeFunctionBehavior</name><argument_list>( <argument><expr><name>Function</name></expr></argument>, <argument><expr><name>functionId</name></expr></argument>, <argument><expr><name>functionName</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

	}</block></constructor>
	<comment type="line">// Constructor for ADT_CHANGED Prompt Type for ask to edit the test code on a change of a ADT Structure</comment>
	<constructor><specifier>public</specifier> <name>DescribeFunctionBehavior</name><parameter_list>(<parameter><decl><type><name><name>Ref</name><argument_list type="generic">&lt;<argument><name>Function</name></argument>&gt;</argument_list></name></type> <name>Function</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>functionId</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>functionName</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>oldADTVersion</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>ADTId</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>projectId</name></decl></parameter>)</parameter_list>
	<block>{
		<expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>projectId</name></expr></argument>, <argument><expr><name>functionId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>promptType</name></name>	  	<operator>=</operator> <name><name>PromptType</name><operator>.</operator><name>ADT_CHANGED</name></name></expr>;</expr_stmt>

		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>oldADTVersion</name></name> 	<operator>=</operator> <name>oldADTVersion</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>ADTId</name></name>			<operator>=</operator> <name>ADTId</name></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>describeFunctionBehavior</name><argument_list>( <argument><expr><name>Function</name></expr></argument>, <argument><expr><name>functionId</name></expr></argument>, <argument><expr><name>functionName</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

	}</block></constructor>
	<comment type="line">// Constructor for CORRECT Prompt Type for ask to edit the test when has been issued</comment>
	<constructor><specifier>public</specifier> <name>DescribeFunctionBehavior</name><parameter_list>(<parameter><decl><type><name><name>Ref</name><argument_list type="generic">&lt;<argument><name>Function</name></argument>&gt;</argument_list></name></type> <name>Function</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>functionId</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>functionName</name></decl></parameter>, <parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>TestDisputedDTO</name></argument>&gt;</argument_list></name></type> <name>disputedTests</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>projectId</name></decl></parameter>)</parameter_list>
	<block>{
		<expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>projectId</name></expr></argument>,<argument><expr><name>functionId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>promptType</name></name>			<operator>=</operator> <name><name>PromptType</name><operator>.</operator><name>CORRECT</name></name></expr>;</expr_stmt>

		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>disputedTests</name></name> 	<operator>=</operator> <name>disputedTests</name></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>describeFunctionBehavior</name><argument_list>( <argument><expr><name>Function</name></expr></argument>, <argument><expr><name>functionId</name></expr></argument>, <argument><expr><name>functionName</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
	}</block></constructor>

	<comment type="line">// Constructor for CALLEE CHANGED Promp</comment>
	<constructor><specifier>public</specifier> <name>DescribeFunctionBehavior</name><parameter_list>(<parameter><decl><type><name><name>Ref</name><argument_list type="generic">&lt;<argument><name>Function</name></argument>&gt;</argument_list></name></type> <name>Function</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>functionId</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>functionName</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>calleeId</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>oldCalleeVersion</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>projectId</name></decl></parameter>)</parameter_list>
	<block>{
		<expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>projectId</name></expr></argument>,<argument><expr><name>functionId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>promptType</name></name>			<operator>=</operator> <name><name>PromptType</name><operator>.</operator><name>CALLEE_CHANGED</name></name></expr>;</expr_stmt>

		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>calleeId</name></name> 			<operator>=</operator> <name>calleeId</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>oldCalleeVersion</name></name>	<operator>=</operator> <name>oldCalleeVersion</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>describeFunctionBehavior</name><argument_list>( <argument><expr><name>Function</name></expr></argument>, <argument><expr><name>functionId</name></expr></argument>, <argument><expr><name>functionName</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
	}</block></constructor>

	<function><specifier>private</specifier> <type><name>void</name></type> <name>describeFunctionBehavior</name><parameter_list>(<parameter><decl><type><name><name>Ref</name><argument_list type="generic">&lt;<argument><name>Function</name></argument>&gt;</argument_list></name></type> <name>Function</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>functionId</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>functionName</name></decl></parameter> )</parameter_list>
	<block>{
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>functionId</name></name>   <operator>=</operator> <name>functionId</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>functionName</name></name> <operator>=</operator> <name>functionName</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>functionRef</name></name> <operator>=</operator> <name>Function</name></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>ofy</name><argument_list>()</argument_list></call><operator>.</operator><call><name>save</name><argument_list>()</argument_list></call><operator>.</operator><call><name>entity</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>now</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>FirebaseService</name><operator>.</operator><name>writeMicrotaskCreated</name></name><argument_list>(
				<argument><expr><operator>new</operator> <call><name>DescribeFunctionBehaviourInFirebase</name><argument_list>(
						<argument><expr><name>id</name></expr></argument>,
						<argument><expr><call><name><name>this</name><operator>.</operator><name>microtaskTitle</name></name><argument_list>()</argument_list></call></expr></argument>,
						<argument><expr><call><name><name>this</name><operator>.</operator><name>microtaskName</name></name><argument_list>()</argument_list></call></expr></argument>,
						<argument><expr><name>functionName</name></expr></argument>,
						<argument><expr><name>functionId</name></expr></argument>,
						<argument><expr><name>submitValue</name></expr></argument>,
						<argument><expr><name>functionId</name></expr></argument>,
						<argument><expr><call><name><name>promptType</name><operator>.</operator><name>name</name></name><argument_list>()</argument_list></call></expr></argument>,
						<argument><expr><name>oldFunctionVersion</name></expr></argument>,
						<argument><expr><name>oldADTVersion</name></expr></argument>,
						<argument><expr><name>ADTId</name></expr></argument>,
						<argument><expr><name>disputedTests</name></expr></argument>,
						<argument><expr><name>calleeId</name></expr></argument>,
						<argument><expr><name>oldCalleeVersion</name></expr></argument>)</argument_list></call></expr></argument>,
				<argument><expr><call><name><name>Microtask</name><operator>.</operator><name>keyToString</name></name><argument_list>(<argument><expr><call><name><name>this</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
				<argument><expr><name>projectId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name><name>HistoryLog</name><operator>.</operator><name>Init</name></name><argument_list>(<argument><expr><name>projectId</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>addEvent</name><argument_list>(<argument><expr><operator>new</operator> <call><name>MicrotaskSpawned</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	}</block></function>
	
	<function><specifier>public</specifier> <type><name>Microtask</name></type> <name>copy</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>projectId</name></decl></parameter>)</parameter_list>
	<block>{
		<switch>switch <condition>(<expr><name>promptType</name></expr>)</condition> <block>{
			<case>case <expr><name>WRITE</name></expr>:</case>
				<return>return <expr><operator>new</operator> <call><name>DescribeFunctionBehavior</name><argument_list>( <argument><expr><name><name>this</name><operator>.</operator><name>functionRef</name></name></expr></argument>, <argument><expr><name><name>this</name><operator>.</operator><name>functionId</name></name></expr></argument>, <argument><expr><name><name>this</name><operator>.</operator><name>functionName</name></name></expr></argument>, <argument><expr><name><name>this</name><operator>.</operator><name>projectId</name></name></expr></argument>)</argument_list></call></expr>;</return>
			<case>case <expr><name>FUNCTION_CHANGED</name></expr>:</case>
				<return>return <expr><operator>new</operator> <call><name>DescribeFunctionBehavior</name><argument_list>( <argument><expr><name><name>this</name><operator>.</operator><name>functionRef</name></name></expr></argument>, <argument><expr><name><name>this</name><operator>.</operator><name>functionId</name></name></expr></argument>, <argument><expr><name><name>this</name><operator>.</operator><name>functionName</name></name></expr></argument>, <argument><expr><name><name>this</name><operator>.</operator><name>oldFunctionVersion</name></name></expr></argument>, <argument><expr><name><name>this</name><operator>.</operator><name>projectId</name></name></expr></argument>)</argument_list></call></expr>;</return>
			<case>case <expr><name>ADT_CHANGED</name></expr>:</case>
				<return>return <expr><operator>new</operator> <call><name>DescribeFunctionBehavior</name><argument_list>( <argument><expr><name><name>this</name><operator>.</operator><name>functionRef</name></name></expr></argument>, <argument><expr><name><name>this</name><operator>.</operator><name>functionId</name></name></expr></argument>, <argument><expr><name><name>this</name><operator>.</operator><name>functionName</name></name></expr></argument>, <argument><expr><name><name>this</name><operator>.</operator><name>oldADTVersion</name></name></expr></argument>, <argument><expr><name><name>this</name><operator>.</operator><name>ADTId</name></name></expr></argument>, <argument><expr><name><name>this</name><operator>.</operator><name>projectId</name></name></expr></argument>)</argument_list></call></expr>;</return>
			<case>case <expr><name>CORRECT</name></expr>:</case>
				<return>return <expr><operator>new</operator> <call><name>DescribeFunctionBehavior</name><argument_list>( <argument><expr><name><name>this</name><operator>.</operator><name>functionRef</name></name></expr></argument>, <argument><expr><name><name>this</name><operator>.</operator><name>functionId</name></name></expr></argument>, <argument><expr><name><name>this</name><operator>.</operator><name>functionName</name></name></expr></argument>, <argument><expr><name><name>this</name><operator>.</operator><name>disputedTests</name></name></expr></argument>, <argument><expr><name><name>this</name><operator>.</operator><name>projectId</name></name></expr></argument>)</argument_list></call></expr>;</return>
			<default>default:</default>
				
				<return>return <expr><literal type="null">null</literal></expr>;</return>
		}</block></switch>
	}</block></function>

	<function><specifier>public</specifier> <type><name><name>Key</name><argument_list type="generic">&lt;<argument><name>Microtask</name></argument>&gt;</argument_list></name></type> <name>getKey</name><parameter_list>()</parameter_list>
	<block>{
		<return>return <expr><call><name><name>Key</name><operator>.</operator><name>create</name></name><argument_list>( <argument><expr><call><name><name>this</name><operator>.</operator><name>functionRef</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>Microtask</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><name><name>this</name><operator>.</operator><name>id</name></name></expr></argument> )</argument_list></call></expr>;</return>
	}</block></function>


	<function><specifier>protected</specifier> <type><name>void</name></type> <name>doSubmitWork</name><parameter_list>(<parameter><decl><type><name>DTO</name></type> <name>dto</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>workerId</name></decl></parameter>)</parameter_list>
	<block>{
		<decl_stmt><decl><type><name>Function</name></type> <name>function</name><init>= <expr><call><name><name>functionRef</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>function</name><operator>.</operator><name>describeFunctionBehaviorCompleted</name></name><argument_list>(<argument><expr><operator>(</operator><name>DescribeFunctionBehaviorDTO</name><operator>)</operator><name>dto</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name><name>WorkerCommand</name><operator>.</operator><name>awardPoints</name></name><argument_list>(<argument><expr><name>workerId</name></expr></argument>, <argument><expr><name><name>this</name><operator>.</operator><name>submitValue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<comment type="line">//		// increase the stats counter</comment>
		<expr_stmt><expr><call><name><name>WorkerCommand</name><operator>.</operator><name>increaseStat</name></name><argument_list>(<argument><expr><name>workerId</name></expr></argument>, <argument><expr><literal type="string">"describe_behavior"</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>
	<function><specifier>public</specifier> <type><name>Artifact</name></type> <name>getOwningArtifact</name><parameter_list>()</parameter_list>
	<block>{
		<try>try <block>{
			<return>return <expr><call><name><name>functionRef</name><operator>.</operator><name>safe</name></name><argument_list>()</argument_list></call></expr>;</return>
		}</block> <catch>catch <parameter_list>( <parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter> )</parameter_list><block>{
			<expr_stmt><expr><call><name>ofy</name><argument_list>()</argument_list></call><operator>.</operator><call><name>load</name><argument_list>()</argument_list></call><operator>.</operator><call><name>ref</name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>functionRef</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><call><name><name>functionRef</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr>;</return>
		}</block></catch></try>
	}</block></function>

	<function><specifier>protected</specifier> <type><name>Class</name></type> <name>getDTOClass</name><parameter_list>()</parameter_list>
	<block>{
		<return>return <expr><name><name>DescribeFunctionBehaviorDTO</name><operator>.</operator><name>class</name></name></expr>;</return>
	}</block></function>

	<function><specifier>public</specifier> <type><name>PromptType</name></type> <name>getPromptType</name><parameter_list>()</parameter_list>
	<block>{
		<return>return <expr><name>promptType</name></expr>;</return>
	}</block></function>

	<function><specifier>public</specifier> <type><name>String</name></type> <name>microtaskTitle</name><parameter_list>()</parameter_list>
	<block>{
		<return>return <expr><literal type="string">"Describe Function Behavior"</literal></expr>;</return>
	}</block></function>

	<function><specifier>public</specifier> <type><name>String</name></type> <name>microtaskDescription</name><parameter_list>()</parameter_list>
	<block>{
		<return>return <expr><literal type="string">"Describe Function Behavior"</literal></expr>;</return>
	}</block></function>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="CrowdCode-com/crowdcoding/servlets/CrowdServlet.java" hash="5298b7ca67de8a667dd6957c94be0045a4173f92"><package>package <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>servlets</name></name>;</package>

<import>import static <name><name>com</name><operator>.</operator><name>googlecode</name><operator>.</operator><name>objectify</name><operator>.</operator><name>ObjectifyService</name><operator>.</operator><name>ofy</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>InputStream</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>PrintWriter</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>text</name><operator>.</operator><name>SimpleDateFormat</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Date</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Enumeration</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashMap</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Iterator</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>LinkedList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ListIterator</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>LinkedBlockingQueue</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>logging</name><operator>.</operator><name>Logger</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>regex</name><operator>.</operator><name>Pattern</name></name>;</import>

<import>import <name><name>javax</name><operator>.</operator><name>servlet</name><operator>.</operator><name>ServletException</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>servlet</name><operator>.</operator><name>http</name><operator>.</operator><name>HttpServlet</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>servlet</name><operator>.</operator><name>http</name><operator>.</operator><name>HttpServletRequest</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>servlet</name><operator>.</operator><name>http</name><operator>.</operator><name>HttpServletResponse</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>commons</name><operator>.</operator><name>fileupload</name><operator>.</operator><name>FileItemIterator</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>commons</name><operator>.</operator><name>fileupload</name><operator>.</operator><name>FileItemStream</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>commons</name><operator>.</operator><name>fileupload</name><operator>.</operator><name>FileUploadException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>commons</name><operator>.</operator><name>fileupload</name><operator>.</operator><name>servlet</name><operator>.</operator><name>ServletFileUpload</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>commons</name><operator>.</operator><name>io</name><operator>.</operator><name>IOUtils</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>commands</name><operator>.</operator><name>Command</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>commands</name><operator>.</operator><name>MicrotaskCommand</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>commands</name><operator>.</operator><name>ProjectCommand</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>commands</name><operator>.</operator><name>FunctionCommand</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>commands</name><operator>.</operator><name>QuestioningCommand</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>entities</name><operator>.</operator><name>Project</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>entities</name><operator>.</operator><name>UserPicture</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>entities</name><operator>.</operator><name>Worker</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>entities</name><operator>.</operator><name>artifacts</name><operator>.</operator><name>ADT</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>entities</name><operator>.</operator><name>artifacts</name><operator>.</operator><name>Artifact</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>entities</name><operator>.</operator><name>artifacts</name><operator>.</operator><name>Function</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>entities</name><operator>.</operator><name>artifacts</name><operator>.</operator><name>Test</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>entities</name><operator>.</operator><name>microtasks</name><operator>.</operator><name>ChallengeReview</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>entities</name><operator>.</operator><name>microtasks</name><operator>.</operator><name>DescribeFunctionBehavior</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>entities</name><operator>.</operator><name>microtasks</name><operator>.</operator><name>Microtask</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>entities</name><operator>.</operator><name>microtasks</name><operator>.</operator><name>Review</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>entities</name><operator>.</operator><name>microtasks</name><operator>.</operator><name>ImplementBehavior</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>entities</name><operator>.</operator><name>questions</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>history</name><operator>.</operator><name>HistoryLog</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>history</name><operator>.</operator><name>MicrotaskDequeued</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>history</name><operator>.</operator><name>MicrotaskDequeuedFromWorkerQueue</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>util</name><operator>.</operator><name>FirebaseService</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>util</name><operator>.</operator><name>Util</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>appengine</name><operator>.</operator><name>api</name><operator>.</operator><name>datastore</name><operator>.</operator><name>Blob</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>appengine</name><operator>.</operator><name>api</name><operator>.</operator><name>images</name><operator>.</operator><name>Image</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>appengine</name><operator>.</operator><name>api</name><operator>.</operator><name>images</name><operator>.</operator><name>ImagesService</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>appengine</name><operator>.</operator><name>api</name><operator>.</operator><name>images</name><operator>.</operator><name>ImagesServiceFactory</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>appengine</name><operator>.</operator><name>api</name><operator>.</operator><name>images</name><operator>.</operator><name>Transform</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>appengine</name><operator>.</operator><name>api</name><operator>.</operator><name>log</name><operator>.</operator><name>LogService</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>appengine</name><operator>.</operator><name>api</name><operator>.</operator><name>log</name><operator>.</operator><name>LogServiceFactory</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>appengine</name><operator>.</operator><name>api</name><operator>.</operator><name>users</name><operator>.</operator><name>User</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>appengine</name><operator>.</operator><name>api</name><operator>.</operator><name>users</name><operator>.</operator><name>UserService</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>appengine</name><operator>.</operator><name>api</name><operator>.</operator><name>users</name><operator>.</operator><name>UserServiceFactory</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>appengine</name><operator>.</operator><name>labs</name><operator>.</operator><name>repackaged</name><operator>.</operator><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>collect</name><operator>.</operator><name>LinkedListMultimap</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>appengine</name><operator>.</operator><name>labs</name><operator>.</operator><name>repackaged</name><operator>.</operator><name>org</name><operator>.</operator><name>json</name><operator>.</operator><name>JSONException</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>appengine</name><operator>.</operator><name>labs</name><operator>.</operator><name>repackaged</name><operator>.</operator><name>org</name><operator>.</operator><name>json</name><operator>.</operator><name>JSONObject</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>googlecode</name><operator>.</operator><name>objectify</name><operator>.</operator><name>Key</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>googlecode</name><operator>.</operator><name>objectify</name><operator>.</operator><name>ObjectifyService</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>googlecode</name><operator>.</operator><name>objectify</name><operator>.</operator><name>Ref</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>googlecode</name><operator>.</operator><name>objectify</name><operator>.</operator><name>VoidWork</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>googlecode</name><operator>.</operator><name>objectify</name><operator>.</operator><name>Work</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>googlecode</name><operator>.</operator><name>objectify</name><operator>.</operator><name>cmd</name><operator>.</operator><name>Query</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>googlecode</name><operator>.</operator><name>objectify</name><operator>.</operator><name>cmd</name><operator>.</operator><name>QueryKeys</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>appengine</name><operator>.</operator><name>api</name><operator>.</operator><name>taskqueue</name><operator>.</operator><name>Queue</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>appengine</name><operator>.</operator><name>api</name><operator>.</operator><name>taskqueue</name><operator>.</operator><name>QueueFactory</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>appengine</name><operator>.</operator><name>api</name><operator>.</operator><name>taskqueue</name><operator>.</operator><name>TaskOptions</name></name>;</import>

<import>import static <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>appengine</name><operator>.</operator><name>api</name><operator>.</operator><name>taskqueue</name><operator>.</operator><name>TaskOptions</name><operator>.</operator><name>Builder</name><operator>.</operator><name>*</name></name>;</import>

<class><annotation>@<name>SuppressWarnings</name><argument_list>(<argument><expr><literal type="string">"serial"</literal></expr></argument>)</argument_list></annotation>
<specifier>public</specifier> class <name>CrowdServlet</name> <super><extends>extends <name>HttpServlet</name></extends></super>
<block>{
	<decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>Class</name></argument>&gt;</argument_list></name></type> <name>microtaskTypes</name> <init>= <expr><operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>Class</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

	<static>static
	<block>{
		<comment type="line">// Must register ALL entities and entity subclasses here.</comment>
		<comment type="line">// And embedded classes are also not registered.</comment>
		<expr_stmt><expr><call><name><name>ObjectifyService</name><operator>.</operator><name>register</name></name><argument_list>(<argument><expr><name><name>Project</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>ObjectifyService</name><operator>.</operator><name>register</name></name><argument_list>(<argument><expr><name><name>Worker</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name><name>ObjectifyService</name><operator>.</operator><name>register</name></name><argument_list>(<argument><expr><name><name>Artifact</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>ObjectifyService</name><operator>.</operator><name>register</name></name><argument_list>(<argument><expr><name><name>Function</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>ObjectifyService</name><operator>.</operator><name>register</name></name><argument_list>(<argument><expr><name><name>Test</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>ObjectifyService</name><operator>.</operator><name>register</name></name><argument_list>(<argument><expr><name><name>ADT</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name><name>ObjectifyService</name><operator>.</operator><name>register</name></name><argument_list>(<argument><expr><name><name>UserPicture</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name><name>ObjectifyService</name><operator>.</operator><name>register</name></name><argument_list>(<argument><expr><name><name>Microtask</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>ObjectifyService</name><operator>.</operator><name>register</name></name><argument_list>(<argument><expr><name><name>Review</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>ObjectifyService</name><operator>.</operator><name>register</name></name><argument_list>(<argument><expr><name><name>ImplementBehavior</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>ObjectifyService</name><operator>.</operator><name>register</name></name><argument_list>(<argument><expr><name><name>DescribeFunctionBehavior</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>ObjectifyService</name><operator>.</operator><name>register</name></name><argument_list>(<argument><expr><name><name>ChallengeReview</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name><name>ObjectifyService</name><operator>.</operator><name>register</name></name><argument_list>(<argument><expr><name><name>Questioning</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>ObjectifyService</name><operator>.</operator><name>register</name></name><argument_list>(<argument><expr><name><name>Question</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>ObjectifyService</name><operator>.</operator><name>register</name></name><argument_list>(<argument><expr><name><name>Answer</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>ObjectifyService</name><operator>.</operator><name>register</name></name><argument_list>(<argument><expr><name><name>Comment</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


	}</block></static>

	<function><specifier>public</specifier> <type><name>void</name></type> <name>doPost</name><parameter_list>(<parameter><decl><type><name>HttpServletRequest</name></type> <name>req</name></decl></parameter>, <parameter><decl><type><name>HttpServletResponse</name></type> <name>resp</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
	<block>{
		<expr_stmt><expr><call><name>doAction</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><name>resp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<function><specifier>public</specifier> <type><name>void</name></type> <name>doGet</name><parameter_list>(<parameter><decl><type><name>HttpServletRequest</name></type> <name>req</name></decl></parameter>, <parameter><decl><type><name>HttpServletResponse</name></type> <name>resp</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
	<block>{
		<expr_stmt><expr><call><name>doAction</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><name>resp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<function><specifier>private</specifier> <type><name>void</name></type> <name>doAction</name><parameter_list>(<parameter><decl><type><name>HttpServletRequest</name></type> <name>req</name></decl></parameter>, <parameter><decl><type><name>HttpServletResponse</name></type> <name>resp</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
	<block>{

		<comment type="line">// retrieve the current user</comment>
		<decl_stmt><decl><type><name>UserService</name></type> <name>userService</name> <init>= <expr><call><name><name>UserServiceFactory</name><operator>.</operator><name>getUserService</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>User</name></type> <name>user</name> <init>= <expr><call><name><name>userService</name><operator>.</operator><name>getCurrentUser</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <if>if<condition>( <expr><call><name><name>req</name><operator>.</operator><name>getParameter</name></name><argument_list>(<argument><expr><literal type="string">"workerId"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr> )</condition><then><block>{
			<decl_stmt><decl><type><name>User</name></type> <name>dummyUser</name> <init>= <expr><operator>new</operator> <call><name>User</name><argument_list>(<argument><expr><call><name><name>req</name><operator>.</operator><name>getParameter</name></name><argument_list>(<argument><expr><literal type="string">"workerId"</literal></expr></argument>)</argument_list></call><operator>+</operator><literal type="string">"@dummy.dm"</literal></expr></argument>,<argument><expr><literal type="string">"dummy"</literal></expr></argument>,<argument><expr><call><name><name>req</name><operator>.</operator><name>getParameter</name></name><argument_list>(<argument><expr><literal type="string">"workerId"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><name>user</name> <operator>=</operator> <name>dummyUser</name></expr>;</expr_stmt>
        }</block></then></if>


<comment type="line">//		Logger log =  Logger.getLogger("LOGGER");</comment>
<comment type="line">//		log.warning("ACTION BLA BLA BLA "+user);</comment>

		<comment type="line">// retrieve the path and split by separator '/'</comment>
		<decl_stmt><decl><type><name>String</name></type>   <name>path</name>    <init>= <expr><call><name><name>req</name><operator>.</operator><name>getPathInfo</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name><name>String</name><index>[]</index></name></type> <name>pathSeg</name> <init>= <expr><call><name><name>path</name><operator>.</operator><name>split</name></name><argument_list>(<argument><expr><literal type="string">"/"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<comment type="line">//System.out.println("Path Requested: "+path);</comment>

		<try>try <block>{
			<comment type="line">// -- PATHS WITHOUT USER AUTHENTICATION</comment>
			 <if>if<condition>( <expr><call><name><name>Pattern</name><operator>.</operator><name>matches</name></name><argument_list>(<argument><expr><literal type="string">"/"</literal></expr></argument>,<argument><expr><name>path</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name><name>Pattern</name><operator>.</operator><name>matches</name></name><argument_list>(<argument><expr><literal type="string">"/welcome"</literal></expr></argument>,<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>)</condition><then><block>{
				 <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"DISPATCHING WELCOME PAGE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>req</name><operator>.</operator><name>getRequestDispatcher</name></name><argument_list>(<argument><expr><literal type="string">"/welcome.jsp"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>forward</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><name>resp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			 }</block></then> <elseif>else <if>if<condition>(<expr><call><name><name>Pattern</name><operator>.</operator><name>matches</name></name><argument_list>(<argument><expr><literal type="string">"/user/info"</literal></expr></argument>,<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>)</condition><then><block>{
				<expr_stmt><expr><call><name><name>req</name><operator>.</operator><name>getRequestDispatcher</name></name><argument_list>(<argument><expr><literal type="string">"/userInfo.jsp"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>forward</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><name>resp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			 }</block></then></if></elseif> <elseif>else <if>if<condition>(<expr><call><name><name>Pattern</name><operator>.</operator><name>matches</name></name><argument_list>(<argument><expr><literal type="string">"/worker"</literal></expr></argument>,<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>)</condition><then><block>{
				<expr_stmt><expr><call><name>doExecuteSubmit</name><argument_list>(<argument><expr><name>req</name></expr></argument>,<argument><expr><name>resp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			 }</block></then></if></elseif>

			<comment type="line">// -- PATHS WITHOUT USER AUTHENTICATION</comment>
			 <elseif>else <if>if <condition>( <expr><name>user</name> <operator>!=</operator> <literal type="null">null</literal></expr> )</condition><then> <block>{ <comment type="line">// if the user is authenticated</comment>



				<comment type="line">// USERS URLS</comment>
				<if>if<condition>(<expr><call><name><name>Pattern</name><operator>.</operator><name>matches</name></name><argument_list>(<argument><expr><literal type="string">"/user/[\\w]*"</literal></expr></argument>,<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>)</condition><then><block>{
					<expr_stmt><expr><call><name>doUser</name><argument_list>(<argument><expr><name>req</name></expr></argument>,<argument><expr><name>resp</name></expr></argument>,<argument><expr><name>user</name></expr></argument>,<argument><expr><name>pathSeg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then>
				<comment type="line">// client request</comment>
				<elseif>else <if>if<condition>(<expr><call><name><name>Pattern</name><operator>.</operator><name>matches</name></name><argument_list>(<argument><expr><literal type="string">"/clientRequest"</literal></expr></argument>,<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>)</condition><then><block>{
					<expr_stmt><expr><call><name><name>req</name><operator>.</operator><name>getRequestDispatcher</name></name><argument_list>(<argument><expr><literal type="string">"/clientReq/client_request.html"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>forward</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><name>resp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then></if></elseif>
				<comment type="line">// SUPERADMIN URLS</comment>
				<elseif>else <if>if<condition>(<expr><call><name><name>Pattern</name><operator>.</operator><name>matches</name></name><argument_list>(<argument><expr><literal type="string">"/_admin/[\\w]*"</literal></expr></argument>,<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>)</condition><then><block>{
					<if>if<condition>( <expr><call><name><name>userService</name><operator>.</operator><name>isUserAdmin</name></name><argument_list>()</argument_list></call></expr> )</condition><then><block>{
						<expr_stmt><expr><call><name><name>req</name><operator>.</operator><name>getRequestDispatcher</name></name><argument_list>(<argument><expr><literal type="string">"/SuperAdmin.jsp"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>forward</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><name>resp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></then> <else>else
						<block type="pseudo"><expr_stmt><expr><call><name><name>req</name><operator>.</operator><name>getRequestDispatcher</name></name><argument_list>(<argument><expr><literal type="string">"/404.jsp"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>forward</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><name>resp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>
				}</block></then></if></elseif>
				<comment type="line">// PROJECT URLS match /word/ or /word/(word)*</comment>
				<elseif>else <if>if<condition>(<expr><call><name><name>Pattern</name><operator>.</operator><name>matches</name></name><argument_list>(<argument><expr><literal type="string">"/[\\w]+(/[\\w]*)*"</literal></expr></argument>,<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>)</condition><then><block>{
					<decl_stmt><decl><type><name>String</name></type> <name>projectId</name> <init>= <expr><name><name>pathSeg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

					<expr_stmt><expr><call><name><name>req</name><operator>.</operator><name>setAttribute</name></name><argument_list>(<argument><expr><literal type="string">"project"</literal></expr></argument>, <argument><expr><name>projectId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					<decl_stmt><decl><type><name><name>Key</name><argument_list type="generic">&lt;<argument><name>Project</name></argument>&gt;</argument_list></name></type> <name>projectKey</name> <init>= <expr><call><name><name>Key</name><operator>.</operator><name>create</name></name><argument_list>(<argument><expr><name><name>Project</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><name>projectId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>boolean</name></type> <name>projectExists</name> <init>=  <expr><operator>(</operator><call><name><name>ObjectifyService</name><operator>.</operator><name>ofy</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>load</name><argument_list>()</argument_list></call><operator>.</operator><call><name>filterKey</name><argument_list>(<argument><expr><name>projectKey</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>count</name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="number">0</literal> <operator>)</operator></expr></init></decl>;</decl_stmt>

					<if>if <condition>( <expr><name><name>pathSeg</name><operator>.</operator><name>length</name></name> <operator>&lt;=</operator> <literal type="number">2</literal></expr> )</condition><then><block>{
						<expr_stmt><expr><call><name><name>Worker</name><operator>.</operator><name>Create</name></name><argument_list>( <argument><expr><name>user</name></expr></argument>, <argument><expr><call><name><name>Project</name><operator>.</operator><name>Create</name></name><argument_list>(<argument><expr><name>projectId</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name><name>req</name><operator>.</operator><name>getRequestDispatcher</name></name><argument_list>(<argument><expr><literal type="string">"/clientDist/client.jsp"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>forward</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><name>resp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></then> <elseif>else <if>if<condition>( <expr><name><name>pathSeg</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><literal type="string">"admin"</literal></expr></argument>)</argument_list></call></expr>)</condition><then><block>{
						<if>if<condition>( <expr><call><name><name>userService</name><operator>.</operator><name>isUserAdmin</name></name><argument_list>()</argument_list></call></expr> )</condition><then><block>{
							<expr_stmt><expr><call><name>doAdmin</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><name>resp</name></expr></argument>, <argument><expr><name>projectId</name></expr></argument>, <argument><expr><name>pathSeg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						}</block></then> <else>else
							<block type="pseudo"><expr_stmt><expr><call><name><name>req</name><operator>.</operator><name>getRequestDispatcher</name></name><argument_list>(<argument><expr><literal type="string">"/404.jsp"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>forward</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><name>resp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>
					}</block></then></if></elseif> <elseif>else <if>if<condition>( <expr><name><name>pathSeg</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><literal type="string">"statistics"</literal></expr></argument>)</argument_list></call></expr>)</condition><then><block>{
						<expr_stmt><expr><call><name><name>req</name><operator>.</operator><name>getRequestDispatcher</name></name><argument_list>(<argument><expr><literal type="string">"/statistics/index.jsp"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>forward</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><name>resp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></then></if></elseif> <elseif>else <if>if<condition>(<expr><operator>!</operator><name>projectExists</name></expr>)</condition><then><block>{
						<expr_stmt><expr><call><name><name>req</name><operator>.</operator><name>getRequestDispatcher</name></name><argument_list>(<argument><expr><literal type="string">"/404.jsp"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>forward</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><name>resp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></then></if></elseif> <elseif>else <if>if <condition>(<expr><name><name>pathSeg</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><literal type="string">"ajax"</literal></expr></argument>)</argument_list></call></expr>)</condition><then><block>{
						<expr_stmt><expr><call><name>doAjax</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><name>resp</name></expr></argument>, <argument><expr><name>projectId</name></expr></argument>, <argument><expr><name>user</name></expr></argument>, <argument><expr><name>pathSeg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></then></if></elseif> <elseif>else <if>if <condition>(<expr><name><name>pathSeg</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><literal type="string">"questions"</literal></expr></argument>)</argument_list></call></expr>)</condition><then><block>{
						<expr_stmt><expr><call><name>doQuestioning</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><name>resp</name></expr></argument>, <argument><expr><name>projectId</name></expr></argument>, <argument><expr><name>user</name></expr></argument>, <argument><expr><name>pathSeg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></then></if></elseif> <elseif>else <if>if <condition>(<expr><name><name>pathSeg</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><literal type="string">"code"</literal></expr></argument>)</argument_list></call></expr>)</condition><then><block>{
						<expr_stmt><expr><call><name>renderCode</name><argument_list>(<argument><expr><name>resp</name></expr></argument>, <argument><expr><name>projectId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></then></if></elseif> <elseif>else <if>if <condition>(<expr><name><name>pathSeg</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><literal type="string">"logout"</literal></expr></argument>)</argument_list></call></expr>)</condition><then><block>{
						<expr_stmt><expr><call><name>doLogout</name><argument_list>(<argument><expr><name>req</name></expr></argument>,<argument><expr><name>resp</name></expr></argument>, <argument><expr><name>projectId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></then></if></elseif></if>

				<comment type="line">// NOT FOUND 404 PAGE</comment>
				}</block></then></if></elseif> <else>else <block>{
					<expr_stmt><expr><call><name><name>req</name><operator>.</operator><name>getRequestDispatcher</name></name><argument_list>(<argument><expr><literal type="string">"/404.jsp"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>forward</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><name>resp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></else></if>
			<comment type="line">// LOGIN PAGE</comment>
			}</block></then></if></elseif> <else>else <block>{
				<expr_stmt><expr><call><name><name>resp</name><operator>.</operator><name>sendRedirect</name></name><argument_list>(<argument><expr><call><name><name>userService</name><operator>.</operator><name>createLoginURL</name></name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></else></if>
		}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>ServletException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
			<comment type="line">// TODO Auto-generated catch block</comment>
			<expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		}</block></catch> <catch>catch <parameter_list>(<parameter><decl><type><name>FileUploadException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
			<comment type="line">// TODO Auto-generated catch block</comment>
			<expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		}</block></catch></try>
	}</block></function>

	<function><specifier>private</specifier> <type><name>void</name></type> <name>doUser</name><parameter_list>(<parameter><decl><type><name>HttpServletRequest</name></type> <name>req</name></decl></parameter>, <parameter><decl><type><name>HttpServletResponse</name></type> <name>resp</name></decl></parameter>, <parameter><decl><type><name>User</name></type> <name>user</name></decl></parameter>,
			<parameter><decl><type><specifier>final</specifier> <name><name>String</name><index>[]</index></name></type> <name>pathSeg</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument>, <argument><expr><name>ServletException</name></expr></argument>, <argument><expr><name>FileUploadException</name></expr></argument></throws>
	<block>{


        <if>if<condition>( <expr><name><name>pathSeg</name><operator>.</operator><name>length</name></name> <operator>&gt;=</operator> <literal type="number">3</literal></expr> )</condition><then><block>{
        	<if>if <condition>(<expr><name><name>pathSeg</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><literal type="string">"picture"</literal></expr></argument>)</argument_list></call></expr>)</condition><then><block>{
    			<expr_stmt><expr><call><name>getUserPicture</name><argument_list>(<argument><expr><name>req</name></expr></argument>,<argument><expr><name>resp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    		}</block></then> <elseif>else <if>if <condition>(<expr><name><name>pathSeg</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><literal type="string">"pictureChange"</literal></expr></argument>)</argument_list></call></expr>)</condition><then><block>{
    			<expr_stmt><expr><call><name>changeUserPicture</name><argument_list>(<argument><expr><name>user</name></expr></argument>,<argument><expr><name>req</name></expr></argument>,<argument><expr><name>resp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    		}</block></then></if></elseif> <elseif>else <if>if <condition>(<expr><name><name>pathSeg</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><literal type="string">"info"</literal></expr></argument>)</argument_list></call></expr>)</condition><then><block>{
    			<expr_stmt><expr><call><name>renderJson</name><argument_list>(<argument><expr><name>resp</name></expr></argument>,<argument><expr><literal type="string">"{userId:"</literal><operator>+</operator><call><name><name>user</name><operator>.</operator><name>getUserId</name></name><argument_list>()</argument_list></call><operator>+</operator><literal type="string">",userHandle:"</literal><operator>+</operator><call><name><name>user</name><operator>.</operator><name>getNickname</name></name><argument_list>()</argument_list></call><operator>+</operator><literal type="string">"}"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    		}</block></then></if></elseif></if>
        }</block></then></if>


	}</block></function>

	<function><specifier>private</specifier> <type><name>void</name></type> <name>doAjax</name><parameter_list>(<parameter><decl><type><name>HttpServletRequest</name></type> <name>req</name></decl></parameter>, <parameter><decl><type><name>HttpServletResponse</name></type> <name>resp</name></decl></parameter>,
			<parameter><decl><type><specifier>final</specifier> <name>String</name></type> <name>projectID</name></decl></parameter>, <parameter><decl><type><name>User</name></type> <name>user</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name><name>String</name><index>[]</index></name></type> <name>pathSeg</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument>, <argument><expr><name>FileUploadException</name></expr></argument></throws>
	<block>{
		<if>if <condition>(<expr><name><name>pathSeg</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><literal type="string">"fetch"</literal></expr></argument>)</argument_list></call></expr>)</condition><then><block>{
			<expr_stmt><expr><call><name>doFetchMicrotask</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><name>resp</name></expr></argument>, <argument><expr><name>user</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		}</block></then> <elseif>else <if>if <condition>(<expr><name><name>pathSeg</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><literal type="string">"challengeReview"</literal></expr></argument>)</argument_list></call></expr>)</condition><then><block>{
			<expr_stmt><expr><call><name>doChallengeReview</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><name>resp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if></elseif> <elseif>else <if>if <condition>(<expr><name><name>pathSeg</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><literal type="string">"testResult"</literal></expr></argument>)</argument_list></call></expr>)</condition><then><block>{
			<expr_stmt><expr><call><name>doSubmitTestResult</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><name>resp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if></elseif> <elseif>else <if>if <condition>(<expr><name><name>pathSeg</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><literal type="string">"pickMicrotask"</literal></expr></argument>)</argument_list></call></expr>)</condition><then><block>{
			<expr_stmt><expr><call><name>doFetchSpecificMicrotask</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><name>resp</name></expr></argument>,<argument><expr><name>user</name></expr></argument>,<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if></elseif> <elseif>else <if>if <condition>(<expr><name><name>pathSeg</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><literal type="string">"tutorialCompleted"</literal></expr></argument>)</argument_list></call></expr>)</condition><then><block>{
			<expr_stmt><expr><call><name>doTutorialCompleted</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><name>resp</name></expr></argument>,<argument><expr><name>user</name></expr></argument>,<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if></elseif> <elseif>else <if>if <condition>(<expr><name><name>pathSeg</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><literal type="string">"questionViews"</literal></expr></argument>)</argument_list></call></expr>)</condition><then><block>{
			<expr_stmt><expr><call><name>doQuestionAchievement</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><name>resp</name></expr></argument>,<argument><expr><name>user</name></expr></argument>,<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if></elseif> <elseif>else <if>if <condition>(<expr><name><name>pathSeg</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><literal type="string">"enqueue"</literal></expr></argument>)</argument_list></call></expr>)</condition><then><block>{
			<expr_stmt><expr><call><name>doEnqueueSubmit</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><name>resp</name></expr></argument>,<argument><expr><name>user</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if></elseif></if>
	}</block></function>
	
	<function><specifier>private</specifier> <type><name>void</name></type> <name>doTutorialCompleted</name> <parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>HttpServletRequest</name></type> <name>req</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>HttpServletResponse</name></type> <name>resp</name></decl></parameter>,<parameter><decl><type><specifier>final</specifier> <name>User</name></type> <name>user</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>boolean</name></type> <name>isAlreadyUnassigned</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws><block>{
		<comment type="line">// Since the transaction may fail and retry,</comment>
		<comment type="line">// anything that mutates the values of req and resp MUST be outside the transaction so it only occurs once.</comment>
		<comment type="line">// And anything inside the transaction MUST not mutate the values produced.</comment>
				<decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>projectID</name> <init>= <expr><operator>(</operator><name>String</name><operator>)</operator> <call><name><name>req</name><operator>.</operator><name>getAttribute</name></name><argument_list>(<argument><expr><literal type="string">"project"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>String</name></type> <name>jsonResponse</name> <init>= <expr><literal type="string">"{}"</literal></expr></init></decl>;</decl_stmt>
		    	<try>try <block>{
		    		<expr_stmt><expr><name>jsonResponse</name><operator>=</operator><call><name>ofy</name><argument_list>()</argument_list></call><operator>.</operator><call><name>transact</name><argument_list>( <argument><expr><operator>new</operator> <class><super><name><name>Work</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list><block>{

		    			<function><specifier>public</specifier> <type><name>String</name></type> <name>run</name><parameter_list>()</parameter_list> <block>{
		    				<decl_stmt><decl><type><name>ThreadContext</name></type> <name>threadContext</name> <init>= <expr><call><name><name>ThreadContext</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		    				<expr_stmt><expr><call><name><name>threadContext</name><operator>.</operator><name>reset</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

		    		    	<decl_stmt><decl><type><name>int</name></type> <name>firstFetch</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
		    		    	<decl_stmt><decl><type><specifier>final</specifier> <name>Project</name></type> <name>project</name> <init>= <expr><call><name><name>Project</name><operator>.</operator><name>Create</name></name><argument_list>(<argument><expr><name>projectID</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		    				<decl_stmt><decl><type><specifier>final</specifier> <name>Worker</name></type> <name>worker</name>   <init>= <expr><call><name><name>Worker</name><operator>.</operator><name>Create</name></name><argument_list>(<argument><expr><name>user</name></expr></argument>, <argument><expr><name>project</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		    				
		    				<expr_stmt><expr><call><name><name>worker</name><operator>.</operator><name>increaseStat</name></name><argument_list>(<argument><expr><literal type="string">"tutorial_completed"</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><name>projectID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		    				
		    				
		    				<return>return <expr><literal type="string">"success"</literal></expr>;</return>
		    			}</block></function>
		    			
		        	}</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		    	}</block> <catch>catch <parameter_list>( <parameter><decl><type><name>IllegalArgumentException</name></type> <name>e</name></decl></parameter> )</parameter_list><block>{
		    		<expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		    	}</block></catch></try>
		       <comment type="line">// HistoryLog.Init(projectID).publish();</comment>

				<expr_stmt><expr><call><name>renderJson</name><argument_list>(<argument><expr><name>resp</name></expr></argument>, <argument><expr><name>jsonResponse</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			    <expr_stmt><expr><call><name><name>FirebaseService</name><operator>.</operator><name>publish</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>	
	}</block></function>
	
	<function><specifier>private</specifier> <type><name>void</name></type> <name>doQuestionAchievement</name> <parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>HttpServletRequest</name></type> <name>req</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>HttpServletResponse</name></type> <name>resp</name></decl></parameter>,<parameter><decl><type><specifier>final</specifier> <name>User</name></type> <name>user</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>boolean</name></type> <name>isAlreadyUnassigned</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws><block>{
		<comment type="line">// Since the transaction may fail and retry,</comment>
		<comment type="line">// anything that mutates the values of req and resp MUST be outside the transaction so it only occurs once.</comment>
		<comment type="line">// And anything inside the transaction MUST not mutate the values produced.</comment>
				<decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>projectID</name> <init>= <expr><operator>(</operator><name>String</name><operator>)</operator> <call><name><name>req</name><operator>.</operator><name>getAttribute</name></name><argument_list>(<argument><expr><literal type="string">"project"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>viewCount</name> <init>= <expr><call><name><name>Integer</name><operator>.</operator><name>parseInt</name></name><argument_list>(<argument><expr><call><name><name>req</name><operator>.</operator><name>getParameter</name></name><argument_list>(<argument><expr><literal type="string">"id"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>String</name></type> <name>jsonResponse</name> <init>= <expr><literal type="string">"{}"</literal></expr></init></decl>;</decl_stmt>
		    	<try>try <block>{
		    		<expr_stmt><expr><name>jsonResponse</name><operator>=</operator><call><name>ofy</name><argument_list>()</argument_list></call><operator>.</operator><call><name>transact</name><argument_list>( <argument><expr><operator>new</operator> <class><super><name><name>Work</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list><block>{

		    			<function><specifier>public</specifier> <type><name>String</name></type> <name>run</name><parameter_list>()</parameter_list> <block>{
		    				<decl_stmt><decl><type><name>ThreadContext</name></type> <name>threadContext</name> <init>= <expr><call><name><name>ThreadContext</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		    				<expr_stmt><expr><call><name><name>threadContext</name><operator>.</operator><name>reset</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

		    		    	<decl_stmt><decl><type><name>int</name></type> <name>firstFetch</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
		    		    	<decl_stmt><decl><type><specifier>final</specifier> <name>Project</name></type> <name>project</name> <init>= <expr><call><name><name>Project</name><operator>.</operator><name>Create</name></name><argument_list>(<argument><expr><name>projectID</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		    				<decl_stmt><decl><type><specifier>final</specifier> <name>Worker</name></type> <name>worker</name>   <init>= <expr><call><name><name>Worker</name><operator>.</operator><name>Create</name></name><argument_list>(<argument><expr><name>user</name></expr></argument>, <argument><expr><name>project</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		    				
		    				<expr_stmt><expr><call><name><name>worker</name><operator>.</operator><name>increaseStat</name></name><argument_list>(<argument><expr><literal type="string">"question_views"</literal></expr></argument>,<argument><expr><name>viewCount</name></expr></argument>,<argument><expr><name>projectID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		    				
		    				
		    				<return>return <expr><literal type="string">"success"</literal></expr>;</return>
		    			}</block></function>
		    			
		        	}</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		    	}</block> <catch>catch <parameter_list>( <parameter><decl><type><name>IllegalArgumentException</name></type> <name>e</name></decl></parameter> )</parameter_list><block>{
		    		<expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		    	}</block></catch></try>
		       <comment type="line">// HistoryLog.Init(projectID).publish();</comment>

				<expr_stmt><expr><call><name>renderJson</name><argument_list>(<argument><expr><name>resp</name></expr></argument>, <argument><expr><name>jsonResponse</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			    <expr_stmt><expr><call><name><name>FirebaseService</name><operator>.</operator><name>publish</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>	
	}</block></function>
	
	
	<comment type="line">//assigns a specific microtask (chosen by worker)</comment>
	<function><specifier>private</specifier> <type><name>void</name></type> <name>doFetchSpecificMicrotask</name> <parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>HttpServletRequest</name></type> <name>req</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>HttpServletResponse</name></type> <name>resp</name></decl></parameter>,<parameter><decl><type><specifier>final</specifier> <name>User</name></type> <name>user</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>boolean</name></type> <name>isAlreadyUnassigned</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws><block>{
		<comment type="line">// Since the transaction may fail and retry,</comment>
		<comment type="line">// anything that mutates the values of req and resp MUST be outside the transaction so it only occurs once.</comment>
		<comment type="line">// And anything inside the transaction MUST not mutate the values produced.</comment>
				<decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>projectID</name> <init>= <expr><operator>(</operator><name>String</name><operator>)</operator> <call><name><name>req</name><operator>.</operator><name>getAttribute</name></name><argument_list>(<argument><expr><literal type="string">"project"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>microtaskId</name> <init>= <expr><operator>(</operator><name>String</name><operator>)</operator> <call><name><name>req</name><operator>.</operator><name>getParameter</name></name><argument_list>(<argument><expr><literal type="string">"id"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>String</name></type> <name>jsonResponse</name> <init>= <expr><literal type="string">"{}"</literal></expr></init></decl>;</decl_stmt>
		    	<try>try <block>{
		    		<expr_stmt><expr><name>jsonResponse</name><operator>=</operator><call><name>ofy</name><argument_list>()</argument_list></call><operator>.</operator><call><name>transact</name><argument_list>( <argument><expr><operator>new</operator> <class><super><name><name>Work</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list><block>{

		    			<function><specifier>public</specifier> <type><name>String</name></type> <name>run</name><parameter_list>()</parameter_list> <block>{
		    				<decl_stmt><decl><type><name>ThreadContext</name></type> <name>threadContext</name> <init>= <expr><call><name><name>ThreadContext</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		    				<expr_stmt><expr><call><name><name>threadContext</name><operator>.</operator><name>reset</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

		    				<decl_stmt><decl><type><name><name>Key</name><argument_list type="generic">&lt;<argument><name>Microtask</name></argument>&gt;</argument_list></name></type> <name>microtaskKey</name> <init>=  <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
		    		    	<decl_stmt><decl><type><name>int</name></type> <name>firstFetch</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
		    		    	<decl_stmt><decl><type><specifier>final</specifier> <name>Project</name></type> <name>project</name> <init>= <expr><call><name><name>Project</name><operator>.</operator><name>Create</name></name><argument_list>(<argument><expr><name>projectID</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		    				<decl_stmt><decl><type><specifier>final</specifier> <name>Worker</name></type> <name>worker</name>   <init>= <expr><call><name><name>Worker</name><operator>.</operator><name>Create</name></name><argument_list>(<argument><expr><name>user</name></expr></argument>, <argument><expr><name>project</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		    				<if>if<condition>( <expr><operator>!</operator> <name>isAlreadyUnassigned</name></expr> )</condition><then><block>{
		    		    		<expr_stmt><expr><name>microtaskKey</name> <operator>=</operator> <call><name><name>project</name><operator>.</operator><name>lookupMicrotaskAssignment</name></name><argument_list>( <argument><expr><call><name><name>worker</name><operator>.</operator><name>getUserid</name></name><argument_list>()</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
		    		    	}</block></then></if>

		    		    	<if>if<condition>( <expr><name>microtaskKey</name> <operator>==</operator> <literal type="null">null</literal></expr> )</condition><then><block>{
		    		    		<expr_stmt><expr><name>microtaskKey</name> <operator>=</operator> <call><name><name>project</name><operator>.</operator><name>assignSpecificMicrotask</name></name><argument_list>( <argument><expr><call><name><name>worker</name><operator>.</operator><name>getUserid</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>microtaskId</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
		    		    		<expr_stmt><expr><name>firstFetch</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		    		    	}</block></then></if>
		    				<expr_stmt><expr><call><name>ofy</name><argument_list>()</argument_list></call><operator>.</operator><call><name>save</name><argument_list>()</argument_list></call><operator>.</operator><call><name>entity</name><argument_list>(<argument><expr><name>project</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>now</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

		    				<if>if <condition>(<expr><name>microtaskKey</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
		    					<return>return <expr><literal type="string">"{}"</literal></expr>;</return>
		    				}</block></then> <else>else<block>{

		    					<return>return <expr><literal type="string">"{\"microtaskKey\": \""</literal><operator>+</operator><call><name><name>Microtask</name><operator>.</operator><name>keyToString</name></name><argument_list>(<argument><expr><name>microtaskKey</name></expr></argument>)</argument_list></call><operator>+</operator><literal type="string">"\", \"firstFetch\": \""</literal><operator>+</operator> <name>firstFetch</name><operator>+</operator><literal type="string">"\"}"</literal></expr>;</return>
		    				}</block></else></if>

		    			}</block></function>

		        	}</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		    	}</block> <catch>catch <parameter_list>( <parameter><decl><type><name>IllegalArgumentException</name></type> <name>e</name></decl></parameter> )</parameter_list><block>{
		    		<expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		    	}</block></catch></try>
		       <comment type="line">// HistoryLog.Init(projectID).publish();</comment>

				<expr_stmt><expr><call><name>renderJson</name><argument_list>(<argument><expr><name>resp</name></expr></argument>, <argument><expr><name>jsonResponse</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			    <expr_stmt><expr><call><name><name>FirebaseService</name><operator>.</operator><name>publish</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>	
	}</block></function>
	
	<function><specifier>private</specifier> <type><name>void</name></type> <name>doQuestioning</name><parameter_list>(<parameter><decl><type><name>HttpServletRequest</name></type> <name>req</name></decl></parameter>, <parameter><decl><type><name>HttpServletResponse</name></type> <name>resp</name></decl></parameter>,
			<parameter><decl><type><specifier>final</specifier> <name>String</name></type> <name>projectID</name></decl></parameter>, <parameter><decl><type><name>User</name></type> <name>user</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name><name>String</name><index>[]</index></name></type> <name>pathSeg</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument>, <argument><expr><name>FileUploadException</name></expr></argument></throws>
	<block>{
		<try>try <block>{

			<if>if <condition>(<expr><name><name>pathSeg</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><literal type="string">"insert"</literal></expr></argument>)</argument_list></call></expr>)</condition><then><block>{
				<expr_stmt><expr><call><name>doInsertQuestioning</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><name>resp</name></expr></argument>, <argument><expr><name>user</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then> <elseif>else <if>if <condition>(<expr><name><name>pathSeg</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><literal type="string">"vote"</literal></expr></argument>)</argument_list></call></expr>)</condition><then><block>{
				<expr_stmt><expr><call><name>doVoteQuestioning</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><name>resp</name></expr></argument>, <argument><expr><name>user</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if></elseif> <elseif>else <if>if <condition>(<expr><name><name>pathSeg</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><literal type="string">"report"</literal></expr></argument>)</argument_list></call></expr>)</condition><then><block>{
				<expr_stmt><expr><call><name>doReportQuestioning</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><name>resp</name></expr></argument>, <argument><expr><name>user</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if></elseif> <elseif>else <if>if <condition>(<expr><name><name>pathSeg</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><literal type="string">"subscribe"</literal></expr></argument>)</argument_list></call></expr>)</condition><then><block>{
				<expr_stmt><expr><call><name>doSubscribeQuestioning</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><name>resp</name></expr></argument>, <argument><expr><name>user</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if></elseif> <elseif>else <if>if <condition>(<expr><name><name>pathSeg</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><literal type="string">"link"</literal></expr></argument>)</argument_list></call></expr>)</condition><then><block>{
				<expr_stmt><expr><call><name>doLinkQuestioning</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><name>resp</name></expr></argument>, <argument><expr><name>user</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if></elseif> <elseif>else <if>if <condition>(<expr><name><name>pathSeg</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><literal type="string">"close"</literal></expr></argument>)</argument_list></call></expr>)</condition><then><block>{
				<expr_stmt><expr><call><name>doCloseQuestion</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><name>resp</name></expr></argument>, <argument><expr><name>user</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if></elseif> <elseif>else <if>if <condition>(<expr><name><name>pathSeg</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><literal type="string">"update"</literal></expr></argument>)</argument_list></call></expr>)</condition><then><block>{
				<expr_stmt><expr><call><name>doUpdateQuestion</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><name>resp</name></expr></argument>, <argument><expr><name>user</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if></elseif> <elseif>else <if>if <condition>(<expr><name><name>pathSeg</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><literal type="string">"view"</literal></expr></argument>)</argument_list></call></expr>)</condition><then><block>{
				<expr_stmt><expr><call><name>doViewQuestion</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><name>resp</name></expr></argument>, <argument><expr><name>user</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if></elseif></if>
		}</block> <catch>catch<parameter_list>( <parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter> )</parameter_list> <block>{
			<expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>resp</name><operator>.</operator><name>setStatus</name></name><argument_list>(<argument><expr><name><name>HttpServletResponse</name><operator>.</operator><name>SC_INTERNAL_SERVER_ERROR</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></catch></try>
	}</block></function>

	<function><specifier>private</specifier> <type><name>void</name></type> <name>doAdmin</name><parameter_list>(<parameter><decl><type><name>HttpServletRequest</name></type> <name>req</name></decl></parameter>, <parameter><decl><type><name>HttpServletResponse</name></type> <name>resp</name></decl></parameter>,
			<parameter><decl><type><specifier>final</specifier> <name>String</name></type> <name>projectID</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name><name>String</name><index>[]</index></name></type> <name>pathSeg</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument>, <argument><expr><name>ServletException</name></expr></argument></throws>
	<block>{
		<comment type="line">//System.out.println("doing admin");</comment>
		<if>if<condition>(<expr><name><name>pathSeg</name><operator>.</operator><name>length</name></name> <operator>&lt;=</operator><literal type="number">3</literal></expr> )</condition><then><block>{
			<expr_stmt><expr><call><name><name>req</name><operator>.</operator><name>getRequestDispatcher</name></name><argument_list>(<argument><expr><literal type="string">"/adminDist/admin.jsp"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>forward</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><name>resp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then> <else>else <block>{
			<comment type="line">// The command should be in the fourth position. If nothing exists there,</comment>
			<comment type="line">// use "" as the command.</comment>
			<decl_stmt><decl><type><name>String</name></type> <name>command</name> <init>= <expr><name><name>pathSeg</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><call><name>toUpperCase</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

		    <decl_stmt><decl><type><specifier>final</specifier> <name>StringBuilder</name></type> <name>output</name> <init>= <expr><operator>new</operator> <call><name>StringBuilder</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		    <decl_stmt><decl><type><specifier>final</specifier> <name>Date</name></type> <name>currentTime</name> <init>= <expr><operator>new</operator> <call><name>Date</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>


			<expr_stmt><expr><call><name><name>ThreadContext</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>reset</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

			<if>if <condition>(<expr><call><name><name>command</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><literal type="string">"RESET"</literal></expr></argument>)</argument_list></call></expr>)</condition><then>
			<block>{
				<expr_stmt><expr><call><name><name>output</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"PROJECT RESET executed at "</literal> <operator>+</operator> <call><name><name>currentTime</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>ProjectCommand</name><operator>.</operator><name>reset</name></name><argument_list>(<argument><expr><name>projectID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then>
			<elseif>else <if>if <condition>(<expr><call><name><name>command</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><literal type="string">"CLEAR"</literal></expr></argument>)</argument_list></call></expr>)</condition><then>
			<block>{
				<expr_stmt><expr><call><name><name>output</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"PROJECT CLEAR executed at "</literal> <operator>+</operator> <call><name><name>currentTime</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<expr_stmt><expr><call><name><name>Project</name><operator>.</operator><name>Clear</name></name><argument_list>(<argument><expr><name>projectID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if></elseif>
			<elseif>else <if>if <condition>(<expr><call><name><name>command</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><literal type="string">"REVIEWSON"</literal></expr></argument>)</argument_list></call></expr>)</condition><then>
			<block>{
				<expr_stmt><expr><call><name><name>output</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"REVIEWS ON executed at "</literal> <operator>+</operator> <call><name><name>currentTime</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		    	<expr_stmt><expr><call><name><name>ProjectCommand</name><operator>.</operator><name>enableReviews</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			}</block></then></if></elseif>
			<elseif>else <if>if <condition>(<expr><call><name><name>command</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><literal type="string">"REVIEWSOFF"</literal></expr></argument>)</argument_list></call></expr>)</condition><then>
			<block>{
				<expr_stmt><expr><call><name><name>output</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"REVIEWS OFF executed at "</literal> <operator>+</operator> <call><name><name>currentTime</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<expr_stmt><expr><call><name><name>ProjectCommand</name><operator>.</operator><name>enableReviews</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			}</block></then></if></elseif>
			<elseif>else <if>if <condition>(<expr><call><name><name>command</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><literal type="string">"TUTORIALSON"</literal></expr></argument>)</argument_list></call></expr>)</condition><then>
			<block>{
				<expr_stmt><expr><call><name><name>output</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"TUTORIALS ON executed at "</literal> <operator>+</operator> <call><name><name>currentTime</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		    	<expr_stmt><expr><call><name><name>ProjectCommand</name><operator>.</operator><name>enableTutorials</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			}</block></then></if></elseif>
			<elseif>else <if>if <condition>(<expr><call><name><name>command</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><literal type="string">"TUTORIALSOFF"</literal></expr></argument>)</argument_list></call></expr>)</condition><then>
			<block>{
				<expr_stmt><expr><call><name><name>output</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"TUTORIALS OFF executed at "</literal> <operator>+</operator> <call><name><name>currentTime</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		    	<expr_stmt><expr><call><name><name>ProjectCommand</name><operator>.</operator><name>enableTutorials</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			}</block></then></if></elseif>
			<else>else
			<block>{
				<expr_stmt><expr><call><name><name>output</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"Unrecognized command "</literal> <operator>+</operator> <name>command</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></else></if>


			<expr_stmt><expr><call><name>executeCommands</name><argument_list>(<argument><expr><name>projectID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><call><name><name>output</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<decl_stmt><decl><type><name>JSONObject</name></type> <name>jsonObj</name> <init>= <expr><operator>new</operator> <call><name>JSONObject</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
			<try>try <block>{
				<expr_stmt><expr><call><name><name>jsonObj</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><literal type="string">"message"</literal></expr></argument>,<argument><expr><call><name><name>output</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>JSONException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
				<comment type="line">// TODO Auto-generated catch block</comment>
				<expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			}</block></catch></try>

		    <expr_stmt><expr><call><name>renderJson</name><argument_list>(<argument><expr><name>resp</name></expr></argument>,<argument><expr><call><name><name>jsonObj</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></else></if>
	}</block></function>


	<comment type="line">// get user picture</comment>
	<function><specifier>private</specifier> <type><name>void</name></type> <name>getUserPicture</name><parameter_list>(<parameter><decl><type><name>HttpServletRequest</name></type> <name>req</name></decl></parameter>, <parameter><decl><type><name>HttpServletResponse</name></type> <name>res</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument>, <argument><expr><name>ServletException</name></expr></argument></throws> <block>{
		<comment type="line">//retrieve request GET parameter userId and retrieve picture</comment>
		<decl_stmt><decl><type><name>String</name></type> <name>userId</name> <init>= <expr><call><name><name>req</name><operator>.</operator><name>getParameter</name></name><argument_list>(<argument><expr><literal type="string">"userId"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>UserPicture</name></type> <name>picture</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>userId</name><operator>==</operator><literal type="null">null</literal><operator>)</operator></expr>?</condition><then><expr><literal type="null">null</literal></expr></then><else>:<expr><call><name>ofy</name><argument_list>()</argument_list></call><operator>.</operator><call><name>load</name><argument_list>()</argument_list></call><operator>.</operator><call><name>key</name><argument_list>(<argument><expr><call><name><name>Key</name><operator>.</operator><name>create</name></name><argument_list>(<argument><expr><name><name>UserPicture</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><name>userId</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>now</name><argument_list>()</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>

		<if>if<condition>(<expr><name>userId</name><operator>==</operator><literal type="null">null</literal> <operator>||</operator> <name>picture</name> <operator>==</operator><literal type="null">null</literal></expr>)</condition><then><block>{
			<expr_stmt><expr><call><name><name>req</name><operator>.</operator><name>getRequestDispatcher</name></name><argument_list>(<argument><expr><literal type="string">"/img/40x40.gif"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>forward</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then> <else>else <block>{
		    <expr_stmt><expr><call><name><name>res</name><operator>.</operator><name>setContentType</name></name><argument_list>(<argument><expr><literal type="string">"image/jpeg"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		    <expr_stmt><expr><call><name><name>res</name><operator>.</operator><name>getOutputStream</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>write</name><argument_list>(<argument><expr><call><name><name>picture</name><operator>.</operator><name>getImage</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getBytes</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></else></if>

	}</block></function>
	<comment type="line">// changes user picture</comment>
	<function><specifier>private</specifier> <type><name>void</name></type> <name>changeUserPicture</name><parameter_list>(<parameter><decl><type><name>User</name></type> <name>user</name></decl></parameter>, <parameter><decl><type><name>HttpServletRequest</name></type> <name>req</name></decl></parameter>, <parameter><decl><type><name>HttpServletResponse</name></type> <name>res</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument>, <argument><expr><name>FileUploadException</name></expr></argument></throws> <block>{
		<comment type="line">// Get the image representation</comment>
	    <decl_stmt><decl><type><name>ServletFileUpload</name></type> <name>upload</name> <init>= <expr><operator>new</operator> <call><name>ServletFileUpload</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	    <decl_stmt><decl><type><name>FileItemIterator</name></type> <name>iter</name> <init>= <expr><call><name><name>upload</name><operator>.</operator><name>getItemIterator</name></name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	    <decl_stmt><decl><type><name>FileItemStream</name></type> <name>imageItem</name> <init>= <expr><call><name><name>iter</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	    <decl_stmt><decl><type><name>InputStream</name></type> <name>imgStream</name> <init>= <expr><call><name><name>imageItem</name><operator>.</operator><name>openStream</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>


	    <decl_stmt><decl><type><name>ImagesService</name></type> <name>imagesService</name> <init>= <expr><call><name><name>ImagesServiceFactory</name><operator>.</operator><name>getImagesService</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Image</name></type> <name>oldImage</name> <init>= <expr><call><name><name>ImagesServiceFactory</name><operator>.</operator><name>makeImage</name></name><argument_list>(<argument><expr><call><name><name>IOUtils</name><operator>.</operator><name>toByteArray</name></name><argument_list>(<argument><expr><name>imgStream</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Transform</name></type> <name>resize</name> <init>= <expr><call><name><name>ImagesServiceFactory</name><operator>.</operator><name>makeResize</name></name><argument_list>(<argument><expr><literal type="number">200</literal></expr></argument>,<argument><expr><literal type="number">200</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Image</name></type> <name>newImage</name> <init>= <expr><call><name><name>imagesService</name><operator>.</operator><name>applyTransform</name></name><argument_list>(<argument><expr><name>resize</name></expr></argument>, <argument><expr><name>oldImage</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>Blob</name></type> <name>imageBlob</name> <init>= <expr><operator>new</operator> <call><name>Blob</name><argument_list>( <argument><expr><call><name><name>newImage</name><operator>.</operator><name>getImageData</name></name><argument_list>()</argument_list></call></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>



	    <comment type="line">// if image size &gt; 0 bytes</comment>
	    <if>if<condition>(<expr><call><name><name>imageBlob</name><operator>.</operator><name>getBytes</name></name><argument_list>()</argument_list></call><operator>.</operator><name>length</name><operator>&gt;</operator><literal type="number">0</literal></expr>)</condition><then><block>{

		    <comment type="line">//retrieve picture object if exists or instantiate a new one</comment>
		    <decl_stmt><decl><type><name>UserPicture</name></type> <name>picture</name> <init>= <expr><call><name>ofy</name><argument_list>()</argument_list></call><operator>.</operator><call><name>load</name><argument_list>()</argument_list></call><operator>.</operator><call><name>key</name><argument_list>(<argument><expr><call><name><name>Key</name><operator>.</operator><name>create</name></name><argument_list>(<argument><expr><name><name>UserPicture</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><call><name><name>user</name><operator>.</operator><name>getUserId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>now</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		    <if>if<condition>(<expr><name>picture</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then>
		    	<block type="pseudo"><expr_stmt><expr><name>picture</name> <operator>=</operator> <operator>new</operator> <call><name>UserPicture</name><argument_list>(<argument><expr><call><name><name>user</name><operator>.</operator><name>getUserId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>

		    <expr_stmt><expr><call><name><name>picture</name><operator>.</operator><name>setImage</name></name><argument_list>(<argument><expr><name>imageBlob</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		    <comment type="line">// persist image</comment>
		    <expr_stmt><expr><call><name>ofy</name><argument_list>()</argument_list></call><operator>.</operator><call><name>save</name><argument_list>()</argument_list></call><operator>.</operator><call><name>entity</name><argument_list>(<argument><expr><name>picture</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>now</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

		    <comment type="line">//System.out.println("SUCCESS UPLOAD");</comment>

		    <comment type="line">// print success</comment>
		    <expr_stmt><expr><call><name><name>res</name><operator>.</operator><name>setContentType</name></name><argument_list>(<argument><expr><literal type="string">"text/plain"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		    <expr_stmt><expr><call><name><name>res</name><operator>.</operator><name>getWriter</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><literal type="string">"success"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	    }</block></then> <else>else <block>{

		    <comment type="line">// print fail</comment>
		    <expr_stmt><expr><call><name><name>res</name><operator>.</operator><name>setContentType</name></name><argument_list>(<argument><expr><literal type="string">"text/plain"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		    <expr_stmt><expr><call><name><name>res</name><operator>.</operator><name>getWriter</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><literal type="string">"fail"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    }</block></else></if>

	}</block></function>

	<comment type="line">// process test result submit</comment>
	<function><specifier>private</specifier> <type><name>void</name></type> <name>doSubmitTestResult</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>HttpServletRequest</name></type> <name>req</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>HttpServletResponse</name></type> <name>resp</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument>, <argument><expr><name>FileUploadException</name></expr></argument></throws> <block>{

		<decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>projectID</name> <init>= <expr><operator>(</operator><name>String</name><operator>)</operator> <call><name><name>req</name><operator>.</operator><name>getAttribute</name></name><argument_list>(<argument><expr><literal type="string">"project"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier>final</specifier> <name>long</name></type> <name>functionId</name> <init>= <expr><call><name><name>Long</name><operator>.</operator><name>parseLong</name></name><argument_list>(<argument><expr><call><name><name>req</name><operator>.</operator><name>getParameter</name></name><argument_list>(<argument><expr><literal type="string">"functionId"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>JsonDTO</name>  <init>= <expr><call><name><name>Util</name><operator>.</operator><name>convertStreamToString</name></name><argument_list>(<argument><expr><call><name><name>req</name><operator>.</operator><name>getInputStream</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	    <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"--&gt; SERVLET: received test results for "</literal><operator>+</operator><name>functionId</name><operator>+</operator><literal type="string">": "</literal><operator>+</operator><call><name><name>JsonDTO</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name><name>FunctionCommand</name><operator>.</operator><name>submittedTestResult</name></name><argument_list>(<argument><expr><name>functionId</name></expr></argument>, <argument><expr><name>JsonDTO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>executeCommands</name><argument_list>(<argument><expr><name>projectID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<function><specifier>public</specifier> <type><name>void</name></type> <name>doInsertQuestioning</name> <parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>HttpServletRequest</name></type> <name>req</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>HttpServletResponse</name></type> <name>resp</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>User</name></type> <name>user</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
	<block>{
		<comment type="line">// Collect information from the request parameter. Since the transaction may fail and retry,</comment>
		<comment type="line">// anything that mutates the values of req and resp MUST be outside the transaction so it only occurs once.</comment>
		<comment type="line">// And anything inside the transaction MUST not mutate the values produced.</comment>
		<decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>projectId</name> <init>= <expr><operator>(</operator><name>String</name><operator>)</operator> <call><name><name>req</name><operator>.</operator><name>getAttribute</name></name><argument_list>(<argument><expr><literal type="string">"project"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>type</name>      <init>= <expr><operator>(</operator><name>String</name><operator>)</operator> <call><name><name>req</name><operator>.</operator><name>getParameter</name></name><argument_list>(<argument><expr><literal type="string">"type"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>payload</name>   <init>= <expr><call><name><name>Util</name><operator>.</operator><name>convertStreamToString</name></name><argument_list>(<argument><expr><call><name><name>req</name><operator>.</operator><name>getInputStream</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>workerId</name>     <init>= <expr><call><name><name>user</name><operator>.</operator><name>getUserId</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>workerHandle</name> <init>= <expr><call><name><name>user</name><operator>.</operator><name>getNickname</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

		<comment type="line">// Reset the actual Thread Context</comment>
		<expr_stmt><expr><call><name><name>ThreadContext</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>reset</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

		<if>if<condition>(<expr><call><name><name>type</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><literal type="string">"question"</literal></expr></argument>)</argument_list></call></expr>)</condition><then>
			<block type="pseudo"><expr_stmt><expr><call><name><name>QuestioningCommand</name><operator>.</operator><name>createQuestion</name></name><argument_list>( <argument><expr><name>payload</name></expr></argument>, <argument><expr><name>workerId</name></expr></argument>, <argument><expr><name>workerHandle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
		<elseif>else <if>if<condition>(<expr><call><name><name>type</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><literal type="string">"answer"</literal></expr></argument>)</argument_list></call></expr>)</condition><then>
			<block type="pseudo"><expr_stmt><expr><call><name><name>QuestioningCommand</name><operator>.</operator><name>createAnswer</name></name><argument_list>(<argument><expr><name>payload</name></expr></argument>, <argument><expr><name>workerId</name></expr></argument>, <argument><expr><name>workerHandle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if></elseif>
		<elseif>else <if>if<condition>(<expr><call><name><name>type</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><literal type="string">"comment"</literal></expr></argument>)</argument_list></call></expr>)</condition><then>
			<block type="pseudo"><expr_stmt><expr><call><name><name>QuestioningCommand</name><operator>.</operator><name>createComment</name></name><argument_list>(<argument><expr><name>payload</name></expr></argument>, <argument><expr><name>workerId</name></expr></argument>, <argument><expr><name>workerHandle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if></elseif>
		<else>else
			<block type="pseudo"><throw>throw <expr><operator>new</operator> <call><name>RuntimeException</name><argument_list>(<argument><expr><literal type="string">"Error - "</literal> <operator>+</operator> <name>type</name> <operator>+</operator> <literal type="string">" is not registered as a questioning type."</literal></expr></argument>)</argument_list></call></expr>;</throw></block></else></if>


		<comment type="line">// Copy the command back out the context to initially populate the command queue.</comment>
		<expr_stmt><expr><call><name>executeCommands</name><argument_list>(<argument><expr><name>projectId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<function><specifier>public</specifier> <type><name>void</name></type> <name>doUpdateQuestion</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>HttpServletRequest</name></type> <name>req</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>HttpServletResponse</name></type> <name>resp</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>User</name></type> <name>user</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
	<block>{
		<decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>projectId</name>  <init>= <expr><operator>(</operator><name>String</name><operator>)</operator> <call><name><name>req</name><operator>.</operator><name>getAttribute</name></name><argument_list>(<argument><expr><literal type="string">"project"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier>final</specifier> <name>long</name></type>   <name>questionId</name> <init>= <expr><call><name><name>Long</name><operator>.</operator><name>parseLong</name></name><argument_list>(<argument><expr><operator>(</operator><name>String</name><operator>)</operator> <call><name><name>req</name><operator>.</operator><name>getParameter</name></name><argument_list>(<argument><expr><literal type="string">"id"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>payload</name>    <init>= <expr><call><name><name>Util</name><operator>.</operator><name>convertStreamToString</name></name><argument_list>(<argument><expr><call><name><name>req</name><operator>.</operator><name>getInputStream</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>workerId</name>     <init>= <expr><call><name><name>user</name><operator>.</operator><name>getUserId</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>workerHandle</name> <init>= <expr><call><name><name>user</name><operator>.</operator><name>getNickname</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

		<comment type="line">// Reset the actual Thread Context</comment>
		<expr_stmt><expr><call><name><name>ThreadContext</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>reset</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>QuestioningCommand</name><operator>.</operator><name>updateQuestion</name></name><argument_list>(<argument><expr><name>questionId</name></expr></argument>, <argument><expr><name>payload</name></expr></argument>, <argument><expr><name>workerId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>executeCommands</name><argument_list>(<argument><expr><name>projectId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<function><specifier>public</specifier> <type><name>void</name></type> <name>doViewQuestion</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>HttpServletRequest</name></type> <name>req</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>HttpServletResponse</name></type> <name>resp</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>User</name></type> <name>user</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
	<block>{
		<decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>projectId</name>  <init>= <expr><operator>(</operator><name>String</name><operator>)</operator> <call><name><name>req</name><operator>.</operator><name>getAttribute</name></name><argument_list>(<argument><expr><literal type="string">"project"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier>final</specifier> <name>long</name></type>   <name>questionId</name> <init>= <expr><call><name><name>Long</name><operator>.</operator><name>parseLong</name></name><argument_list>(<argument><expr><operator>(</operator><name>String</name><operator>)</operator> <call><name><name>req</name><operator>.</operator><name>getParameter</name></name><argument_list>(<argument><expr><literal type="string">"id"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>workerId</name>     <init>= <expr><call><name><name>user</name><operator>.</operator><name>getUserId</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

		<comment type="line">// Reset the actual Thread Context</comment>
		<expr_stmt><expr><call><name><name>ThreadContext</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>reset</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>QuestioningCommand</name><operator>.</operator><name>addQuestionView</name></name><argument_list>(<argument><expr><name>questionId</name></expr></argument>,<argument><expr><name>workerId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>executeCommands</name><argument_list>(<argument><expr><name>projectId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>


	<function><specifier>public</specifier> <type><name>void</name></type> <name>doReportQuestioning</name> <parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>HttpServletRequest</name></type> <name>req</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>HttpServletResponse</name></type> <name>resp</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>User</name></type> <name>user</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
	<block>{
		<comment type="line">// Collect information from the request parameter. Since the transaction may fail and retry,</comment>
		<comment type="line">// anything that mutates the values of req and resp MUST be outside the transaction so it only occurs once.</comment>
		<comment type="line">// And anything inside the transaction MUST not mutate the values produced.</comment>

		<decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>projectID</name>    <init>= <expr><operator>(</operator><name>String</name><operator>)</operator> <call><name><name>req</name><operator>.</operator><name>getAttribute</name></name><argument_list>(<argument><expr><literal type="string">"project"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier>final</specifier> <name>long</name></type> <name>questioningId</name>    <init>= <expr><call><name><name>Long</name><operator>.</operator><name>parseLong</name></name><argument_list>(<argument><expr><operator>(</operator><name>String</name><operator>)</operator> <call><name><name>req</name><operator>.</operator><name>getParameter</name></name><argument_list>(<argument><expr><literal type="string">"id"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier>final</specifier> <name>boolean</name></type> <name>remove</name>      <init>= <expr><call><name><name>Boolean</name><operator>.</operator><name>parseBoolean</name></name><argument_list>(<argument><expr><operator>(</operator><name>String</name><operator>)</operator><call><name><name>req</name><operator>.</operator><name>getParameter</name></name><argument_list>(<argument><expr><literal type="string">"remove"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>


		<decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>workerID</name>     <init>= <expr><call><name><name>user</name><operator>.</operator><name>getUserId</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>


		<comment type="line">// Reset the actual Thread Context</comment>
		<expr_stmt><expr><call><name><name>ThreadContext</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>reset</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name><name>QuestioningCommand</name><operator>.</operator><name>report</name></name><argument_list>(<argument><expr><name>questioningId</name></expr></argument>, <argument><expr><name>workerID</name></expr></argument>, <argument><expr><name>remove</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


		<comment type="line">// Copy the command back out the context to initially populate the command queue.</comment>
		<expr_stmt><expr><call><name>executeCommands</name><argument_list>(<argument><expr><name>projectID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<function><specifier>public</specifier> <type><name>void</name></type> <name>doSubscribeQuestioning</name> <parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>HttpServletRequest</name></type> <name>req</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>HttpServletResponse</name></type> <name>resp</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>User</name></type> <name>user</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
	<block>{
		<comment type="line">// Collect information from the request parameter. Since the transaction may fail and retry,</comment>
		<comment type="line">// anything that mutates the values of req and resp MUST be outside the transaction so it only occurs once.</comment>
		<comment type="line">// And anything inside the transaction MUST not mutate the values produced.</comment>

		<decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>projectID</name>  	<init>= <expr><operator>(</operator><name>String</name><operator>)</operator> <call><name><name>req</name><operator>.</operator><name>getAttribute</name></name><argument_list>(<argument><expr><literal type="string">"project"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier>final</specifier> <name>long</name></type> <name>questioningId</name>    <init>= <expr><call><name><name>Long</name><operator>.</operator><name>parseLong</name></name><argument_list>(<argument><expr><operator>(</operator><name>String</name><operator>)</operator> <call><name><name>req</name><operator>.</operator><name>getParameter</name></name><argument_list>(<argument><expr><literal type="string">"id"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier>final</specifier> <name>boolean</name></type> <name>remove</name>	    <init>= <expr><call><name><name>Boolean</name><operator>.</operator><name>parseBoolean</name></name><argument_list>(<argument><expr><operator>(</operator><name>String</name><operator>)</operator><call><name><name>req</name><operator>.</operator><name>getParameter</name></name><argument_list>(<argument><expr><literal type="string">"remove"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>workerID</name>     <init>= <expr><call><name><name>user</name><operator>.</operator><name>getUserId</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>


		<comment type="line">// Reset the actual Thread Context</comment>
		<expr_stmt><expr><call><name><name>ThreadContext</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>reset</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name><name>QuestioningCommand</name><operator>.</operator><name>subscribeWorker</name></name><argument_list>(<argument><expr><name>questioningId</name></expr></argument>, <argument><expr><name>workerID</name></expr></argument>, <argument><expr><name>remove</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


		<comment type="line">// Copy the command back out the context to initially populate the command queue.</comment>
		<expr_stmt><expr><call><name>executeCommands</name><argument_list>(<argument><expr><name>projectID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<function><specifier>public</specifier> <type><name>void</name></type> <name>doLinkQuestioning</name> <parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>HttpServletRequest</name></type> <name>req</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>HttpServletResponse</name></type> <name>resp</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>User</name></type> <name>user</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
	<block>{
		<comment type="line">// Collect information from the request parameter. Since the transaction may fail and retry,</comment>
		<comment type="line">// anything that mutates the values of req and resp MUST be outside the transaction so it only occurs once.</comment>
		<comment type="line">// And anything inside the transaction MUST not mutate the values produced.</comment>

		<decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>projectID</name>  	<init>= <expr><operator>(</operator><name>String</name><operator>)</operator> <call><name><name>req</name><operator>.</operator><name>getAttribute</name></name><argument_list>(<argument><expr><literal type="string">"project"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier>final</specifier> <name>long</name></type> <name>questioningId</name>    <init>= <expr><call><name><name>Long</name><operator>.</operator><name>parseLong</name></name><argument_list>(<argument><expr><operator>(</operator><name>String</name><operator>)</operator> <call><name><name>req</name><operator>.</operator><name>getParameter</name></name><argument_list>(<argument><expr><literal type="string">"id"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>artifactId</name>	    <init>= <expr><call><name><name>req</name><operator>.</operator><name>getParameter</name></name><argument_list>(<argument><expr><literal type="string">"artifactId"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier>final</specifier> <name>boolean</name></type> <name>remove</name>	    <init>= <expr><call><name><name>Boolean</name><operator>.</operator><name>parseBoolean</name></name><argument_list>(<argument><expr><operator>(</operator><name>String</name><operator>)</operator><call><name><name>req</name><operator>.</operator><name>getParameter</name></name><argument_list>(<argument><expr><literal type="string">"remove"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>workerId</name>     <init>= <expr><call><name><name>user</name><operator>.</operator><name>getUserId</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>


		<comment type="line">// Reset the actual Thread Context</comment>
		<expr_stmt><expr><call><name><name>ThreadContext</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>reset</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>QuestioningCommand</name><operator>.</operator><name>linkArtifact</name></name><argument_list>(<argument><expr><name>questioningId</name></expr></argument>, <argument><expr><name>artifactId</name></expr></argument>, <argument><expr><name>remove</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


		<comment type="line">// Copy the command back out the context to initially populate the command queue.</comment>
		<expr_stmt><expr><call><name>executeCommands</name><argument_list>(<argument><expr><name>projectID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<function><specifier>public</specifier> <type><name>void</name></type> <name>doCloseQuestion</name> <parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>HttpServletRequest</name></type> <name>req</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>HttpServletResponse</name></type> <name>resp</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>User</name></type> <name>user</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
	<block>{
		<decl_stmt><decl><type><name>String</name></type> <name>projectID</name>  	<init>= <expr><operator>(</operator><name>String</name><operator>)</operator> <call><name><name>req</name><operator>.</operator><name>getAttribute</name></name><argument_list>(<argument><expr><literal type="string">"project"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>long</name></type> <name>questionId</name>    <init>= <expr><call><name><name>Long</name><operator>.</operator><name>parseLong</name></name><argument_list>(<argument><expr><operator>(</operator><name>String</name><operator>)</operator> <call><name><name>req</name><operator>.</operator><name>getParameter</name></name><argument_list>(<argument><expr><literal type="string">"id"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>boolean</name></type> <name>closed</name> 	    <init>= <expr><call><name><name>Boolean</name><operator>.</operator><name>parseBoolean</name></name><argument_list>(<argument><expr><operator>(</operator><name>String</name><operator>)</operator><call><name><name>req</name><operator>.</operator><name>getParameter</name></name><argument_list>(<argument><expr><literal type="string">"closed"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>ThreadContext</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>reset</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>QuestioningCommand</name><operator>.</operator><name>setClosed</name></name><argument_list>(<argument><expr><name>questionId</name></expr></argument>, <argument><expr><name>closed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>executeCommands</name><argument_list>(<argument><expr><name>projectID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<function><specifier>public</specifier> <type><name>void</name></type> <name>doVoteQuestioning</name> <parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>HttpServletRequest</name></type> <name>req</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>HttpServletResponse</name></type> <name>resp</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>User</name></type> <name>user</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
	<block>{
		<comment type="line">// Collect information from the request parameter. Since the transaction may fail and retry,</comment>
		<comment type="line">// anything that mutates the values of req and resp MUST be outside the transaction so it only occurs once.</comment>
		<comment type="line">// And anything inside the transaction MUST not mutate the values produced.</comment>

		<decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>projectID</name>    <init>= <expr><operator>(</operator><name>String</name><operator>)</operator> <call><name><name>req</name><operator>.</operator><name>getAttribute</name></name><argument_list>(<argument><expr><literal type="string">"project"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier>final</specifier> <name>long</name></type> <name>questioningId</name>    <init>= <expr><call><name><name>Long</name><operator>.</operator><name>parseLong</name></name><argument_list>(<argument><expr><operator>(</operator><name>String</name><operator>)</operator> <call><name><name>req</name><operator>.</operator><name>getParameter</name></name><argument_list>(<argument><expr><literal type="string">"id"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier>final</specifier> <name>boolean</name></type> <name>remove</name>    <init>= <expr><call><name><name>Boolean</name><operator>.</operator><name>parseBoolean</name></name><argument_list>(<argument><expr><operator>(</operator><name>String</name><operator>)</operator><call><name><name>req</name><operator>.</operator><name>getParameter</name></name><argument_list>(<argument><expr><literal type="string">"remove"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>


		<decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>workerID</name>     <init>= <expr><call><name><name>user</name><operator>.</operator><name>getUserId</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>


		<comment type="line">// Reset the actual Thread Context</comment>
		<expr_stmt><expr><call><name><name>ThreadContext</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>reset</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>QuestioningCommand</name><operator>.</operator><name>vote</name></name><argument_list>(<argument><expr><name>questioningId</name></expr></argument>, <argument><expr><name>workerID</name></expr></argument>, <argument><expr><name>remove</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


		<comment type="line">// Copy the command back out the context to initially populate the command queue.</comment>
		<expr_stmt><expr><call><name>executeCommands</name><argument_list>(<argument><expr><name>projectID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>


	<comment type="line">// Notify the server that a microtask has been completed.</comment>
<comment type="line">//	public void doSubmitMicrotask(final HttpServletRequest req, final HttpServletResponse resp) throws IOException</comment>
<comment type="line">//	{</comment>
<comment type="line">//		// Collect information from the request parameter. Since the transaction may fail and retry,</comment>
<comment type="line">//		// anything that mutates the values of req and resp MUST be outside the transaction so it only occurs once.</comment>
<comment type="line">//		// And anything inside the transaction MUST not mutate the values produced.</comment>
<comment type="line">//</comment>
<comment type="line">//		try</comment>
<comment type="line">//    	{</comment>
<comment type="line">//    		final String projectID    = (String) req.getAttribute("project");</comment>
<comment type="line">//</comment>
<comment type="line">//			final String workerID     = UserServiceFactory.getUserService().getCurrentUser().getUserId();</comment>
<comment type="line">//			final String microtaskKey = req.getParameter("key") ;</comment>
<comment type="line">//			final String type         = req.getParameter("type");</comment>
<comment type="line">//			final String payload      = Util.convertStreamToString(req.getInputStream());</comment>
<comment type="line">//			final boolean skip		  = Boolean.parseBoolean(req.getParameter("skip"));</comment>
<comment type="line">//			final boolean disablePoint = Boolean.parseBoolean( req.getParameter("disablepoint"));</comment>
<comment type="line">//</comment>
<comment type="line">//</comment>
<comment type="line">//			System.out.println("--&gt; SERVLET: submitted mtask key = "+microtaskKey);</comment>
<comment type="line">//</comment>
<comment type="line">//			// Create an initial context, then build a command to skip or submit</comment>
<comment type="line">//			CommandContext context = new CommandContext();</comment>
<comment type="line">//</comment>
<comment type="line">//			// Create the skip or submit commands</comment>
<comment type="line">//			if (skip)</comment>
<comment type="line">//				ProjectCommand.skipMicrotask( microtaskKey, workerID, disablePoint);</comment>
<comment type="line">//			else{</comment>
<comment type="line">//				ProjectCommand.submitMicrotask( microtaskKey, payload, workerID);</comment>
<comment type="line">//			}</comment>
<comment type="line">//</comment>
<comment type="line">//			// Copy the command back out the context to initially populate the command queue.</comment>
<comment type="line">//			executeCommands(context.commands(), projectID);</comment>
<comment type="line">//    	}</comment>
<comment type="line">//    	catch (IOException e)</comment>
<comment type="line">//    	{</comment>
<comment type="line">//    		e.printStackTrace();</comment>
<comment type="line">//    	}</comment>
<comment type="line">//	}</comment>

	<function><specifier>public</specifier> <type><name>void</name></type> <name>doFetchMicrotask</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>HttpServletRequest</name></type> <name>req</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>HttpServletResponse</name></type> <name>resp</name></decl></parameter>,<parameter><decl><type><specifier>final</specifier> <name>User</name></type> <name>user</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws><block>{
		<expr_stmt><expr><call><name>doFetchMicrotask</name><argument_list>(<argument><expr><name>req</name></expr></argument>,<argument><expr><name>resp</name></expr></argument>,<argument><expr><name>user</name></expr></argument>,<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>


	<function><specifier>public</specifier> <type><name>void</name></type> <name>unassignMicrotask</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>HttpServletRequest</name></type> <name>req</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>HttpServletResponse</name></type> <name>resp</name></decl></parameter>,<parameter><decl><type><specifier>final</specifier> <name>User</name></type> <name>user</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
	<block>{
		<comment type="line">// Since the transaction may fail and retry,</comment>
		<comment type="line">// anything that mutates the values of req and resp MUST be outside the transaction so it only occurs once.</comment>
		<comment type="line">// And anything inside the transaction MUST not mutate the values produced.</comment>
		<decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>projectID</name> <init>= <expr><operator>(</operator><name>String</name><operator>)</operator> <call><name><name>req</name><operator>.</operator><name>getAttribute</name></name><argument_list>(<argument><expr><literal type="string">"project"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>


    	<try>try <block>{
    		<expr_stmt><expr><call><name>ofy</name><argument_list>()</argument_list></call><operator>.</operator><call><name>transact</name><argument_list>( <argument><expr><operator>new</operator> <class><super><name>VoidWork</name></super><argument_list>()</argument_list><block>{

    			<function><specifier>public</specifier> <type><name>void</name></type> <name>vrun</name><parameter_list>()</parameter_list> <block>{
    				<decl_stmt><decl><type><name>ThreadContext</name></type> <name>threadContext</name> <init>= <expr><call><name><name>ThreadContext</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    				<expr_stmt><expr><call><name><name>threadContext</name><operator>.</operator><name>reset</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    				<decl_stmt><decl><type><specifier>final</specifier> <name>Project</name></type> <name>project</name> <init>= <expr><call><name><name>Project</name><operator>.</operator><name>Create</name></name><argument_list>(<argument><expr><name>projectID</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    				<decl_stmt><decl><type><specifier>final</specifier> <name>Worker</name></type> <name>worker</name>   <init>= <expr><call><name><name>Worker</name><operator>.</operator><name>Create</name></name><argument_list>(<argument><expr><name>user</name></expr></argument>, <argument><expr><name>project</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    		    	<expr_stmt><expr><call><name><name>project</name><operator>.</operator><name>unassignMicrotask</name></name><argument_list>( <argument><expr><call><name><name>worker</name><operator>.</operator><name>getUserid</name></name><argument_list>()</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    				<expr_stmt><expr><call><name>ofy</name><argument_list>()</argument_list></call><operator>.</operator><call><name>save</name><argument_list>()</argument_list></call><operator>.</operator><call><name>entity</name><argument_list>(<argument><expr><name>project</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>now</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    			}</block></function>

        	}</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    	}</block> <catch>catch <parameter_list>( <parameter><decl><type><name>IllegalArgumentException</name></type> <name>e</name></decl></parameter> )</parameter_list><block>{
    		<expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    	}</block></catch></try>
       <comment type="line">// HistoryLog.Init(projectID).publish();</comment>

	    <expr_stmt><expr><call><name><name>FirebaseService</name><operator>.</operator><name>publish</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	}</block></function>

	<function><specifier>public</specifier> <type><name>void</name></type> <name>doFetchMicrotask</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>HttpServletRequest</name></type> <name>req</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>HttpServletResponse</name></type> <name>resp</name></decl></parameter>,<parameter><decl><type><specifier>final</specifier> <name>User</name></type> <name>user</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>boolean</name></type> <name>isAlreadyUnassigned</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
	<block>{
		<comment type="line">// Since the transaction may fail and retry,</comment>
		<comment type="line">// anything that mutates the values of req and resp MUST be outside the transaction so it only occurs once.</comment>
		<comment type="line">// And anything inside the transaction MUST not mutate the values produced.</comment>
		<decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>projectID</name> <init>= <expr><operator>(</operator><name>String</name><operator>)</operator> <call><name><name>req</name><operator>.</operator><name>getAttribute</name></name><argument_list>(<argument><expr><literal type="string">"project"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<decl_stmt><decl><type><name>String</name></type> <name>jsonResponse</name> <init>= <expr><literal type="string">"{}"</literal></expr></init></decl>;</decl_stmt>
    	<try>try <block>{
    		<expr_stmt><expr><name>jsonResponse</name><operator>=</operator><call><name>ofy</name><argument_list>()</argument_list></call><operator>.</operator><call><name>transact</name><argument_list>( <argument><expr><operator>new</operator> <class><super><name><name>Work</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list><block>{

    			<function><specifier>public</specifier> <type><name>String</name></type> <name>run</name><parameter_list>()</parameter_list> <block>{
    				<decl_stmt><decl><type><name>ThreadContext</name></type> <name>threadContext</name> <init>= <expr><call><name><name>ThreadContext</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    				<expr_stmt><expr><call><name><name>threadContext</name><operator>.</operator><name>reset</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    				<decl_stmt><decl><type><name><name>Key</name><argument_list type="generic">&lt;<argument><name>Microtask</name></argument>&gt;</argument_list></name></type> <name>microtaskKey</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
    		    	<decl_stmt><decl><type><name>int</name></type> <name>firstFetch</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    		    	<decl_stmt><decl><type><specifier>final</specifier> <name>Project</name></type> <name>project</name> <init>= <expr><call><name><name>Project</name><operator>.</operator><name>Create</name></name><argument_list>(<argument><expr><name>projectID</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    				<decl_stmt><decl><type><specifier>final</specifier> <name>Worker</name></type> <name>worker</name>   <init>= <expr><call><name><name>Worker</name><operator>.</operator><name>Create</name></name><argument_list>(<argument><expr><name>user</name></expr></argument>, <argument><expr><name>project</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    				<if>if<condition>( <expr><operator>!</operator> <name>isAlreadyUnassigned</name></expr> )</condition><then><block>{
    		    		<expr_stmt><expr><name>microtaskKey</name> <operator>=</operator> <call><name><name>project</name><operator>.</operator><name>lookupMicrotaskAssignment</name></name><argument_list>( <argument><expr><call><name><name>worker</name><operator>.</operator><name>getUserid</name></name><argument_list>()</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    		    	}</block></then></if>

    		    	<if>if<condition>( <expr><name>microtaskKey</name> <operator>==</operator> <literal type="null">null</literal></expr> )</condition><then><block>{
    		    		<expr_stmt><expr><name>microtaskKey</name> <operator>=</operator> <call><name><name>project</name><operator>.</operator><name>assignMicrotask</name></name><argument_list>( <argument><expr><call><name><name>worker</name><operator>.</operator><name>getUserid</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    		    		<expr_stmt><expr><name>firstFetch</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    		    	}</block></then></if>
    				<expr_stmt><expr><call><name>ofy</name><argument_list>()</argument_list></call><operator>.</operator><call><name>save</name><argument_list>()</argument_list></call><operator>.</operator><call><name>entity</name><argument_list>(<argument><expr><name>project</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>now</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    				<if>if <condition>(<expr><name>microtaskKey</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
    					<return>return <expr><literal type="string">"{}"</literal></expr>;</return>
    				}</block></then> <else>else<block>{

    					<return>return <expr><literal type="string">"{\"microtaskKey\": \""</literal><operator>+</operator><call><name><name>Microtask</name><operator>.</operator><name>keyToString</name></name><argument_list>(<argument><expr><name>microtaskKey</name></expr></argument>)</argument_list></call><operator>+</operator><literal type="string">"\", \"firstFetch\": \""</literal><operator>+</operator> <name>firstFetch</name><operator>+</operator><literal type="string">"\"}"</literal></expr>;</return>
    				}</block></else></if>

    			}</block></function>

        	}</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    	}</block> <catch>catch <parameter_list>( <parameter><decl><type><name>IllegalArgumentException</name></type> <name>e</name></decl></parameter> )</parameter_list><block>{
    		<expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    	}</block></catch></try>
       <comment type="line">// HistoryLog.Init(projectID).publish();</comment>

		<expr_stmt><expr><call><name>renderJson</name><argument_list>(<argument><expr><name>resp</name></expr></argument>, <argument><expr><name>jsonResponse</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><call><name><name>FirebaseService</name><operator>.</operator><name>publish</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>


	}</block></function>

	<function><specifier>public</specifier> <type><name>void</name></type> <name>doChallengeReview</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>HttpServletRequest</name></type> <name>req</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>HttpServletResponse</name></type> <name>resp</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
	<block>{
		<decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>projectId</name> <init>= <expr><operator>(</operator><name>String</name><operator>)</operator> <call><name><name>req</name><operator>.</operator><name>getAttribute</name></name><argument_list>(<argument><expr><literal type="string">"project"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>reviewKey</name>    <init>= <expr><call><name><name>req</name><operator>.</operator><name>getParameter</name></name><argument_list>(<argument><expr><literal type="string">"reviewKey"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>challengeTextDTO</name>      <init>= <expr><call><name><name>Util</name><operator>.</operator><name>convertStreamToString</name></name><argument_list>(<argument><expr><call><name><name>req</name><operator>.</operator><name>getInputStream</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"doChallenge review"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>MicrotaskCommand</name><operator>.</operator><name>createChallengeReview</name></name><argument_list>(<argument><expr><call><name><name>Microtask</name><operator>.</operator><name>stringToKey</name></name><argument_list>(<argument><expr><name>reviewKey</name></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><name>challengeTextDTO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>executeCommands</name><argument_list>(<argument><expr><name>projectId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	}</block></function>



	<comment type="block" format="javadoc">/**
	 * Enqueue a submit task into the default task queue
	 * and fetch a queued microtask for the user
	 *
	 * @param req
	 * @param resp
	 * @throws IOException
	 */</comment>
	<function><specifier>public</specifier> <type><name>void</name></type> <name>doEnqueueSubmit</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>HttpServletRequest</name></type> <name>req</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>HttpServletResponse</name></type> <name>resp</name></decl></parameter>,<parameter><decl><type><specifier>final</specifier> <name>User</name></type> <name>user</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws><block>{

		<comment type="line">// restrieve the submit data</comment>
		<decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>projectId</name>     <init>= <expr><operator>(</operator><name>String</name><operator>)</operator> <call><name><name>req</name><operator>.</operator><name>getAttribute</name></name><argument_list>(<argument><expr><literal type="string">"project"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>workerId</name>      <init>= <expr><call><name><name>user</name><operator>.</operator><name>getUserId</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>microtaskKey</name>  <init>= <expr><call><name><name>req</name><operator>.</operator><name>getParameter</name></name><argument_list>(<argument><expr><literal type="string">"key"</literal></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
		<decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>JsonDTO</name>       <init>= <expr><call><name><name>Util</name><operator>.</operator><name>convertStreamToString</name></name><argument_list>(<argument><expr><call><name><name>req</name><operator>.</operator><name>getInputStream</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>skip</name>          <init>= <expr><call><name><name>req</name><operator>.</operator><name>getParameter</name></name><argument_list>(<argument><expr><literal type="string">"skip"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>disablePoint</name>  <init>= <expr><call><name><name>req</name><operator>.</operator><name>getParameter</name></name><argument_list>(<argument><expr><literal type="string">"disablepoint"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier>final</specifier> <name>Boolean</name></type> <name>autoFetch</name>	   <init>= <expr><call><name><name>Boolean</name><operator>.</operator><name>parseBoolean</name></name><argument_list>(<argument><expr><call><name><name>req</name><operator>.</operator><name>getParameter</name></name><argument_list>(<argument><expr><literal type="string">"autoFetch"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"received microtask "</literal><operator>+</operator><name>microtaskKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>unassignMicrotask</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><name>resp</name></expr></argument>, <argument><expr><name>user</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if>if<condition>(<expr><name>autoFetch</name></expr>)</condition><then>
			<block type="pseudo"><expr_stmt><expr><call><name>doFetchMicrotask</name><argument_list>(<argument><expr><name>req</name></expr></argument>,<argument><expr><name>resp</name></expr></argument>,<argument><expr><name>user</name></expr></argument>,<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
		<else>else
			<block type="pseudo"><expr_stmt><expr><call><name>renderJson</name><argument_list>(<argument><expr><name>resp</name></expr></argument>, <argument><expr><literal type="string">"{}"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>


		<comment type="line">// create the submit task</comment>
		<decl_stmt><decl><type><name>TaskOptions</name></type> <name>task</name> <init>= <expr><call><name>withUrl</name><argument_list>(<argument><expr><literal type="string">"/worker"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>task</name><operator>.</operator><name>param</name></name><argument_list>(<argument><expr><literal type="string">"projectId"</literal></expr></argument>, <argument><expr><name>projectId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>task</name><operator>.</operator><name>param</name></name><argument_list>(<argument><expr><literal type="string">"workerId"</literal></expr></argument>, <argument><expr><name>workerId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>task</name><operator>.</operator><name>param</name></name><argument_list>(<argument><expr><literal type="string">"microtaskKey"</literal></expr></argument>, <argument><expr><name>microtaskKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>task</name><operator>.</operator><name>param</name></name><argument_list>(<argument><expr><literal type="string">"JsonDTO"</literal></expr></argument>, <argument><expr><name>JsonDTO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>task</name><operator>.</operator><name>param</name></name><argument_list>(<argument><expr><literal type="string">"skip"</literal></expr></argument>, <argument><expr><name>skip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>task</name><operator>.</operator><name>param</name></name><argument_list>(<argument><expr><literal type="string">"disablepoint"</literal></expr></argument>, <argument><expr><name>disablePoint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="line">// add the task to the default task queue</comment>
        <decl_stmt><decl><type><name>Queue</name></type> <name>queue</name> <init>= <expr><call><name><name>QueueFactory</name><operator>.</operator><name>getDefaultQueue</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>queue</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>task</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<comment type="line">//        String time = new SimpleDateFormat("HH:mm:ss").format(new Date());</comment>
<comment type="line">//		System.out.println(time + " - ADD: "+microtaskKey+" by "+workerId);</comment>
	}</block></function>

	<function><specifier>public</specifier> <type><name>void</name></type> <name>doExecuteSubmit</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>HttpServletRequest</name></type> <name>req</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>HttpServletResponse</name></type> <name>resp</name></decl></parameter>)</parameter_list><block>{

		<decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>projectID</name>    <init>= <expr><call><name><name>req</name><operator>.</operator><name>getParameter</name></name><argument_list>(<argument><expr><literal type="string">"projectId"</literal></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
		<decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>workerID</name>     <init>= <expr><call><name><name>req</name><operator>.</operator><name>getParameter</name></name><argument_list>(<argument><expr><literal type="string">"workerId"</literal></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
		<decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>microtaskKey</name> <init>= <expr><call><name><name>req</name><operator>.</operator><name>getParameter</name></name><argument_list>(<argument><expr><literal type="string">"microtaskKey"</literal></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
		<decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>JsonDTO</name>      <init>= <expr><call><name><name>req</name><operator>.</operator><name>getParameter</name></name><argument_list>(<argument><expr><literal type="string">"JsonDTO"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier>final</specifier> <name>Boolean</name></type> <name>skip</name>        <init>= <expr><call><name><name>Boolean</name><operator>.</operator><name>parseBoolean</name></name><argument_list>(<argument><expr><call><name><name>req</name><operator>.</operator><name>getParameter</name></name><argument_list>(<argument><expr><literal type="string">"skip"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier>final</specifier> <name>Boolean</name></type> <name>disablePoint</name><init>= <expr><call><name><name>Boolean</name><operator>.</operator><name>parseBoolean</name></name><argument_list>(<argument><expr><call><name><name>req</name><operator>.</operator><name>getParameter</name></name><argument_list>(<argument><expr><literal type="string">"disablepoint"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<comment type="line">// Create the skip or submit commands</comment>
		<if>if <condition>(<expr><name>skip</name></expr>)</condition><then>
			<block type="pseudo"><expr_stmt><expr><call><name><name>ProjectCommand</name><operator>.</operator><name>skipMicrotask</name></name><argument_list>( <argument><expr><name>microtaskKey</name></expr></argument>, <argument><expr><name>workerID</name></expr></argument>, <argument><expr><name>disablePoint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
		<else>else<block>{
			<expr_stmt><expr><call><name><name>ProjectCommand</name><operator>.</operator><name>submitMicrotask</name></name><argument_list>( <argument><expr><name>microtaskKey</name></expr></argument>, <argument><expr><name>JsonDTO</name></expr></argument>, <argument><expr><name>workerID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></else></if>

		<comment type="line">// Copy the command back out the context to initially populate the command queue.</comment>
		<expr_stmt><expr><call><name>executeCommands</name><argument_list>(<argument><expr><name>projectID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>resp</name><operator>.</operator><name>setStatus</name></name><argument_list>(<argument><expr><name><name>HttpServletResponse</name><operator>.</operator><name>SC_OK</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	}</block></function>

	<function><specifier>private</specifier> <type><name>void</name></type> <name>renderJson</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>HttpServletResponse</name></type> <name>resp</name></decl></parameter>,<parameter><decl><type><name>String</name></type> <name>json</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws><block>{
		<expr_stmt><expr><call><name><name>resp</name><operator>.</operator><name>setContentType</name></name><argument_list>(<argument><expr><literal type="string">"json;charset=utf-8"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>PrintWriter</name></type> <name>out</name> <init>= <expr><call><name><name>resp</name><operator>.</operator><name>getWriter</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>out</name><operator>.</operator><name>print</name></name><argument_list>(<argument><expr><name>json</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>out</name><operator>.</operator><name>flush</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<function><specifier>private</specifier> <type><name>void</name></type> <name>renderCode</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>HttpServletResponse</name></type> <name>resp</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>projectId</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws><block>{
		<expr_stmt><expr><call><name><name>resp</name><operator>.</operator><name>setContentType</name></name><argument_list>(<argument><expr><literal type="string">"text/javascript;charset=utf-8"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>Project</name></type> <name>project</name><init>=  <expr><call><name><name>Project</name><operator>.</operator><name>Create</name></name><argument_list>(<argument><expr><name>projectId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>String</name></type> <name>allCode</name><init>= <expr><call><name><name>FirebaseService</name><operator>.</operator><name>getAllCode</name></name><argument_list>(<argument><expr><call><name><name>project</name><operator>.</operator><name>getID</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>PrintWriter</name></type> <name>out</name> <init>= <expr><call><name><name>resp</name><operator>.</operator><name>getWriter</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>out</name><operator>.</operator><name>print</name></name><argument_list>(<argument><expr><name>allCode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>out</name><operator>.</operator><name>flush</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	}</block></function>


	<comment type="line">// Notify the server that a microtask has been completed.</comment>
		<function><specifier>public</specifier> <type><name>void</name></type> <name>doLogout</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>HttpServletRequest</name></type> <name>req</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>HttpServletResponse</name></type> <name>resp</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>String</name></type> <name>projectID</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
		<block>{
			<decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>logoutWorkerID</name>     <init>= <expr><call><name><name>req</name><operator>.</operator><name>getParameter</name></name><argument_list>(<argument><expr><literal type="string">"workerid"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name>doUserLogout</name><argument_list>(<argument><expr><name>projectID</name></expr></argument>,<argument><expr><name>logoutWorkerID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></function>




	<comment type="line">// Logs out the specified user from the service</comment>
	<function><specifier>public</specifier> <type><name>void</name></type> <name>doUserLogout</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>String</name></type> <name>projectID</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>String</name></type> <name>userID</name></decl></parameter>)</parameter_list>
	<block>{
		<if>if <condition>(<expr><name>userID</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <call><name><name>userID</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then>
			<block type="pseudo"><return>return;</return></block></then></if>


		<comment type="line">// Reset the actual Thread Context</comment>
		<expr_stmt><expr><call><name><name>ThreadContext</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>reset</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name><name>ProjectCommand</name><operator>.</operator><name>logoutWorker</name></name><argument_list>(<argument><expr><name>userID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>executeCommands</name><argument_list>(<argument><expr><name>projectID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	}</block></function>

	<comment type="line">// Executes all of the specified commands and any commands that may subsequently be generated</comment>
	<function><specifier>private</specifier> <type><name>void</name></type> <name>executeCommands</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>String</name></type> <name>projectId</name></decl></parameter>)</parameter_list>
	<block>{
		<decl_stmt><decl><type><name>ThreadContext</name></type> <name>starting</name> <init>= <expr><call><name><name>ThreadContext</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name><name>LinkedList</name><argument_list type="generic">&lt;<argument><name>Command</name></argument>&gt;</argument_list></name></type> <name>commandQueue</name>    <init>= <expr><operator>new</operator> <call><name><name>LinkedList</name><argument_list type="generic">&lt;<argument><name>Command</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>starting</name><operator>.</operator><name>getCommands</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<comment type="line">// Execute commands until done, adding commands as created.</comment>
	    <while>while<condition>(<expr><operator>!</operator> <call><name><name>commandQueue</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{

	    	<decl_stmt><decl><type><specifier>final</specifier> <name>Command</name></type> <name>command</name> <init>= <expr><call><name><name>commandQueue</name><operator>.</operator><name>remove</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

	    	<expr_stmt><expr><call><name>ofy</name><argument_list>()</argument_list></call><operator>.</operator><call><name>transactNew</name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>VoidWork</name></super><argument_list>()</argument_list> <block>{
                <function><specifier>public</specifier> <type><name>void</name></type> <name>vrun</name><parameter_list>()</parameter_list>
                <block>{
                	<comment type="line">//get the context and reset it,</comment>
                	<comment type="line">//this is done to remove the changement in the rollback</comment>
                    <decl_stmt><decl><type><name>ThreadContext</name></type> <name>threadContext</name> <init>= <expr><call><name><name>ThreadContext</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name><name>threadContext</name><operator>.</operator><name>reset</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

                    <comment type="line">//execute the command</comment>
                    <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>execute</name></name><argument_list>(<argument><expr><name>projectId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></function>
            }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>


            <decl_stmt><decl><type><name>ThreadContext</name></type> <name>threadContext</name> <init>= <expr><call><name><name>ThreadContext</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <comment type="line">//adds the new commands generated at the beginning of the list</comment>
	    	<expr_stmt><expr><call><name><name>commandQueue</name><operator>.</operator><name>addAll</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><call><name><name>threadContext</name><operator>.</operator><name>getCommands</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    	<comment type="line">//HistoryLog.Init(projectId).publish();</comment>

	    	<comment type="line">// history log writes and the other</comment>
            <comment type="line">// firebase writes are done</comment>
            <comment type="line">// outside of the transactions</comment>
	    	<expr_stmt><expr><call><name><name>FirebaseService</name><operator>.</operator><name>publish</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	    	<expr_stmt><expr><call><name><name>threadContext</name><operator>.</operator><name>reset</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

          }</block></while>
	}</block></function>

	<comment type="line">// Writes the specified html message to resp, wrapping it in an html page</comment>
	<function><specifier>private</specifier> <type><name>void</name></type> <name>writeResponseString</name><parameter_list>(<parameter><decl><type><name>HttpServletResponse</name></type> <name>resp</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>message</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
	<block>{
		<comment type="line">// Setup the response</comment>
		<expr_stmt><expr><call><name><name>resp</name><operator>.</operator><name>setContentType</name></name><argument_list>(<argument><expr><literal type="string">"text/html"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <decl_stmt><decl><type><name>PrintWriter</name></type> <name>out</name> <init>= <expr><call><name><name>resp</name><operator>.</operator><name>getWriter</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	    <expr_stmt><expr><call><name><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"&lt;html&gt;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><call><name><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"&lt;head&gt;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><call><name><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"&lt;title&gt;CrowdCoding&lt;/title&gt;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><call><name><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"&lt;/head&gt;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><call><name><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"&lt;body&gt;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><call><name><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><call><name><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"&lt;/body&gt;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><call><name><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"&lt;/html&gt;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>out</name><operator>.</operator><name>flush</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	}</block></function>
}</block></class></unit>

<unit revision="0.9.5" language="Java" filename="CrowdCode-com/crowdcoding/entities/microtasks/ImplementBehavior.java" hash="b22e3bbc3a60a2f8bc74a5a60cd98cacb5fd9f3b"><package>package <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>entities</name><operator>.</operator><name>microtasks</name></name>;</package>

<import>import static <name><name>com</name><operator>.</operator><name>googlecode</name><operator>.</operator><name>objectify</name><operator>.</operator><name>ObjectifyService</name><operator>.</operator><name>ofy</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>commands</name><operator>.</operator><name>WorkerCommand</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>dto</name><operator>.</operator><name>DTO</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>dto</name><operator>.</operator><name>ajax</name><operator>.</operator><name>microtask</name><operator>.</operator><name>submission</name><operator>.</operator><name>ImplementBehaviorDTO</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>dto</name><operator>.</operator><name>firebase</name><operator>.</operator><name>microtasks</name><operator>.</operator><name>ImplementBehaviorInFirebase</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>entities</name><operator>.</operator><name>artifacts</name><operator>.</operator><name>Artifact</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>entities</name><operator>.</operator><name>artifacts</name><operator>.</operator><name>Function</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>history</name><operator>.</operator><name>HistoryLog</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>history</name><operator>.</operator><name>MicrotaskSpawned</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>util</name><operator>.</operator><name>FirebaseService</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>googlecode</name><operator>.</operator><name>objectify</name><operator>.</operator><name>Key</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>googlecode</name><operator>.</operator><name>objectify</name><operator>.</operator><name>Ref</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>googlecode</name><operator>.</operator><name>objectify</name><operator>.</operator><name>annotation</name><operator>.</operator><name>Subclass</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>googlecode</name><operator>.</operator><name>objectify</name><operator>.</operator><name>annotation</name><operator>.</operator><name>Load</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>googlecode</name><operator>.</operator><name>objectify</name><operator>.</operator><name>annotation</name><operator>.</operator><name>Parent</name></name>;</import>

<class><annotation>@<name>Subclass</name><argument_list>(<argument><expr><name>index</name><operator>=</operator><literal type="boolean">true</literal></expr></argument>)</argument_list></annotation>
<specifier>public</specifier> class <name>ImplementBehavior</name> <super><extends>extends <name>Microtask</name></extends></super>
<block>{
	<enum><specifier>public</specifier> enum <name>PromptType</name> <block>{ <decl><name>WRITE</name></decl>, <decl><name>CALLEE_CHANGE</name></decl>, <decl><name>REMOVE_CALLEE</name></decl>, <decl><name>CORRECT</name></decl> }</block></enum><empty_stmt>;</empty_stmt>
	<decl_stmt><decl><annotation>@<name>Parent</name></annotation> <annotation>@<name>Load</name></annotation> <specifier>private</specifier> <type><name><name>Ref</name><argument_list type="generic">&lt;<argument><name>Function</name></argument>&gt;</argument_list></name></type> <name>function</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>private</specifier> <type><name>PromptType</name></type> <name>promptType</name></decl>;</decl_stmt>

	<decl_stmt><decl><specifier>private</specifier> <type><name>long</name></type> <name>testId</name></decl>;</decl_stmt>					<comment type="line">//Only defined for WRITE</comment>

	<decl_stmt><decl><specifier>private</specifier> <type><name>int</name></type> <name>oldCalleeVersion</name></decl>;</decl_stmt>			<comment type="line">//Only defined for CALLEE_CHANGED</comment>

	<decl_stmt><decl><specifier>private</specifier> <type><name>String</name></type> <name>disputeText</name></decl>;</decl_stmt>				<comment type="line">// Only defined for CORRECT and REMOVE_CALLEE</comment>
	<decl_stmt><decl><specifier>private</specifier> <type><name>long</name></type> <name>calleeId</name></decl>;</decl_stmt>					<comment type="line">// Only defined for REMOVE_CALLEE and CALLEE_CHANGED</comment>

	<decl_stmt><decl><specifier>private</specifier> <type><name>long</name></type>   <name>disputeId</name></decl>;</decl_stmt>				<comment type="line">//id of the artifact that disputed this function</comment>

	<comment type="line">// Default constructor for deserialization</comment>
	<constructor><specifier>private</specifier> <name>ImplementBehavior</name><parameter_list>()</parameter_list>
	<block>{
	}</block></constructor>

	<comment type="line">// Initialization constructor for a WRITE write function. Microtask is not ready.</comment>
	<constructor><specifier>public</specifier> <name>ImplementBehavior</name><parameter_list>(<parameter><decl><type><name>Function</name></type> <name>function</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>testId</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>projectId</name></decl></parameter>)</parameter_list>
	<block>{
		<expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>projectId</name></expr></argument>, <argument><expr><call><name><name>function</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>promptType</name></name> <operator>=</operator> <name><name>PromptType</name><operator>.</operator><name>WRITE</name></name></expr>;</expr_stmt>

		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>testId</name></name>		<operator>=</operator> <name>testId</name></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>implementBehavior</name><argument_list>(<argument><expr><name>function</name></expr></argument>, <argument><expr><name>projectId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></constructor>

	<comment type="line">// Initialization constructor for a DESCRIPTION_CHANGE write function. Microtask is not ready.</comment>
	<constructor><specifier>public</specifier> <name>ImplementBehavior</name><parameter_list>(<parameter><decl><type><name>Function</name></type> <name>function</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>calleeId</name></decl></parameter>,
			<parameter><decl><type><name>int</name></type> <name>oldCalleeVersion</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>projectId</name></decl></parameter>)</parameter_list>
	<block>{
		<expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>projectId</name></expr></argument>,<argument><expr><call><name><name>function</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>promptType</name></name> <operator>=</operator> <name><name>PromptType</name><operator>.</operator><name>CALLEE_CHANGE</name></name></expr>;</expr_stmt>

		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>calleeId</name></name> <operator>=</operator> <name>calleeId</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>oldCalleeVersion</name></name> <operator>=</operator> <name>oldCalleeVersion</name></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>implementBehavior</name><argument_list>(<argument><expr><name>function</name></expr></argument>, <argument><expr><name>projectId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></constructor>

	<comment type="line">// Initialization constructor for a RE_EDIT write function. Microtask is not ready.</comment>
	<constructor><specifier>public</specifier> <name>ImplementBehavior</name><parameter_list>(<parameter><decl><type><name>Function</name></type> <name>function</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>disputeText</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>calleeId</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>projectId</name></decl></parameter>)</parameter_list>
	<block>{
		<expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>projectId</name></expr></argument>,<argument><expr><call><name><name>function</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>promptType</name></name> <operator>=</operator> <name><name>PromptType</name><operator>.</operator><name>REMOVE_CALLEE</name></name></expr>;</expr_stmt>

		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>disputeText</name></name> <operator>=</operator> <name>disputeText</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>calleeId</name></name> <operator>=</operator> <name>calleeId</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>implementBehavior</name><argument_list>(<argument><expr><name>function</name></expr></argument>, <argument><expr><name>projectId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></constructor>
	<constructor><specifier>public</specifier> <name>ImplementBehavior</name><parameter_list>(<parameter><decl><type><name>Function</name></type> <name>function</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>disputeText</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>projectId</name></decl></parameter>)</parameter_list>
	<block>{
		<expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>projectId</name></expr></argument>,<argument><expr><call><name><name>function</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>promptType</name></name> <operator>=</operator> <name><name>PromptType</name><operator>.</operator><name>CORRECT</name></name></expr>;</expr_stmt>

		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>disputeText</name></name> <operator>=</operator> <name>disputeText</name></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>implementBehavior</name><argument_list>(<argument><expr><name>function</name></expr></argument>, <argument><expr><name>projectId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></constructor>


	<function><specifier>public</specifier> <type><name>Microtask</name></type> <name>copy</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>projectId</name></decl></parameter>)</parameter_list>
	<block>{
		<switch>switch <condition>(<expr><name>promptType</name></expr>)</condition> <block>{
			<case>case <expr><name>WRITE</name></expr>:</case>
				<return>return <expr><operator>new</operator> <call><name>ImplementBehavior</name><argument_list>( <argument><expr><operator>(</operator><name>Function</name><operator>)</operator> <call><name>getOwningArtifact</name><argument_list>()</argument_list></call></expr></argument> , <argument><expr><name>testId</name></expr></argument>, <argument><expr><name>projectId</name></expr></argument>)</argument_list></call></expr>;</return>
			<case>case <expr><name>CALLEE_CHANGE</name></expr>:</case>
				<return>return <expr><operator>new</operator> <call><name>ImplementBehavior</name><argument_list>( <argument><expr><operator>(</operator><name>Function</name><operator>)</operator> <call><name>getOwningArtifact</name><argument_list>()</argument_list></call></expr></argument> , <argument><expr><name>calleeId</name></expr></argument>, <argument><expr><name>oldCalleeVersion</name></expr></argument>, <argument><expr><name>projectId</name></expr></argument>)</argument_list></call></expr>;</return>
			<case>case <expr><name>REMOVE_CALLEE</name></expr>:</case>
				<return>return <expr><operator>new</operator> <call><name>ImplementBehavior</name><argument_list>( <argument><expr><operator>(</operator><name>Function</name><operator>)</operator> <call><name>getOwningArtifact</name><argument_list>()</argument_list></call></expr></argument> , <argument><expr><name><name>this</name><operator>.</operator><name>disputeText</name></name></expr></argument>, <argument><expr><name>disputeId</name></expr></argument>, <argument><expr><name>projectId</name></expr></argument>)</argument_list></call></expr>;</return>
			<case>case <expr><name>CORRECT</name></expr>:</case>
				<return>return <expr><operator>new</operator> <call><name>ImplementBehavior</name><argument_list>(<argument><expr><operator>(</operator><name>Function</name><operator>)</operator> <call><name>getOwningArtifact</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>this</name><operator>.</operator><name>disputeText</name></name></expr></argument>, <argument><expr><name>projectId</name></expr></argument>)</argument_list></call></expr>;</return>
	
			<default>default:</default>
				<return>return <expr><literal type="null">null</literal></expr>;</return>
		}</block></switch>
	}</block></function>

	<function><specifier>public</specifier> <type><name><name>Key</name><argument_list type="generic">&lt;<argument><name>Microtask</name></argument>&gt;</argument_list></name></type> <name>getKey</name><parameter_list>()</parameter_list>
	<block>{
		<return>return <expr><call><name><name>Key</name><operator>.</operator><name>create</name></name><argument_list>( <argument><expr><call><name><name>function</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>Microtask</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><name><name>this</name><operator>.</operator><name>id</name></name></expr></argument> )</argument_list></call></expr>;</return>
	}</block></function>


	<function><specifier>private</specifier> <type><name>void</name></type> <name>implementBehavior</name><parameter_list>(<parameter><decl><type><name>Function</name></type> <name>function</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>projectId</name></decl></parameter>)</parameter_list>
	<block>{
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>function</name></name> <operator>=</operator> <call><name><name>function</name><operator>.</operator><name>getRef</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ofy</name><argument_list>()</argument_list></call><operator>.</operator><call><name>load</name><argument_list>()</argument_list></call><operator>.</operator><call><name>ref</name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>function</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ofy</name><argument_list>()</argument_list></call><operator>.</operator><call><name>save</name><argument_list>()</argument_list></call><operator>.</operator><call><name>entity</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>now</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>FirebaseService</name><operator>.</operator><name>writeMicrotaskCreated</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>ImplementBehaviorInFirebase</name><argument_list>(
				<argument><expr><name>id</name></expr></argument>,
				<argument><expr><call><name><name>this</name><operator>.</operator><name>microtaskTitle</name></name><argument_list>()</argument_list></call></expr></argument>,
				<argument><expr><call><name><name>this</name><operator>.</operator><name>microtaskName</name></name><argument_list>()</argument_list></call></expr></argument>,
				<argument><expr><call><name><name>function</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>,
				<argument><expr><call><name><name>function</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr></argument>,
				<argument><expr><name>submitValue</name></expr></argument>,
				<argument><expr><call><name><name>function</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr></argument>,
				<argument><expr><call><name><name>this</name><operator>.</operator><name>promptType</name><operator>.</operator><name>name</name></name><argument_list>()</argument_list></call></expr></argument>,
				<argument><expr><name><name>this</name><operator>.</operator><name>testId</name></name></expr></argument>,
				<argument><expr><name><name>this</name><operator>.</operator><name>calleeId</name></name></expr></argument>,
				<argument><expr><name><name>this</name><operator>.</operator><name>oldCalleeVersion</name></name></expr></argument>,
				<argument><expr><name><name>this</name><operator>.</operator><name>disputeText</name></name></expr></argument>)</argument_list></call></expr></argument>,
				<argument><expr><call><name><name>Microtask</name><operator>.</operator><name>keyToString</name></name><argument_list>(<argument><expr><call><name><name>this</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
				<argument><expr><name>projectId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


		<expr_stmt><expr><call><name><name>HistoryLog</name><operator>.</operator><name>Init</name></name><argument_list>(<argument><expr><name>projectId</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>addEvent</name><argument_list>(<argument><expr><operator>new</operator> <call><name>MicrotaskSpawned</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<function><specifier>protected</specifier> <type><name>void</name></type> <name>doSubmitWork</name><parameter_list>(<parameter><decl><type><name>DTO</name></type> <name>dto</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>workerID</name></decl></parameter>)</parameter_list>
	<block>{
		<expr_stmt><expr><call><name><name>function</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>implementBehaviorCompleted</name><argument_list>(<argument><expr><operator>(</operator><name>ImplementBehaviorDTO</name><operator>)</operator> <name>dto</name></expr></argument>, <argument><expr><name>disputeId</name></expr></argument> , <argument><expr><name>projectId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<comment type="line">//		WorkerCommand.awardPoints(workerID, this.submitValue);</comment>
		<comment type="line">// increase the stats counter</comment>
		<expr_stmt><expr><call><name><name>WorkerCommand</name><operator>.</operator><name>increaseStat</name></name><argument_list>(<argument><expr><name>workerID</name></expr></argument>, <argument><expr><literal type="string">"functions"</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<function><specifier>public</specifier> <type><name>PromptType</name></type> <name>getPromptType</name><parameter_list>()</parameter_list>
	<block>{
		<return>return <expr><name>promptType</name></expr>;</return>
	}</block></function>

	<function><specifier>protected</specifier> <type><name>Class</name></type> <name>getDTOClass</name><parameter_list>()</parameter_list>
	<block>{
		<return>return <expr><name><name>ImplementBehaviorDTO</name><operator>.</operator><name>class</name></name></expr>;</return>
	}</block></function>

		<function><specifier>public</specifier> <type><name>Function</name></type> <name>getFunction</name><parameter_list>()</parameter_list>
	<block>{
		<return>return <expr><call><name><name>function</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr>;</return>
	}</block></function>


	<function><specifier>public</specifier> <type><name>Artifact</name></type> <name>getOwningArtifact</name><parameter_list>()</parameter_list>
	<block>{
		<decl_stmt><decl><type><name>Artifact</name></type> <name>owning</name></decl>;</decl_stmt>
		<try>try <block>{
			<return>return <expr><call><name><name>function</name><operator>.</operator><name>safe</name></name><argument_list>()</argument_list></call></expr>;</return>
		}</block> <catch>catch <parameter_list>( <parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter> )</parameter_list><block>{
			<expr_stmt><expr><call><name>ofy</name><argument_list>()</argument_list></call><operator>.</operator><call><name>load</name><argument_list>()</argument_list></call><operator>.</operator><call><name>ref</name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>function</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><call><name><name>function</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr>;</return>
		}</block></catch></try>
	}</block></function>

	<function><specifier>public</specifier> <type><name>String</name></type> <name>microtaskTitle</name><parameter_list>()</parameter_list>
	<block>{
		<return>return <expr><literal type="string">"Implement function behavior"</literal></expr>;</return>
	}</block></function>

	<function><specifier>public</specifier> <type><name>String</name></type> <name>microtaskDescription</name><parameter_list>()</parameter_list>
	<block>{
		<return>return <expr><literal type="string">"implement function behaviorn"</literal></expr>;</return>
	}</block></function>


}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="CrowdCode-com/crowdcoding/entities/artifacts/ADT.java" hash="570fe612347aa386fbbf04d96fbe0505bdfa67ea"><package>package <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>entities</name><operator>.</operator><name>artifacts</name></name>;</package>

<import>import static <name><name>com</name><operator>.</operator><name>googlecode</name><operator>.</operator><name>objectify</name><operator>.</operator><name>ObjectifyService</name><operator>.</operator><name>ofy</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashMap</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>LinkedList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>

<import>import <name><name>sun</name><operator>.</operator><name>security</name><operator>.</operator><name>krb5</name><operator>.</operator><name>internal</name><operator>.</operator><name>crypto</name><operator>.</operator><name>DesCbcCrcEType</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>commands</name><operator>.</operator><name>FunctionCommand</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>commands</name><operator>.</operator><name>MicrotaskCommand</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>dto</name><operator>.</operator><name>firebase</name><operator>.</operator><name>artifacts</name><operator>.</operator><name>ADTInFirebase</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>dto</name><operator>.</operator><name>firebase</name><operator>.</operator><name>artifacts</name><operator>.</operator><name>AdvancedTestInFirebase</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>entities</name><operator>.</operator><name>microtasks</name><operator>.</operator><name>Microtask</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>history</name><operator>.</operator><name>ArtifactCreated</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>history</name><operator>.</operator><name>HistoryLog</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>history</name><operator>.</operator><name>PropertyChange</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>util</name><operator>.</operator><name>FirebaseService</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>googlecode</name><operator>.</operator><name>objectify</name><operator>.</operator><name>Ref</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>googlecode</name><operator>.</operator><name>objectify</name><operator>.</operator><name>annotation</name><operator>.</operator><name>Subclass</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>googlecode</name><operator>.</operator><name>objectify</name><operator>.</operator><name>annotation</name><operator>.</operator><name>Index</name></name>;</import>

<class><annotation>@<name>Subclass</name><argument_list>(<argument><expr><name>index</name><operator>=</operator><literal type="boolean">true</literal></expr></argument>)</argument_list></annotation>
<specifier>public</specifier> class <name>ADT</name> <super><extends>extends <name>Artifact</name></extends></super>
<block>{

	<decl_stmt><decl><specifier>private</specifier> <type><name>String</name></type> <name>description</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>private</specifier> <type><name>String</name></type> <name>name</name></decl>;</decl_stmt>

	<comment type="line">// Hash Map that describe the ADT Structure in the form "field Name", "Field type"</comment>
	<decl_stmt><decl><specifier>private</specifier> <type><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>structure</name> <init>= <expr><operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><specifier>private</specifier> <type><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>examples</name> <init>= <expr><operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="line">//functions that currently use the ADT</comment>
	<decl_stmt><decl><specifier>private</specifier> <type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Long</name></argument>&gt;</argument_list></name></type> <name>functionsId</name></decl>;</decl_stmt>


	<comment type="block" format="javadoc">/******************************************************************************************
	 * Constructor
	 *****************************************************************************************/</comment>

	<comment type="line">// Constructor for deserialization</comment>
	<constructor><specifier>protected</specifier> <name>ADT</name><parameter_list>()</parameter_list>
	<block>{
	}</block></constructor>

	<constructor><specifier>public</specifier> <name>ADT</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>description</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>structure</name></decl></parameter>, <parameter><decl><type><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>examples</name></decl></parameter>,<parameter><decl><type><name>boolean</name></type> <name>isApiArtifact</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>isReadOnly</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>projectId</name></decl></parameter>)</parameter_list>
	<block>{
		<expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>isApiArtifact</name></expr></argument>, <argument><expr><name>isReadOnly</name></expr></argument>, <argument><expr><name>projectId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>name</name></name>		 <operator>=</operator> <name>name</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>description</name></name> <operator>=</operator> <name>description</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>structure</name></name>	 <operator>=</operator> <name>structure</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>examples</name></name> 	 <operator>=</operator> <name>examples</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ofy</name><argument_list>()</argument_list></call><operator>.</operator><call><name>save</name><argument_list>()</argument_list></call><operator>.</operator><call><name>entity</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>now</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>storeToFirebase</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name><name>HistoryLog</name><operator>.</operator><name>Init</name></name><argument_list>(<argument><expr><name>projectId</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>addEvent</name><argument_list>(<argument><expr><operator>new</operator> <call><name>ArtifactCreated</name><argument_list>( <argument><expr><name>this</name></expr></argument> )</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></constructor>

	<comment type="block" format="javadoc">/******************************************************************************************
	 * Accessors
	 *****************************************************************************************/</comment>

	<function><specifier>public</specifier> <type><name>String</name></type> <name>getDescription</name><parameter_list>()</parameter_list>
	<block>{
		<return>return <expr><name>description</name></expr>;</return>
	}</block></function>

	<function><specifier>public</specifier> <type><name>String</name></type> <name>getName</name><parameter_list>()</parameter_list>
	<block>{
		<return>return <expr><name>name</name></expr>;</return>
	}</block></function>


	<comment type="block" format="javadoc">/******************************************************************************************
	 * Commands
	 *****************************************************************************************/</comment>

	<comment type="line">// Marks this test as deleted, removing it from the list of tests on its owning function.</comment>
	<function><specifier>public</specifier> <type><name>void</name></type> <name>delete</name><parameter_list>()</parameter_list>
	<block>{
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>isDeleted</name></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ofy</name><argument_list>()</argument_list></call><operator>.</operator><call><name>save</name><argument_list>()</argument_list></call><operator>.</operator><call><name>entity</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>now</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>storeToFirebase</name><argument_list>(<argument><expr><name>projectId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>HistoryLog</name><operator>.</operator><name>Init</name></name><argument_list>(<argument><expr><name>projectId</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>addEvent</name><argument_list>(<argument><expr><operator>new</operator> <call><name>PropertyChange</name><argument_list>(<argument><expr><literal type="string">"isDeleted"</literal></expr></argument>, <argument><expr><literal type="string">"true"</literal></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>


	}</block></function>

	<function><specifier>public</specifier> <type><name>void</name></type> <name>update</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>description</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>structure</name></decl></parameter>)</parameter_list>
	<block>{
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>description</name></name> <operator>=</operator> <name>description</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>name</name></name>		 <operator>=</operator> <name>name</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>structure</name></name>	 <operator>=</operator> <name>structure</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ofy</name><argument_list>()</argument_list></call><operator>.</operator><call><name>save</name><argument_list>()</argument_list></call><operator>.</operator><call><name>entity</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>now</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>storeToFirebase</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	}</block></function>

	<function><specifier>public</specifier> <type><name>void</name></type> <name>addFunction</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>functionId</name></decl></parameter>)</parameter_list>
	<block>{
		<expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>functionsId</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>functionId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ofy</name><argument_list>()</argument_list></call><operator>.</operator><call><name>save</name><argument_list>()</argument_list></call><operator>.</operator><call><name>entity</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>now</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<function><specifier>public</specifier> <type><name>void</name></type> <name>removeFunction</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>functionId</name></decl></parameter>)</parameter_list>
	<block>{
		<expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>functionsId</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><name>functionId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ofy</name><argument_list>()</argument_list></call><operator>.</operator><call><name>save</name><argument_list>()</argument_list></call><operator>.</operator><call><name>entity</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>now</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<comment type="block" format="javadoc">/******************************************************************************************
	 * Firebase methods
	 *****************************************************************************************/</comment>

	<function><specifier>public</specifier> <type><name>void</name></type> <name>storeToFirebase</name><parameter_list>()</parameter_list>
	<block>{
		<decl_stmt><decl><type><name>int</name></type> <name>firebaseVersion</name> <init>= <expr><name>version</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><call><name><name>FirebaseService</name><operator>.</operator><name>writeADT</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>ADTInFirebase</name><argument_list>(
										<argument><expr><name><name>this</name><operator>.</operator><name>id</name></name></expr></argument>,
										<argument><expr><name>firebaseVersion</name></expr></argument>,
										<argument><expr><name>description</name></expr></argument>,
										<argument><expr><name>name</name></expr></argument>,
										<argument><expr><name>structure</name></expr></argument>,
										<argument><expr><name>examples</name></expr></argument>,
										<argument><expr><name>isReadOnly</name></expr></argument>,
										<argument><expr><name>isAPIArtifact</name></expr></argument>,
										<argument><expr><name>isDeleted</name></expr></argument>)</argument_list></call></expr></argument>,
									<argument><expr><name><name>this</name><operator>.</operator><name>id</name></name></expr></argument>,
									<argument><expr><name>firebaseVersion</name></expr></argument>,
									<argument><expr><name>projectId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>incrementVersion</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<comment type="block" format="javadoc">/******************************************************************************************
	 * Objectify Datastore methods
	 *****************************************************************************************/</comment>

	<comment type="line">// Given a ref to a function that has not been loaded from the datastore,</comment>
	<comment type="line">// load it and get the object</comment>
	<function><specifier>public</specifier> <specifier>static</specifier> <type><name>ADT</name></type> <name>load</name><parameter_list>(<parameter><decl><type><name><name>Ref</name><argument_list type="generic">&lt;<argument><name>ADT</name></argument>&gt;</argument_list></name></type> <name>ref</name></decl></parameter>)</parameter_list>
	<block>{
		<return>return <expr><call><name>ofy</name><argument_list>()</argument_list></call><operator>.</operator><call><name>load</name><argument_list>()</argument_list></call><operator>.</operator><call><name>ref</name><argument_list>(<argument><expr><name>ref</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>now</name><argument_list>()</argument_list></call></expr>;</return>
	}</block></function>

	<comment type="line">// Given an id for a test, finds the corresponding test. Returns null if no such test exists.</comment>
	<function><specifier>public</specifier> <specifier>static</specifier> <type><name>ADT</name></type> <name>find</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>id</name></decl></parameter>)</parameter_list>
	<block>{
		<return>return <expr><operator>(</operator><name>ADT</name><operator>)</operator> <call><name>ofy</name><argument_list>()</argument_list></call><operator>.</operator><call><name>load</name><argument_list>()</argument_list></call><operator>.</operator><call><name>key</name><argument_list>(<argument><expr><call><name><name>Artifact</name><operator>.</operator><name>getKey</name></name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>now</name><argument_list>()</argument_list></call></expr>;</return>
	}</block></function>

}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="CrowdCode-com/crowdcoding/entities/artifacts/Artifact.java" hash="0901663c17a4b785287f5fac3b3df3775be9b970"><package>package <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>entities</name><operator>.</operator><name>artifacts</name></name>;</package>

<import>import static <name><name>com</name><operator>.</operator><name>googlecode</name><operator>.</operator><name>objectify</name><operator>.</operator><name>ObjectifyService</name><operator>.</operator><name>ofy</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>LinkedList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Queue</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>commands</name><operator>.</operator><name>ProjectCommand</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>entities</name><operator>.</operator><name>microtasks</name><operator>.</operator><name>Microtask</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>googlecode</name><operator>.</operator><name>objectify</name><operator>.</operator><name>Key</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>googlecode</name><operator>.</operator><name>objectify</name><operator>.</operator><name>Ref</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>googlecode</name><operator>.</operator><name>objectify</name><operator>.</operator><name>annotation</name><operator>.</operator><name>Entity</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>googlecode</name><operator>.</operator><name>objectify</name><operator>.</operator><name>annotation</name><operator>.</operator><name>Id</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>googlecode</name><operator>.</operator><name>objectify</name><operator>.</operator><name>annotation</name><operator>.</operator><name>Index</name></name>;</import>

<comment type="block">/*
 * NOTE: Artifact classes are abstract and SHOULD NOT be instantiated, except for internally inside objectify
 * which needs to instantiate them to register subclasses.
 */</comment>

<class><annotation>@<name>Entity</name></annotation>
<specifier>public</specifier> <comment type="block">/*abstract*/</comment> class <name>Artifact</name>
<block>{
	<decl_stmt><decl><annotation>@<name>Id</name></annotation> <specifier>protected</specifier> <type><name>Long</name></type> <name>id</name></decl>;</decl_stmt>
	<decl_stmt><decl><annotation>@<name>Index</name></annotation> <type><name>String</name></type> <name>projectId</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>protected</specifier> <type><name>int</name></type> <name>version</name></decl>;</decl_stmt>		<comment type="line">// version of the artifact</comment>

	<decl_stmt><decl><specifier>protected</specifier> <type><name>boolean</name></type> <name>isAPIArtifact</name></decl>;</decl_stmt>	<comment type="line">// flag used to specify is an artifact is from the client request</comment>
	<decl_stmt><decl><specifier>protected</specifier> <type><name>boolean</name></type> <name>isReadOnly</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>protected</specifier> <type><name>boolean</name></type> <name>isDeleted</name></decl>;</decl_stmt>


	<comment type="line">// Default constructor for deserialization</comment>
	<constructor><specifier>protected</specifier> <name>Artifact</name><parameter_list>()</parameter_list>
	<block>{
	}</block></constructor>

	<comment type="line">// Constructor for initialization.</comment>
	<constructor><specifier>protected</specifier> <name>Artifact</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>isAPIArtifact</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>isReadOnly</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>projectId</name></decl></parameter>)</parameter_list>
	<block>{
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>isAPIArtifact</name></name> <operator>=</operator> <name>isAPIArtifact</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>isReadOnly</name></name>	   <operator>=</operator> <name>isReadOnly</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>isDeleted</name></name>     <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>version</name></name>       <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>projectId</name></name>     <operator>=</operator> <name>projectId</name></expr>;</expr_stmt>
	}</block></constructor>

	<function><specifier>public</specifier> <type><name><name>Key</name><argument_list type="generic">&lt;<argument><name>?</name> <extends>extends <name>Artifact</name></extends></argument>&gt;</argument_list></name></type> <name>getKey</name><parameter_list>()</parameter_list>
	<block>{
		<return>return <expr><call><name><name>Key</name><operator>.</operator><name>create</name></name><argument_list>(<argument><expr><name><name>Artifact</name><operator>.</operator><name>class</name></name></expr></argument>,<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</return>
	}</block></function>

	<comment type="line">// Gets the corresponding key for an artifact based on its id</comment>
	<function><specifier>public</specifier> <specifier>static</specifier> <type><name><name>Key</name><argument_list type="generic">&lt;<argument><name>?</name> <extends>extends <name>Artifact</name></extends></argument>&gt;</argument_list></name></type> <name>getKey</name><parameter_list>(<parameter><decl><type><name>Long</name></type> <name>id</name></decl></parameter>)</parameter_list>
	<block>{
		<return>return <expr><call><name><name>Key</name><operator>.</operator><name>create</name></name><argument_list>( <argument><expr><name><name>Artifact</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><name>id</name></expr></argument> )</argument_list></call></expr>;</return>
	}</block></function>

	<function><specifier>public</specifier> <type><name>long</name></type> <name>getId</name><parameter_list>()</parameter_list>
	<block>{
		<return>return <expr><name>id</name></expr>;</return>
	}</block></function>

	<function><specifier>public</specifier> <type><name>Ref</name></type> <name>getRef</name><parameter_list>()</parameter_list>
	<block>{
		<return>return <expr><call><name><name>Ref</name><operator>.</operator><name>create</name></name><argument_list>(<argument><expr><call><name><name>this</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
	}</block></function>

	<function><specifier>public</specifier> <type><name>void</name></type> <name>deleteArtifact</name><parameter_list>()</parameter_list>
	<block>{
		<if>if<condition>(<expr><operator>!</operator> <name>isAPIArtifact</name></expr>)</condition><then><block>{
			<expr_stmt><expr><name><name>this</name><operator>.</operator><name>isDeleted</name></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>ofy</name><argument_list>()</argument_list></call><operator>.</operator><call><name>save</name><argument_list>()</argument_list></call><operator>.</operator><call><name>entity</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>now</name><argument_list>()</argument_list></call></expr>;</expr_stmt>


		}</block></then></if>

	}</block></function>

	<function><specifier>public</specifier> <type><name>void</name></type> <name>unDeleteArtifact</name><parameter_list>()</parameter_list>
	<block>{
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>isDeleted</name></name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ofy</name><argument_list>()</argument_list></call><operator>.</operator><call><name>save</name><argument_list>()</argument_list></call><operator>.</operator><call><name>entity</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>now</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	}</block></function>
	<function><specifier>public</specifier> <type><name>boolean</name></type> <name>isDeleted</name><parameter_list>()</parameter_list>
	<block>{
		<return>return <expr><name><name>this</name><operator>.</operator><name>isDeleted</name></name></expr>;</return>
	}</block></function>

	<function><specifier>public</specifier> <type><name>String</name></type> <name>getArtifactType</name><parameter_list>()</parameter_list>
	<block>{
		<comment type="line">// Return the name of the runtime class of this instance (e.g., Function)</comment>
		<return>return <expr><call><name><name>this</name><operator>.</operator><name>getClass</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getSimpleName</name><argument_list>()</argument_list></call></expr>;</return>
	}</block></function>

	<function><specifier>public</specifier> <comment type="block">/* abstract */</comment>  <type><name>String</name></type> <name>getName</name><parameter_list>()</parameter_list> <block>{ <throw>throw <expr><operator>new</operator> <call><name>RuntimeException</name><argument_list>(<argument><expr><literal type="string">"Must implement getName()."</literal></expr></argument>)</argument_list></call></expr>;</throw> }</block></function><empty_stmt>;</empty_stmt>

	<comment type="line">// Writes the artifact out to Firebase, publishing the current state of the artifact to all clients.</comment>
	<function><specifier>public</specifier> <type><name>void</name></type> <name>storeToFirebase</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>projectId</name></decl></parameter>)</parameter_list> <block>{ <throw>throw <expr><operator>new</operator> <call><name>RuntimeException</name><argument_list>(<argument><expr><literal type="string">"Must implement storeToFirebase()."</literal></expr></argument>)</argument_list></call></expr>;</throw>  }</block></function><empty_stmt>;</empty_stmt>

	<function><specifier>protected</specifier> <type><name>void</name></type> <name>incrementVersion</name><parameter_list>()</parameter_list>
	<block>{
		<expr_stmt><expr><name>version</name><operator>++</operator></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ofy</name><argument_list>()</argument_list></call><operator>.</operator><call><name>save</name><argument_list>()</argument_list></call><operator>.</operator><call><name>entity</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>now</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	}</block></function>

}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="CrowdCode-com/crowdcoding/entities/microtasks/Review.java" hash="9c6a4c0b565c1b2761a30447ecb5b6abcd6c95a9"><package>package <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>entities</name><operator>.</operator><name>microtasks</name></name>;</package>

<import>import static <name><name>com</name><operator>.</operator><name>googlecode</name><operator>.</operator><name>objectify</name><operator>.</operator><name>ObjectifyService</name><operator>.</operator><name>ofy</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>commands</name><operator>.</operator><name>MicrotaskCommand</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>commands</name><operator>.</operator><name>WorkerCommand</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>dto</name><operator>.</operator><name>DTO</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>dto</name><operator>.</operator><name>ajax</name><operator>.</operator><name>microtask</name><operator>.</operator><name>submission</name><operator>.</operator><name>ReviewDTO</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>dto</name><operator>.</operator><name>firebase</name><operator>.</operator><name>NewsItemInFirebase</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>dto</name><operator>.</operator><name>firebase</name><operator>.</operator><name>notification</name><operator>.</operator><name>MicrotaskNotificationInFirebase</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>dto</name><operator>.</operator><name>firebase</name><operator>.</operator><name>microtasks</name><operator>.</operator><name>ReviewInFirebase</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>dto</name><operator>.</operator><name>firebase</name><operator>.</operator><name>microtasks</name><operator>.</operator><name>ReviewSubmissionInFirebase</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>entities</name><operator>.</operator><name>artifacts</name><operator>.</operator><name>Artifact</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>history</name><operator>.</operator><name>HistoryLog</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>history</name><operator>.</operator><name>MicrotaskAccepted</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>history</name><operator>.</operator><name>MicrotaskReissued</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>history</name><operator>.</operator><name>MicrotaskSpawned</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>util</name><operator>.</operator><name>FirebaseService</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>googlecode</name><operator>.</operator><name>objectify</name><operator>.</operator><name>Key</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>googlecode</name><operator>.</operator><name>objectify</name><operator>.</operator><name>Ref</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>googlecode</name><operator>.</operator><name>objectify</name><operator>.</operator><name>annotation</name><operator>.</operator><name>Subclass</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>googlecode</name><operator>.</operator><name>objectify</name><operator>.</operator><name>annotation</name><operator>.</operator><name>Load</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>googlecode</name><operator>.</operator><name>objectify</name><operator>.</operator><name>annotation</name><operator>.</operator><name>Parent</name></name>;</import>

<class><annotation>@<name>Subclass</name><argument_list>(<argument><expr><name>index</name><operator>=</operator><literal type="boolean">true</literal></expr></argument>)</argument_list></annotation>
<specifier>public</specifier> class <name>Review</name> <super><extends>extends <name>Microtask</name></extends></super>
<block>{
	<decl_stmt><decl><annotation>@<name>Parent</name></annotation> <annotation>@<name>Load</name></annotation> <specifier>private</specifier> <type><name><name>Ref</name><argument_list type="generic">&lt;<argument><name>Artifact</name></argument>&gt;</argument_list></name></type> <name>artifact</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>private</specifier> <type><name><name>Key</name><argument_list type="generic">&lt;<argument><name>Microtask</name></argument>&gt;</argument_list></name></type> <name>microtaskKeyUnderReview</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>private</specifier> <type><name>String</name></type> <name>workerOfReviewedWork</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>private</specifier> <type><name>String</name></type> <name>initiallySubmittedDTO</name></decl>;</decl_stmt>	<comment type="line">// initially submitted DTO in string format</comment>

	<comment type="line">// Default constructor for deserialization</comment>
	<constructor><specifier>private</specifier> <name>Review</name><parameter_list>()</parameter_list>
	<block>{
	}</block></constructor>

	<comment type="line">// Constructor for initial construction</comment>
	<constructor><specifier>public</specifier> <name>Review</name><parameter_list>(<parameter><decl><type><name><name>Key</name><argument_list type="generic">&lt;<argument><name>Microtask</name></argument>&gt;</argument_list></name></type> <name>microtaskKeyUnderReview</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>initiallySubmittedDTO</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>workerOfReviewedWork</name></decl></parameter>,
			<parameter><decl><type><name>Long</name></type> <name>functionId</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>projectId</name></decl></parameter>)</parameter_list>
	<block>{
		<expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>projectId</name></expr></argument>,<argument><expr><name>functionId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>submitValue</name></name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>microtaskKeyUnderReview</name></name> <operator>=</operator> <name>microtaskKeyUnderReview</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>initiallySubmittedDTO</name></name> <operator>=</operator> <name>initiallySubmittedDTO</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>workerOfReviewedWork</name></name> <operator>=</operator> <name>workerOfReviewedWork</name></expr>;</expr_stmt>

		<decl_stmt><decl><type><name>Microtask</name></type> <name>microtaskUnderReview</name> <init>= <expr><call><name>ofy</name><argument_list>()</argument_list></call><operator>.</operator><call><name>load</name><argument_list>()</argument_list></call><operator>.</operator><call><name>key</name><argument_list>(<argument><expr><name>microtaskKeyUnderReview</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>now</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>artifact</name></name> <operator>=</operator> <operator>(</operator><name><name>Ref</name><argument_list type="generic">&lt;<argument><name>Artifact</name></argument>&gt;</argument_list></name><operator>)</operator> <call><name><name>Ref</name><operator>.</operator><name>create</name></name><argument_list>(<argument><expr><operator>(</operator><name><name>Key</name><argument_list type="generic">&lt;<argument><name>Artifact</name></argument>&gt;</argument_list></name><operator>)</operator> <call><name><name>microtaskUnderReview</name><operator>.</operator><name>getOwningArtifact</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getKey</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>ofy</name><argument_list>()</argument_list></call><operator>.</operator><call><name>save</name><argument_list>()</argument_list></call><operator>.</operator><call><name>entity</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>now</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name><name>FirebaseService</name><operator>.</operator><name>writeMicrotaskCreated</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>ReviewInFirebase</name><argument_list>(
				<argument><expr><name>id</name></expr></argument>,
				<argument><expr><call><name><name>this</name><operator>.</operator><name>microtaskTitle</name></name><argument_list>()</argument_list></call></expr></argument>,
				<argument><expr><call><name><name>this</name><operator>.</operator><name>microtaskName</name></name><argument_list>()</argument_list></call></expr></argument>,
				<argument><expr><call><name><name>this</name><operator>.</operator><name>artifact</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getName</name><argument_list>()</argument_list></call></expr></argument>,
				<argument><expr><call><name><name>this</name><operator>.</operator><name>artifact</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getId</name><argument_list>()</argument_list></call></expr></argument>,
				<argument><expr><name>functionId</name></expr></argument>,
				<argument><expr><name>submitValue</name></expr></argument>,
				<argument><expr><name>microtaskKeyUnderReview</name></expr></argument>
				)</argument_list></call></expr></argument>,
				<argument><expr><call><name><name>Microtask</name><operator>.</operator><name>keyToString</name></name><argument_list>(<argument><expr><call><name><name>this</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
				<argument><expr><name>projectId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name><name>HistoryLog</name><operator>.</operator><name>Init</name></name><argument_list>(<argument><expr><name>projectId</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>addEvent</name><argument_list>(<argument><expr><operator>new</operator> <call><name>MicrotaskSpawned</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></constructor>

    <function><specifier>public</specifier> <type><name>Microtask</name></type> <name>copy</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>projectId</name></decl></parameter>,<parameter><decl><type><name>Long</name></type> <name>functionId</name></decl></parameter>)</parameter_list>
    <block>{
    	<return>return <expr><operator>new</operator> <call><name>Review</name><argument_list>(<argument><expr><name>microtaskKeyUnderReview</name></expr></argument>, <argument><expr><name><name>this</name><operator>.</operator><name>initiallySubmittedDTO</name></name></expr></argument>, <argument><expr><name><name>this</name><operator>.</operator><name>workerOfReviewedWork</name></name></expr></argument>, <argument><expr><name>functionId</name></expr></argument>, <argument><expr><name>projectId</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

	<function><specifier>protected</specifier> <type><name>void</name></type> <name>doSubmitWork</name><parameter_list>(<parameter><decl><type><name>DTO</name></type> <name>dto</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>workerID</name></decl></parameter>)</parameter_list>
	<block>{

		<decl_stmt><decl><type><name>ReviewDTO</name></type> <name>reviewDTO</name> <init>= <expr><operator>(</operator><name>ReviewDTO</name><operator>)</operator> <name>dto</name></expr></init></decl>;</decl_stmt>

		<decl_stmt><decl><type><name>Microtask</name></type> <name>submittedMicrotask</name> <init>= <expr><call><name><name>Microtask</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><name>microtaskKeyUnderReview</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>now</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

		<comment type="line">// Write the review to firebase</comment>
		<expr_stmt><expr><call><name><name>FirebaseService</name><operator>.</operator><name>writeReview</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>ReviewSubmissionInFirebase</name><argument_list>(<argument><expr><name><name>reviewDTO</name><operator>.</operator><name>qualityScore</name></name></expr></argument>, <argument><expr><name><name>reviewDTO</name><operator>.</operator><name>reviewText</name></name></expr></argument>, <argument><expr><call><name><name>this</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>Microtask</name><operator>.</operator><name>keyToString</name></name><argument_list>(<argument><expr><call><name><name>submittedMicrotask</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument> , <argument><expr><name>projectId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="line">// set default award points to 0</comment>
		<decl_stmt><decl><type><name>int</name></type> <name>points</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>


		<decl_stmt><decl><type><name>int</name></type> <name>awardedPoints</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>boolean</name></type> <name>canBeChallenged</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>String</name></type> <name>challengeStatus</name> <init>= <expr><literal type="string">"none"</literal></expr></init></decl>;</decl_stmt>
		<comment type="line">//reject not used any more for now...</comment>
        <comment type="block">/*if( reviewDTO.qualityScore &lt; 3 ) {

			// reissue microtask
        	System.out.println("--&gt; REVIEW mtask "+Project.MicrotaskKeyToString( submittedMicrotask.getKey() )+" rejected");
			MicrotaskCommand.rejectAndReissueMicrotask(microtaskKeyUnderReview, workerOfReviewedWork);
			awardedPoint = 0;
			reviewResult = "rejected";


			project.historyLog().beginEvent(new MicrotaskRejected(submittedMicrotask,workerID));
			project.historyLog().endEvent();

		} else*/</comment>

		<comment type="block">/*the awarded point is proportional to the square of the total points
			points : 10
			5 stars -&gt;10
			4 stars -&gt;6
			3 stars -&gt;3
			2 stars -&gt;1
			1 stars -&gt;0
		*/</comment>
		<expr_stmt><expr><name>awardedPoints</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <call><name><name>Math</name><operator>.</operator><name>round</name></name><argument_list>( <argument><expr><name><name>submittedMicrotask</name><operator>.</operator><name>submitValue</name></name> <operator>*</operator> <call><name><name>Math</name><operator>.</operator><name>pow</name></name><argument_list>(<argument><expr><operator>(</operator><name><name>reviewDTO</name><operator>.</operator><name>qualityScore</name></name> <operator>/</operator><literal type="number">5.0</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="number">1.5</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>MicrotaskNotificationInFirebase</name></type> <name>notification</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
		<if>if <condition>( <expr><name><name>reviewDTO</name><operator>.</operator><name>qualityScore</name></name> <operator>&lt;</operator> <literal type="number">4</literal></expr>)</condition><then> <block>{

			<comment type="line">// reissue microtask</comment>
			<expr_stmt><expr><name>canBeChallenged</name><operator>=</operator><literal type="boolean">true</literal></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"--&gt; REVIEW mtask "</literal><operator>+</operator><call><name><name>submittedMicrotask</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call><operator>+</operator><literal type="string">" reissued"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if>if<condition>(<expr><name><name>reviewDTO</name><operator>.</operator><name>fromDisputedMicrotask</name></name></expr>)</condition><then>
				<block type="pseudo"><expr_stmt><expr><call><name><name>MicrotaskCommand</name><operator>.</operator><name>rejectMicrotask</name></name><argument_list>(<argument><expr><name>microtaskKeyUnderReview</name></expr></argument>, <argument><expr><name>workerOfReviewedWork</name></expr></argument>, <argument><expr><name>awardedPoints</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
			<else>else
				<block type="pseudo"><expr_stmt><expr><call><name><name>MicrotaskCommand</name><operator>.</operator><name>reviseMicrotask</name></name><argument_list>(<argument><expr><name>microtaskKeyUnderReview</name></expr></argument>, <argument><expr><name>initiallySubmittedDTO</name></expr></argument>, <argument><expr><name><name>reviewDTO</name><operator>.</operator><name>reviewText</name></name></expr></argument>, <argument><expr><name>workerOfReviewedWork</name></expr></argument>, <argument><expr><name>awardedPoints</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>

			<expr_stmt><expr><call><name><name>HistoryLog</name><operator>.</operator><name>Init</name></name><argument_list>(<argument><expr><name>projectId</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>addEvent</name><argument_list>(<argument><expr><operator>new</operator> <call><name>MicrotaskReissued</name><argument_list>(<argument><expr><name>submittedMicrotask</name></expr></argument>,<argument><expr><name>workerID</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			
			<expr_stmt><expr><call><name><name>FirebaseService</name><operator>.</operator><name>writeMicrotaskWaitingReview</name></name><argument_list>(<argument><expr><call><name><name>Microtask</name><operator>.</operator><name>keyToString</name></name><argument_list>(<argument><expr><call><name><name>submittedMicrotask</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><name>workerID</name></expr></argument>,<argument><expr><name><name>this</name><operator>.</operator><name>projectId</name></name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			
			<expr_stmt><expr><name>notification</name> <operator>=</operator> <operator>new</operator> <call><name>MicrotaskNotificationInFirebase</name><argument_list>( <argument><expr><literal type="string">"task.reissued"</literal></expr></argument>,
																<argument><expr><call><name><name>Microtask</name><operator>.</operator><name>keyToString</name></name><argument_list>(<argument><expr><call><name><name>submittedMicrotask</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
																<argument><expr><call><name><name>submittedMicrotask</name><operator>.</operator><name>microtaskName</name></name><argument_list>()</argument_list></call></expr></argument>,
																<argument><expr><call><name><name>submittedMicrotask</name><operator>.</operator><name>getOwningArtifact</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getName</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		}</block></then> <else>else <block>{

			<comment type="line">// accept microtask</comment>
			<expr_stmt><expr><name>canBeChallenged</name><operator>=</operator><literal type="boolean">false</literal></expr>;</expr_stmt>
        	<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"--&gt; REVIEW mtask "</literal><operator>+</operator><call><name><name>submittedMicrotask</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call><operator>+</operator><literal type="string">" accepted"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>MicrotaskCommand</name><operator>.</operator><name>submit</name></name><argument_list>(<argument><expr><name>microtaskKeyUnderReview</name></expr></argument>, <argument><expr><name>initiallySubmittedDTO</name></expr></argument>, <argument><expr><name>workerOfReviewedWork</name></expr></argument>, <argument><expr><name>awardedPoints</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			
			<if>if<condition>(<expr><name><name>reviewDTO</name><operator>.</operator><name>qualityScore</name></name> <operator>==</operator> <literal type="number">5</literal></expr>)</condition><then><block>{
				<expr_stmt><expr><call><name><name>WorkerCommand</name><operator>.</operator><name>increaseStat</name></name><argument_list>(<argument><expr><name>workerOfReviewedWork</name></expr></argument>, <argument><expr><literal type="string">"perfect_review"</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then>
			<else>else<block>{
				<expr_stmt><expr><call><name><name>WorkerCommand</name><operator>.</operator><name>increaseStat</name></name><argument_list>(<argument><expr><name>workerOfReviewedWork</name></expr></argument>, <argument><expr><literal type="string">"good_review"</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></else></if>
			<expr_stmt><expr><call><name><name>WorkerCommand</name><operator>.</operator><name>increaseStat</name></name><argument_list>(<argument><expr><name>workerOfReviewedWork</name></expr></argument>, <argument><expr><literal type="string">"accepted_microtask"</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			
			<expr_stmt><expr><call><name><name>HistoryLog</name><operator>.</operator><name>Init</name></name><argument_list>(<argument><expr><name>projectId</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>addEvent</name><argument_list>(<argument><expr><operator>new</operator> <call><name>MicrotaskAccepted</name><argument_list>(<argument><expr><name>submittedMicrotask</name></expr></argument>,<argument><expr><name>workerID</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><name>notification</name> <operator>=</operator> <operator>new</operator> <call><name>MicrotaskNotificationInFirebase</name><argument_list>( <argument><expr><literal type="string">"task.accepted"</literal></expr></argument>,
																<argument><expr><call><name><name>Microtask</name><operator>.</operator><name>keyToString</name></name><argument_list>(<argument><expr><call><name><name>submittedMicrotask</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
																<argument><expr><call><name><name>submittedMicrotask</name><operator>.</operator><name>microtaskName</name></name><argument_list>()</argument_list></call></expr></argument>,
																<argument><expr><call><name><name>submittedMicrotask</name><operator>.</operator><name>getOwningArtifact</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getName</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		}</block></else></if>


		<comment type="line">// send feedback</comment>
    	<expr_stmt><expr><call><name><name>FirebaseService</name><operator>.</operator><name>postToNewsfeed</name></name><argument_list>(<argument><expr><name>workerOfReviewedWork</name></expr></argument>, <argument><expr><operator>(</operator>
    		<operator>new</operator> <call><name>NewsItemInFirebase</name><argument_list>(
    			<argument><expr><name>awardedPoints</name></expr></argument>,
    			<argument><expr><name><name>submittedMicrotask</name><operator>.</operator><name>submitValue</name></name></expr></argument>,
    			<argument><expr><call><name><name>submittedMicrotask</name><operator>.</operator><name>microtaskName</name></name><argument_list>()</argument_list></call></expr></argument>,
				<argument><expr><literal type="string">"WorkReviewed"</literal></expr></argument>,
				<argument><expr><call><name><name>Microtask</name><operator>.</operator><name>keyToString</name></name><argument_list>(<argument><expr><call><name><name>submittedMicrotask</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
				<argument><expr><name><name>reviewDTO</name><operator>.</operator><name>qualityScore</name></name></expr></argument>,
				<argument><expr><name>challengeStatus</name></expr></argument>,
				<argument><expr><name>canBeChallenged</name></expr></argument>)</argument_list></call>
	    	<operator>)</operator><operator>.</operator><call><name>json</name><argument_list>()</argument_list></call></expr></argument>,
	    	<argument><expr><call><name><name>Microtask</name><operator>.</operator><name>keyToString</name></name><argument_list>(<argument><expr><call><name><name>submittedMicrotask</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
    		<argument><expr><name>projectId</name></expr></argument>
	    )</argument_list></call></expr>;</expr_stmt>
    	<comment type="line">// send notification</comment>
		<expr_stmt><expr><call><name><name>FirebaseService</name><operator>.</operator><name>writeWorkerNotification</name></name><argument_list>(
				<argument><expr><name>notification</name></expr></argument>,
				<argument><expr><name>workerOfReviewedWork</name></expr></argument>,
				<argument><expr><name>projectId</name></expr></argument>
		)</argument_list></call></expr>;</expr_stmt>



		<comment type="line">//FirebaseService.setPoints(workerID, workerOfReviewedWork,  this.submitValue, project);</comment>
    	<expr_stmt><expr><call><name><name>FirebaseService</name><operator>.</operator><name>postToNewsfeed</name></name><argument_list>(<argument><expr><name>workerID</name></expr></argument>, <argument><expr><operator>(</operator>
    		<operator>new</operator> <call><name>NewsItemInFirebase</name><argument_list>(
    			<argument><expr><name><name>this</name><operator>.</operator><name>submitValue</name></name></expr></argument>,
    			<argument><expr><name><name>this</name><operator>.</operator><name>submitValue</name></name></expr></argument>,
    			<argument><expr><call><name><name>this</name><operator>.</operator><name>microtaskName</name></name><argument_list>()</argument_list></call></expr></argument>,
    			<argument><expr><literal type="string">"SubmittedReview"</literal></expr></argument>,
    			<argument><expr><call><name><name>Microtask</name><operator>.</operator><name>keyToString</name></name><argument_list>(<argument><expr><call><name><name>this</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
    			<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <comment type="line">// differentiate the reviews from the 0 score tasks</comment>
    			<argument><expr><name>challengeStatus</name></expr></argument>,
    			<argument><expr><literal type="boolean">false</literal></expr></argument>
	    	)</argument_list></call><operator>.</operator><call><name>json</name><argument_list>()</argument_list></call><operator>)</operator></expr></argument>,
	    	<argument><expr><call><name><name>Microtask</name><operator>.</operator><name>keyToString</name></name><argument_list>(<argument><expr><call><name><name>this</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
			<argument><expr><name>projectId</name></expr></argument>
		)</argument_list></call></expr>;</expr_stmt>

		<comment type="line">// increase the stats counter</comment>
		<expr_stmt><expr><call><name><name>WorkerCommand</name><operator>.</operator><name>increaseStat</name></name><argument_list>(<argument><expr><name>workerID</name></expr></argument>, <argument><expr><literal type="string">"reviews"</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	}</block></function>
	<function><specifier>public</specifier> <type><name>String</name></type> <name>getWorkerOfReviewedWork</name><parameter_list>()</parameter_list><block>{
		<return>return <expr><name>workerOfReviewedWork</name></expr>;</return>
	}</block></function>
    <function><specifier>public</specifier> <type><name><name>Key</name><argument_list type="generic">&lt;<argument><name>Microtask</name></argument>&gt;</argument_list></name></type> <name>getKey</name><parameter_list>()</parameter_list>
	<block>{
		<return>return <expr><call><name><name>Key</name><operator>.</operator><name>create</name></name><argument_list>( <argument><expr><call><name><name>artifact</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>Microtask</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><name><name>this</name><operator>.</operator><name>id</name></name></expr></argument> )</argument_list></call></expr>;</return>
	}</block></function>

	<function><specifier>protected</specifier> <type><name>Class</name></type> <name>getDTOClass</name><parameter_list>()</parameter_list>
	<block>{
		<return>return <expr><name><name>ReviewDTO</name><operator>.</operator><name>class</name></name></expr>;</return>
	}</block></function>

	<function><specifier>public</specifier> <type><name><name>Key</name><argument_list type="generic">&lt;<argument><name>Microtask</name></argument>&gt;</argument_list></name></type> <name>getMicrotaskKeyUnderReview</name><parameter_list>()</parameter_list>
	<block>{
		<return>return <expr><name>microtaskKeyUnderReview</name></expr>;</return>
	}</block></function>

	<function><specifier>public</specifier> <type><name>String</name></type> <name>getUIURL</name><parameter_list>()</parameter_list>
	<block>{
		<return>return <expr><literal type="string">"/html/microtasks/review.jsp"</literal></expr>;</return>
	}</block></function>


	<function><specifier>public</specifier> <type><name>Artifact</name></type> <name>getOwningArtifact</name><parameter_list>()</parameter_list>
	<block>{
		<decl_stmt><decl><type><name>Artifact</name></type> <name>owning</name></decl>;</decl_stmt>
		<try>try <block>{
			<return>return <expr><call><name><name>artifact</name><operator>.</operator><name>safe</name></name><argument_list>()</argument_list></call></expr>;</return>
		}</block> <catch>catch <parameter_list>( <parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter> )</parameter_list><block>{
			<expr_stmt><expr><call><name>ofy</name><argument_list>()</argument_list></call><operator>.</operator><call><name>load</name><argument_list>()</argument_list></call><operator>.</operator><call><name>ref</name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>artifact</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><call><name><name>artifact</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr>;</return>
		}</block></catch></try>
	}</block></function>

	<function><specifier>public</specifier> <type><name>String</name></type> <name>microtaskTitle</name><parameter_list>()</parameter_list>
	<block>{
		<return>return <expr><literal type="string">"Review work"</literal></expr>;</return>
	}</block></function>

	<function><specifier>public</specifier> <type><name>String</name></type> <name>microtaskDescription</name><parameter_list>()</parameter_list>
	<block>{
		<return>return <expr><literal type="string">"review a submitted microtask"</literal></expr>;</return>
	}</block></function>

}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="CrowdCode-com/crowdcoding/dto/ChallengeDTO.java" hash="2464026c6b062bfc2c0bf75f192caf92ac035854"><package>package <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>dto</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>


<class><specifier>public</specifier> class <name>ChallengeDTO</name> <super><extends>extends <name>DTO</name></extends></super>
<block>{

	<decl_stmt><decl><specifier>public</specifier> <type><name>String</name></type> <name>challengeText</name></decl>;</decl_stmt>

	<comment type="line">// Default constructor (required by Jackson JSON library)</comment>
	<constructor><specifier>public</specifier> <name>ChallengeDTO</name><parameter_list>()</parameter_list>
	<block>{
	}</block></constructor>

}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="CrowdCode-com/crowdcoding/dto/ClientRequestDTO.java" hash="299cdc3590dad82fce7d024d633f728b9ac8d78d"><package>package <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>dto</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>dto</name><operator>.</operator><name>ajax</name><operator>.</operator><name>microtask</name><operator>.</operator><name>submission</name><operator>.</operator><name>ADTDTO</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>dto</name><operator>.</operator><name>ajax</name><operator>.</operator><name>microtask</name><operator>.</operator><name>submission</name><operator>.</operator><name>FunctionDTO</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>dto</name><operator>.</operator><name>ajax</name><operator>.</operator><name>microtask</name><operator>.</operator><name>submission</name><operator>.</operator><name>ImplementBehaviorDTO</name></name>;</import>


<class><specifier>public</specifier> class <name>ClientRequestDTO</name> <super><extends>extends <name>DTO</name></extends></super>
<block>{
	<decl_stmt><decl><specifier>public</specifier> <type><name>String</name></type> <name>messageType</name> <init>= <expr><literal type="string">"ClientRequestDTO"</literal></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><specifier>public</specifier> <type><name><name>List</name><argument_list type="generic">&lt;<argument><name>FunctionDTO</name></argument>&gt;</argument_list></name></type> <name>functions</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>FunctionDTO</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <type><name><name>List</name><argument_list type="generic">&lt;<argument><name>ADTDTO</name></argument>&gt;</argument_list></name></type> <name>ADTs</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>ADTDTO</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>


	<comment type="line">// Default constructor (required by Jackson JSON library)</comment>
	<constructor><specifier>public</specifier> <name>ClientRequestDTO</name><parameter_list>()</parameter_list>
	<block>{
	}</block></constructor>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="CrowdCode-com/crowdcoding/entities/microtasks/Microtask.java" hash="b81c3397e8e7773d4b159c7e674ef043d953412a"><package>package <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>entities</name><operator>.</operator><name>microtasks</name></name>;</package>

<import>import static <name><name>com</name><operator>.</operator><name>googlecode</name><operator>.</operator><name>objectify</name><operator>.</operator><name>ObjectifyService</name><operator>.</operator><name>ofy</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>logging</name><operator>.</operator><name>Logger</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>commands</name><operator>.</operator><name>MicrotaskCommand</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>commands</name><operator>.</operator><name>ProjectCommand</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>commands</name><operator>.</operator><name>WorkerCommand</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>dto</name><operator>.</operator><name>DTO</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>dto</name><operator>.</operator><name>firebase</name><operator>.</operator><name>microtasks</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>entities</name><operator>.</operator><name>Project</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>entities</name><operator>.</operator><name>artifacts</name><operator>.</operator><name>Artifact</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>history</name><operator>.</operator><name>HistoryLog</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>history</name><operator>.</operator><name>MicrotaskSkipped</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>history</name><operator>.</operator><name>MicrotaskSubmitted</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>util</name><operator>.</operator><name>FirebaseService</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>fasterxml</name><operator>.</operator><name>jackson</name><operator>.</operator><name>core</name><operator>.</operator><name>JsonParseException</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>fasterxml</name><operator>.</operator><name>jackson</name><operator>.</operator><name>databind</name><operator>.</operator><name>JsonMappingException</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>appengine</name><operator>.</operator><name>labs</name><operator>.</operator><name>repackaged</name><operator>.</operator><name>org</name><operator>.</operator><name>json</name><operator>.</operator><name>JSONArray</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>appengine</name><operator>.</operator><name>labs</name><operator>.</operator><name>repackaged</name><operator>.</operator><name>org</name><operator>.</operator><name>json</name><operator>.</operator><name>JSONException</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>appengine</name><operator>.</operator><name>labs</name><operator>.</operator><name>repackaged</name><operator>.</operator><name>org</name><operator>.</operator><name>json</name><operator>.</operator><name>JSONObject</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>googlecode</name><operator>.</operator><name>objectify</name><operator>.</operator><name>Key</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>googlecode</name><operator>.</operator><name>objectify</name><operator>.</operator><name>LoadResult</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>googlecode</name><operator>.</operator><name>objectify</name><operator>.</operator><name>Ref</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>googlecode</name><operator>.</operator><name>objectify</name><operator>.</operator><name>annotation</name><operator>.</operator><name>Entity</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>googlecode</name><operator>.</operator><name>objectify</name><operator>.</operator><name>annotation</name><operator>.</operator><name>Id</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>googlecode</name><operator>.</operator><name>objectify</name><operator>.</operator><name>annotation</name><operator>.</operator><name>Index</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>googlecode</name><operator>.</operator><name>objectify</name><operator>.</operator><name>annotation</name><operator>.</operator><name>Parent</name></name>;</import>

<comment type="block">/*
 * NOTE: The Microtask class is abstract and SHOULD NOT be instantiated, except for internally inside objectify
 * which needs to instantiate them to register subclasses.
 */</comment>
<class><annotation>@<name>Entity</name></annotation>
<specifier>public</specifier> <comment type="block">/*abstract*/</comment> class <name>Microtask</name>
<block>{
	<function><specifier>static</specifier> <specifier>public</specifier> <type><name>String</name></type> <name>keyToString</name><parameter_list>(<parameter><decl><type><name><name>Key</name><argument_list type="generic">&lt;<argument><name>Microtask</name></argument>&gt;</argument_list></name></type> <name>key</name></decl></parameter>)</parameter_list><block>{
		<decl_stmt><decl><type><name>String</name></type> <name>keyString</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
		<if>if<condition>( <expr><name>key</name> <operator>!=</operator> <literal type="null">null</literal></expr> )</condition><then>
			<block type="pseudo"><expr_stmt><expr><name>keyString</name> <operator>=</operator> <call><name><name>key</name><operator>.</operator><name>getParent</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getId</name><argument_list>()</argument_list></call><operator>+</operator><literal type="string">"-"</literal><operator>+</operator><call><name><name>key</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></then></if>
		<return>return <expr><name>keyString</name></expr>;</return>
	}</block></function>

	<function><specifier>static</specifier> <specifier>public</specifier> <type><name><name>Key</name><argument_list type="generic">&lt;<argument><name>Microtask</name></argument>&gt;</argument_list></name></type> <name>stringToKey</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>key</name></decl></parameter>)</parameter_list><block>{
		<decl_stmt><decl><type><name><name>Key</name><argument_list type="generic">&lt;<argument><name>Microtask</name></argument>&gt;</argument_list></name></type> <name>keyObj</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
		<if>if<condition>( <expr><operator>!</operator><operator>(</operator> <name>key</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <call><name><name>key</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr> )</condition><then><block>{
			<decl_stmt><decl><type><name><name>String</name><index>[]</index></name></type> <name>ids</name> <init>= <expr><call><name><name>key</name><operator>.</operator><name>split</name></name><argument_list>(<argument><expr><literal type="string">"-"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name><name>Key</name><argument_list type="generic">&lt;<argument><name>Artifact</name></argument>&gt;</argument_list></name></type> <name>parentKey</name> <init>= <expr><call><name><name>Key</name><operator>.</operator><name>create</name></name><argument_list>(<argument><expr><name><name>Artifact</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><call><name><name>Long</name><operator>.</operator><name>parseLong</name></name><argument_list>(<argument><expr><name><name>ids</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><name>keyObj</name> <operator>=</operator> <call><name><name>Key</name><operator>.</operator><name>create</name></name><argument_list>(<argument><expr><name>parentKey</name></expr></argument>,<argument><expr><name><name>Microtask</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><call><name><name>Long</name><operator>.</operator><name>parseLong</name></name><argument_list>(<argument><expr><name><name>ids</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>
		<return>return <expr><name>keyObj</name></expr>;</return>
	}</block></function>

	<decl_stmt><decl><specifier>static</specifier> <specifier>protected</specifier> <type><name>int</name></type> <name>DEFAULT_SUBMIT_VALUE</name> <init>= <expr><literal type="number">10</literal></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><annotation>@<name>Id</name></annotation> <specifier>protected</specifier> <type><name>Long</name></type> <name>id</name></decl>;</decl_stmt>
	<decl_stmt><decl><annotation>@<name>Index</name></annotation> <type><name>String</name></type> <name>projectId</name></decl>;</decl_stmt>

	<decl_stmt><decl><specifier>protected</specifier> <type><name>boolean</name></type> <name>assigned</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>protected</specifier> <type><name>boolean</name></type> <name>completed</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>protected</specifier> <type><name>boolean</name></type> <name>queued</name>    <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>protected</specifier> <type><name>String</name></type> <name>reissuedFrom</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>protected</specifier> <type><name>int</name></type> <name>submitValue</name> <init>= <expr><name>DEFAULT_SUBMIT_VALUE</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>protected</specifier> <type><name>long</name></type> <name>assignmentTimeInMillis</name></decl>;</decl_stmt>	<comment type="line">// time when worker is assigned microtask, in milliseconds</comment>
	<decl_stmt><decl><specifier>protected</specifier> <type><name>String</name></type> <name>workerId</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>protected</specifier> <type><name>Long</name></type> <name>functionId</name></decl>;</decl_stmt>

	<function><specifier>public</specifier> <type><name>String</name></type> <name>getWorkerId</name><parameter_list>()</parameter_list> <block>{
		<return>return <expr><name>workerId</name></expr>;</return>
	}</block></function>

	<function><specifier>public</specifier> <type><name>Long</name></type> <name>getFunctionId</name><parameter_list>()</parameter_list> <block>{
		<return>return <expr><name>functionId</name></expr>;</return>
	}</block></function>

	<function><specifier>public</specifier> <type><name>void</name></type> <name>setWorkerId</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>workerId</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>workerId</name></name> <operator>=</operator> <name>workerId</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ofy</name><argument_list>()</argument_list></call><operator>.</operator><call><name>save</name><argument_list>()</argument_list></call><operator>.</operator><call><name>entity</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>now</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<comment type="line">// Default constructor for deserialization</comment>
	<constructor><specifier>protected</specifier> <name>Microtask</name><parameter_list>()</parameter_list>
	<block>{
	}</block></constructor>

	<comment type="line">// Constructor for initialization. Microtask is set as ready.</comment>
	<constructor><specifier>protected</specifier> <name>Microtask</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>projectId</name></decl></parameter>, <parameter><decl><type><name>Long</name></type> <name>functionId</name></decl></parameter>)</parameter_list>
	<block>{
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>workerId</name></name><operator>=</operator><literal type="null">null</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>projectId</name></name> <operator>=</operator> <name>projectId</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>projectId</name></name>  <operator>=</operator> <name>projectId</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>functionId</name></name> <operator>=</operator> <name>functionId</name></expr>;</expr_stmt>

	}</block></constructor>

	<comment type="line">// Creates a copy of this microtask, identical in all respects except with a new microtaskID</comment>
	<comment type="line">// and with a reset completed and assignmentTime. The microtask is NOT queued onto the project work queue.</comment>
	<comment type="line">// This method MUST be overridden in the subclass</comment>
	<function><specifier>public</specifier> <type><name>Microtask</name></type> <name>copy</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>projectId</name></decl></parameter>)</parameter_list>
	<block>{
		<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"COPYING TASK "</literal><operator>+</operator><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<throw>throw <expr><operator>new</operator> <call><name>RuntimeException</name><argument_list>(<argument><expr><literal type="string">"Error - must implement in subclass!"</literal></expr></argument>)</argument_list></call></expr>;</throw>
	}</block></function>

	<comment type="line">// Override this method to allow the microtask to decide, right before it is assigned,</comment>
	<comment type="line">// if it is still needed</comment>
	<function><specifier>protected</specifier> <type><name>boolean</name></type> <name>isStillNeeded</name><parameter_list>(<parameter><decl><type><name>Project</name></type> <name>project</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><literal type="boolean">true</literal></expr>;</return> }</block></function>

	<function><specifier>public</specifier> <type><name>void</name></type> <name>submit</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>jsonDTOData</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>workerID</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>awardedPoint</name></decl></parameter>)</parameter_list>
	<block>{
		<comment type="line">// If this microtask has already been completed, drop it, and clear the worker from the microtask</comment>
		<comment type="line">// TODO: move this check to the project, as this check will be too late for work creating review microtasks.</comment>
		<if>if <condition>(<expr><name><name>this</name><operator>.</operator><name>completed</name></name></expr>)</condition><then><block>{
			<return>return;</return>
		}</block></then></if>

		<try>try <block>{
			<decl_stmt><decl><type><name>DTO</name></type> <name>dto</name> <init>= <expr><call><name><name>DTO</name><operator>.</operator><name>read</name></name><argument_list>(<argument><expr><name>jsonDTOData</name></expr></argument>, <argument><expr><call><name>getDTOClass</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

			<expr_stmt><expr><call><name>doSubmitWork</name><argument_list>(<argument><expr><name>dto</name></expr></argument>, <argument><expr><name>workerID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><name><name>this</name><operator>.</operator><name>completed</name></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>ofy</name><argument_list>()</argument_list></call><operator>.</operator><call><name>save</name><argument_list>()</argument_list></call><operator>.</operator><call><name>entity</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>now</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

			<comment type="line">// increase the stats counter</comment>
			<expr_stmt><expr><call><name><name>WorkerCommand</name><operator>.</operator><name>increaseStat</name></name><argument_list>(<argument><expr><name>workerID</name></expr></argument>, <argument><expr><literal type="string">"microtasks"</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>WorkerCommand</name><operator>.</operator><name>awardPoints</name></name><argument_list>(<argument><expr><name>workerID</name></expr></argument>, <argument><expr><name>awardedPoint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<comment type="line">// write completed on firebase</comment>
			<expr_stmt><expr><call><name><name>FirebaseService</name><operator>.</operator><name>writeMicrotaskCompleted</name></name><argument_list>( <argument><expr><call><name><name>Microtask</name><operator>.</operator><name>keyToString</name></name><argument_list>(<argument><expr><call><name><name>this</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>workerID</name></expr></argument>, <argument><expr><name>projectId</name></expr></argument>, <argument><expr><name><name>this</name><operator>.</operator><name>completed</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		}</block> <catch>catch<parameter_list>( <parameter><decl><type><name>JsonParseException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
			<expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		}</block></catch> <catch>catch<parameter_list>( <parameter><decl><type><name>JsonMappingException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
			<expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		}</block></catch> <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
			<expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		}</block></catch></try>


	}</block></function>

	<function><specifier>public</specifier> <type><name>void</name></type> <name>revise</name> <parameter_list>(<parameter><decl><type><name>String</name></type> <name>jsonDTOData</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>excludedWorkerID</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>awardedPoint</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>reissueMotivation</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>projectId</name></decl></parameter>)</parameter_list>
	<block>{
		<comment type="line">// If this microtask has already been completed, drop it, and clear the worker from the microtask</comment>
		<comment type="line">// TODO: move this check to the project, as this check will be too late for work creating review microtasks.</comment>
		<if>if <condition>(<expr><name><name>this</name><operator>.</operator><name>completed</name></name></expr>)</condition><then><block>{
			<expr_stmt><expr><call><name><name>Logger</name><operator>.</operator><name>getLogger</name></name><argument_list>(<argument><expr><literal type="string">"LOGGER"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>severe</name><argument_list>(<argument><expr><literal type="string">"MICROTASK ALREADY COMPLETED: "</literal><operator>+</operator><call><name><name>this</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return;</return>
		}</block></then></if>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>completed</name></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ofy</name><argument_list>()</argument_list></call><operator>.</operator><call><name>save</name><argument_list>()</argument_list></call><operator>.</operator><call><name>entity</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>now</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

		<comment type="line">//copy the microtask</comment>
		<decl_stmt><decl><type><name>Microtask</name></type> <name>newMicrotask</name> <init>= <expr><call><name><name>this</name><operator>.</operator><name>copy</name></name><argument_list>(<argument><expr><name>projectId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name><name>Key</name><argument_list type="generic">&lt;<argument><name>Microtask</name></argument>&gt;</argument_list></name></type> <name>a</name> <init>= <expr><call><name>ofy</name><argument_list>()</argument_list></call><operator>.</operator><call><name>save</name><argument_list>()</argument_list></call><operator>.</operator><call><name>entity</name><argument_list>(<argument><expr><name>newMicrotask</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>now</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>String</name></type> <name>microtaskKey</name> <init>= <expr><call><name><name>Microtask</name><operator>.</operator><name>keyToString</name></name><argument_list>(<argument><expr><call><name><name>newMicrotask</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<decl_stmt><decl><type><name>String</name></type> <name>reissuedFromMicrotaskKey</name> <init>= <expr><call><name><name>Microtask</name><operator>.</operator><name>keyToString</name></name><argument_list>(<argument><expr><call><name><name>this</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<comment type="line">//enqueu the microtask</comment>
		<expr_stmt><expr><call><name><name>ProjectCommand</name><operator>.</operator><name>queueMicrotask</name></name><argument_list>(<argument><expr><call><name><name>newMicrotask</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>excludedWorkerID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>WorkerCommand</name><operator>.</operator><name>awardPoints</name></name><argument_list>( <argument><expr><name>excludedWorkerID</name></expr></argument> ,<argument><expr><name>awardedPoint</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

		<comment type="line">//write the reissue field on the new microtask</comment>
		<expr_stmt><expr><call><name><name>FirebaseService</name><operator>.</operator><name>writeMicrotaskReissuedFrom</name></name><argument_list>(<argument><expr><name>microtaskKey</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>ReissueInFirebase</name><argument_list>(<argument><expr><name>reissuedFromMicrotaskKey</name></expr></argument>, <argument><expr><name>reissueMotivation</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>jsonDTOData</name></expr></argument>,  <argument><expr><name>projectId</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
		<comment type="line">// write completed on firebase</comment>
		<expr_stmt><expr><call><name><name>FirebaseService</name><operator>.</operator><name>writeMicrotaskCompleted</name></name><argument_list>( <argument><expr><call><name><name>Microtask</name><operator>.</operator><name>keyToString</name></name><argument_list>(<argument><expr><call><name><name>this</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>excludedWorkerID</name></expr></argument>, <argument><expr><name>projectId</name></expr></argument>, <argument><expr><name><name>this</name><operator>.</operator><name>completed</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


	}</block></function>

	<function><specifier>public</specifier> <type><name>void</name></type> <name>skip</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>workerID</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>disablePoint</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>projectId</name></decl></parameter>)</parameter_list>
	<block>{
		<if>if<condition>(<expr><operator>!</operator> <name>disablePoint</name></expr>)</condition><then><block>{
		<comment type="line">// Increment the point value by 10</comment>
			<expr_stmt><expr><name><name>this</name><operator>.</operator><name>submitValue</name></name> <operator>*=</operator> <literal type="number">1.2</literal></expr>;</expr_stmt>
		}</block></then></if>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>workerId</name></name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ofy</name><argument_list>()</argument_list></call><operator>.</operator><call><name>save</name><argument_list>()</argument_list></call><operator>.</operator><call><name>entity</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>now</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>FirebaseService</name><operator>.</operator><name>writeMicrotaskPoints</name></name><argument_list>(<argument><expr><call><name><name>Microtask</name><operator>.</operator><name>keyToString</name></name><argument_list>(<argument><expr><call><name><name>this</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>this</name><operator>.</operator><name>submitValue</name></name></expr></argument>, <argument><expr><name>projectId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>HistoryLog</name><operator>.</operator><name>Init</name></name><argument_list>(<argument><expr><name>projectId</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>addEvent</name><argument_list>(<argument><expr><operator>new</operator> <call><name>MicrotaskSkipped</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>workerID</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>


	<function><specifier>public</specifier> <type><name><name>Key</name><argument_list type="generic">&lt;<argument><name>Microtask</name></argument>&gt;</argument_list></name></type> <name>getKey</name><parameter_list>()</parameter_list>
	<block>{
		<throw>throw <expr><operator>new</operator> <call><name>RuntimeException</name><argument_list>(<argument><expr><literal type="string">"Error - must implement in subclass!"</literal></expr></argument>)</argument_list></call></expr>;</throw>
	}</block></function>

	<function><specifier>public</specifier> <type><name>long</name></type> <name>getID</name><parameter_list>()</parameter_list>
	<block>{
		<return>return <expr><name>id</name></expr>;</return>
	}</block></function>

	<comment type="line">// returns the relative path to the UI for this microtask</comment>
	<function><specifier>public</specifier> <type><name>String</name></type> <name>getUIURL</name><parameter_list>()</parameter_list> <block>{ <return>return <expr><literal type="string">""</literal></expr>;</return> }</block></function>

	<comment type="line">// This method MUST be overridden in the subclass to do submit work.</comment>
	<function><specifier>protected</specifier> <type><name>void</name></type> <name>doSubmitWork</name><parameter_list>(<parameter><decl><type><name>DTO</name></type> <name>dto</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>workerID</name></decl></parameter>)</parameter_list>
	<block>{
		<throw>throw <expr><operator>new</operator> <call><name>RuntimeException</name><argument_list>(<argument><expr><literal type="string">"Error - must implement in subclass!"</literal></expr></argument>)</argument_list></call></expr>;</throw>
	}</block></function>

	<comment type="line">// This method MUST be overridden in the subclass</comment>
	<function><specifier>protected</specifier> <type><name>Class</name></type> <name>getDTOClass</name><parameter_list>()</parameter_list>
	<block>{
		<throw>throw <expr><operator>new</operator> <call><name>RuntimeException</name><argument_list>(<argument><expr><literal type="string">"Error - must implement in subclass!"</literal></expr></argument>)</argument_list></call></expr>;</throw>
	}</block></function>

	<comment type="line">// This method MUST be overridden in the subclass to provide the owning artifact.</comment>
	<comment type="line">// The owning artifact is the artifact that will be modified by this microtask. If multiple artifacts</comment>
	<comment type="line">// may be modified, the owning artifact is null.</comment>
	<function><specifier>public</specifier> <type><name>Artifact</name></type> <name>getOwningArtifact</name><parameter_list>()</parameter_list>
	<block>{
		<throw>throw <expr><operator>new</operator> <call><name>RuntimeException</name><argument_list>(<argument><expr><literal type="string">"Error - must implement in subclass!"</literal></expr></argument>)</argument_list></call></expr>;</throw>
	}</block></function>

	<comment type="line">// This method MUST be overridden in the subclass to provide the name of the microtask.</comment>
	<function><specifier>public</specifier> <type><name>String</name></type> <name>microtaskTitle</name><parameter_list>()</parameter_list>
	<block>{
		<throw>throw <expr><operator>new</operator> <call><name>RuntimeException</name><argument_list>(<argument><expr><literal type="string">"Error - must implement in subclass!"</literal></expr></argument>)</argument_list></call></expr>;</throw>
	}</block></function>

	<comment type="line">// This method MUST be overridden in the subclass to provide the name of the microtask.</comment>
	<function><specifier>public</specifier> <type><name>String</name></type> <name>microtaskDescription</name><parameter_list>()</parameter_list>
	<block>{
		<throw>throw <expr><operator>new</operator> <call><name>RuntimeException</name><argument_list>(<argument><expr><literal type="string">"Error - must implement in subclass!"</literal></expr></argument>)</argument_list></call></expr>;</throw>
	}</block></function>

	<function><specifier>public</specifier> <type><name>String</name></type> <name>microtaskName</name><parameter_list>()</parameter_list>
	<block>{
		<comment type="line">// Get the name of the runtime microtask instance (e.g., ReuseSearch)</comment>
		<return>return <expr><call><name><name>this</name><operator>.</operator><name>getClass</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getSimpleName</name><argument_list>()</argument_list></call></expr>;</return>
	}</block></function>

	<function><specifier>public</specifier> <type><name>long</name></type> <name>assignmentTimeInMillis</name><parameter_list>()</parameter_list>
	<block>{
		<return>return <expr><name>assignmentTimeInMillis</name></expr>;</return>
	}</block></function>
	<function><specifier>public</specifier> <type><name>void</name></type> <name>setReissuedFrom</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>microtaskKey</name></decl></parameter>)</parameter_list>
	<block>{
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>reissuedFrom</name></name><operator>=</operator><name>microtaskKey</name></expr>;</expr_stmt>
	}</block></function>
	<function><specifier>public</specifier> <type><name>int</name></type> <name>getSubmitValue</name><parameter_list>()</parameter_list>
	<block>{
		<return>return <expr><name>submitValue</name></expr>;</return>
	}</block></function>

	<comment type="line">// Should only be called from within the entity group of the owning artifact</comment>
	<function><specifier>public</specifier> <specifier>static</specifier> <type><name><name>LoadResult</name><argument_list type="generic">&lt;<argument><name>Microtask</name></argument>&gt;</argument_list></name></type> <name>find</name><parameter_list>(<parameter><decl><type><name><name>Key</name><argument_list type="generic">&lt;<argument><name>Microtask</name></argument>&gt;</argument_list></name></type> <name>microtaskKey</name></decl></parameter>)</parameter_list>
	<block>{
		<return>return <expr><operator>(</operator><name><name>LoadResult</name><argument_list type="generic">&lt;<argument><name>Microtask</name></argument>&gt;</argument_list></name><operator>)</operator> <call><name>ofy</name><argument_list>()</argument_list></call><operator>.</operator><call><name>load</name><argument_list>()</argument_list></call><operator>.</operator><call><name>key</name><argument_list>(<argument><expr><name>microtaskKey</name></expr></argument>)</argument_list></call></expr>;</return>
	}</block></function>

	<function><specifier>public</specifier> <type><name>String</name></type> <name>toJSON</name><parameter_list>()</parameter_list><block>{
		<return>return <expr><call><name>toJSON</name><argument_list>(<argument><expr><operator>new</operator> <call><name>JSONObject</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
	}</block></function>

	<function><specifier>public</specifier> <type><name>String</name></type> <name>toJSON</name><parameter_list>(<parameter><decl><type><name>JSONObject</name></type> <name>json</name></decl></parameter>)</parameter_list><block>{
		<try>try <block>{
			<expr_stmt><expr><call><name><name>json</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><literal type="string">"key"</literal></expr></argument>, <argument><expr><call><name><name>Microtask</name><operator>.</operator><name>keyToString</name></name><argument_list>(<argument><expr><call><name><name>this</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>json</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><literal type="string">"id"</literal></expr></argument>, <argument><expr><name><name>this</name><operator>.</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>json</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><literal type="string">"type"</literal></expr></argument>, <argument><expr><call><name><name>this</name><operator>.</operator><name>microtaskName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>json</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><literal type="string">"description"</literal></expr></argument>, <argument><expr><call><name><name>this</name><operator>.</operator><name>microtaskDescription</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>json</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><literal type="string">"title"</literal></expr></argument>, <argument><expr><call><name><name>this</name><operator>.</operator><name>microtaskTitle</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>json</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><literal type="string">"submitValue"</literal></expr></argument>, <argument><expr><call><name><name>this</name><operator>.</operator><name>getSubmitValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>JSONException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
			<comment type="line">// TODO Auto-generated catch block</comment>
			<expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		}</block></catch></try>
		<return>return <expr><call><name><name>json</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr>;</return>
	}</block></function>

	<function><specifier>public</specifier> <type><name>boolean</name></type> <name>isAssignedTo</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>workerId</name></decl></parameter>)</parameter_list><block>{
		<if>if<condition>(<expr><call><name><name>this</name><operator>.</operator><name>getWorkerId</name></name><argument_list>()</argument_list></call><operator>!=</operator><literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>this</name><operator>.</operator><name>getWorkerId</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>isEmpty</name><argument_list>()</argument_list></call></expr>)</condition><then>
			<block type="pseudo"><return>return <expr><literal type="boolean">true</literal></expr>;</return></block></then></if>

		<decl_stmt><decl><type><name>boolean</name></type> <name>isAssigned</name><init>= <expr><call><name><name>this</name><operator>.</operator><name>getWorkerId</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>this</name><operator>.</operator><name>getWorkerId</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>( <argument><expr><name>workerId</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

		<return>return <expr><name>isAssigned</name></expr>;</return>
	}</block></function>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="CrowdCode-com/crowdcoding/dto/DTO.java" hash="b306ab359867e84e876e43ae3664c37172a925cc"><package>package <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>dto</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>fasterxml</name><operator>.</operator><name>jackson</name><operator>.</operator><name>core</name><operator>.</operator><name>JsonParseException</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>fasterxml</name><operator>.</operator><name>jackson</name><operator>.</operator><name>databind</name><operator>.</operator><name>JsonMappingException</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>fasterxml</name><operator>.</operator><name>jackson</name><operator>.</operator><name>databind</name><operator>.</operator><name>ObjectMapper</name></name>;</import>

<comment type="block">/*
 * A data transfer object for transferring data between the client and the server. Each of these
 * classes is intended to match the JSON format that a client expects. These objects may be used
 * for the client to submit data to the server or for the server to send data to the client.
 */</comment>
<class><specifier>public</specifier> <specifier>abstract</specifier> class <name>DTO</name>
<block>{
	<comment type="line">// Gets the JSON for this DTO</comment>
	<function><specifier>public</specifier> <type><name>String</name></type> <name>json</name><parameter_list>()</parameter_list>
	<block>{
		<return>return <expr><call><name>json</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</return>
	}</block></function>

	<comment type="line">// Gets JSON for the specified object</comment>
	<function><specifier>protected</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>json</name><parameter_list>(<parameter><decl><type><name>Object</name></type> <name>obj</name></decl></parameter>)</parameter_list>
	<block>{
		<decl_stmt><decl><type><name>ObjectMapper</name></type> <name>mapper</name> <init>= <expr><operator>new</operator> <call><name>ObjectMapper</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	    <try>try <block>{
	    	<return>return <expr><call><name><name>mapper</name><operator>.</operator><name>writeValueAsString</name></name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</return>
		}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
			<expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		}</block></catch></try>
	    <return>return <expr><literal type="string">""</literal></expr>;</return>
	}</block></function>

	<comment type="line">// Reads a DTO of type dtoClass from the specified string</comment>
	<function><specifier>public</specifier> <specifier>static</specifier> <type><name>DTO</name></type> <name>read</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>jsonDTOData</name></decl></parameter>, <parameter><decl><type><name>Class</name></type> <name>dtoClass</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>JsonParseException</name></expr></argument>, <argument><expr><name>JsonMappingException</name></expr></argument>, <argument><expr><name>IOException</name></expr></argument></throws>
	<block>{
		<decl_stmt><decl><type><name>ObjectMapper</name></type> <name>mapper</name> <init>= <expr><operator>new</operator> <call><name>ObjectMapper</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>DTO</name></type> <name>dto</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name>dto</name> <operator>=</operator> <operator>(</operator><name>DTO</name><operator>)</operator> <call><name><name>mapper</name><operator>.</operator><name>readValue</name></name><argument_list>(<argument><expr><name>jsonDTOData</name></expr></argument>, <argument><expr><name>dtoClass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>dto</name></expr>;</return>
	}</block></function>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="CrowdCode-com/crowdcoding/dto/firebase/LeaderboardEntry.java" hash="f8655a4c657b8a4d68ffd924b35c706d9d74bf37"><package>package <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>dto</name><operator>.</operator><name>firebase</name></name>;</package>

<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>dto</name><operator>.</operator><name>DTO</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>fasterxml</name><operator>.</operator><name>jackson</name><operator>.</operator><name>annotation</name><operator>.</operator><name>JsonProperty</name></name>;</import>


<comment type="block">/*
 * Represents a single worker's score on the leaderboard in a format appropriate for Firebase.
 */</comment>
<class><specifier>public</specifier> class <name>LeaderboardEntry</name> <super><extends>extends <name>DTO</name></extends></super>
<block>{
	<decl_stmt><decl><specifier>public</specifier> <type><name>int</name></type> <name>score</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <type><name>String</name></type> <name>name</name></decl>;</decl_stmt>
	<decl_stmt><decl><annotation>@<name>JsonProperty</name><argument_list>(<argument><expr><literal type="string">".priority"</literal></expr></argument>)</argument_list></annotation> <specifier>public</specifier> <type><name>double</name></type> <name>priority</name></decl>;</decl_stmt>  <comment type="line">// Special Firebase property establishing order</comment>

	<comment type="line">// Default constructor for derserialization</comment>
	<constructor><annotation>@<name>SuppressWarnings</name><argument_list>(<argument><expr><literal type="string">"unused"</literal></expr></argument>)</argument_list></annotation>
	<specifier>private</specifier> <name>LeaderboardEntry</name><parameter_list>()</parameter_list>
	<block>{
	}</block></constructor>

	<comment type="line">// Initialization constructor</comment>
	<constructor><specifier>public</specifier> <name>LeaderboardEntry</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>score</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>)</parameter_list>
	<block>{
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>score</name></name> <operator>=</operator> <name>score</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>name</name></name> <operator>=</operator> <name>name</name></expr>;</expr_stmt>
		<comment type="line">// Store the priority as the negative of score, so that scores are ordered from highest to lowest</comment>
		<comment type="line">// in Firebase.</comment>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>priority</name></name> <operator>=</operator> <operator>(</operator><operator>-</operator><literal type="number">1.0</literal><operator>)</operator> <operator>*</operator> <name>score</name></expr>;</expr_stmt>
	}</block></constructor>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="CrowdCode-com/crowdcoding/dto/firebase/QueueInFirebase.java" hash="fb567127a0fa05d4bde64af21e0b96bb90e5743e"><package>package <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>dto</name><operator>.</operator><name>firebase</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>LinkedList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>dto</name><operator>.</operator><name>DTO</name></name>;</import>

<class><specifier>public</specifier> class <name>QueueInFirebase</name> <super><extends>extends <name>DTO</name></extends></super>
<block>{
	<decl_stmt><decl><specifier>public</specifier> <type><name>String</name></type> <name>messageType</name> <init>= <expr><literal type="string">"QueueInFirebase"</literal></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><specifier>public</specifier> <type><name><name>List</name><argument_list type="generic">&lt; <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>queue</name></decl>;</decl_stmt>

	<comment type="line">// Default constructor (required by Jackson JSON library)</comment>
	<constructor><specifier>public</specifier> <name>QueueInFirebase</name><parameter_list>()</parameter_list>
	<block>{
	}</block></constructor>

	<constructor><specifier>public</specifier> <name>QueueInFirebase</name><parameter_list>(<parameter><decl><type><name><name>LinkedList</name><argument_list type="generic">&lt; <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>microtaskQueue</name></decl></parameter>)</parameter_list>
	<block>{
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>queue</name></name> <operator>=</operator> <name>microtaskQueue</name></expr>;</expr_stmt>
	}</block></constructor>

	<function><specifier>public</specifier> <type><name>String</name></type> <name>toString</name><parameter_list>()</parameter_list>
	<block>{
		<return>return <expr><call><name><name>queue</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr>;</return>
	}</block></function>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="CrowdCode-com/crowdcoding/dto/firebase/NewsItemInFirebase.java" hash="bf507e4b5517ac68998f75684d778436f1df12f5"><package>package <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>dto</name><operator>.</operator><name>firebase</name></name>;</package>

<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>dto</name><operator>.</operator><name>DTO</name></name>;</import>

<class><specifier>public</specifier> class <name>NewsItemInFirebase</name> <super><extends>extends <name>DTO</name></extends></super>
<block>{
	<decl_stmt><decl><specifier>public</specifier> <type><name>String</name></type> <name>messageType</name> <init>= <expr><literal type="string">"NewsItemInFirebase"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <type><name>int</name></type> <name>awardedPoints</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <type><name>int</name></type> <name>maxPoints</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <type><name>String</name></type> <name>microtaskType</name></decl>;</decl_stmt> <comment type="line">// May be WorkReviewed or SubmittedReview</comment>
	<decl_stmt><decl><specifier>public</specifier> <type><name>String</name></type> <name>type</name></decl>;</decl_stmt>			 <comment type="line">// May be WorkReviewed or SubmittedReview</comment>
	<decl_stmt><decl><specifier>public</specifier> <type><name>String</name></type> <name>microtaskKey</name></decl>;</decl_stmt>	<comment type="line">// Corresponding microtask for the new item.</comment>
	<decl_stmt><decl><specifier>public</specifier> <type><name>String</name></type> <name>timeInMillis</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <type><name>int</name></type> <name>score</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <type><name>String</name></type> <name>challengeStatus</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <type><name>boolean</name></type> <name>canBeChallenged</name></decl>;</decl_stmt>

	<comment type="line">// Default constructor (required by Jackson JSON library)</comment>
	<constructor><specifier>public</specifier> <name>NewsItemInFirebase</name><parameter_list>()</parameter_list>
	<block>{

	}</block></constructor>

	<constructor><specifier>public</specifier> <name>NewsItemInFirebase</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>awardedPoints</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>maxPoints</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>microtaskType</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>microtaskKey</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>score</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>challengeStatus</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>canBeChallenged</name></decl></parameter> )</parameter_list>
	<block>{
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>awardedPoints</name></name>		<operator>=</operator> <name>awardedPoints</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>maxPoints</name></name> 			<operator>=</operator> <name>maxPoints</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>microtaskType</name></name> 		<operator>=</operator> <name>microtaskType</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>type</name></name> 				<operator>=</operator> <name>type</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>microtaskKey</name></name> 		<operator>=</operator> <name>microtaskKey</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>score</name></name> 				<operator>=</operator> <name>score</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>challengeStatus</name></name>	<operator>=</operator> <name>challengeStatus</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>canBeChallenged</name></name>	<operator>=</operator> <name>canBeChallenged</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>timeInMillis</name></name> 		<operator>=</operator> <call><name><name>Long</name><operator>.</operator><name>toString</name></name><argument_list>(<argument><expr><call><name><name>System</name><operator>.</operator><name>currentTimeMillis</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></constructor>

}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="CrowdCode-com/crowdcoding/entities/artifacts/Test.java" hash="55e51efce9bed8f3e93fda0954c1fa02e167fcdb"><package>package <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>entities</name><operator>.</operator><name>artifacts</name></name>;</package>

<import>import static <name><name>com</name><operator>.</operator><name>googlecode</name><operator>.</operator><name>objectify</name><operator>.</operator><name>ObjectifyService</name><operator>.</operator><name>ofy</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>commands</name><operator>.</operator><name>FunctionCommand</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>dto</name><operator>.</operator><name>ajax</name><operator>.</operator><name>microtask</name><operator>.</operator><name>submission</name><operator>.</operator><name>TestDTO</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>dto</name><operator>.</operator><name>firebase</name><operator>.</operator><name>artifacts</name><operator>.</operator><name>AdvancedTestInFirebase</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>dto</name><operator>.</operator><name>firebase</name><operator>.</operator><name>artifacts</name><operator>.</operator><name>SimpleTestInFirebase</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>history</name><operator>.</operator><name>ArtifactCreated</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>history</name><operator>.</operator><name>HistoryLog</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>util</name><operator>.</operator><name>FirebaseService</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>googlecode</name><operator>.</operator><name>objectify</name><operator>.</operator><name>Ref</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>googlecode</name><operator>.</operator><name>objectify</name><operator>.</operator><name>annotation</name><operator>.</operator><name>Subclass</name></name>;</import>

<class><annotation>@<name>Subclass</name><argument_list>(<argument><expr><name>index</name><operator>=</operator><literal type="boolean">true</literal></expr></argument>)</argument_list></annotation>
<specifier>public</specifier> class <name>Test</name> <super><extends>extends <name>Artifact</name></extends></super>
<block>{
	<decl_stmt><decl><specifier>protected</specifier> <type><name>long</name></type> <name>functionId</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>protected</specifier> <type><name>String</name></type> <name>description</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>protected</specifier> <type><name>boolean</name></type> <name>isSimple</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>private</specifier> <type><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>inputs</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>private</specifier> <type><name>String</name></type> <name>output</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>private</specifier> <type><name>String</name></type> <name>code</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>protected</specifier> <type><name>double</name></type> <name>creationTime</name></decl>;</decl_stmt>


	<comment type="block" format="javadoc">/******************************************************************************************
	 * Constructor
	 *****************************************************************************************/</comment>

	<comment type="line">// Constructor for deserialization</comment>
	<constructor><specifier>protected</specifier> <name>Test</name><parameter_list>()</parameter_list>
	<block>{
	}</block></constructor>

	<constructor><specifier>public</specifier> <name>Test</name><parameter_list>(<parameter><decl><type><name>TestDTO</name></type> <name>test</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>functionId</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>isApiArtifact</name></decl></parameter>,<parameter><decl><type><name>boolean</name></type> <name>isReadOnly</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>projectId</name></decl></parameter>)</parameter_list>
	<block>{
		<expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>isApiArtifact</name></expr></argument>, <argument><expr><name>isReadOnly</name></expr></argument>, <argument><expr><name>projectId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>functionId</name></name>    <operator>=</operator> <name>functionId</name></expr>;</expr_stmt>
		
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>description</name></name>   <operator>=</operator> <name><name>test</name><operator>.</operator><name>description</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>isSimple</name></name> 	   <operator>=</operator> <name><name>test</name><operator>.</operator><name>isSimple</name></name></expr>;</expr_stmt>
		
		<if>if<condition>( <expr><name>isSimple</name></expr> )</condition><then><block>{
			<expr_stmt><expr><name><name>this</name><operator>.</operator><name>inputs</name></name> <operator>=</operator> <name><name>test</name><operator>.</operator><name>inputs</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>this</name><operator>.</operator><name>output</name></name> <operator>=</operator> <name><name>test</name><operator>.</operator><name>output</name></name></expr>;</expr_stmt>
		}</block></then>
		<else>else <block>{
			<expr_stmt><expr><name><name>this</name><operator>.</operator><name>code</name></name> <operator>=</operator> <name><name>test</name><operator>.</operator><name>code</name></name></expr>;</expr_stmt>
		}</block></else></if>
			
			
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>creationTime</name></name>  <operator>=</operator> <call><name><name>System</name><operator>.</operator><name>currentTimeMillis</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		

		<expr_stmt><expr><call><name>ofy</name><argument_list>()</argument_list></call><operator>.</operator><call><name>save</name><argument_list>()</argument_list></call><operator>.</operator><call><name>entity</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>now</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>storeToFirebase</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name><name>HistoryLog</name><operator>.</operator><name>Init</name></name><argument_list>(<argument><expr><name>projectId</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>addEvent</name><argument_list>(<argument><expr><operator>new</operator> <call><name>ArtifactCreated</name><argument_list>( <argument><expr><name>this</name></expr></argument> )</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>FunctionCommand</name><operator>.</operator><name>addTest</name></name><argument_list>(<argument><expr><name>functionId</name></expr></argument>, <argument><expr><name><name>this</name><operator>.</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></constructor>

	<comment type="block" format="javadoc">/******************************************************************************************
	 * Accessors
	 *****************************************************************************************/</comment>
	<function><specifier>public</specifier> <type><name>String</name></type> <name>getDescription</name><parameter_list>()</parameter_list><block>{
		<return>return <expr><name>description</name></expr>;</return>
	}</block></function>


	<function><specifier>public</specifier> <type><name>String</name></type> <name>getName</name><parameter_list>()</parameter_list><block>{
		<return>return <expr><name>description</name></expr>;</return>
	}</block></function>

	<function><specifier>public</specifier> <type><name>long</name></type> <name>getFunctionId</name><parameter_list>()</parameter_list><block>{
		<return>return <expr><name>functionId</name></expr>;</return>
	}</block></function>

	
	<comment type="block" format="javadoc">/**updates this test if description and code differ from the old one */</comment>
	<function><specifier>public</specifier> <type><name>void</name></type> <name>update</name><parameter_list>(<parameter><decl><type><name>TestDTO</name></type> <name>testDto</name></decl></parameter>)</parameter_list><block>{
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>isSimple</name></name> <operator>=</operator> <name><name>testDto</name><operator>.</operator><name>isSimple</name></name></expr>;</expr_stmt>
	
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>code</name></name> <operator>=</operator> <name><name>testDto</name><operator>.</operator><name>code</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>inputs</name></name> <operator>=</operator> <name><name>testDto</name><operator>.</operator><name>inputs</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>output</name></name> <operator>=</operator> <name><name>testDto</name><operator>.</operator><name>output</name></name></expr>;</expr_stmt>
		
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>description</name></name>     <operator>=</operator> <name><name>testDto</name><operator>.</operator><name>description</name></name></expr>;</expr_stmt>
		
	
		<expr_stmt><expr><call><name>ofy</name><argument_list>()</argument_list></call><operator>.</operator><call><name>save</name><argument_list>()</argument_list></call><operator>.</operator><call><name>entities</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>now</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>storeToFirebase</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		
		<expr_stmt><expr><call><name><name>FunctionCommand</name><operator>.</operator><name>incrementTestSuite</name></name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>functionId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<comment type="block" format="javadoc">/** Marks this test as deleted**/</comment>
	<function><specifier>public</specifier> <type><name>void</name></type> <name>delete</name><parameter_list>()</parameter_list><block>{
		<expr_stmt><expr><call><name>deleteArtifact</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		
		<expr_stmt><expr><call><name>storeToFirebase</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		
		<expr_stmt><expr><call><name><name>FunctionCommand</name><operator>.</operator><name>incrementTestSuite</name></name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>functionId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>


	<comment type="block" format="javadoc">/******************************************************************************************
	 * Firebase methods
	 *****************************************************************************************/</comment>

	<function><specifier>private</specifier> <type><name>void</name></type> <name>storeToFirebase</name><parameter_list>()</parameter_list>
	<block>{
		<decl_stmt><decl><type><name>int</name></type> <name>firebaseVersion</name> <init>= <expr><name>version</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
		
		<if>if<condition>( <expr><name><name>this</name><operator>.</operator><name>isSimple</name></name></expr> )</condition><then><block>{
			<expr_stmt><expr><call><name><name>FirebaseService</name><operator>.</operator><name>writeSimpleTest</name></name><argument_list>(
				<argument><expr><operator>new</operator> <call><name>SimpleTestInFirebase</name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>id</name></name></expr></argument>,
					 <argument><expr><name>firebaseVersion</name></expr></argument>,
					 <argument><expr><name><name>this</name><operator>.</operator><name>inputs</name></name></expr></argument>,
					 <argument><expr><name><name>this</name><operator>.</operator><name>output</name></name></expr></argument>,
					 <argument><expr><name><name>this</name><operator>.</operator><name>description</name></name></expr></argument>,
					 <argument><expr><name><name>this</name><operator>.</operator><name>isSimple</name></name></expr></argument>,
					 <argument><expr><name><name>this</name><operator>.</operator><name>isReadOnly</name></name></expr></argument>,
					 <argument><expr><name><name>this</name><operator>.</operator><name>isAPIArtifact</name></name></expr></argument>,
					 <argument><expr><name><name>this</name><operator>.</operator><name>isDeleted</name></name></expr></argument>
				)</argument_list></call></expr></argument>,
				<argument><expr><name><name>this</name><operator>.</operator><name>functionId</name></name></expr></argument>,
				<argument><expr><name><name>this</name><operator>.</operator><name>id</name></name></expr></argument>,
				<argument><expr><name>firebaseVersion</name></expr></argument>,
				<argument><expr><name>projectId</name></expr></argument>
			)</argument_list></call></expr>;</expr_stmt>
		}</block></then>
		<else>else <block>{
			<expr_stmt><expr><call><name><name>FirebaseService</name><operator>.</operator><name>writeAdvancedTest</name></name><argument_list>(
				<argument><expr><operator>new</operator> <call><name>AdvancedTestInFirebase</name><argument_list>(
					<argument><expr><name><name>this</name><operator>.</operator><name>id</name></name></expr></argument>,
					<argument><expr><name>firebaseVersion</name></expr></argument>,
					<argument><expr><name><name>this</name><operator>.</operator><name>description</name></name></expr></argument>,
					<argument><expr><name><name>this</name><operator>.</operator><name>code</name></name></expr></argument>,
					<argument><expr><name><name>this</name><operator>.</operator><name>functionId</name></name></expr></argument>,
					<argument><expr><name><name>this</name><operator>.</operator><name>creationTime</name></name></expr></argument>,
					<argument><expr><name><name>this</name><operator>.</operator><name>isSimple</name></name></expr></argument>,
					<argument><expr><name><name>this</name><operator>.</operator><name>isReadOnly</name></name></expr></argument>,
					<argument><expr><name><name>this</name><operator>.</operator><name>isAPIArtifact</name></name></expr></argument>,
					<argument><expr><name><name>this</name><operator>.</operator><name>isDeleted</name></name></expr></argument>
				)</argument_list></call></expr></argument>,
				<argument><expr><name><name>this</name><operator>.</operator><name>functionId</name></name></expr></argument>,
				<argument><expr><name><name>this</name><operator>.</operator><name>id</name></name></expr></argument>,
				<argument><expr><name>firebaseVersion</name></expr></argument>,
				<argument><expr><name>projectId</name></expr></argument>
			)</argument_list></call></expr>;</expr_stmt>
		}</block></else></if>

		<expr_stmt><expr><call><name>incrementVersion</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	}</block></function>
	
	<function><specifier>public</specifier> <specifier>static</specifier> <type><name>Test</name></type> <name>load</name><parameter_list>(<parameter><decl><type><name><name>Ref</name><argument_list type="generic">&lt;<argument><name>Test</name></argument>&gt;</argument_list></name></type> <name>ref</name></decl></parameter>)</parameter_list>
	<block>{
		<return>return <expr><call><name>ofy</name><argument_list>()</argument_list></call><operator>.</operator><call><name>load</name><argument_list>()</argument_list></call><operator>.</operator><call><name>ref</name><argument_list>(<argument><expr><name>ref</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>now</name><argument_list>()</argument_list></call></expr>;</return>
	}</block></function>

	<function><specifier>public</specifier> <specifier>static</specifier> <type><name>Test</name></type> <name>find</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>id</name></decl></parameter>)</parameter_list>
	<block>{
		<return>return <expr><operator>(</operator><name>Test</name><operator>)</operator> <call><name>ofy</name><argument_list>()</argument_list></call><operator>.</operator><call><name>load</name><argument_list>()</argument_list></call><operator>.</operator><call><name>key</name><argument_list>(<argument><expr><call><name><name>Artifact</name><operator>.</operator><name>getKey</name></name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>now</name><argument_list>()</argument_list></call></expr>;</return>
	}</block></function>
}</block></class></unit>

<unit revision="0.9.5" language="Java" filename="CrowdCode-com/crowdcoding/dto/firebase/questions/ArtifactsIdInFirebase.java" hash="e36062b11397d0dd9c3cefbda228916d4260f08f"><package>package <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>dto</name><operator>.</operator><name>firebase</name><operator>.</operator><name>questions</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>LinkedList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>dto</name><operator>.</operator><name>DTO</name></name>;</import>

<class><specifier>public</specifier> class <name>ArtifactsIdInFirebase</name> <super><extends>extends <name>DTO</name></extends></super>
<block>{
	<decl_stmt><decl><specifier>public</specifier> <type><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>artifactsId</name></decl>;</decl_stmt>

	<comment type="line">// Default constructor (required by Jackson JSON library)</comment>
	<constructor><specifier>public</specifier> <name>ArtifactsIdInFirebase</name><parameter_list>()</parameter_list>
	<block>{
	}</block></constructor>

	<constructor><specifier>public</specifier> <name>ArtifactsIdInFirebase</name><parameter_list>(<parameter><decl><type><name><name>List</name><argument_list type="generic">&lt; <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>artifactsId</name></decl></parameter>)</parameter_list>
	<block>{
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>artifactsId</name></name> <operator>=</operator> <name>artifactsId</name></expr>;</expr_stmt>
	}</block></constructor>

	<function><specifier>public</specifier> <type><name>String</name></type> <name>toString</name><parameter_list>()</parameter_list>
	<block>{
		<return>return <expr><call><name><name>artifactsId</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr>;</return>
	}</block></function>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="CrowdCode-com/crowdcoding/dto/firebase/WorkerInFirebase.java" hash="958ebe1d07ce10f7a858e0d55cf5afbdc1ff7eb3"><package>package <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>dto</name><operator>.</operator><name>firebase</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashMap</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>dto</name><operator>.</operator><name>DTO</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>entities</name><operator>.</operator><name>Achievement</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>googlecode</name><operator>.</operator><name>objectify</name><operator>.</operator><name>annotation</name><operator>.</operator><name>Id</name></name>;</import>

<class><specifier>public</specifier> class <name>WorkerInFirebase</name> <super><extends>extends <name>DTO</name></extends></super>
<block>{
	<decl_stmt><decl><specifier>public</specifier> <type><name>String</name></type> <name>messageType</name> <init>= <expr><literal type="string">"WorkerInFirebase"</literal></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><specifier>private</specifier> <type><name>String</name></type> <name>nickname</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>private</specifier> <type><name>String</name></type> <name>userid</name></decl>;</decl_stmt>	
	<decl_stmt><decl><specifier>public</specifier> <type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Achievement</name></argument>&gt;</argument_list></name></type> <name>listOfAchievements</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Achievement</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <type><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>Integer</name></argument>&gt;</argument_list></name></type> <name>microtaskHistory</name> <init>= <expr><operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>Integer</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <type><name>int</name></type> <name>score</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <type><name>int</name></type> <name>level</name></decl>;</decl_stmt>
	<comment type="line">// Default constructor (required by Jackson JSON library)</comment>
	<constructor><specifier>public</specifier> <name>WorkerInFirebase</name><parameter_list>()</parameter_list>
	<block>{
	}</block></constructor>

	<constructor><specifier>public</specifier> <name>WorkerInFirebase</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>userID</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>score</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>level</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>nickname</name></decl></parameter>, <parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Achievement</name></argument>&gt;</argument_list></name></type> <name>listOfAchievements</name></decl></parameter>, <parameter><decl><type><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>Integer</name></argument>&gt;</argument_list></name></type> <name>microtaskHistory</name></decl></parameter> )</parameter_list>
	<block>{
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>userid</name></name> <operator>=</operator> <name>userID</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>nickname</name></name> <operator>=</operator> <name>nickname</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>score</name></name> <operator>=</operator> <name>score</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>level</name></name> <operator>=</operator> <name>level</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>listOfAchievements</name></name> <operator>=</operator> <name>listOfAchievements</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>microtaskHistory</name></name> <operator>=</operator> <name>microtaskHistory</name></expr>;</expr_stmt>
	}</block></constructor>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="CrowdCode-com/crowdcoding/dto/firebase/questions/AnswerInFirebase.java" hash="0e1acdb2e5d289a9472ac0476afe7f412363c075"><package>package <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>dto</name><operator>.</operator><name>firebase</name><operator>.</operator><name>questions</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>dto</name><operator>.</operator><name>DTO</name></name>;</import>

<class><specifier>public</specifier> class <name>AnswerInFirebase</name> <super><extends>extends <name>DTO</name></extends></super>
<block>{
	<decl_stmt><decl><specifier>public</specifier> <type><name>String</name></type> <name>messageType</name> <init>= <expr><literal type="string">"AnswerInFirebase"</literal></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><specifier>public</specifier> <type><name>long</name></type> <name>id</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <type><name>String</name></type> <name>text</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <type><name>String</name></type> <name>ownerId</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <type><name>String</name></type> <name>ownerHandle</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <type><name>long</name></type> <name>createdAt</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <type><name>int</name></type> <name>score</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <type><name><name>List</name> <argument_list type="generic">&lt; <argument><name>Long</name></argument> &gt;</argument_list></name></type><name>votersId</name><init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Long</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <type><name><name>List</name> <argument_list type="generic">&lt; <argument><name>Long</name></argument> &gt;</argument_list></name></type><name>reportersId</name><init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Long</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <type><name><name>List</name> <argument_list type="generic">&lt; <argument><name>Long</name></argument> &gt;</argument_list></name></type><name>commentsId</name><init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Long</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="line">// Default constructor (required by Jackson JSON library)</comment>
	<constructor><specifier>public</specifier> <name>AnswerInFirebase</name><parameter_list>()</parameter_list>
	<block>{
	}</block></constructor>

	<constructor><specifier>public</specifier> <name>AnswerInFirebase</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>ownerId</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>ownerHandle</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>text</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>createdAt</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>score</name></decl></parameter>)</parameter_list>
	<block>{
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>id</name></name><operator>=</operator> <name>id</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>ownerId</name></name><operator>=</operator><name>ownerId</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>ownerHandle</name></name><operator>=</operator><name>ownerHandle</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>text</name></name><operator>=</operator><name>text</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>createdAt</name></name><operator>=</operator> <name>createdAt</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>score</name></name><operator>=</operator><name>score</name></expr>;</expr_stmt>

	}</block></constructor>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="CrowdCode-com/crowdcoding/dto/firebase/questions/ReportersIdInFirebase.java" hash="2483a3bdc3f54a7f01e483289df616b3da5e4ed7"><package>package <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>dto</name><operator>.</operator><name>firebase</name><operator>.</operator><name>questions</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>LinkedList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>dto</name><operator>.</operator><name>DTO</name></name>;</import>

<class><specifier>public</specifier> class <name>ReportersIdInFirebase</name> <super><extends>extends <name>DTO</name></extends></super>
<block>{
	<decl_stmt><decl><specifier>public</specifier> <type><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>reportersId</name></decl>;</decl_stmt>

	<comment type="line">// Default constructor (required by Jackson JSON library)</comment>
	<constructor><specifier>public</specifier> <name>ReportersIdInFirebase</name><parameter_list>()</parameter_list>
	<block>{
	}</block></constructor>

	<constructor><specifier>public</specifier> <name>ReportersIdInFirebase</name><parameter_list>(<parameter><decl><type><name><name>List</name><argument_list type="generic">&lt; <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>reportersId</name></decl></parameter>)</parameter_list>
	<block>{
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>reportersId</name></name> <operator>=</operator> <name>reportersId</name></expr>;</expr_stmt>
	}</block></constructor>

	<function><specifier>public</specifier> <type><name>String</name></type> <name>toString</name><parameter_list>()</parameter_list>
	<block>{
		<return>return <expr><call><name><name>reportersId</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr>;</return>
	}</block></function>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="CrowdCode-com/crowdcoding/dto/firebase/questions/CommentInFirebase.java" hash="faf5c789210919c3a2db70c065b0b8b1ce44dcf5"><package>package <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>dto</name><operator>.</operator><name>firebase</name><operator>.</operator><name>questions</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>dto</name><operator>.</operator><name>DTO</name></name>;</import>

<class><specifier>public</specifier> class <name>CommentInFirebase</name> <super><extends>extends <name>DTO</name></extends></super>
<block>{
	<decl_stmt><decl><specifier>public</specifier> <type><name>String</name></type> <name>messageType</name> <init>= <expr><literal type="string">"CommentInFirebase"</literal></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><specifier>public</specifier> <type><name>long</name></type> <name>id</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <type><name>String</name></type> <name>text</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <type><name>String</name></type> <name>ownerId</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <type><name>String</name></type> <name>ownerHandle</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <type><name>int</name></type> <name>score</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <type><name><name>List</name> <argument_list type="generic">&lt; <argument><name>Long</name></argument> &gt;</argument_list></name></type><name>votersId</name><init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Long</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <type><name>long</name></type> <name>createdAt</name></decl>;</decl_stmt>
	<comment type="line">// Default constructor (required by Jackson JSON library)</comment>
	<constructor><specifier>public</specifier> <name>CommentInFirebase</name><parameter_list>()</parameter_list>
	<block>{
	}</block></constructor>

	<constructor><specifier>public</specifier> <name>CommentInFirebase</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>ownerId</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>ownerHandle</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>text</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>createdAt</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>score</name></decl></parameter>)</parameter_list>
	<block>{
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>id</name></name><operator>=</operator> <name>id</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>ownerId</name></name><operator>=</operator><name>ownerId</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>ownerHandle</name></name><operator>=</operator><name>ownerHandle</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>text</name></name><operator>=</operator><name>text</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>createdAt</name></name><operator>=</operator> <name>createdAt</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>score</name></name><operator>=</operator><name>score</name></expr>;</expr_stmt>


	}</block></constructor>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="CrowdCode-com/crowdcoding/dto/firebase/questions/SubscribersInFirebase.java" hash="89b2f37e4aa65453f55b6160c58d9848b2f0f7a7"><package>package <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>dto</name><operator>.</operator><name>firebase</name><operator>.</operator><name>questions</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>LinkedList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>dto</name><operator>.</operator><name>DTO</name></name>;</import>

<class><specifier>public</specifier> class <name>SubscribersInFirebase</name> <super><extends>extends <name>DTO</name></extends></super>
<block>{
	<decl_stmt><decl><specifier>public</specifier> <type><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>subscribersId</name></decl>;</decl_stmt>

	<comment type="line">// Default constructor (required by Jackson JSON library)</comment>
	<constructor><specifier>public</specifier> <name>SubscribersInFirebase</name><parameter_list>()</parameter_list>
	<block>{
	}</block></constructor>

	<constructor><specifier>public</specifier> <name>SubscribersInFirebase</name><parameter_list>(<parameter><decl><type><name><name>List</name><argument_list type="generic">&lt; <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>subscriberId</name></decl></parameter>)</parameter_list>
	<block>{
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>subscribersId</name></name> <operator>=</operator> <name>subscriberId</name></expr>;</expr_stmt>
	}</block></constructor>

	<function><specifier>public</specifier> <type><name>String</name></type> <name>toString</name><parameter_list>()</parameter_list>
	<block>{
		<return>return <expr><call><name><name>subscribersId</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr>;</return>
	}</block></function>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="CrowdCode-com/crowdcoding/dto/firebase/questions/TagsInFirebase.java" hash="326e26f8a480be07c555712a549d6d2631bedc4b"><package>package <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>dto</name><operator>.</operator><name>firebase</name><operator>.</operator><name>questions</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>LinkedList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>dto</name><operator>.</operator><name>DTO</name></name>;</import>

<class><specifier>public</specifier> class <name>TagsInFirebase</name> <super><extends>extends <name>DTO</name></extends></super>
<block>{
	<decl_stmt><decl><specifier>public</specifier> <type><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>tags</name></decl>;</decl_stmt>

	<comment type="line">// Default constructor (required by Jackson JSON library)</comment>
	<constructor><specifier>public</specifier> <name>TagsInFirebase</name><parameter_list>()</parameter_list>
	<block>{
	}</block></constructor>

	<constructor><specifier>public</specifier> <name>TagsInFirebase</name><parameter_list>(<parameter><decl><type><name><name>List</name><argument_list type="generic">&lt; <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>tags</name></decl></parameter>)</parameter_list>
	<block>{
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>tags</name></name> <operator>=</operator> <name>tags</name></expr>;</expr_stmt>
	}</block></constructor>

	<function><specifier>public</specifier> <type><name>String</name></type> <name>toString</name><parameter_list>()</parameter_list>
	<block>{
		<return>return <expr><call><name><name>tags</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr>;</return>
	}</block></function>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="CrowdCode-com/crowdcoding/dto/firebase/questions/VotersIdInFirebase.java" hash="1db186b17bc8b94ab91d30fdace62a518617151e"><package>package <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>dto</name><operator>.</operator><name>firebase</name><operator>.</operator><name>questions</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>LinkedList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>dto</name><operator>.</operator><name>DTO</name></name>;</import>

<class><specifier>public</specifier> class <name>VotersIdInFirebase</name> <super><extends>extends <name>DTO</name></extends></super>
<block>{
	<decl_stmt><decl><specifier>public</specifier> <type><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>votersId</name></decl>;</decl_stmt>

	<comment type="line">// Default constructor (required by Jackson JSON library)</comment>
	<constructor><specifier>public</specifier> <name>VotersIdInFirebase</name><parameter_list>()</parameter_list>
	<block>{
	}</block></constructor>

	<constructor><specifier>public</specifier> <name>VotersIdInFirebase</name><parameter_list>(<parameter><decl><type><name><name>List</name><argument_list type="generic">&lt; <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>votersId</name></decl></parameter>)</parameter_list>
	<block>{
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>votersId</name></name> <operator>=</operator> <name>votersId</name></expr>;</expr_stmt>
	}</block></constructor>

	<function><specifier>public</specifier> <type><name>String</name></type> <name>toString</name><parameter_list>()</parameter_list>
	<block>{
		<return>return <expr><call><name><name>votersId</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr>;</return>
	}</block></function>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="CrowdCode-com/crowdcoding/dto/firebase/notification/AnswerNotificationInFirebase.java" hash="f1289268e672957741d358829449c76f70c1955e"><package>package <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>dto</name><operator>.</operator><name>firebase</name><operator>.</operator><name>notification</name></name>;</package>

<class><specifier>public</specifier> class <name>AnswerNotificationInFirebase</name> <super><extends>extends <name>NotificationInFirebase</name></extends></super>
<block>{
	<decl_stmt><decl><specifier>public</specifier> <type><name>long</name></type> <name>questionId</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <type><name>String</name></type> <name>workerHandle</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <type><name>String</name></type> <name>text</name></decl>;</decl_stmt>

	<comment type="line">// Default constructor (required by Jackson JSON library)</comment>
	<constructor><specifier>public</specifier> <name>AnswerNotificationInFirebase</name><parameter_list>()</parameter_list>
	<block>{
	}</block></constructor>

	<constructor><specifier>public</specifier> <name>AnswerNotificationInFirebase</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>questionId</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>workerHandle</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>text</name></decl></parameter>)</parameter_list>
	<block>{
		<expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>questionId</name></name> 	<operator>=</operator> <name>questionId</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>workerHandle</name></name>	<operator>=</operator> <name>workerHandle</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>text</name></name> 			<operator>=</operator> <name>text</name></expr>;</expr_stmt>
	}</block></constructor>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="CrowdCode-com/crowdcoding/dto/firebase/notification/AchievementNotificationInFirebase.java" hash="405f217320d091f283ed753822ab1a80369dab2a"><package>package <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>dto</name><operator>.</operator><name>firebase</name><operator>.</operator><name>notification</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>dto</name><operator>.</operator><name>DTO</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>entities</name><operator>.</operator><name>microtasks</name><operator>.</operator><name>Microtask</name></name>;</import>

<class><specifier>public</specifier> class <name>AchievementNotificationInFirebase</name> <super><extends>extends <name>NotificationInFirebase</name></extends></super>
<block>{
	<decl_stmt><decl><specifier>public</specifier> <type><name>String</name></type> <name>message</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <type><name>String</name></type> <name>condition</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <type><name>int</name></type> <name>requirement</name></decl>;</decl_stmt>
	
	<comment type="line">// Default constructor (required by Jackson JSON library)</comment>
	<constructor><specifier>public</specifier> <name>AchievementNotificationInFirebase</name><parameter_list>()</parameter_list>
	<block>{
	}</block></constructor>

	<constructor><specifier>public</specifier> <name>AchievementNotificationInFirebase</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>message</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>condition</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>requirement</name></decl></parameter>)</parameter_list>
	<block>{
		<expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>message</name></name>     <operator>=</operator> <name>message</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>condition</name></name>   <operator>=</operator> <name>condition</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>requirement</name></name> <operator>=</operator> <name>requirement</name></expr>;</expr_stmt>
	}</block></constructor>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="CrowdCode-com/crowdcoding/dto/firebase/questions/QuestionInFirebase.java" hash="50d6f6331d81c4007c643204a0092bf501cb17f5"><package>package <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>dto</name><operator>.</operator><name>firebase</name><operator>.</operator><name>questions</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>dto</name><operator>.</operator><name>DTO</name></name>;</import>

<class><specifier>public</specifier> class <name>QuestionInFirebase</name> <super><extends>extends <name>DTO</name></extends></super>
<block>{
	<decl_stmt><decl><specifier>public</specifier> <type><name>String</name></type> <name>messageType</name> <init>= <expr><literal type="string">"QuestionInFirebase"</literal></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><specifier>public</specifier> <type><name>long</name></type> <name>id</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <type><name>String</name></type> <name>text</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <type><name>String</name></type> <name>title</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <type><name>String</name></type> <name>ownerId</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <type><name>String</name></type> <name>ownerHandle</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <type><name>long</name></type> <name>createdAt</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <type><name>long</name></type> <name>updatedAt</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <type><name>long</name></type> <name>answersCount</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <type><name>long</name></type> <name>commentsCount</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <type><name>int</name></type> <name>score</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <type><name>boolean</name></type> <name>closed</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <type><name>long</name></type> <name>version</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <type><name><name>List</name> <argument_list type="generic">&lt; <argument><name>String</name></argument> &gt;</argument_list></name></type> <name>tags</name><init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <type><name><name>List</name> <argument_list type="generic">&lt; <argument><name>String</name></argument> &gt;</argument_list></name></type> <name>votersId</name><init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <type><name><name>List</name> <argument_list type="generic">&lt; <argument><name>String</name></argument> &gt;</argument_list></name></type> <name>reportersId</name><init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <type><name><name>List</name> <argument_list type="generic">&lt; <argument><name>String</name></argument> &gt;</argument_list></name></type> <name>artifactsId</name><init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <type><name><name>List</name> <argument_list type="generic">&lt; <argument><name>Long</name></argument> &gt;</argument_list></name></type>   <name>answersId</name><init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Long</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <type><name><name>List</name> <argument_list type="generic">&lt; <argument><name>String</name></argument> &gt;</argument_list></name></type> <name>subscribersId</name><init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="line">// Default constructor (required by Jackson JSON library)</comment>
	<constructor><specifier>public</specifier> <name>QuestionInFirebase</name><parameter_list>()</parameter_list><block>{}</block></constructor>

	<constructor><specifier>public</specifier> <name>QuestionInFirebase</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>ownerId</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>ownerHandle</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>title</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>text</name></decl></parameter>, <parameter><decl><type><name><name>List</name> <argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>tags</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>createdAt</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>updatedAt</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>score</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>version</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>answersCount</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>commentsCount</name></decl></parameter>, <parameter><decl><type><name><name>List</name> <argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>subsribersId</name></decl></parameter>, <parameter><decl><type><name><name>List</name> <argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>artifactsId</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>closed</name></decl></parameter>)</parameter_list>
	<block>{
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>id</name></name><operator>=</operator> <name>id</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>ownerId</name></name>     <operator>=</operator> <name>ownerId</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>ownerHandle</name></name> <operator>=</operator> <name>ownerHandle</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>title</name></name><operator>=</operator><name>title</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>text</name></name><operator>=</operator><name>text</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>tags</name></name><operator>=</operator><name>tags</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>createdAt</name></name> <operator>=</operator> <name>createdAt</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>updatedAt</name></name> <operator>=</operator> <name>updatedAt</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>answersCount</name></name>  <operator>=</operator> <name>answersCount</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>commentsCount</name></name> <operator>=</operator> <name>commentsCount</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>score</name></name><operator>=</operator><name>score</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>subscribersId</name></name> <operator>=</operator>  <name>subsribersId</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>artifactsId</name></name>   <operator>=</operator>  <name>artifactsId</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>closed</name></name>   <operator>=</operator>  <name>closed</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>version</name></name> <operator>=</operator> <name>version</name></expr>;</expr_stmt>
	}</block></constructor>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="CrowdCode-com/crowdcoding/dto/firebase/notification/ChallengeNotificationInFirebase.java" hash="953aee1a622e1aac58707d96b2f3e17180fdde0e"><package>package <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>dto</name><operator>.</operator><name>firebase</name><operator>.</operator><name>notification</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>dto</name><operator>.</operator><name>DTO</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>entities</name><operator>.</operator><name>microtasks</name><operator>.</operator><name>Microtask</name></name>;</import>

<class><specifier>public</specifier> class <name>ChallengeNotificationInFirebase</name> <super><extends>extends <name>NotificationInFirebase</name></extends></super>
<block>{
	<decl_stmt><decl><specifier>public</specifier> <type><name>String</name></type> <name>microtaskId</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <type><name>String</name></type> <name>microtaskType</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <type><name>String</name></type> <name>artifactName</name></decl>;</decl_stmt>

	<comment type="line">// Default constructor (required by Jackson JSON library)</comment>
	<constructor><specifier>public</specifier> <name>ChallengeNotificationInFirebase</name><parameter_list>()</parameter_list>
	<block>{
	}</block></constructor>

	<constructor><specifier>public</specifier> <name>ChallengeNotificationInFirebase</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>microtaskId</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>microtaskType</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>artifactName</name></decl></parameter>)</parameter_list>
	<block>{
		<expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>microtaskId</name></name> 	<operator>=</operator> <name>microtaskId</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>microtaskType</name></name>	<operator>=</operator> <name>microtaskType</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>artifactName</name></name> 	<operator>=</operator> <name>artifactName</name></expr>;</expr_stmt>
	}</block></constructor>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="CrowdCode-com/crowdcoding/dto/firebase/notification/CommentNotificationInFirebase.java" hash="7ab0089e0b02794eaf3b5006412d9cfc2eef33bb"><package>package <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>dto</name><operator>.</operator><name>firebase</name><operator>.</operator><name>notification</name></name>;</package>


<class><specifier>public</specifier> class <name>CommentNotificationInFirebase</name> <super><extends>extends <name>NotificationInFirebase</name></extends></super>
<block>{
	<decl_stmt><decl><specifier>public</specifier> <type><name>long</name></type> <name>questionId</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <type><name>long</name></type> <name>answerId</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <type><name>String</name></type> <name>workerHandle</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <type><name>String</name></type> <name>text</name></decl>;</decl_stmt>

	<comment type="line">// Default constructor (required by Jackson JSON library)</comment>
	<constructor><specifier>public</specifier> <name>CommentNotificationInFirebase</name><parameter_list>()</parameter_list>
	<block>{
	}</block></constructor>

	<constructor><specifier>public</specifier> <name>CommentNotificationInFirebase</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>questionId</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>answerId</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>workerHandle</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>text</name></decl></parameter> )</parameter_list>
	<block>{
		<expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>questionId</name></name> 	<operator>=</operator> <name>questionId</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>answerId</name></name>		<operator>=</operator> <name>answerId</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>workerHandle</name></name> 	<operator>=</operator> <name>workerHandle</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>text</name></name> 			<operator>=</operator> <name>text</name></expr>;</expr_stmt>
	}</block></constructor>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="CrowdCode-com/crowdcoding/dto/firebase/notification/MicrotaskNotificationInFirebase.java" hash="6bf7fa86ccf587e9367275bb30f7c1e822b01538"><package>package <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>dto</name><operator>.</operator><name>firebase</name><operator>.</operator><name>notification</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>dto</name><operator>.</operator><name>DTO</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>entities</name><operator>.</operator><name>microtasks</name><operator>.</operator><name>Microtask</name></name>;</import>

<class><specifier>public</specifier> class <name>MicrotaskNotificationInFirebase</name> <super><extends>extends <name>NotificationInFirebase</name></extends></super>
<block>{
	<decl_stmt><decl><specifier>public</specifier> <type><name>String</name></type> <name>microtaskId</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <type><name>String</name></type> <name>microtaskType</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <type><name>String</name></type> <name>artifactName</name></decl>;</decl_stmt>

	<comment type="line">// Default constructor (required by Jackson JSON library)</comment>
	<constructor><specifier>public</specifier> <name>MicrotaskNotificationInFirebase</name><parameter_list>()</parameter_list>
	<block>{
	}</block></constructor>

	<constructor><specifier>public</specifier> <name>MicrotaskNotificationInFirebase</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>microtaskId</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>microtaskType</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>artifactName</name></decl></parameter>)</parameter_list>
	<block>{
		<expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>microtaskId</name></name> 	<operator>=</operator> <name>microtaskId</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>microtaskType</name></name>	<operator>=</operator> <name>microtaskType</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>artifactName</name></name> 	<operator>=</operator> <name>artifactName</name></expr>;</expr_stmt>
	}</block></constructor>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="CrowdCode-com/crowdcoding/dto/firebase/notification/QuestionNotificationInFirebase.java" hash="19a7b5a9014f1793be722a9cd2a056d5bec1edff"><package>package <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>dto</name><operator>.</operator><name>firebase</name><operator>.</operator><name>notification</name></name>;</package>

<class><specifier>public</specifier> class <name>QuestionNotificationInFirebase</name> <super><extends>extends <name>NotificationInFirebase</name></extends></super>
<block>{
	<decl_stmt><decl><specifier>public</specifier> <type><name>long</name></type> <name>questionId</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <type><name>String</name></type> <name>title</name></decl>;</decl_stmt>

	<comment type="line">// Default constructor (required by Jackson JSON library)</comment>
	<constructor><specifier>public</specifier> <name>QuestionNotificationInFirebase</name><parameter_list>()</parameter_list>
	<block>{
	}</block></constructor>

	<constructor><specifier>public</specifier> <name>QuestionNotificationInFirebase</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>questionId</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>title</name></decl></parameter>)</parameter_list>
	<block>{
		<expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>questionId</name></name> 	<operator>=</operator> <name>questionId</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>title</name></name>	<operator>=</operator> <name>title</name></expr>;</expr_stmt>
	}</block></constructor>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="CrowdCode-com/crowdcoding/dto/firebase/notification/NotificationInFirebase.java" hash="545a3e90ac14792228ce5d9416f14511c91f302a"><package>package <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>dto</name><operator>.</operator><name>firebase</name><operator>.</operator><name>notification</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>dto</name><operator>.</operator><name>DTO</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>entities</name><operator>.</operator><name>microtasks</name><operator>.</operator><name>Microtask</name></name>;</import>

<class><specifier>public</specifier> class <name>NotificationInFirebase</name> <super><extends>extends <name>DTO</name></extends></super>
<block>{
	<decl_stmt><decl><specifier>public</specifier> <type><name>String</name></type> <name>type</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <type><name>long</name></type> <name>time</name></decl>;</decl_stmt>

	<comment type="line">// Default constructor (required by Jackson JSON library)</comment>
	<constructor><specifier>public</specifier> <name>NotificationInFirebase</name><parameter_list>()</parameter_list>
	<block>{
	}</block></constructor>

	<constructor><specifier>public</specifier> <name>NotificationInFirebase</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>type</name></decl></parameter>)</parameter_list>

	<block>{
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>type</name></name>			<operator>=</operator> <name>type</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>time</name></name> 			<operator>=</operator> <call><name><name>System</name><operator>.</operator><name>currentTimeMillis</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	}</block></constructor>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="CrowdCode-com/crowdcoding/dto/firebase/microtasks/ChallengeReviewInFirebase.java" hash="f686f48d203e300917ef58fca95a3e2dfcaa5ef6"><package>package <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>dto</name><operator>.</operator><name>firebase</name><operator>.</operator><name>microtasks</name></name>;</package>

<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>entities</name><operator>.</operator><name>microtasks</name><operator>.</operator><name>Microtask</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>googlecode</name><operator>.</operator><name>objectify</name><operator>.</operator><name>Key</name></name>;</import>


<class><specifier>public</specifier> class <name>ChallengeReviewInFirebase</name> <super><extends>extends <name>MicrotaskInFirebase</name></extends></super>
<block>{
	<decl_stmt><decl><specifier>public</specifier> <type><name>String</name></type> <name>challengeText</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <type><name>String</name></type> <name>microtaskKeyUnderChallenge</name></decl>;</decl_stmt>

	<constructor><specifier>public</specifier> <name>ChallengeReviewInFirebase</name><parameter_list>()</parameter_list>
	<block>{
	}</block></constructor>

	<constructor><specifier>public</specifier> <name>ChallengeReviewInFirebase</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>title</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>owningArtifact</name></decl></parameter>, <parameter><decl><type><name>Long</name></type> <name>owningArtifactId</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>functionId</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>points</name></decl></parameter>,
			 <parameter><decl><type><name>String</name></type> <name>challengeText</name></decl></parameter>, <parameter><decl><type><name><name>Key</name><argument_list type="generic">&lt;<argument><name>Microtask</name></argument>&gt;</argument_list></name></type> <name>microtaskKeyUnderChallenge</name></decl></parameter>)</parameter_list>
	<block>{
		<expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>id</name></expr></argument>,<argument><expr><name>title</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>owningArtifact</name></expr></argument>, <argument><expr><name>owningArtifactId</name></expr></argument>, <argument><expr><name>points</name></expr></argument>, <argument><expr><name>functionId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>microtaskKeyUnderChallenge</name></name> <operator>=</operator> <call><name><name>Microtask</name><operator>.</operator><name>keyToString</name></name><argument_list>(<argument><expr><name>microtaskKeyUnderChallenge</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>challengeText</name></name> <operator>=</operator> <name>challengeText</name></expr>;</expr_stmt>

	}</block></constructor>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="CrowdCode-com/crowdcoding/dto/firebase/microtasks/ImplementBehaviorInFirebase.java" hash="88a2bdd00ac1c48befe3b00869022bd05c397b7d"><package>package <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>dto</name><operator>.</operator><name>firebase</name><operator>.</operator><name>microtasks</name></name>;</package>

<class><specifier>public</specifier> class <name>ImplementBehaviorInFirebase</name> <super><extends>extends <name>MicrotaskInFirebase</name></extends></super>
<block>{
	<decl_stmt><decl><specifier>public</specifier> <type><name>String</name></type> <name>promptType</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <type><name>long</name></type> <name>testId</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <type><name>Long</name></type> <name>calleeId</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <type><name>Integer</name></type> <name>oldCalleeVersion</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <type><name>String</name></type> <name>disputeText</name></decl>;</decl_stmt>


	<constructor><specifier>public</specifier> <name>ImplementBehaviorInFirebase</name><parameter_list>()</parameter_list>
	<block>{
	}</block></constructor>

	<constructor><specifier>public</specifier> <name>ImplementBehaviorInFirebase</name><parameter_list>(
			<parameter><decl><type><name>long</name></type> <name>id</name></decl></parameter>,
			<parameter><decl><type><name>String</name></type> <name>title</name></decl></parameter>,
			<parameter><decl><type><name>String</name></type> <name>type</name></decl></parameter>,
			<parameter><decl><type><name>String</name></type> <name>owningArtifact</name></decl></parameter>,
			<parameter><decl><type><name>Long</name></type> <name>owningArtifactId</name></decl></parameter>,
			<parameter><decl><type><name>int</name></type> <name>points</name></decl></parameter>,
			<parameter><decl><type><name>long</name></type> <name>functionId</name></decl></parameter>,
			<parameter><decl><type><name>String</name></type> <name>promptType</name></decl></parameter>,
			<parameter><decl><type><name>long</name></type> <name>testId</name></decl></parameter>,
			<parameter><decl><type><name>long</name></type> <name>calleeId</name></decl></parameter>,
			<parameter><decl><type><name>int</name></type> <name>oldCalleeVersion</name></decl></parameter>,
			<parameter><decl><type><name>String</name></type> <name>disputeText</name></decl></parameter>)</parameter_list>
	<block>{
		<expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>id</name></expr></argument>,<argument><expr><name>title</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>owningArtifact</name></expr></argument>, <argument><expr><name>owningArtifactId</name></expr></argument>, <argument><expr><name>points</name></expr></argument>, <argument><expr><name>functionId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>promptType</name></name> <operator>=</operator> <name>promptType</name></expr>;</expr_stmt>

		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>testId</name></name>			  <operator>=</operator> <name>testId</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>disputeText</name></name>	  <operator>=</operator> <name>disputeText</name></expr>;</expr_stmt>
		<if>if<condition>( <expr><name>calleeId</name><operator>!=</operator><literal type="number">0</literal></expr> )</condition><then>
			<block type="pseudo"><expr_stmt><expr><name><name>this</name><operator>.</operator><name>calleeId</name></name>		  <operator>=</operator> <name>calleeId</name></expr>;</expr_stmt></block></then></if>
		<if>if<condition>( <expr><name>oldCalleeVersion</name><operator>!=</operator><literal type="number">0</literal></expr> )</condition><then>
		<block type="pseudo"><expr_stmt><expr><name><name>this</name><operator>.</operator><name>oldCalleeVersion</name></name> <operator>=</operator> <name>oldCalleeVersion</name></expr>;</expr_stmt></block></then></if>

	}</block></constructor>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="CrowdCode-com/crowdcoding/dto/firebase/microtasks/DescribeFunctionBehaviourInFirebase.java" hash="55396150e6941ab32757ac9096ffa44ec4180569"><package>package <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>dto</name><operator>.</operator><name>firebase</name><operator>.</operator><name>microtasks</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>dto</name><operator>.</operator><name>ajax</name><operator>.</operator><name>microtask</name><operator>.</operator><name>submission</name><operator>.</operator><name>TestDisputedDTO</name></name>;</import>

<class><specifier>public</specifier> class <name>DescribeFunctionBehaviourInFirebase</name> <super><extends>extends <name>MicrotaskInFirebase</name></extends></super>
<block>{
	<decl_stmt><decl><specifier>public</specifier> <type><name>String</name></type> <name>promptType</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <type><name>Integer</name></type> <name>oldFunctionVersion</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <type><name>Integer</name></type> <name>oldADTVersion</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <type><name>Long</name></type> <name>ADTId</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <type><name><name>List</name><argument_list type="generic">&lt;<argument><name>TestDisputedDTO</name></argument>&gt;</argument_list></name></type> <name>disputedTests</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <type><name>Long</name></type> <name>calleeId</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <type><name>Integer</name></type> <name>oldCalleeVersion</name></decl>;</decl_stmt>

	<constructor><specifier>public</specifier> <name>DescribeFunctionBehaviourInFirebase</name><parameter_list>()</parameter_list>
	<block>{
	}</block></constructor>

	<constructor><specifier>public</specifier> <name>DescribeFunctionBehaviourInFirebase</name><parameter_list>(
			<parameter><decl><type><name>long</name></type> <name>id</name></decl></parameter>,
			<parameter><decl><type><name>String</name></type> <name>title</name></decl></parameter>,
			<parameter><decl><type><name>String</name></type> <name>type</name></decl></parameter>,
			<parameter><decl><type><name>String</name></type> <name>owningArtifact</name></decl></parameter>,
			<parameter><decl><type><name>Long</name></type> <name>owningArtifactId</name></decl></parameter>,
			<parameter><decl><type><name>int</name></type> <name>points</name></decl></parameter>,
			<parameter><decl><type><name>long</name></type> <name>testedFunctionId</name></decl></parameter>,
			<parameter><decl><type><name>String</name></type> <name>promptType</name></decl></parameter>,
			<parameter><decl><type><name>int</name></type> <name>oldFunctionVersion</name></decl></parameter>,
			<parameter><decl><type><name>int</name></type> <name>oldADTVersion</name></decl></parameter>,
			<parameter><decl><type><name>long</name></type> <name>ADTId</name></decl></parameter>,
			<parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>TestDisputedDTO</name></argument>&gt;</argument_list></name></type> <name>disputedTests</name></decl></parameter>,
			<parameter><decl><type><name>long</name></type> <name>calleeId</name></decl></parameter>,
			<parameter><decl><type><name>int</name></type> <name>oldCalleeVersion</name></decl></parameter>)</parameter_list>
	<block>{
		<expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>id</name></expr></argument>,<argument><expr><name>title</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>owningArtifact</name></expr></argument>, <argument><expr><name>owningArtifactId</name></expr></argument>, <argument><expr><name>points</name></expr></argument>, <argument><expr><name>testedFunctionId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>promptType</name></name>       	<operator>=</operator> <name>promptType</name></expr>;</expr_stmt>

		<if>if<condition>( <expr><name>oldFunctionVersion</name> <operator>!=</operator><literal type="number">0</literal></expr> )</condition><then>
			<block type="pseudo"><expr_stmt><expr><name><name>this</name><operator>.</operator><name>oldFunctionVersion</name></name> <operator>=</operator> <name>oldFunctionVersion</name></expr>;</expr_stmt></block></then></if>

		<if>if<condition>( <expr><name>oldADTVersion</name> <operator>!=</operator><literal type="number">0</literal></expr> )</condition><then>
			<block type="pseudo"><expr_stmt><expr><name><name>this</name><operator>.</operator><name>oldADTVersion</name></name> 		<operator>=</operator> <name>oldADTVersion</name></expr>;</expr_stmt></block></then></if>

		<if>if<condition>( <expr><name>ADTId</name> <operator>!=</operator><literal type="number">0</literal></expr> )</condition><then>
			<block type="pseudo"><expr_stmt><expr><name><name>this</name><operator>.</operator><name>ADTId</name></name> 				<operator>=</operator> <name>ADTId</name></expr>;</expr_stmt></block></then></if>

		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>disputedTests</name></name> 	<operator>=</operator> <name>disputedTests</name></expr>;</expr_stmt>

		<if>if<condition>( <expr><name>calleeId</name> <operator>!=</operator><literal type="number">0</literal></expr> )</condition><then>
			<block type="pseudo"><expr_stmt><expr><name><name>this</name><operator>.</operator><name>calleeId</name></name>			<operator>=</operator> <name>calleeId</name></expr>;</expr_stmt></block></then></if>

		<if>if<condition>( <expr><name>oldCalleeVersion</name> <operator>!=</operator><literal type="number">0</literal></expr> )</condition><then>
			<block type="pseudo"><expr_stmt><expr><name><name>this</name><operator>.</operator><name>oldCalleeVersion</name></name> 	<operator>=</operator> <name>oldCalleeVersion</name></expr>;</expr_stmt></block></then></if>

	}</block></constructor>

}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="CrowdCode-com/crowdcoding/dto/firebase/microtasks/MicrotaskInFirebase.java" hash="23b063ed2b11d3a917b79ab010babe5e998189e0"><package>package <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>dto</name><operator>.</operator><name>firebase</name><operator>.</operator><name>microtasks</name></name>;</package>

<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>dto</name><operator>.</operator><name>DTO</name></name>;</import>

<class><specifier>public</specifier> class <name>MicrotaskInFirebase</name> <super><extends>extends <name>DTO</name></extends></super>
<block>{
	<decl_stmt><decl><specifier>public</specifier> <type><name>String</name></type> <name>messageType</name> <init>= <expr><literal type="string">"MicrotaskInFirebase"</literal></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><specifier>public</specifier> <type><name>long</name></type> <name>id</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <type><name>String</name></type> <name>title</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <type><name>String</name></type> <name>type</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <type><name>Long</name></type> <name>owningArtifactId</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <type><name>String</name></type> <name>owningArtifact</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <type><name>boolean</name></type> <name>completed</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <type><name>int</name></type> <name>points</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <type><name>Long</name></type> <name>functionId</name></decl>;</decl_stmt>


	<comment type="line">// Default constructor (required by Jackson JSON library)</comment>
	<constructor><specifier>public</specifier> <name>MicrotaskInFirebase</name><parameter_list>()</parameter_list>
	<block>{
	}</block></constructor>

	<constructor><specifier>public</specifier> <name>MicrotaskInFirebase</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>title</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>owningArtifact</name></decl></parameter>,
			<parameter><decl><type><name>Long</name></type> <name>owningArtifactId</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>points</name></decl></parameter>, <parameter><decl><type><name>Long</name></type> <name>functionId</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>id</name></name> 				<operator>=</operator> <name>id</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>title</name></name>				<operator>=</operator> <name>title</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>type</name></name> 				<operator>=</operator> <name>type</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>owningArtifact</name></name> 	<operator>=</operator> <name>owningArtifact</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>owningArtifactId</name></name>	<operator>=</operator> <name>owningArtifactId</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>points</name></name> 			<operator>=</operator> <name>points</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>functionId</name></name> 		<operator>=</operator> <name>functionId</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>completed</name></name> 			<operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>

	}</block></constructor>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="CrowdCode-com/crowdcoding/dto/firebase/microtasks/ReissueInFirebase.java" hash="d051443bbf8daab2416ecdf215ed7fa079eb6393"><package>package <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>dto</name><operator>.</operator><name>firebase</name><operator>.</operator><name>microtasks</name></name>;</package>

<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>dto</name><operator>.</operator><name>DTO</name></name>;</import>

<class><specifier>public</specifier> class <name>ReissueInFirebase</name> <super><extends>extends <name>DTO</name></extends></super>
<block>{
	<decl_stmt><decl><specifier>public</specifier> <type><name>String</name></type> <name>reissuedMicrotaskKey</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <type><name>String</name></type> <name>reissueMotivation</name></decl>;</decl_stmt>

	<comment type="line">// Default constructor (required by Jackson JSON library)</comment>
	<constructor><specifier>public</specifier> <name>ReissueInFirebase</name><parameter_list>()</parameter_list>
	<block>{
	}</block></constructor>

	<constructor><specifier>public</specifier> <name>ReissueInFirebase</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>reissuedMicrotaskKey</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>reissueMotivation</name></decl></parameter>)</parameter_list> <block>{

		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>reissuedMicrotaskKey</name></name><operator>=</operator><name>reissuedMicrotaskKey</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>reissueMotivation</name></name><operator>=</operator><name>reissueMotivation</name></expr>;</expr_stmt>
	}</block></constructor>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="CrowdCode-com/crowdcoding/dto/firebase/microtasks/ReviewInFirebase.java" hash="41393bd3779c437bec76ce1f8700cda802dbd85d"><package>package <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>dto</name><operator>.</operator><name>firebase</name><operator>.</operator><name>microtasks</name></name>;</package>

<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>entities</name><operator>.</operator><name>microtasks</name><operator>.</operator><name>Microtask</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>googlecode</name><operator>.</operator><name>objectify</name><operator>.</operator><name>Key</name></name>;</import>


<class><specifier>public</specifier> class <name>ReviewInFirebase</name> <super><extends>extends <name>MicrotaskInFirebase</name></extends></super>
<block>{
	<decl_stmt><decl><specifier>public</specifier> <type><name>String</name></type> <name>microtaskKeyUnderReview</name></decl>;</decl_stmt>

	<constructor><specifier>public</specifier> <name>ReviewInFirebase</name><parameter_list>()</parameter_list>
	<block>{
	}</block></constructor>

	<constructor><specifier>public</specifier> <name>ReviewInFirebase</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>title</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>owningArtifact</name></decl></parameter>, <parameter><decl><type><name>Long</name></type> <name>owningArtifactId</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>functionId</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>points</name></decl></parameter>,
			 <parameter><decl><type><name><name>Key</name><argument_list type="generic">&lt;<argument><name>Microtask</name></argument>&gt;</argument_list></name></type> <name>microtaskKeyUnderReview</name></decl></parameter>)</parameter_list>
	<block>{
		<expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>id</name></expr></argument>,<argument><expr><name>title</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>owningArtifact</name></expr></argument>, <argument><expr><name>owningArtifactId</name></expr></argument>,  <argument><expr><name>points</name></expr></argument>, <argument><expr><name>functionId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>microtaskKeyUnderReview</name></name> <operator>=</operator> <call><name><name>Microtask</name><operator>.</operator><name>keyToString</name></name><argument_list>(<argument><expr><name>microtaskKeyUnderReview</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	}</block></constructor>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="CrowdCode-com/crowdcoding/dto/firebase/microtasks/ReviewSubmissionInFirebase.java" hash="54297955a236823d005e9ea652d63877f76ff330"><package>package <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>dto</name><operator>.</operator><name>firebase</name><operator>.</operator><name>microtasks</name></name>;</package>

<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>dto</name><operator>.</operator><name>DTO</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>dto</name><operator>.</operator><name>ajax</name><operator>.</operator><name>microtask</name><operator>.</operator><name>submission</name><operator>.</operator><name>ReviewDTO</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>entities</name><operator>.</operator><name>microtasks</name><operator>.</operator><name>Microtask</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>googlecode</name><operator>.</operator><name>objectify</name><operator>.</operator><name>Key</name></name>;</import>


<class><specifier>public</specifier> class <name>ReviewSubmissionInFirebase</name> <super><extends>extends <name>DTO</name></extends></super>
<block>{
	<decl_stmt><decl><specifier>public</specifier> <type><name>int</name></type> <name>qualityScore</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <type><name>String</name></type> <name>reviewText</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <type><name>String</name></type> <name>reviewKey</name></decl>;</decl_stmt>


	<constructor><specifier>public</specifier> <name>ReviewSubmissionInFirebase</name><parameter_list>()</parameter_list>
	<block>{
	}</block></constructor>

	<constructor><specifier>public</specifier> <name>ReviewSubmissionInFirebase</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>qualityScore</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>reviewText</name></decl></parameter>,<parameter><decl><type><name><name>Key</name><argument_list type="generic">&lt;<argument><name>Microtask</name></argument>&gt;</argument_list></name></type> <name>reviewKey</name></decl></parameter>)</parameter_list>
	<block>{
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>qualityScore</name></name> <operator>=</operator> <name>qualityScore</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>reviewText</name></name> <operator>=</operator> <name>reviewText</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>reviewKey</name></name> <operator>=</operator> <call><name><name>Microtask</name><operator>.</operator><name>keyToString</name></name><argument_list>(<argument><expr><name>reviewKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	}</block></constructor>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="CrowdCode-com/crowdcoding/dto/firebase/artifacts/AdvancedTestInFirebase.java" hash="0647f6d19226c319342d1a1a017e1c3c6a702772"><package>package <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>dto</name><operator>.</operator><name>firebase</name><operator>.</operator><name>artifacts</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>dto</name><operator>.</operator><name>DTO</name></name>;</import>

<class><specifier>public</specifier> class <name>AdvancedTestInFirebase</name> <super><extends>extends <name>DTO</name></extends></super>
<block>{
	<decl_stmt><decl><specifier>public</specifier> <type><name>String</name></type> <name>messageType</name> <init>= <expr><literal type="string">"TestInFirebase"</literal></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><specifier>public</specifier> <type><name>long</name></type> <name>id</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <type><name>int</name></type> <name>version</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <type><name>String</name></type> <name>description</name></decl>;</decl_stmt>		<comment type="line">// Description of the test case</comment>
	<decl_stmt><decl><specifier>public</specifier> <type><name>String</name></type> <name>code</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <type><name>long</name></type> <name>functionId</name></decl>;</decl_stmt>		<comment type="line">// Id of the function being tested</comment>
	<decl_stmt><decl><specifier>public</specifier> <type><name>boolean</name></type> <name>isReadOnly</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <type><name>boolean</name></type> <name>isApiArtifact</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <type><name>boolean</name></type> <name>isDeleted</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <type><name>double</name></type>  <name>creationTime</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <type><name>boolean</name></type> <name>isSimple</name></decl>;</decl_stmt>


	<comment type="line">// Default constructor (required by Jackson JSON library)</comment>
	<constructor><specifier>public</specifier> <name>AdvancedTestInFirebase</name><parameter_list>()</parameter_list>
	<block>{
	}</block></constructor>

	<constructor><specifier>public</specifier> <name>AdvancedTestInFirebase</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>version</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>description</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>code</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>functionId</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>creationTime</name></decl></parameter>,
			<parameter><decl><type><name>boolean</name></type> <name>isSimple</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>isReadOnly</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>isApiArtifact</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>isDeleted</name></decl></parameter>)</parameter_list>
	<block>{
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>id</name></name> 		   <operator>=</operator> <name>id</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>version</name></name>       <operator>=</operator> <name>version</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>code</name></name>          <operator>=</operator> <name>code</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>description</name></name>   <operator>=</operator> <name>description</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>functionId</name></name>    <operator>=</operator> <name>functionId</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>isDeleted</name></name>	   <operator>=</operator> <name>isDeleted</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>isReadOnly</name></name>	   <operator>=</operator> <name>isReadOnly</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>isApiArtifact</name></name> <operator>=</operator> <name>isApiArtifact</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>isSimple</name></name>      <operator>=</operator> <name>isSimple</name></expr>;</expr_stmt>
	}</block></constructor>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="CrowdCode-com/crowdcoding/dto/firebase/artifacts/ADTInFirebase.java" hash="9576f5c90f33e13a77553e1e57e2de37a630a96f"><package>package <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>dto</name><operator>.</operator><name>firebase</name><operator>.</operator><name>artifacts</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashMap</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>dto</name><operator>.</operator><name>DTO</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>dto</name><operator>.</operator><name>ajax</name><operator>.</operator><name>microtask</name><operator>.</operator><name>submission</name><operator>.</operator><name>ADTExampleDTO</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>dto</name><operator>.</operator><name>ajax</name><operator>.</operator><name>microtask</name><operator>.</operator><name>submission</name><operator>.</operator><name>ADTStructureDTO</name></name>;</import>

<class><specifier>public</specifier> class <name>ADTInFirebase</name> <super><extends>extends <name>DTO</name></extends></super>
<block>{
	<decl_stmt><decl><specifier>public</specifier> <type><name>String</name></type> <name>messageType</name> <init>= <expr><literal type="string">"ADTInFirebase"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <type><name>long</name></type> <name>id</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <type><name>int</name></type> <name>version</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <type><name>String</name></type> <name>description</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <type><name>String</name></type> <name>name</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <type><name><name>List</name><argument_list type="generic">&lt;<argument><name>ADTStructureDTO</name></argument>&gt;</argument_list></name></type> <name>structure</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>ADTStructureDTO</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <type><name><name>List</name><argument_list type="generic">&lt;<argument><name>ADTExampleDTO</name></argument>&gt;</argument_list></name></type> <name>examples</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>ADTExampleDTO</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <type><name>boolean</name></type> <name>isReadOnly</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <type><name>boolean</name></type> <name>isApiArtifact</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <type><name>boolean</name></type> <name>isDeleted</name></decl>;</decl_stmt>


	<comment type="line">// Default constructor</comment>
	<constructor><specifier>public</specifier> <name>ADTInFirebase</name><parameter_list>()</parameter_list>
	<block>{
	}</block></constructor>
	<constructor><specifier>public</specifier> <name>ADTInFirebase</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>version</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>description</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>structure</name></decl></parameter>, <parameter><decl><type><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>examples</name></decl></parameter>,
			<parameter><decl><type><name>boolean</name></type> <name>isReadOnly</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>isApiArtifact</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>isDeleted</name></decl></parameter> )</parameter_list>
	<block>{
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>id</name></name>			  <operator>=</operator> <name>id</name></expr> ;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>description</name></name>  <operator>=</operator> <name>description</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>name</name></name> 		  <operator>=</operator> <name>name</name></expr>;</expr_stmt>

		<for>for<control>(<init><decl><type><name>String</name></type> <name>structureName</name> <range>: <expr><call><name><name>structure</name><operator>.</operator><name>keySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control><block>{
			<expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>structure</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>ADTStructureDTO</name><argument_list>(<argument><expr><name>structureName</name></expr></argument>, <argument><expr><call><name><name>structure</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>structureName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></for>

		<for>for<control>(<init><decl><type><name>String</name></type> <name>exampleName</name> <range>: <expr><call><name><name>examples</name><operator>.</operator><name>keySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control><block>{
			<expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>examples</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>ADTExampleDTO</name><argument_list>(<argument><expr><name>exampleName</name></expr></argument>, <argument><expr><call><name><name>examples</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>exampleName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></for>

		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>version</name></name>	   <operator>=</operator> <name>version</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>isReadOnly</name></name>    <operator>=</operator> <name>isReadOnly</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>isApiArtifact</name></name> <operator>=</operator> <name>isApiArtifact</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>isDeleted</name></name>	   <operator>=</operator> <name>isDeleted</name></expr>;</expr_stmt>

	}</block></constructor>

}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="CrowdCode-com/crowdcoding/dto/ajax/TestResultDTO.java" hash="108258d29c5de0438cd6e2f3b18ca52457cfcf2d"><package>package <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>dto</name><operator>.</operator><name>ajax</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>dto</name><operator>.</operator><name>DTO</name></name>;</import>


<class><specifier>public</specifier> class <name>TestResultDTO</name> <super><extends>extends <name>DTO</name></extends></super>
<block>{

	<decl_stmt><decl><specifier>public</specifier> <type><name>boolean</name></type> <name>areTestsPassed</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <type><name>long</name></type> <name>failedTestId</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <type><name><name>List</name> <argument_list type="generic">&lt; <argument><name>Long</name></argument> &gt;</argument_list></name></type> <name>passedTestsId</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt; <argument><name>Long</name></argument> &gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>


	<comment type="line">// Default constructor</comment>
	<constructor><specifier>public</specifier> <name>TestResultDTO</name><parameter_list>()</parameter_list>
	<block>{
	}</block></constructor>

}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="CrowdCode-com/crowdcoding/dto/ajax/questions/AnswerDTO.java" hash="9673c9f097a6f98114d284a35afb7c900cd93a85"><package>package <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>dto</name><operator>.</operator><name>ajax</name><operator>.</operator><name>questions</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>dto</name><operator>.</operator><name>DTO</name></name>;</import>

<class><specifier>public</specifier> class <name>AnswerDTO</name> <super><extends>extends <name>DTO</name></extends></super>
<block>{
	<decl_stmt><decl><specifier>public</specifier> <type><name>String</name></type> <name>messageType</name> <init>= <expr><literal type="string">"AnswerDTO"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <type><name>long</name></type> <name>questionId</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <type><name>String</name></type> <name>text</name></decl>;</decl_stmt>

	<comment type="line">// Default constructor (required by Jackson JSON library)</comment>
	<constructor><specifier>public</specifier> <name>AnswerDTO</name><parameter_list>()</parameter_list>
	<block>{
	}</block></constructor>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="CrowdCode-com/crowdcoding/dto/firebase/artifacts/FunctionInFirebase.java" hash="7dbb91a5c86209a1aa68be73e57e09050abbc0c9"><package>package <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>dto</name><operator>.</operator><name>firebase</name><operator>.</operator><name>artifacts</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>dto</name><operator>.</operator><name>DTO</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>dto</name><operator>.</operator><name>ajax</name><operator>.</operator><name>microtask</name><operator>.</operator><name>submission</name><operator>.</operator><name>FunctionParameterDTO</name></name>;</import>

<class><specifier>public</specifier> class <name>FunctionInFirebase</name> <super><extends>extends <name>DTO</name></extends></super>
<block>{
	<decl_stmt><decl><specifier>public</specifier> <type><name>String</name></type> <name>messageType</name> <init>= <expr><literal type="string">"FunctionInFirebase"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <type><name>String</name></type> <name>name</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <type><name>long</name></type> <name>id</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <type><name>int</name></type> <name>version</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <type><name>String</name></type> <name>returnType</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <type><name><name>List</name><argument_list type="generic">&lt;<argument><name>FunctionParameterDTO</name></argument>&gt;</argument_list></name></type> <name>parameters</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>FunctionParameterDTO</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <type><name>String</name></type> <name>header</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <type><name>String</name></type> <name>description</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <type><name>String</name></type> <name>code</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <type><name>int</name></type> <name>linesOfCode</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Long</name></argument>&gt;</argument_list></name></type> <name>ADTsId</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Long</name></argument>&gt;</argument_list></name></type> <name>calleesId</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <type><name>int</name></type> <name>testSuiteVersion</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <type><name>boolean</name></type> <name>isReadOnly</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <type><name>boolean</name></type> <name>isApiArtifact</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <type><name>boolean</name></type> <name>isDeleted</name></decl>;</decl_stmt>

	<comment type="line">// Description includes all comments and the signature block itself. e.g.,</comment>
	<comment type="line">// // A description of foo, describing what it does and its parameters and return value.</comment>

	<comment type="line">// Header consists of the header: e.g.,</comment>
	<comment type="line">// function foo(arg1, arg2)</comment>

	<comment type="line">// Default constructor (required by Jackson JSON library)</comment>
	<constructor><specifier>public</specifier> <name>FunctionInFirebase</name><parameter_list>()</parameter_list>
	<block>{
	}</block></constructor>

	<constructor><specifier>public</specifier> <name>FunctionInFirebase</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>version</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>returnType</name></decl></parameter>, <parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>paramNames</name></decl></parameter>,
			<parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>paramTypes</name></decl></parameter>,<parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>paramDescriptions</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>header</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>description</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>code</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>linesOfCode</name></decl></parameter>,
			<parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Long</name></argument>&gt;</argument_list></name></type> <name>ADTsId</name></decl></parameter>, <parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Long</name></argument>&gt;</argument_list></name></type> <name>calleesId</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>testSuiteVersion</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>isReadOnly</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>isApiArtifact</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>isDeleted</name></decl></parameter> )</parameter_list>
	<block>{
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>name</name></name> 		 <operator>=</operator> <name>name</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>id</name></name> 		 <operator>=</operator> <name>id</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>version</name></name> 	 <operator>=</operator> <name>version</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>returnType</name></name>  <operator>=</operator> <name>returnType</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>header</name></name> 	 <operator>=</operator> <name>header</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>description</name></name> <operator>=</operator> <name>description</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>code</name></name> 		 <operator>=</operator> <name>code</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>linesOfCode</name></name> <operator>=</operator> <name>linesOfCode</name></expr>;</expr_stmt>

		<comment type="line">// creates the parameters List</comment>
		<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator> <call><name><name>paramNames</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
			<expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>parameters</name><operator>.</operator><name>add</name></name><argument_list>(
				<argument><expr><operator>new</operator> <call><name>FunctionParameterDTO</name><argument_list>(<argument><expr><call><name><name>paramNames</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>paramTypes</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>paramDescriptions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></for>


		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>ADTsId</name></name>		   	   <operator>=</operator> <name>ADTsId</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>calleesId</name></name> 	       <operator>=</operator> <name>calleesId</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>testSuiteVersion</name></name> <operator>=</operator> <name>testSuiteVersion</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>isApiArtifact</name></name>     <operator>=</operator> <name>isApiArtifact</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>isDeleted</name></name>         <operator>=</operator> <name>isDeleted</name></expr>;</expr_stmt>


	}</block></constructor>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="CrowdCode-com/crowdcoding/dto/firebase/artifacts/SimpleTestInFirebase.java" hash="9c89d014442478d70c19fff38b19c343cb742672"><package>package <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>dto</name><operator>.</operator><name>firebase</name><operator>.</operator><name>artifacts</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>dto</name><operator>.</operator><name>DTO</name></name>;</import>

<class><specifier>public</specifier> class <name>SimpleTestInFirebase</name> <super><extends>extends <name>DTO</name></extends></super>
<block>{
	<decl_stmt><decl><specifier>public</specifier> <type><name>String</name></type> <name>messageType</name> <init>= <expr><literal type="string">"StubInFirebase"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <type><name>long</name></type> <name>id</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <type><name>int</name></type> <name>version</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <type><name>String</name></type> <name>description</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <type><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>inputs</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <type><name>String</name></type> <name>output</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <type><name>boolean</name></type> <name>isSimple</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <type><name>boolean</name></type> <name>isReadOnly</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <type><name>boolean</name></type> <name>isApiArtifact</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <type><name>boolean</name></type> <name>isDeleted</name></decl>;</decl_stmt>
	<comment type="line">// Default constructor (required by Jackson JSON library)</comment>
	<constructor><specifier>public</specifier> <name>SimpleTestInFirebase</name><parameter_list>()</parameter_list>
	<block>{
	}</block></constructor>

	<constructor><specifier>public</specifier> <name>SimpleTestInFirebase</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>version</name></decl></parameter>, <parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>inputs</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>output</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>description</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>isSimple</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>isReadOnly</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>isApiArtifact</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>isDeleted</name></decl></parameter>)</parameter_list>
	<block>{
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>id</name></name> 		   <operator>=</operator> <name>id</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>version</name></name> 	   <operator>=</operator> <name>version</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>inputs</name></name> 	   <operator>=</operator> <name>inputs</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>output</name></name> 	   <operator>=</operator> <name>output</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>description</name></name>   <operator>=</operator> <name>description</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>isSimple</name></name>	   <operator>=</operator> <name>isSimple</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>isReadOnly</name></name>    <operator>=</operator> <name>isReadOnly</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>isApiArtifact</name></name> <operator>=</operator> <name>isApiArtifact</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>isDeleted</name></name>     <operator>=</operator> <name>isDeleted</name></expr>;</expr_stmt>
	}</block></constructor>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="CrowdCode-com/crowdcoding/dto/ajax/questions/CommentDTO.java" hash="2ef0d2a2dfb5c441bc21f3e76bacb738c6245878"><package>package <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>dto</name><operator>.</operator><name>ajax</name><operator>.</operator><name>questions</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>dto</name><operator>.</operator><name>DTO</name></name>;</import>

<class><specifier>public</specifier> class <name>CommentDTO</name> <super><extends>extends <name>DTO</name></extends></super>
<block>{
	<decl_stmt><decl><specifier>public</specifier> <type><name>String</name></type> <name>messageType</name> <init>= <expr><literal type="string">"CommentDTO"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <type><name>long</name></type> <name>questionId</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <type><name>long</name></type> <name>answerId</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <type><name>String</name></type> <name>text</name></decl>;</decl_stmt>

	<comment type="line">// Default constructor (required by Jackson JSON library)</comment>
	<constructor><specifier>public</specifier> <name>CommentDTO</name><parameter_list>()</parameter_list>
	<block>{
	}</block></constructor>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="CrowdCode-com/crowdcoding/dto/ajax/questions/QuestionDTO.java" hash="335c059bf3983182e6d96fa7253c64faeefb4a32"><package>package <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>dto</name><operator>.</operator><name>ajax</name><operator>.</operator><name>questions</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>dto</name><operator>.</operator><name>DTO</name></name>;</import>

<class><specifier>public</specifier> class <name>QuestionDTO</name> <super><extends>extends <name>DTO</name></extends></super>
<block>{
	<decl_stmt><decl><specifier>public</specifier> <type><name>String</name></type> <name>messageType</name> <init>= <expr><literal type="string">"QuestionDTO"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <type><name>long</name></type>    <name>id</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <type><name>String</name></type>  <name>title</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <type><name>String</name></type>  <name>text</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <type><name>String</name></type>  <name>artifactId</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <type><name>boolean</name></type> <name>closed</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <type><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>tags</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="line">// Default constructor (required by Jackson JSON library)</comment>
	<constructor><specifier>public</specifier> <name>QuestionDTO</name><parameter_list>()</parameter_list>
	<block>{
	}</block></constructor>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="CrowdCode-com/crowdcoding/dto/ajax/microtask/submission/ADTExampleDTO.java" hash="f74a65fb652c35d8bbb5abde0c2e2fab7d96d93a"><package>package <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>dto</name><operator>.</operator><name>ajax</name><operator>.</operator><name>microtask</name><operator>.</operator><name>submission</name></name>;</package>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>commons</name><operator>.</operator><name>lang3</name><operator>.</operator><name>StringEscapeUtils</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>dto</name><operator>.</operator><name>DTO</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>entities</name><operator>.</operator><name>artifacts</name><operator>.</operator><name>Test</name></name>;</import>


<class><specifier>public</specifier> class <name>ADTExampleDTO</name> <super><extends>extends <name>DTO</name></extends></super>
<block>{
	<decl_stmt><decl><specifier>public</specifier> <type><name>String</name></type> <name>name</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <type><name>String</name></type> <name>value</name></decl>;</decl_stmt>

	<comment type="line">// Default constructor</comment>
	<constructor><specifier>public</specifier> <name>ADTExampleDTO</name><parameter_list>()</parameter_list>
	<block>{
	}</block></constructor>
	<constructor><specifier>public</specifier> <name>ADTExampleDTO</name><parameter_list>( <parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>value</name></decl></parameter>)</parameter_list><block>{
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>name</name></name> <operator>=</operator> <name>name</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>value</name></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
	}</block></constructor>

}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="CrowdCode-com/crowdcoding/dto/ajax/microtask/submission/ChallengeReviewDTO.java" hash="4b1349fa86d94325d2f182f8a42e1bd75fc05f10"><package>package <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>dto</name><operator>.</operator><name>ajax</name><operator>.</operator><name>microtask</name><operator>.</operator><name>submission</name></name>;</package>

<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>dto</name><operator>.</operator><name>DTO</name></name>;</import>


<class><specifier>public</specifier> class <name>ChallengeReviewDTO</name> <super><extends>extends <name>DTO</name></extends></super>
<block>{
	<decl_stmt><decl><specifier>public</specifier> <type><name>Boolean</name></type>  <name>isChallengeWon</name></decl>;</decl_stmt>
}</block></class></unit>

<unit revision="0.9.5" language="Java" filename="CrowdCode-com/crowdcoding/dto/ajax/microtask/submission/ADTStructureDTO.java" hash="f7fd9ab5d491aa5f324b694e7004811948f6e36f"><package>package <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>dto</name><operator>.</operator><name>ajax</name><operator>.</operator><name>microtask</name><operator>.</operator><name>submission</name></name>;</package>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>commons</name><operator>.</operator><name>lang3</name><operator>.</operator><name>StringEscapeUtils</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>dto</name><operator>.</operator><name>DTO</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>entities</name><operator>.</operator><name>artifacts</name><operator>.</operator><name>Test</name></name>;</import>


<class><specifier>public</specifier> class <name>ADTStructureDTO</name> <super><extends>extends <name>DTO</name></extends></super>
<block>{
	<decl_stmt><decl><specifier>public</specifier> <type><name>String</name></type> <name>name</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <type><name>String</name></type> <name>type</name></decl>;</decl_stmt>

	<comment type="line">// Default constructor</comment>
	<constructor><specifier>public</specifier> <name>ADTStructureDTO</name><parameter_list>()</parameter_list>
	<block>{
	}</block></constructor>
	<constructor><specifier>public</specifier> <name>ADTStructureDTO</name><parameter_list>( <parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>type</name></decl></parameter>)</parameter_list><block>{
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>name</name></name> <operator>=</operator> <name>name</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>
	}</block></constructor>

}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="CrowdCode-com/crowdcoding/dto/ajax/microtask/submission/ADTDTO.java" hash="3ffe5b259f4c43f4779a58e0b9aeaa8688586803"><package>package <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>dto</name><operator>.</operator><name>ajax</name><operator>.</operator><name>microtask</name><operator>.</operator><name>submission</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashMap</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>dto</name><operator>.</operator><name>DTO</name></name>;</import>


<class><specifier>public</specifier> class <name>ADTDTO</name> <super><extends>extends <name>DTO</name></extends></super>
<block>{
	<decl_stmt><decl><specifier>public</specifier> <type><name>String</name></type> <name>description</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <type><name>String</name></type> <name>name</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <type><name><name>List</name><argument_list type="generic">&lt;<argument><name>ADTStructureDTO</name></argument>&gt;</argument_list></name></type> <name>structure</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <type><name><name>List</name><argument_list type="generic">&lt;<argument><name>ADTExampleDTO</name></argument>&gt;</argument_list></name></type> <name>examples</name> <init>=  <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>ADTExampleDTO</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <type><name>boolean</name></type> <name>isReadOnly</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>

	<comment type="line">// Default constructor</comment>
	<constructor><specifier>public</specifier> <name>ADTDTO</name><parameter_list>()</parameter_list>
	<block>{
	}</block></constructor>

	<function><specifier>public</specifier> <type><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>getStructure</name><parameter_list>()</parameter_list><block>{
		<decl_stmt><decl><type><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>mapStructure</name> <init>= <expr><operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<for>for<control>(<init><decl><type><name>ADTStructureDTO</name></type> <name>ADTStructure</name> <range>: <expr><name>structure</name></expr></range></decl></init>)</control><block>{
			<expr_stmt><expr><call><name><name>mapStructure</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>ADTStructure</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>ADTStructure</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></for>
		<return>return <expr><name>mapStructure</name></expr>;</return>
	}</block></function>

	<function><specifier>public</specifier> <type><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>getExamples</name><parameter_list>()</parameter_list><block>{
		<decl_stmt><decl><type><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>mapStructure</name> <init>= <expr><operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<for>for<control>(<init><decl><type><name>ADTExampleDTO</name></type> <name>example</name> <range>: <expr><name>examples</name></expr></range></decl></init>)</control><block>{
			<expr_stmt><expr><call><name><name>mapStructure</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>example</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>example</name><operator>.</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></for>
		<return>return <expr><name>mapStructure</name></expr>;</return>
	}</block></function>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="CrowdCode-com/crowdcoding/dto/ajax/microtask/submission/DescribeFunctionBehaviorDTO.java" hash="b5d14eeb3085fbb755cf16eda42695b06625772e"><package>package <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>dto</name><operator>.</operator><name>ajax</name><operator>.</operator><name>microtask</name><operator>.</operator><name>submission</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>dto</name><operator>.</operator><name>DTO</name></name>;</import>

<class><specifier>public</specifier> class <name>DescribeFunctionBehaviorDTO</name> <super><extends>extends <name>DTO</name></extends></super>
<block>{

	<decl_stmt><decl><specifier>public</specifier> <type><name>int</name></type> <name>functionVersion</name></decl>;</decl_stmt>		<comment type="line">// version of the function under test that the worker saw when authoring this test.</comment>
	<decl_stmt><decl><specifier>public</specifier> <type><name><name>List</name><argument_list type="generic">&lt;<argument><name>TestDTO</name></argument>&gt;</argument_list></name></type> <name>tests</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>TestDTO</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <type><name>boolean</name></type> <name>isDescribeComplete</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <type><name>String</name></type> <name>disputeFunctionText</name></decl> ;</decl_stmt>

	<comment type="line">// Default constructor (required by Jackson JSON library)</comment>
	<constructor><specifier>public</specifier> <name>DescribeFunctionBehaviorDTO</name><parameter_list>()</parameter_list>
	<block>{
	}</block></constructor>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="CrowdCode-com/crowdcoding/dto/ajax/microtask/submission/FunctionDTO.java" hash="d8b3e801c9d8d3129be6935789a3e5122ab9f565"><package>package <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>dto</name><operator>.</operator><name>ajax</name><operator>.</operator><name>microtask</name><operator>.</operator><name>submission</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>dto</name><operator>.</operator><name>DTO</name></name>;</import>


<class><specifier>public</specifier> class <name>FunctionDTO</name> <super><extends>extends <name>DTO</name></extends></super>
<block>{
	<decl_stmt><decl><specifier>public</specifier> <type><name>String</name></type> <name>messageType</name> <init>= <expr><literal type="string">"FunctionDTO"</literal></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><specifier>public</specifier> <type><name>Long</name></type>   <name>id</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <type><name>String</name></type> <name>description</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <type><name>String</name></type> <name>returnType</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <type><name><name>List</name><argument_list type="generic">&lt;<argument><name>FunctionParameterDTO</name></argument>&gt;</argument_list></name></type> <name>parameters</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>FunctionParameterDTO</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <type><name>String</name></type> <name>header</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <type><name>String</name></type> <name>name</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <type><name>String</name></type> <name>code</name></decl> ;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <type><name><name>List</name><argument_list type="generic">&lt;<argument><name>FunctionDTO</name></argument>&gt;</argument_list></name></type> <name>callees</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>FunctionDTO</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <type><name><name>List</name><argument_list type="generic">&lt;<argument><name>TestDTO</name></argument>&gt;</argument_list></name></type> <name>tests</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>TestDTO</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="CrowdCode-com/crowdcoding/dto/ajax/microtask/submission/FunctionDescriptionDTO.java" hash="a16a9ca8ec3f7263eea8ee1cc9c90af568d6740c"><package>package <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>dto</name><operator>.</operator><name>ajax</name><operator>.</operator><name>microtask</name><operator>.</operator><name>submission</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>dto</name><operator>.</operator><name>DTO</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>dto</name><operator>.</operator><name>ClientRequestDTO</name></name>;</import>


<class><specifier>public</specifier> class <name>FunctionDescriptionDTO</name> <super><extends>extends <name>DTO</name></extends></super>
<block>{
	<decl_stmt><decl><specifier>public</specifier> <type><name>String</name></type> <name>messageType</name> <init>= <expr><literal type="string">"FunctionDescriptionDTO"</literal></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><specifier>public</specifier> <type><name>String</name></type> <name>name</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <type><name>String</name></type> <name>returnType</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <type><name><name>List</name><argument_list type="generic">&lt;<argument><name>FunctionParameterDTO</name></argument>&gt;</argument_list></name></type> <name>parameters</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>FunctionParameterDTO</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <type><name>String</name></type> <name>header</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <type><name>String</name></type> <name>description</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <type><name><name>List</name><argument_list type="generic">&lt;<argument><name>TestDTO</name></argument>&gt;</argument_list></name></type> <name>tests</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>TestDTO</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="line">// Default constructor (required by Jackson JSON library)</comment>
	<constructor><specifier>public</specifier> <name>FunctionDescriptionDTO</name><parameter_list>()</parameter_list>
	<block>{
	}</block></constructor>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="CrowdCode-com/crowdcoding/dto/ajax/microtask/submission/FunctionParameterDTO.java" hash="39aa82ffd02169dce9d8ce1291b3515885dbde95"><package>package <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>dto</name><operator>.</operator><name>ajax</name><operator>.</operator><name>microtask</name><operator>.</operator><name>submission</name></name>;</package>

<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>dto</name><operator>.</operator><name>DTO</name></name>;</import>


<class><specifier>public</specifier> class <name>FunctionParameterDTO</name> <super><extends>extends <name>DTO</name></extends></super>
<block>{
	<decl_stmt><decl><specifier>public</specifier> <type><name>String</name></type> <name>name</name>        <init>=<expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <type><name>String</name></type> <name>type</name> <init>=<expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <type><name>String</name></type> <name>description</name> <init>=<expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>

	<comment type="line">//Default constructor (required by Jackson JSON library)</comment>
	<constructor><specifier>public</specifier> <name>FunctionParameterDTO</name><parameter_list>()</parameter_list>
	<block>{

	}</block></constructor>

	<constructor><specifier>public</specifier> <name>FunctionParameterDTO</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>,  <parameter><decl><type><name>String</name></type> <name>type</name></decl></parameter>,  <parameter><decl><type><name>String</name></type> <name>description</name></decl></parameter>)</parameter_list>
	<block>{
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>name</name></name><operator>=</operator><name>name</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>type</name></name><operator>=</operator><name>type</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>description</name></name><operator>=</operator><name>description</name></expr>;</expr_stmt>
	}</block></constructor>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="CrowdCode-com/crowdcoding/dto/ajax/microtask/submission/ReviewDTO.java" hash="e2034dbdbd99acc616d0dbca0a788337cd6a597c"><package>package <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>dto</name><operator>.</operator><name>ajax</name><operator>.</operator><name>microtask</name><operator>.</operator><name>submission</name></name>;</package>

<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>dto</name><operator>.</operator><name>DTO</name></name>;</import>


<class><specifier>public</specifier> class <name>ReviewDTO</name> <super><extends>extends <name>DTO</name></extends></super>
<block>{
	<decl_stmt><decl><specifier>public</specifier> <type><name>String</name></type> <name>reviewText</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <type><name>int</name></type> <name>qualityScore</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <type><name>boolean</name></type>  <name>fromDisputedMicrotask</name></decl>;</decl_stmt>
}</block></class></unit>

<unit revision="0.9.5" language="Java" filename="CrowdCode-com/crowdcoding/dto/ajax/microtask/submission/ImplementBehaviorDTO.java" hash="dfaab91297e5fc6b185f65c9bee6adad523ca82b"><package>package <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>dto</name><operator>.</operator><name>ajax</name><operator>.</operator><name>microtask</name><operator>.</operator><name>submission</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>dto</name><operator>.</operator><name>DTO</name></name>;</import>


<class><specifier>public</specifier> class <name>ImplementBehaviorDTO</name> <super><extends>extends <name>DTO</name></extends></super>
<block>{
	<decl_stmt><decl><specifier>public</specifier> <type><name>String</name></type> <name>messageType</name> <init>= <expr><literal type="string">"ImplementBehaviorDTO"</literal></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><specifier>public</specifier> <type><name>FunctionDTO</name></type> <name>function</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <type><name><name>List</name><argument_list type="generic">&lt; <argument><name>ADTDTO</name></argument> &gt;</argument_list></name></type> <name>requestedADTs</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt; <argument><name>ADTDTO</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <type><name><name>List</name><argument_list type="generic">&lt; <argument><name>FunctionDTO</name></argument> &gt;</argument_list></name></type> <name>requestedFunctions</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt; <argument><name>FunctionDTO</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <type><name><name>List</name><argument_list type="generic">&lt; <argument><name>TestDisputedDTO</name></argument> &gt;</argument_list></name></type> <name>disputedTests</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt; <argument><name>TestDisputedDTO</name></argument> &gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="CrowdCode-com/crowdcoding/dto/ajax/microtask/submission/TestDisputedDTO.java" hash="03328513a9b6d9ba5c45c415731c47b751ed9b7c"><package>package <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>dto</name><operator>.</operator><name>ajax</name><operator>.</operator><name>microtask</name><operator>.</operator><name>submission</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>dto</name><operator>.</operator><name>DTO</name></name>;</import>

<class><specifier>public</specifier> class <name>TestDisputedDTO</name> <super><extends>extends <name>DTO</name></extends></super>
<block>{
	<decl_stmt><decl><specifier>public</specifier> <type><name>Long</name></type> <name>id</name></decl> ;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <type><name>String</name></type> <name>disputeText</name> <init>=<expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>      <comment type="line">// only available if the test is in dispute.</comment>

	<comment type="line">// Default constructor (required by Jackson JSON library)</comment>
	<constructor><specifier>public</specifier> <name>TestDisputedDTO</name><parameter_list>()</parameter_list>
	<block>{
	}</block></constructor>

	<constructor><specifier>public</specifier> <name>TestDisputedDTO</name><parameter_list>(<parameter><decl><type><name>Long</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>disputeText</name></decl></parameter>)</parameter_list>
	<block>{
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>id</name></name>      <operator>=</operator> <name>id</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>disputeText</name></name> <operator>=</operator> <name>disputeText</name></expr>;</expr_stmt>

	}</block></constructor>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="CrowdCode-com/crowdcoding/dto/ajax/microtask/submission/TestDTO.java" hash="64cb1c623f06fabb3a19cee7d0df40cd244ede3b"><package>package <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>dto</name><operator>.</operator><name>ajax</name><operator>.</operator><name>microtask</name><operator>.</operator><name>submission</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>commons</name><operator>.</operator><name>lang3</name><operator>.</operator><name>StringEscapeUtils</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>dto</name><operator>.</operator><name>DTO</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>entities</name><operator>.</operator><name>artifacts</name><operator>.</operator><name>Test</name></name>;</import>


<class><specifier>public</specifier> class <name>TestDTO</name> <super><extends>extends <name>DTO</name></extends></super>
<block>{
	<decl_stmt><decl><specifier>public</specifier> <type><name>long</name></type> <name>id</name></decl>;</decl_stmt>				<comment type="line">// id of the corresponding test. Only valid if added is false.</comment>
	<decl_stmt><decl><specifier>public</specifier> <type><name>String</name></type> <name>description</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <type><name>boolean</name></type> <name>deleted</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <type><name>boolean</name></type> <name>added</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <type><name>boolean</name></type> <name>edited</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <type><name>boolean</name></type> <name>isSimple</name></decl>;</decl_stmt> 
	<decl_stmt><decl><specifier>public</specifier> <type><name>String</name></type> <name>code</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <type><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>inputs</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <type><name>String</name></type> <name>output</name></decl>;</decl_stmt>

	<comment type="line">// Default constructor</comment>
	<constructor><specifier>public</specifier> <name>TestDTO</name><parameter_list>()</parameter_list>
	<block>{
	}</block></constructor>

}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="CrowdCode-com/crowdcoding/commands/Command.java" hash="10ca4b2c1e600c00013cd6f24ea5845a2c1d85f2"><package>package <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>commands</name></name>;</package>

<class><specifier>public</specifier> <specifier>abstract</specifier> class <name>Command</name> <block>{
	<function_decl><specifier>public</specifier> <specifier>abstract</specifier> <type><name>void</name></type> <name>execute</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>projectId</name></decl></parameter>)</parameter_list>;</function_decl>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="CrowdCode-com/crowdcoding/entities/artifacts/Function.java" hash="8666ca6ef59f5116c53452548a9bb295f8559f9e"><package>package <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>entities</name><operator>.</operator><name>artifacts</name></name>;</package>

<import>import static <name><name>com</name><operator>.</operator><name>googlecode</name><operator>.</operator><name>objectify</name><operator>.</operator><name>ObjectifyService</name><operator>.</operator><name>ofy</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>LinkedList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Queue</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>commons</name><operator>.</operator><name>lang3</name><operator>.</operator><name>StringEscapeUtils</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>commons</name><operator>.</operator><name>lang3</name><operator>.</operator><name>StringUtils</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>commands</name><operator>.</operator><name>FunctionCommand</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>commands</name><operator>.</operator><name>ProjectCommand</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>commands</name><operator>.</operator><name>TestCommand</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>dto</name><operator>.</operator><name>DTO</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>dto</name><operator>.</operator><name>ajax</name><operator>.</operator><name>TestResultDTO</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>dto</name><operator>.</operator><name>ajax</name><operator>.</operator><name>microtask</name><operator>.</operator><name>submission</name><operator>.</operator><name>DescribeFunctionBehaviorDTO</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>dto</name><operator>.</operator><name>ajax</name><operator>.</operator><name>microtask</name><operator>.</operator><name>submission</name><operator>.</operator><name>FunctionDTO</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>dto</name><operator>.</operator><name>ajax</name><operator>.</operator><name>microtask</name><operator>.</operator><name>submission</name><operator>.</operator><name>ImplementBehaviorDTO</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>dto</name><operator>.</operator><name>ajax</name><operator>.</operator><name>microtask</name><operator>.</operator><name>submission</name><operator>.</operator><name>FunctionParameterDTO</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>dto</name><operator>.</operator><name>ajax</name><operator>.</operator><name>microtask</name><operator>.</operator><name>submission</name><operator>.</operator><name>TestDTO</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>dto</name><operator>.</operator><name>firebase</name><operator>.</operator><name>artifacts</name><operator>.</operator><name>FunctionInFirebase</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>entities</name><operator>.</operator><name>microtasks</name><operator>.</operator><name>DescribeFunctionBehavior</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>entities</name><operator>.</operator><name>microtasks</name><operator>.</operator><name>DescribeFunctionBehavior</name><operator>.</operator><name>PromptType</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>entities</name><operator>.</operator><name>microtasks</name><operator>.</operator><name>ImplementBehavior</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>entities</name><operator>.</operator><name>microtasks</name><operator>.</operator><name>Microtask</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>history</name><operator>.</operator><name>ArtifactCreated</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>history</name><operator>.</operator><name>HistoryLog</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>util</name><operator>.</operator><name>FirebaseService</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>fasterxml</name><operator>.</operator><name>jackson</name><operator>.</operator><name>core</name><operator>.</operator><name>JsonParseException</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>fasterxml</name><operator>.</operator><name>jackson</name><operator>.</operator><name>databind</name><operator>.</operator><name>JsonMappingException</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>googlecode</name><operator>.</operator><name>objectify</name><operator>.</operator><name>Ref</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>googlecode</name><operator>.</operator><name>objectify</name><operator>.</operator><name>annotation</name><operator>.</operator><name>Subclass</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>googlecode</name><operator>.</operator><name>objectify</name><operator>.</operator><name>annotation</name><operator>.</operator><name>Index</name></name>;</import>



<comment type="block">/* A function represents a function of code. Functions transition through states, spawning microtasks,
 * which, upon completion, transition the state. Some of these microtasks may create other artifacts,
 * which also transition through states; these transitions may in turn be signaled back to a function.
 */</comment>
<class><annotation>@<name>Subclass</name><argument_list>(<argument><expr><name>index</name><operator>=</operator><literal type="boolean">true</literal></expr></argument>)</argument_list></annotation>
<specifier>public</specifier> class <name>Function</name> <super><extends>extends <name>Artifact</name></extends></super>
<block>{
	<comment type="line">//Function data</comment>
	<decl_stmt><decl><specifier>private</specifier> <type><name>String</name></type>        <name>code</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><annotation>@<name>Index</name></annotation> <specifier>private</specifier> <type><name>String</name></type> <name>name</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>private</specifier> <type><name>String</name></type>        <name>returnType</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>private</specifier> <type><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type>  <name>paramNames</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>private</specifier> <type><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type>  <name>paramTypes</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>private</specifier> <type><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type>  <name>paramDescriptions</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>private</specifier> <type><name>String</name></type>        <name>header</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>private</specifier> <type><name>String</name></type>        <name>description</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>private</specifier> <type><name>int</name></type>           <name>linesOfCode</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>private</specifier> <type><name>boolean</name></type> 	  <name>isCompleted</name></decl>;</decl_stmt> <comment type="line">// flag to signal when all the behavior of the function have been written</comment>


	<decl_stmt><decl><specifier>private</specifier> <type><name>int</name></type> <name>testSuiteVersion</name></decl>;</decl_stmt>     <comment type="line">// version of all the test suite, is increased every time that a test or a stub is changed</comment>


	<decl_stmt><decl><specifier>private</specifier> <type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Long</name></argument>&gt;</argument_list></name></type> <name>testsId</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Long</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="line">// test associated to the function</comment>
	<decl_stmt><decl><specifier>private</specifier> <type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Long</name></argument>&gt;</argument_list></name></type> <name>ADTsId</name>  <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Long</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="line">// ADTs used by the function</comment>


	<comment type="line">// Calls made by this function</comment>
	<decl_stmt><decl><specifier>private</specifier> <type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Long</name></argument>&gt;</argument_list></name></type> <name>calleesId</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Long</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="line">// current callers to this function:</comment>
	<decl_stmt><decl><specifier>private</specifier> <type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Long</name></argument>&gt;</argument_list></name></type> <name>callersId</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Long</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="line">//Microtask Data</comment>
	<decl_stmt><decl><specifier>protected</specifier> <type><name><name>Queue</name><argument_list type="generic">&lt;<argument><name><name>Ref</name><argument_list type="generic">&lt;<argument><name>Microtask</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>queuedDescribeFunctionBehavior</name> <init>= <expr><operator>new</operator> <call><name><name>LinkedList</name><argument_list type="generic">&lt;<argument><name><name>Ref</name><argument_list type="generic">&lt;<argument><name>Microtask</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>private</specifier> <type><name><name>Ref</name><argument_list type="generic">&lt;<argument><name>Microtask</name></argument>&gt;</argument_list></name></type> <name>describeFunctionBehaviorOut</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><specifier>protected</specifier> <type><name><name>Queue</name><argument_list type="generic">&lt;<argument><name><name>Ref</name><argument_list type="generic">&lt;<argument><name>Microtask</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>queuedImplementBehavior</name> <init>= <expr><operator>new</operator> <call><name><name>LinkedList</name><argument_list type="generic">&lt;<argument><name><name>Ref</name><argument_list type="generic">&lt;<argument><name>Microtask</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>private</specifier> <type><name>boolean</name></type> <name>isImplementationInProgress</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>



	<comment type="block" format="javadoc">/******************************************************************************************
	 * Constructor
	 *****************************************************************************************/</comment>

	<comment type="line">// Constructor for deserialization</comment>
	<constructor><specifier>protected</specifier> <name>Function</name><parameter_list>()</parameter_list><block>{}</block></constructor>

	<comment type="line">// Constructor for a function that has a full description and code</comment>
	<constructor><specifier>public</specifier> <name>Function</name><parameter_list>(<parameter><decl><type><name>FunctionDTO</name></type> <name>functionDTO</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>isAPIArtifact</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>isReadOnly</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>projectId</name></decl></parameter>)</parameter_list>
	<block>{
		<expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>isAPIArtifact</name></expr></argument>, <argument><expr><name>isReadOnly</name></expr></argument>, <argument><expr><name>projectId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>name</name></name> <operator>=</operator> <name><name>functionDTO</name><operator>.</operator><name>name</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>returnType</name></name> <operator>=</operator> <name><name>functionDTO</name><operator>.</operator><name>returnType</name></name></expr>;</expr_stmt>

		<for>for<control>(<init><decl><type><name>FunctionParameterDTO</name></type> <name>parameter</name> <range>: <expr><name><name>functionDTO</name><operator>.</operator><name>parameters</name></name></expr></range></decl></init>)</control><block>{
			<expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>paramNames</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name><name>parameter</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>paramTypes</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name><name>parameter</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>paramDescriptions</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name><name>parameter</name><operator>.</operator><name>description</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></for>

		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>header</name></name> <operator>=</operator> <name><name>functionDTO</name><operator>.</operator><name>header</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>description</name></name> <operator>=</operator> <name><name>functionDTO</name><operator>.</operator><name>description</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>code</name></name> <operator>=</operator> <name><name>functionDTO</name><operator>.</operator><name>code</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>linesOfCode</name></name> <operator>=</operator> <call><name><name>StringUtils</name><operator>.</operator><name>countMatches</name></name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>code</name></name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>

		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>isCompleted</name></name><operator>=</operator><literal type="boolean">false</literal></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>ofy</name><argument_list>()</argument_list></call><operator>.</operator><call><name>save</name><argument_list>()</argument_list></call><operator>.</operator><call><name>entities</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>now</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name><name>FunctionCommand</name><operator>.</operator><name>lookForWork</name></name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name><name>HistoryLog</name><operator>.</operator><name>Init</name></name><argument_list>(<argument><expr><name>projectId</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>addEvent</name><argument_list>(<argument><expr><operator>new</operator> <call><name>ArtifactCreated</name><argument_list>( <argument><expr><name>this</name></expr></argument> )</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>storeToFirebase</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	}</block></constructor>


	<comment type="block" format="javadoc">/******************************************************************************************
	 * Accessors
	 *****************************************************************************************/</comment>

	<function><specifier>public</specifier> <type><name>String</name></type> <name>getName</name><parameter_list>()</parameter_list>
	<block>{
		<return>return <expr><name>name</name></expr>;</return>
	}</block></function>

	<function><specifier>public</specifier> <type><name>int</name></type> <name>getNumParams</name><parameter_list>()</parameter_list>
	<block>{
		<return>return <expr><call><name><name>paramNames</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</return>
	}</block></function>

	<function><specifier>public</specifier> <type><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>getParamNames</name><parameter_list>()</parameter_list>
	<block>{
		<return>return <expr><name>paramNames</name></expr>;</return>
	}</block></function>

	<function><specifier>public</specifier> <type><name>String</name></type> <name>getHeader</name><parameter_list>()</parameter_list>
	<block>{
		<return>return <expr><name>header</name></expr>;</return>
	}</block></function>

	<function><specifier>public</specifier> <type><name>String</name></type> <name>getEscapedHeader</name><parameter_list>()</parameter_list>
	<block>{
		<return>return <expr><call><name><name>StringEscapeUtils</name><operator>.</operator><name>escapeEcmaScript</name></name><argument_list>(<argument><expr><name>header</name></expr></argument>)</argument_list></call></expr>;</return>
	}</block></function>

	<function><specifier>public</specifier> <type><name>String</name></type> <name>getDescription</name><parameter_list>()</parameter_list>
	<block>{
		<return>return <expr><name>description</name></expr>;</return>
	}</block></function>

		<comment type="line">// gets the body of the function (including braces)</comment>
	<function><specifier>public</specifier> <type><name>String</name></type> <name>getCode</name><parameter_list>()</parameter_list>
	<block>{
		<return>return <expr><name>code</name></expr>;</return>
	}</block></function>

	<comment type="block" format="javadoc">/******************************************************************************************
	 * Private Core Functionalities
	 *****************************************************************************************/</comment>

	<comment type="line">// If there is no microtask currently out for this artifact, looks at the queued microtasks.</comment>
	<comment type="line">// If there is a microtasks available, marks it as ready to be done.</comment>
	<function><specifier>public</specifier> <type><name>void</name></type> <name>lookForWork</name><parameter_list>()</parameter_list><block>{
		
		<comment type="line">//before checks if the function is still active</comment>
		<if>if<condition>( <expr><operator>!</operator><call><name>isDeleted</name><argument_list>()</argument_list></call></expr> )</condition><then><block>{
			
			<comment type="line">//  when there are no Describe Function Behavior in progress</comment>
			<if>if<condition>( <expr><name>describeFunctionBehaviorOut</name> <operator>==</operator> <literal type="null">null</literal></expr> )</condition><then><block>{
				
				<comment type="line">//first checks if there are enqueued describe function behavior microtasks</comment>
				<if>if<condition>(<expr><call><name><name>queuedDescribeFunctionBehavior</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><then><block>{
					
					<comment type="line">// if the function is not complete, spawn a new describe function behavior microtask</comment>
					<if>if<condition>(<expr><operator>!</operator> <name><name>this</name><operator>.</operator><name>isCompleted</name></name></expr>)</condition><then><block>{
						<decl_stmt><decl><type><name>Microtask</name></type> <name>mtask</name> <init>= <expr><operator>new</operator> <call><name>DescribeFunctionBehavior</name><argument_list>(<argument><expr><call><name>getRef</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>getId</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>projectId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
						<expr_stmt><expr><call><name><name>ProjectCommand</name><operator>.</operator><name>queueMicrotask</name></name><argument_list>(<argument><expr><call><name><name>mtask</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><name>describeFunctionBehaviorOut</name> <operator>=</operator>  <call><name><name>Ref</name><operator>.</operator><name>create</name></name><argument_list>(<argument><expr><call><name><name>mtask</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></then></if>
					
					<comment type="line">// check if needs implementation</comment>
					<expr_stmt><expr><call><name>checkImplementationNeeded</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

				}</block></then>
				<else>else <block>{
					
					<comment type="line">// if the implementation is not in progress, spawn</comment>
					<comment type="line">// the first describe task in queue </comment>
					<if>if<condition>(<expr><operator>!</operator> <name>isImplementationInProgress</name></expr>)</condition><then><block>{
						<decl_stmt><decl><type><name><name>Ref</name><argument_list type="generic">&lt;<argument><name>Microtask</name></argument>&gt;</argument_list></name></type> <name>mtaskRef</name> <init>= <expr><call><name><name>queuedDescribeFunctionBehavior</name><operator>.</operator><name>remove</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
						<expr_stmt><expr><call><name><name>ProjectCommand</name><operator>.</operator><name>queueMicrotask</name></name><argument_list>(<argument><expr><call><name><name>mtaskRef</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><name>describeFunctionBehaviorOut</name> <operator>=</operator> <name>mtaskRef</name></expr>;</expr_stmt>
					}</block></then></if>
				}</block></else></if>

			}</block></then> 
			<else>else <block>{
				
				<decl_stmt><decl><type><name>DescribeFunctionBehavior</name></type> <name>task</name> <init>= <expr><operator>(</operator><name>DescribeFunctionBehavior</name><operator>)</operator> <call><name>ofy</name><argument_list>()</argument_list></call><operator>.</operator><call><name>load</name><argument_list>()</argument_list></call><operator>.</operator><call><name>ref</name><argument_list>(<argument><expr><name>describeFunctionBehaviorOut</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>now</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
				
				<if>if<condition>( <expr><call><name><name>task</name><operator>.</operator><name>getPromptType</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>PromptType</name><operator>.</operator><name>WRITE</name></name> <operator>&amp;&amp;</operator> <call><name><name>queuedDescribeFunctionBehavior</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr> )</condition><then><block>{
					<expr_stmt><expr><call><name>checkImplementationNeeded</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				}</block></then></if>
				
			}</block></else></if>

		}</block></then></if>
		
		<expr_stmt><expr><call><name>ofy</name><argument_list>()</argument_list></call><operator>.</operator><call><name>save</name><argument_list>()</argument_list></call><operator>.</operator><call><name>entity</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>now</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	}</block></function>

	<function><specifier>private</specifier> <type><name>void</name></type> <name>onWorkEdit</name><parameter_list>(<parameter><decl><type><name>FunctionDTO</name></type> <name>dto</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>projectId</name></decl></parameter>)</parameter_list><block>{

		<comment type="line">// Looper over all of the callers, rebuilding our list of callers</comment>
		<expr_stmt><expr><call><name>rebuildCalleeList</name><argument_list>(<argument><expr><name><name>dto</name><operator>.</operator><name>callees</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="line">// create the stubs for the given callees</comment>
		<expr_stmt><expr><call><name>createCalleeStubs</name><argument_list>(<argument><expr><name><name>dto</name><operator>.</operator><name>callees</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="line">// Check if the description is changed (considering only parameters name and type, return type and function name).</comment>
		<comment type="line">// If so, notify all the callers of this function.</comment>
		<if>if <condition>( <expr><call><name>isDescriptionChanged</name><argument_list>(<argument><expr><name>dto</name></expr></argument>)</argument_list></call></expr> )</condition><then><block>{
			<expr_stmt><expr><call><name>notifyDescriptionChanged</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>

		<comment type="line">// update all the data</comment>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>name</name></name> <operator>=</operator> <name><name>dto</name><operator>.</operator><name>name</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>description</name></name> <operator>=</operator> <name><name>dto</name><operator>.</operator><name>description</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>header</name></name> <operator>=</operator> <name><name>dto</name><operator>.</operator><name>header</name></name></expr>;</expr_stmt>

        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>FunctionParameterDTO</name></argument>&gt;</argument_list></name></type> <name>parameters</name> <init>= <expr><name><name>dto</name><operator>.</operator><name>parameters</name></name></expr></init></decl>;</decl_stmt>

        <comment type="line">//clear the previous lists</comment>
        <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>paramNames</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>paramTypes</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>paramDescriptions</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <comment type="line">//creates the updated ones</comment>
        <for>for<control>(<init><decl><type><name>FunctionParameterDTO</name></type> <name>parameter</name> <range>: <expr><name>parameters</name></expr></range></decl></init>)</control>
        <block>{
            <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>paramNames</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name><name>parameter</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>paramTypes</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name><name>parameter</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>paramDescriptions</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name><name>parameter</name><operator>.</operator><name>description</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>

        <comment type="line">// update the returnType</comment>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>returnType</name></name><operator>=</operator><name><name>dto</name><operator>.</operator><name>returnType</name></name></expr>;</expr_stmt>

		<comment type="line">// Update the function data</comment>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>code</name></name> <operator>=</operator> <name><name>dto</name><operator>.</operator><name>code</name></name></expr>;</expr_stmt>

		<expr_stmt><expr><name>linesOfCode</name> <operator>=</operator> <call><name><name>StringUtils</name><operator>.</operator><name>countMatches</name></name><argument_list>(<argument><expr><name><name>dto</name><operator>.</operator><name>code</name></name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>ofy</name><argument_list>()</argument_list></call><operator>.</operator><call><name>save</name><argument_list>()</argument_list></call><operator>.</operator><call><name>entities</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>now</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>storeToFirebase</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name><name>FunctionCommand</name><operator>.</operator><name>lookForWork</name></name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>


	<comment type="block" format="javadoc">/******************************************************************************************
	 * Microtasks Generations Hendlers
	****************************************************************************************/</comment>

	<comment type="line">// Queues the specified microtask and looks for work</comment>
	<function><specifier>public</specifier> <type><name>void</name></type> <name>queueDescribeFunctionBehavior</name><parameter_list>(<parameter><decl><type><name>Microtask</name></type> <name>microtask</name></decl></parameter>)</parameter_list><block>{
		<expr_stmt><expr><call><name><name>queuedDescribeFunctionBehavior</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>Ref</name><operator>.</operator><name>create</name></name><argument_list>(<argument><expr><call><name><name>microtask</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>lookForWork</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<comment type="line">// Queues the specified microtask and looks for work</comment>
	<function><specifier>public</specifier> <type><name>void</name></type> <name>queueImplementFunctionBehavior</name><parameter_list>(<parameter><decl><type><name>Microtask</name></type> <name>microtask</name></decl></parameter>)</parameter_list><block>{
		<expr_stmt><expr><call><name><name>queuedImplementBehavior</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>Ref</name><operator>.</operator><name>create</name></name><argument_list>(<argument><expr><call><name><name>microtask</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>lookForWork</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	}</block></function>
	
	<function><specifier>private</specifier> <type><name>void</name></type> <name>newImplementBehavior</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>failedTestId</name></decl></parameter>)</parameter_list><block>{
		<expr_stmt><expr><call><name><name>ProjectCommand</name><operator>.</operator><name>queueMicrotask</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>ImplementBehavior</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>failedTestId</name></expr></argument>, <argument><expr><name>projectId</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getKey</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<function><specifier>private</specifier> <type><name>void</name></type> <name>checkImplementationNeeded</name><parameter_list>()</parameter_list><block>{
		<comment type="line">// if at least 1 test is present and there is no other implementation in progress</comment>
		<if>if<condition>( <expr><call><name><name>testsId</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name>isImplementationInProgress</name></expr> )</condition><then><block>{
			<expr_stmt><expr><name>isImplementationInProgress</name> <operator>=</operator>  <literal type="boolean">true</literal></expr>;</expr_stmt>

			<comment type="line">// if there are queued implementations, spawn the first</comment>
			<comment type="line">// otherwise run the tests</comment>
			<if>if<condition>( <expr><operator>!</operator><call><name><name>queuedImplementBehavior</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr> )</condition><then>
				<block type="pseudo"><expr_stmt><expr><call><name><name>ProjectCommand</name><operator>.</operator><name>queueMicrotask</name></name><argument_list>(<argument><expr><call><name><name>queuedImplementBehavior</name><operator>.</operator><name>remove</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getKey</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
			<else>else
				<block type="pseudo"><expr_stmt><expr><call><name><name>FunctionCommand</name><operator>.</operator><name>runTests</name></name><argument_list>(<argument><expr><call><name><name>this</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>
			
		}</block></then></if>
		
		<expr_stmt><expr><call><name>ofy</name><argument_list>()</argument_list></call><operator>.</operator><call><name>save</name><argument_list>()</argument_list></call><operator>.</operator><call><name>entities</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>now</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	}</block></function>


	<comment type="block" format="javadoc">/******************************************************************************************
	 * Microtasks Completions Hendlers
	****************************************************************************************/</comment>

	<function><specifier>public</specifier> <type><name>void</name></type> <name>describeFunctionBehaviorCompleted</name><parameter_list>(<parameter><decl><type><name>DescribeFunctionBehaviorDTO</name></type> <name>dto</name></decl></parameter>)</parameter_list><block>{
		
		<expr_stmt><expr><name>describeFunctionBehaviorOut</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>

		<comment type="line">// if the function is in dispute, spawn a implement behavior </comment>
		<if>if<condition>( <expr><name><name>dto</name><operator>.</operator><name>disputeFunctionText</name></name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <name><name>dto</name><operator>.</operator><name>disputeFunctionText</name></name> <operator>!=</operator><literal type="string">""</literal></expr> )</condition><then><block>{
			<expr_stmt><expr><call><name>queueImplementFunctionBehavior</name><argument_list>( <argument><expr><operator>new</operator> <call><name>ImplementBehavior</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name><name>dto</name><operator>.</operator><name>disputeFunctionText</name></name></expr></argument>, <argument><expr><name>projectId</name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>

		<comment type="line">// process all the submitted tests</comment>
		<for>for<control>( <init><decl><type><name>TestDTO</name></type> <name>testDTO</name> <range>: <expr><name><name>dto</name><operator>.</operator><name>tests</name></name></expr></range></decl></init> )</control><block>{

			<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"PROCESSING TEST "</literal><operator>+</operator><call><name><name>testDTO</name><operator>.</operator><name>json</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>processTest</name><argument_list>(<argument><expr><name>testDTO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></for>

		<comment type="line">// check if is complete</comment>
		<if>if<condition>( <expr><name><name>dto</name><operator>.</operator><name>isDescribeComplete</name></name></expr> )</condition><then>
			<block type="pseudo"><expr_stmt><expr><name><name>this</name><operator>.</operator><name>isCompleted</name></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt></block></then></if>

		<expr_stmt><expr><call><name>ofy</name><argument_list>()</argument_list></call><operator>.</operator><call><name>save</name><argument_list>()</argument_list></call><operator>.</operator><call><name>entity</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>now</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name><name>FunctionCommand</name><operator>.</operator><name>lookForWork</name></name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<function><specifier>public</specifier> <type><name>void</name></type> <name>implementBehaviorCompleted</name><parameter_list>(<parameter><decl><type><name>ImplementBehaviorDTO</name></type> <name>dto</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>disputantId</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>projectId</name></decl></parameter>)</parameter_list>
	<block>{
		<expr_stmt><expr><name>isImplementationInProgress</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>

		<comment type="line">//create a descrbie function behavior for each disputed test</comment>
		<if>if<condition>( <expr><call><name><name>dto</name><operator>.</operator><name>disputedTests</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition><then><block>{
			<expr_stmt><expr><call><name>queueDescribeFunctionBehavior</name><argument_list>(  
				<argument><expr><operator>new</operator> <call><name>DescribeFunctionBehavior</name><argument_list>(
						<argument><expr><call><name><name>this</name><operator>.</operator><name>getRef</name></name><argument_list>()</argument_list></call></expr></argument>,
						<argument><expr><call><name>getId</name><argument_list>()</argument_list></call></expr></argument>,
						<argument><expr><name>name</name></expr></argument>,
						<argument><expr><name><name>dto</name><operator>.</operator><name>disputedTests</name></name></expr></argument>,
						<argument><expr><name>projectId</name></expr></argument>
					)</argument_list></call></expr></argument>
			)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>

		<comment type="line">// creates all the function requested if any</comment>
		<expr_stmt><expr><call><name>createRequestedFunctions</name><argument_list>(<argument><expr><name><name>dto</name><operator>.</operator><name>requestedFunctions</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="line">// update the submitted function</comment>
		<expr_stmt><expr><call><name>onWorkEdit</name><argument_list>(<argument><expr><name><name>dto</name><operator>.</operator><name>function</name></name></expr></argument>, <argument><expr><name>projectId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<function><specifier>private</specifier> <type><name>void</name></type> <name>checkIfNeeded</name><parameter_list>()</parameter_list>
	<block>{
		<comment type="line">//if is not called by anyone means that is not anymore needed</comment>
		<if>if<condition>( <expr><call><name><name>this</name><operator>.</operator><name>callersId</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
			<block type="pseudo"><expr_stmt><expr><call><name>deactivate</name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
	}</block></function>

	<comment type="block" format="javadoc">/******************************************************************************************
	 * Command Receivers
	****************************************************************************************/</comment>

	<function><specifier>public</specifier> <type><name>void</name></type> <name>runTests</name><parameter_list>()</parameter_list><block>{
		<expr_stmt><expr><call><name><name>FirebaseService</name><operator>.</operator><name>writeTestJobQueue</name></name><argument_list>(<argument><expr><call><name>getId</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>version</name></expr></argument>, <argument><expr><name>testSuiteVersion</name></expr></argument>, <argument><expr><name>projectId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<function><specifier>public</specifier> <type><name>void</name></type> <name>submittedTestResult</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>jsonDto</name></decl></parameter>)</parameter_list><block>{

		<try>try <block>{
			<decl_stmt><decl><type><name>TestResultDTO</name></type> <name>testResult</name> <init>= <expr><operator>(</operator><name>TestResultDTO</name><operator>)</operator> <call><name><name>DTO</name><operator>.</operator><name>read</name></name><argument_list>(<argument><expr><name>jsonDto</name></expr></argument>, <argument><expr><name><name>TestResultDTO</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

			<if>if<condition>( <expr><operator>!</operator><name><name>testResult</name><operator>.</operator><name>areTestsPassed</name></name></expr> )</condition><then>
				<block type="pseudo"><expr_stmt><expr><call><name>newImplementBehavior</name><argument_list>( <argument><expr><name><name>testResult</name><operator>.</operator><name>failedTestId</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block></then>
			<else>else <block>{
				<expr_stmt><expr><call><name><name>queuedImplementBehavior</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>isImplementationInProgress</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
			}</block></else></if>
		}</block> <catch>catch<parameter_list>( <parameter><decl><type><name>JsonParseException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
			<expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		}</block></catch> <catch>catch<parameter_list>( <parameter><decl><type><name>JsonMappingException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
			<expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		}</block></catch> <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
			<expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		}</block></catch></try>

		<expr_stmt><expr><call><name>ofy</name><argument_list>()</argument_list></call><operator>.</operator><call><name>save</name><argument_list>()</argument_list></call><operator>.</operator><call><name>entity</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>now</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		
	}</block></function>

	<comment type="line">// Notifies the function that it has a new caller function</comment>
	<function><specifier>public</specifier> <type><name>void</name></type> <name>addCaller</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>functionId</name></decl></parameter>)</parameter_list><block>{
		<expr_stmt><expr><call><name><name>callersId</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>functionId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if>if<condition>( <expr><call><name>isDeleted</name><argument_list>()</argument_list></call></expr> )</condition><then> <block type="pseudo"><expr_stmt><expr><call><name>reactivate</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></then></if>
		<expr_stmt><expr><call><name>ofy</name><argument_list>()</argument_list></call><operator>.</operator><call><name>save</name><argument_list>()</argument_list></call><operator>.</operator><call><name>entity</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>now</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<comment type="line">// Notifies the function that it is no longer called by the caller</comment>
	<function><specifier>public</specifier> <type><name>void</name></type> <name>removeCaller</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>functionId</name></decl></parameter>)</parameter_list><block>{
		<expr_stmt><expr><call><name><name>callersId</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><name>functionId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>checkIfNeeded</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ofy</name><argument_list>()</argument_list></call><operator>.</operator><call><name>save</name><argument_list>()</argument_list></call><operator>.</operator><call><name>entity</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>now</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<comment type="line">// Notifies the function that it has a new callee function</comment>
	<function><specifier>public</specifier> <type><name>void</name></type> <name>addCallee</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>functionId</name></decl></parameter>)</parameter_list><block>{
		<expr_stmt><expr><call><name><name>calleesId</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>functionId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ofy</name><argument_list>()</argument_list></call><operator>.</operator><call><name>save</name><argument_list>()</argument_list></call><operator>.</operator><call><name>entity</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>now</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<function><specifier>public</specifier> <type><name>void</name></type> <name>calleeChangedInterface</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>calleeId</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>oldCalleeVersion</name></decl></parameter>)</parameter_list><block>{
		<expr_stmt><expr><call><name>checkImplementationNeeded</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<function><specifier>public</specifier> <type><name>void</name></type> <name>calleeBecomeDeactivated</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>calleeId</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>disputeText</name></decl></parameter>)</parameter_list><block>{
		<expr_stmt><expr><call><name><name>calleesId</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><name>calleeId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ofy</name><argument_list>()</argument_list></call><operator>.</operator><call><name>save</name><argument_list>()</argument_list></call><operator>.</operator><call><name>entity</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>now</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>queueImplementFunctionBehavior</name><argument_list>(<argument><expr><operator>new</operator> <call><name>ImplementBehavior</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>disputeText</name></expr></argument>, <argument><expr><name>calleeId</name></expr></argument>, <argument><expr><name>projectId</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<function><specifier>public</specifier> <type><name>void</name></type> <name>addTest</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>testId</name></decl></parameter>)</parameter_list><block>{
		<expr_stmt><expr><call><name><name>testsId</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>testId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>incrementTestSuiteVersion</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ofy</name><argument_list>()</argument_list></call><operator>.</operator><call><name>save</name><argument_list>()</argument_list></call><operator>.</operator><call><name>entities</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>now</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	}</block></function>


	<comment type="block" format="javadoc">/******************************************************************************************
	 * Command Senders
	****************************************************************************************/</comment>

	<comment type="line">//Notify all the callers and all the test of this function that is not anymore active</comment>
	<function><specifier>private</specifier> <type><name>void</name></type> <name>deactivate</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>disputeFunctionText</name></decl></parameter>)</parameter_list>
	<block>{

		<expr_stmt><expr><call><name>deleteArtifact</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>storeToFirebase</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<for>for <control>(<init><decl><type><name>long</name></type> <name>callerID</name> <range>: <expr><name>callersId</name></expr></range></decl></init>)</control>
			<block type="pseudo"><expr_stmt><expr><call><name><name>FunctionCommand</name><operator>.</operator><name>calleeBecomeDeactivated</name></name><argument_list>(<argument><expr><name>callerID</name></expr></argument>, <argument><expr><call><name><name>this</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>disputeFunctionText</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
	}</block></function>



	<comment type="line">// Send out notifications, as appropriate, that the description or header of this</comment>
	<comment type="line">// function has changed</comment>
	<function><specifier>private</specifier> <type><name>void</name></type> <name>notifyDescriptionChanged</name><parameter_list>()</parameter_list>
	<block>{
		<for>for <control>(<init><decl><type><name>long</name></type> <name>callerID</name> <range>: <expr><name>callersId</name></expr></range></decl></init>)</control>
			<block type="pseudo"><expr_stmt><expr><call><name><name>FunctionCommand</name><operator>.</operator><name>calleeChangedInterface</name></name><argument_list>(<argument><expr><name>callerID</name></expr></argument>, <argument><expr><call><name><name>this</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>this</name><operator>.</operator><name>version</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
	}</block></function>

	<comment type="block" format="javadoc">/******************************************************************************************
	 * Utility Methods
	****************************************************************************************/</comment>

	<comment type="line">//change status of the function from deleted to undeleted</comment>
	<function><specifier>private</specifier> <type><name>void</name></type> <name>reactivate</name><parameter_list>()</parameter_list>
	<block>{
		<expr_stmt><expr><call><name>unDeleteArtifact</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>storeToFirebase</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>lookForWork</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<comment type="line">// Diffs the new and old callee list, sending notifications to callees about who their</comment>
	<comment type="line">// callers are as appropriate. Updates the callee list when done</comment>
	<function><specifier>private</specifier> <type><name>void</name></type> <name>rebuildCalleeList</name><parameter_list>(<parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>FunctionDTO</name></argument>&gt;</argument_list></name></type> <name>submittedCallees</name></decl></parameter>)</parameter_list>
	<block>{
		<comment type="line">//retrieves the Ids of the submitted functions</comment>
		<decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Long</name></argument>&gt;</argument_list></name></type> <name>submittedCalleeIds</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Long</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<for>for<control>(<init><decl><type><name>FunctionDTO</name></type> <name>callee</name> <range>: <expr><name>submittedCallees</name></expr></range></decl></init>)</control>
			<block type="pseudo"><expr_stmt><expr><call><name><name>submittedCalleeIds</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name><name>callee</name><operator>.</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>


		<comment type="line">// First, find new callees added, if any</comment>
		<decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Long</name></argument>&gt;</argument_list></name></type> <name>newCallees</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Long</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>submittedCalleeIds</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>newCallees</name><operator>.</operator><name>removeAll</name></name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>calleesId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="line">// If there are any, send notifications to these functions that they have a new caller</comment>
		<for>for <control>(<init><decl><type><name>Long</name></type> <name>newCalleeId</name> <range>: <expr><name>newCallees</name></expr></range></decl></init>)</control>
		<block>{
			<expr_stmt><expr><call><name><name>FunctionCommand</name><operator>.</operator><name>addCaller</name></name><argument_list>(<argument><expr><name>newCalleeId</name></expr></argument>, <argument><expr><name><name>this</name><operator>.</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></for>

		<comment type="line">// Next, find any callees removed, if any</comment>
		<decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Long</name></argument>&gt;</argument_list></name></type> <name>removedCallees</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Long</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>calleesId</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>removedCallees</name><operator>.</operator><name>removeAll</name></name><argument_list>(<argument><expr><name>submittedCalleeIds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="line">// Send notifications to these functions that they no longer have this caller</comment>
		<for>for <control>(<init><decl><type><name>Long</name></type> <name>removedCalleeIds</name> <range>: <expr><name>removedCallees</name></expr></range></decl></init>)</control>
		<block>{
			<expr_stmt><expr><call><name><name>FunctionCommand</name><operator>.</operator><name>removeCaller</name></name><argument_list>(<argument><expr><name>removedCalleeIds</name></expr></argument>, <argument><expr><name><name>this</name><operator>.</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></for>

		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>calleesId</name></name> <operator>=</operator> <name>submittedCalleeIds</name></expr>;</expr_stmt>
	}</block></function>

	<comment type="line">// checks if the new submitted description differs from the old one</comment>
	<function><specifier>public</specifier> <type><name>boolean</name></type> <name>isDescriptionChanged</name><parameter_list>(<parameter><decl><type><name>FunctionDTO</name></type> <name>dto</name></decl></parameter>)</parameter_list>
	<block>{
		<comment type="line">// checks if the name has changed</comment>
		<if>if<condition>( <expr><operator>!</operator> <call><name><name>dto</name><operator>.</operator><name>name</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>)</condition><then>
			<block type="pseudo"><return>return <expr><literal type="boolean">true</literal></expr>;</return></block></then></if>

		<comment type="line">// checks if the return type has changed</comment>
		<if>if<condition>( <expr><operator>!</operator> <call><name><name>dto</name><operator>.</operator><name>returnType</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>returnType</name></name></expr></argument>)</argument_list></call></expr>)</condition><then>
			<block type="pseudo"><return>return <expr><literal type="boolean">true</literal></expr>;</return></block></then></if>

		<comment type="line">//checks if the number of parameters has changed</comment>
		<if>if<condition>( <expr><call><name><name>dto</name><operator>.</operator><name>parameters</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <call><name><name>this</name><operator>.</operator><name>paramTypes</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
			<block type="pseudo"><return>return <expr><literal type="boolean">true</literal></expr>;</return></block></then></if>

		<comment type="line">// check for each parameter that the name and the type is still the same</comment>
		<for>for<control>( <init><decl><type><name>FunctionParameterDTO</name></type> <name>parameter</name> <range>: <expr><name><name>dto</name><operator>.</operator><name>parameters</name></name></expr></range></decl></init>)</control><block>{
			<if>if<condition>( <expr><operator>!</operator> <call><name><name>paramTypes</name><operator>.</operator><name>contains</name></name><argument_list>( <argument><expr><name><name>parameter</name><operator>.</operator><name>type</name></name></expr></argument> )</argument_list></call> <operator>||</operator> <operator>!</operator> <call><name><name>paramNames</name><operator>.</operator><name>contains</name></name><argument_list>( <argument><expr><name><name>parameter</name><operator>.</operator><name>name</name></name></expr></argument> )</argument_list></call></expr> )</condition><then>
				<block type="pseudo"><return>return <expr><literal type="boolean">true</literal></expr>;</return></block></then></if>
		}</block></for>

		<return>return <expr><literal type="boolean">false</literal></expr>;</return>

	}</block></function>

	<comment type="line">// for each requested function, create it</comment>
	<function><specifier>public</specifier> <type><name>void</name></type> <name>createRequestedFunctions</name><parameter_list>(<parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>FunctionDTO</name></argument>&gt;</argument_list></name></type> <name>functions</name></decl></parameter>)</parameter_list><block>{
		<for>for<control>(<init><decl><type><name>FunctionDTO</name></type> <name>function</name> <range>: <expr><name>functions</name></expr></range></decl></init>)</control><block>{
			<expr_stmt><expr><call><name><name>FunctionCommand</name><operator>.</operator><name>createRequestedFunction</name></name><argument_list>(<argument><expr><call><name>getId</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>function</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></for>
	}</block></function>

	<function><specifier>private</specifier> <type><name>void</name></type> <name>processTest</name><parameter_list>(<parameter><decl><type><name>TestDTO</name></type> <name>testDTO</name></decl></parameter>)</parameter_list><block>{
		<if>if<condition>(<expr><name><name>testDTO</name><operator>.</operator><name>deleted</name></name></expr>)</condition><then>
			<block type="pseudo"><expr_stmt><expr><call><name><name>TestCommand</name><operator>.</operator><name>delete</name></name><argument_list>(<argument><expr><name>testDTO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
		<elseif>else <if>if <condition>(<expr><name><name>testDTO</name><operator>.</operator><name>added</name></name></expr> )</condition><then>
			<block type="pseudo"><expr_stmt><expr><call><name><name>TestCommand</name><operator>.</operator><name>create</name></name><argument_list>(<argument><expr><name>testDTO</name></expr></argument>, <argument><expr><call><name><name>this</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if></elseif>
		<elseif>else <if>if <condition>(<expr><name><name>testDTO</name><operator>.</operator><name>edited</name></name></expr> )</condition><then>
			<block type="pseudo"><expr_stmt><expr><call><name><name>TestCommand</name><operator>.</operator><name>update</name></name><argument_list>(<argument><expr><name>testDTO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if></elseif></if>
	}</block></function>
	
	<function><specifier>private</specifier> <type><name>void</name></type> <name>createCalleeStubs</name><parameter_list>(<parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>FunctionDTO</name></argument>&gt;</argument_list></name></type> <name>callees</name></decl></parameter>)</parameter_list><block>{
		<for>for<control>(<init><decl><type><name>FunctionDTO</name></type> <name>callee</name><range>: <expr><name>callees</name></expr></range></decl></init>)</control><block>{
			<for>for<control>(<init><decl><type><name>TestDTO</name></type> <name>test</name> <range>: <expr><name><name>callee</name><operator>.</operator><name>tests</name></name></expr></range></decl></init>)</control><block>{
				<if>if<condition>( <expr><name><name>test</name><operator>.</operator><name>id</name></name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><then>
					<block type="pseudo"><expr_stmt><expr><call><name><name>TestCommand</name><operator>.</operator><name>create</name></name><argument_list>(<argument><expr><name>test</name></expr></argument>, <argument><expr><name><name>callee</name><operator>.</operator><name>id</name></name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
				<else>else
					<block type="pseudo"><expr_stmt><expr><call><name><name>TestCommand</name><operator>.</operator><name>update</name></name><argument_list>(<argument><expr><name>test</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>
			}</block></for>
		}</block></for>
	}</block></function>

	<function><specifier>public</specifier> <type><name>void</name></type> <name>incrementTestSuiteVersion</name><parameter_list>()</parameter_list><block>{
		<expr_stmt><expr><name>testSuiteVersion</name><operator>++</operator></expr> ;</expr_stmt>
		<expr_stmt><expr><call><name>ofy</name><argument_list>()</argument_list></call><operator>.</operator><call><name>save</name><argument_list>()</argument_list></call><operator>.</operator><call><name>entities</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>now</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>FirebaseService</name><operator>.</operator><name>incrementTestSuiteVersion</name></name><argument_list>(<argument><expr><call><name><name>this</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>this</name><operator>.</operator><name>testSuiteVersion</name></name></expr></argument>, <argument><expr><name>projectId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<function><specifier>public</specifier> <type><name>void</name></type> <name>storeToFirebase</name><parameter_list>()</parameter_list>
	<block>{
		<decl_stmt><decl><type><name>int</name></type> <name>firebaseVersion</name> <init>= <expr><name>version</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><call><name><name>FirebaseService</name><operator>.</operator><name>writeFunction</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>FunctionInFirebase</name><argument_list>(
					<argument><expr><name>name</name></expr></argument>,
					<argument><expr><name><name>this</name><operator>.</operator><name>id</name></name></expr></argument>,
					<argument><expr><name>firebaseVersion</name></expr></argument>,
					<argument><expr><name>returnType</name></expr></argument>,
					<argument><expr><name>paramNames</name></expr></argument>,
					<argument><expr><name>paramTypes</name></expr></argument>,
					<argument><expr><name>paramDescriptions</name></expr></argument>,
					<argument><expr><name>header</name></expr></argument>,
					<argument><expr><name>description</name></expr></argument>,
					<argument><expr><name>code</name></expr></argument>,
					<argument><expr><name>linesOfCode</name></expr></argument>,
					<argument><expr><name>ADTsId</name></expr></argument>,
					<argument><expr><name>calleesId</name></expr></argument>,
					<argument><expr><name>testSuiteVersion</name></expr></argument>,
					<argument><expr><name>isReadOnly</name></expr></argument>,
					<argument><expr><name>isAPIArtifact</name></expr></argument>,
					<argument><expr><name>isDeleted</name></expr></argument>
				)</argument_list></call></expr></argument>,
				<argument><expr><name><name>this</name><operator>.</operator><name>id</name></name></expr></argument>, <argument><expr><name>firebaseVersion</name></expr></argument>, <argument><expr><name>projectId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>incrementVersion</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	}</block></function>

    <comment type="line">// Given an id for a functon, finds the corresponding function. Returns null if no such function exists.</comment>
    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>Function</name></type> <name>find</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>id</name></decl></parameter>)</parameter_list>
    <block>{
        <return>return <expr><operator>(</operator><name>Function</name><operator>)</operator> <call><name>ofy</name><argument_list>()</argument_list></call><operator>.</operator><call><name>load</name><argument_list>()</argument_list></call><operator>.</operator><call><name>key</name><argument_list>(<argument><expr><call><name><name>Artifact</name><operator>.</operator><name>getKey</name></name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>now</name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

	<comment type="line">// Given a ref to a function that has not been loaded from the datastore,</comment>
	<comment type="line">// load it and get the object</comment>
	<function><specifier>public</specifier> <specifier>static</specifier> <type><name>Function</name></type> <name>load</name><parameter_list>(<parameter><decl><type><name><name>Ref</name><argument_list type="generic">&lt;<argument><name>Function</name></argument>&gt;</argument_list></name></type> <name>ref</name></decl></parameter>)</parameter_list>
	<block>{
		<return>return <expr><call><name>ofy</name><argument_list>()</argument_list></call><operator>.</operator><call><name>load</name><argument_list>()</argument_list></call><operator>.</operator><call><name>ref</name><argument_list>(<argument><expr><name>ref</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>now</name><argument_list>()</argument_list></call></expr>;</return>
	}</block></function>




}</block></class>

</unit>

<unit revision="0.9.5" language="Java" filename="CrowdCode-com/crowdcoding/commands/ADTCommand.java" hash="fc8dae16c87edffda64d9c2b1343636b49b2f995"><package>package <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>commands</name></name>;</package>


<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashMap</name></name>;</import>


<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>entities</name><operator>.</operator><name>artifacts</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>servlets</name><operator>.</operator><name>ThreadContext</name></name>;</import>

<class><specifier>public</specifier> <specifier>abstract</specifier> class <name>ADTCommand</name> <super><extends>extends <name>Command</name></extends></super> <block>{
	<decl_stmt><decl><specifier>protected</specifier> <type><name>long</name></type> <name>ADTId</name></decl>;</decl_stmt>

	<function><specifier>public</specifier> <specifier>static</specifier> <type><name>ADTCommand</name></type> <name>create</name> <parameter_list>(<parameter><decl><type><name>String</name></type> <name>description</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>structure</name></decl></parameter>, <parameter><decl><type><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>examples</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>isApiArtifact</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>isReadOnly</name></decl></parameter>)</parameter_list> <block>{
		<return>return <expr><operator>new</operator> <call><name>Create</name><argument_list>( <argument><expr><name>description</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>structure</name></expr></argument>, <argument><expr><name>examples</name></expr></argument>, <argument><expr><name>isApiArtifact</name></expr></argument>, <argument><expr><name>isReadOnly</name></expr></argument> )</argument_list></call></expr>;</return>
	}</block></function>

	<function><specifier>public</specifier> <specifier>static</specifier> <type><name>ADTCommand</name></type> <name>update</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>ADTId</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>description</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>structure</name></decl></parameter>)</parameter_list> <block>{
		<return>return <expr><operator>new</operator> <call><name>Update</name><argument_list>(<argument><expr><name>ADTId</name></expr></argument>, <argument><expr><name>description</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>structure</name></expr></argument> )</argument_list></call></expr>;</return>
	}</block></function>

	<function><specifier>public</specifier> <specifier>static</specifier> <type><name>ADTCommand</name></type> <name>delete</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>ADTId</name></decl></parameter>)</parameter_list> <block>{
		<return>return <expr><operator>new</operator> <call><name>Delete</name><argument_list>(<argument><expr><name>ADTId</name></expr></argument>)</argument_list></call></expr>;</return>
	}</block></function>

	<constructor><specifier>private</specifier> <name>ADTCommand</name><parameter_list>(<parameter><decl><type><name>Long</name></type> <name>ADTId</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>ADTId</name></name> <operator>=</operator> <name>ADTId</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>queueCommand</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></constructor>

	<comment type="line">// All constructors for ADTCommand MUST call queueCommand and the end of</comment>
	<comment type="line">// the constructor to add the</comment>
	<comment type="line">// command to the queue.</comment>
	<function><specifier>private</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>queueCommand</name><parameter_list>(<parameter><decl><type><name>Command</name></type> <name>command</name></decl></parameter>)</parameter_list> <block>{
		<decl_stmt><decl><type><name>ThreadContext</name></type> <name>threadContext</name> <init>= <expr><call><name><name>ThreadContext</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>threadContext</name><operator>.</operator><name>addCommand</name></name><argument_list>(<argument><expr><name>command</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<function><specifier>public</specifier> <type><name>void</name></type> <name>execute</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>String</name></type> <name>projectId</name></decl></parameter>)</parameter_list> <block>{
    	<if>if <condition>(<expr><name>ADTId</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
			<decl_stmt><decl><type><name>ADT</name></type> <name>adt</name> <init>= <expr><call><name><name>ADT</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><name>ADTId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

			<if>if <condition>(<expr><name>adt</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then>
				<block type="pseudo"><expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name>
						<operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"errore Cannot execute ADTCommand. Could not find ADT for ADTID "</literal>
								<operator>+</operator> <name>ADTId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
			<else>else <block>{
				<expr_stmt><expr><call><name>execute</name><argument_list>(<argument><expr><name>adt</name></expr></argument>, <argument><expr><name>projectId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></else></if>
		}</block></then> <else>else
			<block type="pseudo"><expr_stmt><expr><call><name>execute</name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>projectId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>

	}</block></function>

	<function_decl><specifier>public</specifier> <specifier>abstract</specifier> <type><name>void</name></type> <name>execute</name><parameter_list>(<parameter><decl><type><name>ADT</name></type> <name>ADT</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>projectId</name></decl></parameter>)</parameter_list>;</function_decl>

	<class><specifier>protected</specifier> <specifier>static</specifier> class <name>Create</name> <super><extends>extends <name>ADTCommand</name></extends></super> <block>{
		<decl_stmt><decl><specifier>private</specifier> <type><name>String</name></type> <name>description</name></decl>;</decl_stmt>
		<decl_stmt><decl><specifier>private</specifier> <type><name>String</name></type> <name>name</name></decl>;</decl_stmt>
		<decl_stmt><decl><specifier>private</specifier> <type><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>structure</name></decl>;</decl_stmt>
		<decl_stmt><decl><specifier>private</specifier> <type><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>examples</name></decl>;</decl_stmt>
		<decl_stmt><decl><specifier>private</specifier> <type><name>boolean</name></type> <name>isApiArtifact</name></decl>;</decl_stmt>
		<decl_stmt><decl><specifier>private</specifier> <type><name>boolean</name></type> <name>isReadOnly</name></decl>;</decl_stmt>


		<constructor><specifier>public</specifier> <name>Create</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>description</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>structure</name></decl></parameter>,<parameter><decl><type><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>examples</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>isApiArtifact</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>isReadOnly</name></decl></parameter>)</parameter_list> <block>{
			<expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><literal type="number">0L</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>this</name><operator>.</operator><name>description</name></name>   <operator>=</operator> <name>description</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>this</name><operator>.</operator><name>name</name></name>		   <operator>=</operator> <name>name</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>this</name><operator>.</operator><name>structure</name></name>	   <operator>=</operator> <name>structure</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>this</name><operator>.</operator><name>examples</name></name>	   <operator>=</operator> <name>examples</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>this</name><operator>.</operator><name>isApiArtifact</name></name> <operator>=</operator> <name>isApiArtifact</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>this</name><operator>.</operator><name>isReadOnly</name></name>    <operator>=</operator> <name>isReadOnly</name></expr>;</expr_stmt>

		}</block></constructor>

		<function><specifier>public</specifier> <type><name>void</name></type> <name>execute</name><parameter_list>(<parameter><decl><type><name>ADT</name></type> <name>ADT</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>projectId</name></decl></parameter>)</parameter_list> <block>{
			<expr_stmt><expr><operator>new</operator> <call><name>ADT</name><argument_list>( <argument><expr><name>description</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>structure</name></expr></argument>, <argument><expr><name>examples</name></expr></argument>, <argument><expr><name>isApiArtifact</name></expr></argument>, <argument><expr><name>isReadOnly</name></expr></argument> , <argument><expr><name>projectId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></function>
	}</block></class>

	<class><specifier>protected</specifier> <specifier>static</specifier> class <name>Update</name> <super><extends>extends <name>ADTCommand</name></extends></super> <block>{

		<decl_stmt><decl><specifier>private</specifier> <type><name>String</name></type> <name>description</name></decl>;</decl_stmt>
		<decl_stmt><decl><specifier>private</specifier> <type><name>String</name></type> <name>name</name></decl>;</decl_stmt>
		<decl_stmt><decl><specifier>private</specifier> <type><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>structure</name></decl>;</decl_stmt>

		<constructor><specifier>public</specifier> <name>Update</name><parameter_list>( <parameter><decl><type><name>long</name></type> <name>ADTId</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>description</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>structure</name></decl></parameter> )</parameter_list> <block>{
			<expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>ADTId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>this</name><operator>.</operator><name>description</name></name>  <operator>=</operator> <name>description</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>this</name><operator>.</operator><name>name</name></name>		  <operator>=</operator> <name>name</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>this</name><operator>.</operator><name>structure</name></name>    <operator>=</operator> <name>structure</name></expr>;</expr_stmt>
		}</block></constructor>

		<function><specifier>public</specifier> <type><name>void</name></type> <name>execute</name><parameter_list>(<parameter><decl><type><name>ADT</name></type> <name>adt</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>projectId</name></decl></parameter>)</parameter_list> <block>{
			<expr_stmt><expr><call><name><name>adt</name><operator>.</operator><name>update</name></name><argument_list>( <argument><expr><name>description</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>structure</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
		}</block></function>
	}</block></class>

	<class><specifier>protected</specifier> <specifier>static</specifier> class <name>Delete</name> <super><extends>extends <name>ADTCommand</name></extends></super> <block>{
		<constructor><specifier>public</specifier> <name>Delete</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>ADTId</name></decl></parameter>)</parameter_list> <block>{
			<expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>ADTId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></constructor>

		<function><specifier>public</specifier> <type><name>void</name></type> <name>execute</name><parameter_list>(<parameter><decl><type><name>ADT</name></type> <name>adt</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>projectId</name></decl></parameter>)</parameter_list> <block>{
			<expr_stmt><expr><call><name><name>adt</name><operator>.</operator><name>delete</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		}</block></function>
	}</block></class>

}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="CrowdCode-com/crowdcoding/commands/MicrotaskCommand.java" hash="3a10aa54dc76231650388aa8c67d55f1fd1cae69"><package>package <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>commands</name></name>;</package>

<import>import static <name><name>com</name><operator>.</operator><name>googlecode</name><operator>.</operator><name>objectify</name><operator>.</operator><name>ObjectifyService</name><operator>.</operator><name>ofy</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>dto</name><operator>.</operator><name>ChallengeDTO</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>dto</name><operator>.</operator><name>DTO</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>entities</name><operator>.</operator><name>microtasks</name><operator>.</operator><name>ChallengeReview</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>entities</name><operator>.</operator><name>microtasks</name><operator>.</operator><name>Microtask</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>entities</name><operator>.</operator><name>microtasks</name><operator>.</operator><name>Review</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>servlets</name><operator>.</operator><name>ThreadContext</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>fasterxml</name><operator>.</operator><name>jackson</name><operator>.</operator><name>core</name><operator>.</operator><name>JsonParseException</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>fasterxml</name><operator>.</operator><name>jackson</name><operator>.</operator><name>databind</name><operator>.</operator><name>JsonMappingException</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>googlecode</name><operator>.</operator><name>objectify</name><operator>.</operator><name>Key</name></name>;</import>

<class><specifier>public</specifier> <specifier>abstract</specifier> class <name>MicrotaskCommand</name> <super><extends>extends <name>Command</name></extends></super>
<block>{
	<decl_stmt><decl><specifier>private</specifier> <type><name><name>Key</name><argument_list type="generic">&lt;<argument><name>Microtask</name></argument>&gt;</argument_list></name></type> <name>microtaskKey</name></decl>;</decl_stmt>

	<function><specifier>public</specifier> <specifier>static</specifier> <type><name>MicrotaskCommand</name></type> <name>submit</name><parameter_list>(<parameter><decl><type><name><name>Key</name><argument_list type="generic">&lt;<argument><name>Microtask</name></argument>&gt;</argument_list></name></type> <name>microtaskKey</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>jsonDTOData</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>workerID</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>awardedPoint</name></decl></parameter>)</parameter_list>
		<block>{ <return>return <expr><operator>new</operator> <call><name>Submit</name><argument_list>(<argument><expr><name>microtaskKey</name></expr></argument>, <argument><expr><name>jsonDTOData</name></expr></argument>, <argument><expr><name>workerID</name></expr></argument>, <argument><expr><name>awardedPoint</name></expr></argument>)</argument_list></call></expr>;</return> }</block></function>

	<function><specifier>public</specifier> <specifier>static</specifier> <type><name>MicrotaskCommand</name></type> <name>skip</name><parameter_list>(<parameter><decl><type><name><name>Key</name><argument_list type="generic">&lt;<argument><name>Microtask</name></argument>&gt;</argument_list></name></type> <name>microtaskKey</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>workerID</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>disablePoint</name></decl></parameter>)</parameter_list>
		<block>{ <return>return <expr><operator>new</operator> <call><name>Skip</name><argument_list>(<argument><expr><name>microtaskKey</name></expr></argument>, <argument><expr><name>workerID</name></expr></argument>, <argument><expr><name>disablePoint</name></expr></argument>)</argument_list></call></expr>;</return> }</block></function>

	<function><specifier>public</specifier> <specifier>static</specifier> <type><name>MicrotaskCommand</name></type> <name>createReview</name><parameter_list>(<parameter><decl><type><name><name>Key</name><argument_list type="generic">&lt;<argument><name>Microtask</name></argument>&gt;</argument_list></name></type> <name>microtaskKeyToReview</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>excludedWorkerID</name></decl></parameter>,
			<parameter><decl><type><name>String</name></type> <name>initiallySubmittedDTO</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>workerOfReviewedWork</name></decl></parameter>)</parameter_list>
		<block>{ <return>return <expr><operator>new</operator> <call><name>CreateReview</name><argument_list>(<argument><expr><name>microtaskKeyToReview</name></expr></argument>, <argument><expr><name>excludedWorkerID</name></expr></argument>, <argument><expr><name>initiallySubmittedDTO</name></expr></argument>, <argument><expr><name>workerOfReviewedWork</name></expr></argument>)</argument_list></call></expr>;</return> }</block></function>

	<function><specifier>public</specifier> <specifier>static</specifier> <type><name>MicrotaskCommand</name></type> <name>createChallengeReview</name><parameter_list>(<parameter><decl><type><name><name>Key</name><argument_list type="generic">&lt;<argument><name>Microtask</name></argument>&gt;</argument_list></name></type> <name>reviewKey</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>challengeTextDTO</name></decl></parameter>)</parameter_list>
		<block>{ <return>return <expr><operator>new</operator> <call><name>CreateChallengeReview</name><argument_list>(<argument><expr><name>reviewKey</name></expr></argument>, <argument><expr><name>challengeTextDTO</name></expr></argument>)</argument_list></call></expr>;</return> }</block></function>

	<comment type="line">// Creates a new copy of the specified microtask, reissuing the new microtask with specified</comment>
	<comment type="line">// worker excluded from performing it and save the reference to the reissued microtask.</comment>
	<function><specifier>public</specifier> <specifier>static</specifier> <type><name>MicrotaskCommand</name></type> <name>reviseMicrotask</name><parameter_list>(<parameter><decl><type><name><name>Key</name><argument_list type="generic">&lt;<argument><name>Microtask</name></argument>&gt;</argument_list></name></type> <name>microtaskKey</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>jsonDTOData</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>reissueMotivation</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>excludedWorkerID</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>awardedPoint</name></decl></parameter>)</parameter_list>
		<block>{ <return>return <expr><operator>new</operator> <call><name>ReviseMicrotask</name><argument_list>(<argument><expr><name>microtaskKey</name></expr></argument>, <argument><expr><name>jsonDTOData</name></expr></argument>, <argument><expr><name>reissueMotivation</name></expr></argument>, <argument><expr><name>excludedWorkerID</name></expr></argument>, <argument><expr><name>awardedPoint</name></expr></argument>)</argument_list></call></expr>;</return> }</block></function>

	<comment type="line">// Creates a new copy of the specified microtask, reissuing the new microtask with specified</comment>
	<comment type="line">// worker excluded from performing it.</comment>
	<function><specifier>public</specifier> <specifier>static</specifier> <type><name>MicrotaskCommand</name></type> <name>rejectMicrotask</name><parameter_list>(<parameter><decl><type><name><name>Key</name><argument_list type="generic">&lt;<argument><name>Microtask</name></argument>&gt;</argument_list></name></type> <name>microtaskKey</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>excludedWorkerID</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>awardedPoint</name></decl></parameter>)</parameter_list>
		<block>{ <return>return <expr><operator>new</operator> <call><name>RejectMicrotask</name><argument_list>(<argument><expr><name>microtaskKey</name></expr></argument>, <argument><expr><name>excludedWorkerID</name></expr></argument>, <argument><expr><name>awardedPoint</name></expr></argument>)</argument_list></call></expr>;</return> }</block></function>


	<constructor><specifier>private</specifier> <name>MicrotaskCommand</name><parameter_list>( <parameter><decl><type><name><name>Key</name><argument_list type="generic">&lt;<argument><name>Microtask</name></argument>&gt;</argument_list></name></type> <name>microtaskKey</name></decl></parameter> )</parameter_list>
	<block>{
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>microtaskKey</name></name> <operator>=</operator> <name>microtaskKey</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>queueCommand</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></constructor>

	<comment type="line">// All constructors for WorkerCommand MUST call queueCommand by calling the super constructor</comment>
	<function><specifier>private</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>queueCommand</name><parameter_list>(<parameter><decl><type><name>Command</name></type> <name>command</name></decl></parameter>)</parameter_list>
	<block>{
		<decl_stmt><decl><type><name>ThreadContext</name></type> <name>threadContext</name> <init>= <expr><call><name><name>ThreadContext</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>threadContext</name><operator>.</operator><name>addCommand</name></name><argument_list>(<argument><expr><name>command</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<function><specifier>public</specifier> <type><name>void</name></type> <name>execute</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>String</name></type> <name>projectId</name></decl></parameter>)</parameter_list>
	<block>{

		<decl_stmt><decl><type><specifier>final</specifier> <name>Microtask</name></type> <name>microtask</name> <init>= <expr><call><name>find</name><argument_list>(<argument><expr><name>microtaskKey</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	        	<if>if <condition>(<expr><name>microtask</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then>
	    			<block type="pseudo"><expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"ERROR erroreCannot execute MicrotaskCommand. Could not find the microtask for microtaskID "</literal>
	    						<operator>+</operator> <name>microtaskKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
	    		<else>else
	    		<block>{
	    			<expr_stmt><expr><call><name>execute</name><argument_list>(<argument><expr><name>microtask</name></expr></argument>, <argument><expr><name>projectId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    		}</block></else></if>
	}</block></function>

	<function_decl><specifier>public</specifier> <specifier>abstract</specifier> <type><name>void</name></type> <name>execute</name><parameter_list>(<parameter><decl><type><name>Microtask</name></type> <name>microtask</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>projectId</name></decl></parameter>)</parameter_list>;</function_decl>

	<comment type="line">// Finds the specified microtask. Returns null if no such microtask exists.</comment>
	<function><specifier>protected</specifier> <type><name>Microtask</name></type> <name>find</name><parameter_list>(<parameter><decl><type><name><name>Key</name><argument_list type="generic">&lt;<argument><name>Microtask</name></argument>&gt;</argument_list></name></type> <name>microtaskKey</name></decl></parameter>)</parameter_list>
	<block>{
		<return>return <expr><call><name>ofy</name><argument_list>()</argument_list></call><operator>.</operator><call><name>load</name><argument_list>()</argument_list></call><operator>.</operator><call><name>key</name><argument_list>(<argument><expr><name>microtaskKey</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>now</name><argument_list>()</argument_list></call></expr>;</return>
	}</block></function>


	<class><specifier>protected</specifier> <specifier>static</specifier> class <name>Submit</name> <super><extends>extends <name>MicrotaskCommand</name></extends></super>
	<block>{
		<decl_stmt><decl><specifier>private</specifier> <type><name>String</name></type> <name>jsonDTOData</name></decl>;</decl_stmt>
		<decl_stmt><decl><specifier>private</specifier> <type><name>String</name></type> <name>workerID</name></decl>;</decl_stmt>
		<decl_stmt><decl><specifier>private</specifier> <type><name>int</name></type> <name>awardedPoint</name></decl>;</decl_stmt>


		<constructor><specifier>public</specifier> <name>Submit</name><parameter_list>(<parameter><decl><type><name><name>Key</name><argument_list type="generic">&lt;<argument><name>Microtask</name></argument>&gt;</argument_list></name></type> <name>microtaskKey</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>jsonDTOData</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>workerID</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>awardedPoint</name></decl></parameter>)</parameter_list>
		<block>{
			<expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>microtaskKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>this</name><operator>.</operator><name>jsonDTOData</name></name> <operator>=</operator> <name>jsonDTOData</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>this</name><operator>.</operator><name>workerID</name></name> <operator>=</operator> <name>workerID</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>this</name><operator>.</operator><name>awardedPoint</name></name><operator>=</operator> <name>awardedPoint</name></expr>;</expr_stmt>
		}</block></constructor>

		<function><specifier>public</specifier> <type><name>void</name></type> <name>execute</name><parameter_list>(<parameter><decl><type><name>Microtask</name></type> <name>microtask</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>projectId</name></decl></parameter>)</parameter_list>
		<block>{
			<expr_stmt><expr><call><name><name>microtask</name><operator>.</operator><name>submit</name></name><argument_list>(<argument><expr><name>jsonDTOData</name></expr></argument>, <argument><expr><name>workerID</name></expr></argument>, <argument><expr><name>awardedPoint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></function>
	}</block></class>

	<class><specifier>protected</specifier> <specifier>static</specifier> class <name>Skip</name> <super><extends>extends <name>MicrotaskCommand</name></extends></super>
	<block>{
		<decl_stmt><decl><specifier>private</specifier> <type><name>String</name></type> <name>workerID</name></decl>;</decl_stmt>
		<decl_stmt><decl><specifier>private</specifier> <type><name>boolean</name></type> <name>disablePoint</name></decl>;</decl_stmt>

		<constructor><specifier>public</specifier> <name>Skip</name><parameter_list>(<parameter><decl><type><name><name>Key</name><argument_list type="generic">&lt;<argument><name>Microtask</name></argument>&gt;</argument_list></name></type> <name>microtaskKey</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>workerID</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>disablePoint</name></decl></parameter>)</parameter_list>
		<block>{
			<expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>microtaskKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>this</name><operator>.</operator><name>workerID</name></name> <operator>=</operator> <name>workerID</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>this</name><operator>.</operator><name>disablePoint</name></name><operator>=</operator><name>disablePoint</name></expr>;</expr_stmt>

		}</block></constructor>

		<function><specifier>public</specifier> <type><name>void</name></type> <name>execute</name><parameter_list>(<parameter><decl><type><name>Microtask</name></type> <name>microtask</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>projectId</name></decl></parameter>)</parameter_list>
		<block>{
			<expr_stmt><expr><call><name><name>microtask</name><operator>.</operator><name>skip</name></name><argument_list>(<argument><expr><name>workerID</name></expr></argument>, <argument><expr><name>disablePoint</name></expr></argument>, <argument><expr><name>projectId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></function>
	}</block></class>

	<class><specifier>protected</specifier> <specifier>static</specifier> class <name>CreateReview</name> <super><extends>extends <name>MicrotaskCommand</name></extends></super>
	<block>{
		<decl_stmt><decl><specifier>private</specifier> <type><name><name>Key</name><argument_list type="generic">&lt;<argument><name>Microtask</name></argument>&gt;</argument_list></name></type> <name>microtaskKeyToReview</name></decl>;</decl_stmt>
		<decl_stmt><decl><specifier>private</specifier> <type><name>String</name></type> <name>excludedWorkerID</name></decl>;</decl_stmt>
		<decl_stmt><decl><specifier>private</specifier> <type><name>String</name></type> <name>initiallySubmittedDTO</name></decl>;</decl_stmt>
		<decl_stmt><decl><specifier>private</specifier> <type><name>String</name></type> <name>workerOfReviewedWork</name></decl>;</decl_stmt>

		<constructor><specifier>public</specifier> <name>CreateReview</name><parameter_list>(<parameter><decl><type><name><name>Key</name><argument_list type="generic">&lt;<argument><name>Microtask</name></argument>&gt;</argument_list></name></type> <name>microtaskKeyToReview</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>excludedWorkerID</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>initiallySubmittedDTO</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>workerOfReviewedWork</name></decl></parameter>)</parameter_list>
		<block>{
			<expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>microtaskKeyToReview</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>this</name><operator>.</operator><name>microtaskKeyToReview</name></name> <operator>=</operator> <name>microtaskKeyToReview</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>this</name><operator>.</operator><name>excludedWorkerID</name></name> <operator>=</operator> <name>excludedWorkerID</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>this</name><operator>.</operator><name>initiallySubmittedDTO</name></name> <operator>=</operator> <name>initiallySubmittedDTO</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>this</name><operator>.</operator><name>workerOfReviewedWork</name></name> <operator>=</operator> <name>workerOfReviewedWork</name></expr>;</expr_stmt>
		}</block></constructor>

		<function><specifier>public</specifier> <type><name>void</name></type> <name>execute</name><parameter_list>(<parameter><decl><type><name>Microtask</name></type> <name>toReview</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>projectId</name></decl></parameter>)</parameter_list>
		<block>{
				<decl_stmt><decl><type><name>Review</name></type> <name>review</name> <init>= <expr><operator>new</operator> <call><name>Review</name><argument_list>(<argument><expr><name>microtaskKeyToReview</name></expr></argument>, <argument><expr><name>initiallySubmittedDTO</name></expr></argument>, <argument><expr><name>workerOfReviewedWork</name></expr></argument>, <argument><expr><call><name><name>toReview</name><operator>.</operator><name>getFunctionId</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>projectId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><call><name><name>ProjectCommand</name><operator>.</operator><name>queueReviewMicrotask</name></name><argument_list>(<argument><expr><call><name><name>review</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>excludedWorkerID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></function>
	}</block></class>


	<class><specifier>protected</specifier> <specifier>static</specifier> class <name>CreateChallengeReview</name> <super><extends>extends <name>MicrotaskCommand</name></extends></super>
	<block>{
		<decl_stmt><decl><specifier>private</specifier> <type><name>String</name></type> <name>challengeTextDTO</name></decl>;</decl_stmt>
		<constructor><specifier>public</specifier> <name>CreateChallengeReview</name><parameter_list>(<parameter><decl><type><name><name>Key</name><argument_list type="generic">&lt;<argument><name>Microtask</name></argument>&gt;</argument_list></name></type> <name>reviewKey</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>challengeTextDTO</name></decl></parameter>)</parameter_list>
		<block>{
			<expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>reviewKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>this</name><operator>.</operator><name>challengeTextDTO</name></name><operator>=</operator><name>challengeTextDTO</name></expr>;</expr_stmt>
		}</block></constructor>
		<function><specifier>public</specifier> <type><name>void</name></type> <name>execute</name><parameter_list>(<parameter><decl><type><name>Microtask</name></type> <name>review</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>projectId</name></decl></parameter>)</parameter_list>
		<block>{
			<decl_stmt><decl><type><name>ChallengeDTO</name></type> <name>dto</name><init>=<expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
			<try>try <block>{
				<expr_stmt><expr><name>dto</name> <operator>=</operator> <call>(<name>ChallengeDTO</name>)<argument_list>(<argument><expr><call><name><name>DTO</name><operator>.</operator><name>read</name></name><argument_list>(<argument><expr><name>challengeTextDTO</name></expr></argument>, <argument><expr><name><name>ChallengeDTO</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			}</block> <catch>catch<parameter_list>( <parameter><decl><type><name>JsonParseException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
				<expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			}</block></catch> <catch>catch<parameter_list>( <parameter><decl><type><name>JsonMappingException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
				<expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			}</block></catch> <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
				<expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			}</block></catch></try>
			<decl_stmt><decl><type><name>String</name></type> <name>reviewerWorkerId</name> <init>= <expr><call><name><name>review</name><operator>.</operator><name>getWorkerId</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>String</name></type> <name>challengerWorkerId</name> <init>= <expr><operator>(</operator><operator>(</operator><name>Review</name><operator>)</operator><name>review</name><operator>)</operator><operator>.</operator><call><name>getWorkerOfReviewedWork</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name><name>Key</name><argument_list type="generic">&lt;<argument><name>Microtask</name></argument>&gt;</argument_list></name></type> <name>microtaskUnderChallengeKey</name><init>= <expr><operator>(</operator><operator>(</operator><name>Review</name><operator>)</operator><name>review</name><operator>)</operator><operator>.</operator><call><name>getMicrotaskKeyUnderReview</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>long</name></type> <name>functionId</name> <init>= <expr><call><name><name>review</name><operator>.</operator><name>getFunctionId</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>ChallengeReview</name></type> <name>challengeReview</name> <init>= <expr><operator>new</operator> <call><name>ChallengeReview</name><argument_list>(<argument><expr><name><name>dto</name><operator>.</operator><name>challengeText</name></name></expr></argument>, <argument><expr><name>challengerWorkerId</name></expr></argument>, <argument><expr><name>reviewerWorkerId</name></expr></argument>, <argument><expr><name>microtaskUnderChallengeKey</name></expr></argument>, <argument><expr><call><name><name>review</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>functionId</name></expr></argument>, <argument><expr><name>projectId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name><name>ProjectCommand</name><operator>.</operator><name>queueChallengeReviewMicrotask</name></name><argument_list>(<argument><expr><call><name><name>challengeReview</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>reviewerWorkerId</name></expr></argument>, <argument><expr><name>challengerWorkerId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		}</block></function>

	}</block></class>

	<class><specifier>protected</specifier> <specifier>static</specifier> class <name>RejectMicrotask</name> <super><extends>extends <name>MicrotaskCommand</name></extends></super>
	<block>{
		<decl_stmt><decl><specifier>private</specifier> <type><name>String</name></type> <name>excludedWorkerID</name></decl>;</decl_stmt>
		<decl_stmt><decl><specifier>private</specifier> <type><name>int</name></type> <name>awardedPoint</name></decl>;</decl_stmt>

		<constructor><specifier>public</specifier> <name>RejectMicrotask</name><parameter_list>(<parameter><decl><type><name><name>Key</name><argument_list type="generic">&lt;<argument><name>Microtask</name></argument>&gt;</argument_list></name></type> <name>microtaskKey</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>excludedWorkerID</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>awardedPoint</name></decl></parameter>)</parameter_list>
		<block>{
			<expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>microtaskKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>this</name><operator>.</operator><name>excludedWorkerID</name></name> <operator>=</operator> <name>excludedWorkerID</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>this</name><operator>.</operator><name>awardedPoint</name></name> <operator>=</operator> <name>awardedPoint</name></expr>;</expr_stmt>

		}</block></constructor>

		<comment type="line">// Overrides the default execute as no microtask is to be loaded.</comment>
		<function><specifier>public</specifier> <type><name>void</name></type> <name>execute</name><parameter_list>(<parameter><decl><type><name>Microtask</name></type> <name>microtask</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>projectId</name></decl></parameter>)</parameter_list>
		<block>{
			<decl_stmt><decl><type><name>Microtask</name></type> <name>newMicrotask</name> <init>= <expr><call><name><name>microtask</name><operator>.</operator><name>copy</name></name><argument_list>(<argument><expr><name>projectId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

			<expr_stmt><expr><call><name><name>WorkerCommand</name><operator>.</operator><name>awardPoints</name></name><argument_list>( <argument><expr><name>excludedWorkerID</name></expr></argument> ,<argument><expr><name>awardedPoint</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><call><name><name>ProjectCommand</name><operator>.</operator><name>queueMicrotask</name></name><argument_list>(<argument><expr><call><name><name>newMicrotask</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>excludedWorkerID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></function>
	}</block></class>
	<class><specifier>protected</specifier> <specifier>static</specifier> class <name>ReviseMicrotask</name> <super><extends>extends <name>MicrotaskCommand</name></extends></super>
	<block>{
		<decl_stmt><decl><specifier>private</specifier> <type><name>String</name></type> <name>excludedWorkerID</name></decl>;</decl_stmt>
		<decl_stmt><decl><specifier>private</specifier> <type><name>int</name></type> <name>awardedPoint</name></decl>;</decl_stmt>
		<decl_stmt><decl><specifier>private</specifier> <type><name>String</name></type> <name>jsonDTOData</name></decl>;</decl_stmt>
		<decl_stmt><decl><specifier>private</specifier> <type><name>String</name></type> <name>reissueMotivation</name></decl>;</decl_stmt>

		<constructor><specifier>public</specifier> <name>ReviseMicrotask</name><parameter_list>(<parameter><decl><type><name><name>Key</name><argument_list type="generic">&lt;<argument><name>Microtask</name></argument>&gt;</argument_list></name></type> <name>microtaskKey</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>jsonDTOData</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>reissueMotivation</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>excludedWorkerID</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>awardedPoint</name></decl></parameter>)</parameter_list>
		<block>{
			<expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>microtaskKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>this</name><operator>.</operator><name>excludedWorkerID</name></name> <operator>=</operator> <name>excludedWorkerID</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>this</name><operator>.</operator><name>awardedPoint</name></name> <operator>=</operator> <name>awardedPoint</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>this</name><operator>.</operator><name>jsonDTOData</name></name> <operator>=</operator> <name>jsonDTOData</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>this</name><operator>.</operator><name>reissueMotivation</name></name> <operator>=</operator> <name>reissueMotivation</name></expr>;</expr_stmt>
		}</block></constructor>

		<comment type="line">// Overrides the default execute as no microtask is to be loaded.</comment>
		<function><specifier>public</specifier> <type><name>void</name></type> <name>execute</name><parameter_list>(<parameter><decl><type><name>Microtask</name></type> <name>microtask</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>projectId</name></decl></parameter>)</parameter_list>
		<block>{
			<expr_stmt><expr><call><name><name>microtask</name><operator>.</operator><name>revise</name></name><argument_list>(<argument><expr><name>jsonDTOData</name></expr></argument>, <argument><expr><name>excludedWorkerID</name></expr></argument> ,<argument><expr><name>awardedPoint</name></expr></argument>,<argument><expr><name>reissueMotivation</name></expr></argument>, <argument><expr><name>projectId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></function>
	}</block></class>

}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="CrowdCode-com/crowdcoding/commands/ProjectCommand.java" hash="a1c1cee51250b8de7b46145bbd2f426da726b050"><package>package <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>commands</name></name>;</package>


<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashSet</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>dto</name><operator>.</operator><name>firebase</name><operator>.</operator><name>notification</name><operator>.</operator><name>NotificationInFirebase</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>entities</name><operator>.</operator><name>Project</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>entities</name><operator>.</operator><name>microtasks</name><operator>.</operator><name>Microtask</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>servlets</name><operator>.</operator><name>ThreadContext</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>util</name><operator>.</operator><name>FirebaseService</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>googlecode</name><operator>.</operator><name>objectify</name><operator>.</operator><name>Key</name></name>;</import>

<class><specifier>public</specifier> <specifier>abstract</specifier> class <name>ProjectCommand</name> <super><extends>extends <name>Command</name></extends></super>
<block>{

	<comment type="block">/* PUBLIC METHODS */</comment>
	<function><specifier>public</specifier> <specifier>static</specifier> <type><name>ProjectCommand</name></type> <name>reset</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>projectId</name></decl></parameter>)</parameter_list><block>{
		<return>return <expr><operator>new</operator> <call><name>Reset</name><argument_list>(<argument><expr><name>projectId</name></expr></argument>)</argument_list></call></expr>;</return>
	}</block></function>
	<function><specifier>public</specifier> <specifier>static</specifier> <type><name>ProjectCommand</name></type> <name>clear</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>projectId</name></decl></parameter>)</parameter_list><block>{
		<return>return <expr><operator>new</operator> <call><name>Clear</name><argument_list>(<argument><expr><name>projectId</name></expr></argument>)</argument_list></call></expr>;</return>
	}</block></function>
	<function><specifier>public</specifier> <specifier>static</specifier> <type><name>ProjectCommand</name></type> <name>construct</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>projectId</name></decl></parameter>)</parameter_list><block>{
		<return>return <expr><operator>new</operator> <call><name>Construct</name><argument_list>(<argument><expr><name>projectId</name></expr></argument>)</argument_list></call></expr>;</return>
	}</block></function>

	<function><specifier>public</specifier> <specifier>static</specifier> <type><name>ProjectCommand</name></type> <name>enableReviews</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>reviewsEnabled</name></decl></parameter>)</parameter_list><block>{
		<return>return <expr><operator>new</operator> <call><name>EnableReviews</name><argument_list>(<argument><expr><name>reviewsEnabled</name></expr></argument>)</argument_list></call></expr>;</return>
	}</block></function>

	<function><specifier>public</specifier> <specifier>static</specifier> <type><name>ProjectCommand</name></type> <name>enableTutorials</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>tutorialsEnabled</name></decl></parameter>)</parameter_list><block>{
		<return>return <expr><operator>new</operator> <call><name>EnableTutorials</name><argument_list>(<argument><expr><name>tutorialsEnabled</name></expr></argument>)</argument_list></call></expr>;</return>
	}</block></function>

	<function><specifier>public</specifier> <specifier>static</specifier> <type><name>ProjectCommand</name></type> <name>queueMicrotask</name><parameter_list>(<parameter><decl><type><name><name>Key</name><argument_list type="generic">&lt;<argument><name>Microtask</name></argument>&gt;</argument_list></name></type> <name>microtaskKey</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>excludedWorkerID</name></decl></parameter>)</parameter_list> <block>{
		<return>return <expr><operator>new</operator> <call><name>QueueMicrotask</name><argument_list>(<argument><expr><name>microtaskKey</name></expr></argument>, <argument><expr><name>excludedWorkerID</name></expr></argument>)</argument_list></call></expr>;</return>
	}</block></function>

	<function><specifier>public</specifier> <specifier>static</specifier> <type><name>ProjectCommand</name></type> <name>queueReviewMicrotask</name><parameter_list>(<parameter><decl><type><name><name>Key</name><argument_list type="generic">&lt;<argument><name>Microtask</name></argument>&gt;</argument_list></name></type> <name>microtaskKey</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>excludedWorkerID</name></decl></parameter>)</parameter_list> <block>{
		<return>return <expr><operator>new</operator> <call><name>QueueReviewMicrotask</name><argument_list>(<argument><expr><name>microtaskKey</name></expr></argument>, <argument><expr><name>excludedWorkerID</name></expr></argument>)</argument_list></call></expr>;</return>
	}</block></function>
	<function><specifier>public</specifier> <specifier>static</specifier> <type><name>ProjectCommand</name></type> <name>queueChallengeReviewMicrotask</name><parameter_list>(<parameter><decl><type><name><name>Key</name><argument_list type="generic">&lt;<argument><name>Microtask</name></argument>&gt;</argument_list></name></type> <name>microtaskKey</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>firstExcludedWorkerID</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>secondExcludedWorkerID</name></decl></parameter>)</parameter_list> <block>{
		<return>return <expr><operator>new</operator> <call><name>QueueChallengeReviewMicrotask</name><argument_list>(<argument><expr><name>microtaskKey</name></expr></argument>, <argument><expr><name>firstExcludedWorkerID</name></expr></argument>, <argument><expr><name>secondExcludedWorkerID</name></expr></argument>)</argument_list></call></expr>;</return>
	}</block></function>

	<function><specifier>public</specifier> <specifier>static</specifier> <type><name>ProjectCommand</name></type> <name>skipMicrotask</name><parameter_list>( <parameter><decl><type><name>String</name></type> <name>microtaskKey</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>workerID</name></decl></parameter> , <parameter><decl><type><name>Boolean</name></type> <name>disablePoint</name></decl></parameter>)</parameter_list> <block>{
		<return>return <expr><operator>new</operator> <call><name>SkipMicrotask</name><argument_list>(<argument><expr><name>microtaskKey</name></expr></argument>, <argument><expr><name>workerID</name></expr></argument>, <argument><expr><name>disablePoint</name></expr></argument>)</argument_list></call></expr>;</return>
	}</block></function>


	<function><specifier>public</specifier> <specifier>static</specifier> <type><name>ProjectCommand</name></type> <name>submitMicrotask</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>microtaskKey</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>jsonDTOData</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>workerID</name></decl></parameter>)</parameter_list><block>{
		<return>return <expr><operator>new</operator> <call><name>SubmitMicrotask</name><argument_list>(<argument><expr><name>microtaskKey</name></expr></argument>, <argument><expr><name>jsonDTOData</name></expr></argument>, <argument><expr><name>workerID</name></expr></argument>)</argument_list></call></expr>;</return>
	}</block></function>

	<function><specifier>public</specifier> <specifier>static</specifier> <type><name>ProjectCommand</name></type> <name>logoutWorker</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>workerID</name></decl></parameter>)</parameter_list><block>{
		<return>return <expr><operator>new</operator> <call><name>LogoutWorker</name><argument_list>(<argument><expr><name>workerID</name></expr></argument>)</argument_list></call></expr>;</return>
	}</block></function>

	<function><specifier>public</specifier> <specifier>static</specifier> <type><name>ProjectCommand</name></type> <name>logoutInactiveWorkers</name><parameter_list>()</parameter_list><block>{
		<return>return <expr><operator>new</operator> <call><name>LogoutInactiveWorkers</name><argument_list>()</argument_list></call></expr>;</return>
	}</block></function>


	<function><specifier>public</specifier> <specifier>static</specifier> <type><name>ProjectCommand</name></type> <name>notifyLoggedInWorkers</name><parameter_list>( <parameter><decl><type><name>NotificationInFirebase</name></type> <name>notification</name></decl></parameter> )</parameter_list> <block>{
		<return>return <expr><operator>new</operator> <call><name>NotifyLoggedInWorkers</name><argument_list>( <argument><expr><name>notification</name></expr></argument> )</argument_list></call></expr>;</return>
	}</block></function>


	<comment type="block">/* PROTECTED METHODS */</comment>

	<comment type="line">// create and queue the command</comment>
	<constructor><specifier>private</specifier> <name>ProjectCommand</name><parameter_list>()</parameter_list><block>{
		<expr_stmt><expr><call><name>queueCommand</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></constructor>

	<function><specifier>public</specifier> <type><name>void</name></type> <name>execute</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>String</name></type>  <name>projectId</name></decl></parameter>)</parameter_list>
	<block>{
		<decl_stmt><decl><type><name>Project</name></type> <name>project</name> <init>= <expr><call><name><name>Project</name><operator>.</operator><name>Create</name></name><argument_list>(<argument><expr><name>projectId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	    <expr_stmt><expr><call><name>execute</name><argument_list>(<argument><expr><name>project</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<function_decl><specifier>public</specifier> <specifier>abstract</specifier> <type><name>void</name></type> <name>execute</name><parameter_list>(<parameter><decl><type><name>Project</name></type> <name>project</name></decl></parameter>)</parameter_list>;</function_decl>

	<comment type="line">// all commands MUST call queueCommand</comment>
	<function><specifier>private</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>queueCommand</name><parameter_list>(<parameter><decl><type><name>Command</name></type> <name>command</name></decl></parameter>)</parameter_list><block>{
		<comment type="line">//ThreadContext threadContext = ThreadContext.get();</comment>

       <comment type="line">// System.out.println("----&gt;"+threadContext.getUserId());</comment>
		<decl_stmt><decl><type><name>ThreadContext</name></type> <name>threadContext</name> <init>= <expr><call><name><name>ThreadContext</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>threadContext</name><operator>.</operator><name>addCommand</name></name><argument_list>(<argument><expr><name>command</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="line">//CommandContext.ctx.addCommand(command);</comment>
	}</block></function>
	<comment type="line">//reset the project</comment>
	<class><specifier>protected</specifier> <specifier>static</specifier> class <name>Reset</name> <super><extends>extends <name>ProjectCommand</name></extends></super>
	<block>{
		<decl_stmt><decl><specifier>private</specifier> <type><name>String</name></type> <name>projectID</name></decl>;</decl_stmt>
		<constructor><specifier>public</specifier> <name>Reset</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>projectID</name></decl></parameter>)</parameter_list>
		<block>{
			<expr_stmt><expr><call><name>super</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>this</name><operator>.</operator><name>projectID</name></name> <operator>=</operator> <name>projectID</name></expr>;</expr_stmt>
		}</block></constructor>

		<function><specifier>public</specifier> <type><name>void</name></type> <name>execute</name><parameter_list>(<parameter><decl><type><name>Project</name></type> <name>project</name></decl></parameter>)</parameter_list>
		<block>{
			<expr_stmt><expr><call><name><name>ProjectCommand</name><operator>.</operator><name>clear</name></name><argument_list>(<argument><expr><name>projectID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>ProjectCommand</name><operator>.</operator><name>construct</name></name><argument_list>(<argument><expr><name>projectID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		}</block></function>
	}</block></class>
	<comment type="line">//reset the project</comment>
	<class><specifier>protected</specifier> <specifier>static</specifier> class <name>Clear</name> <super><extends>extends <name>ProjectCommand</name></extends></super>
	<block>{
		<decl_stmt><decl><specifier>private</specifier> <type><name>String</name></type> <name>projectID</name></decl>;</decl_stmt>
		<constructor><specifier>public</specifier> <name>Clear</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>projectID</name></decl></parameter>)</parameter_list>
		<block>{
			<expr_stmt><expr><call><name>super</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>this</name><operator>.</operator><name>projectID</name></name> <operator>=</operator> <name>projectID</name></expr>;</expr_stmt>
		}</block></constructor>

		<function><specifier>public</specifier> <type><name>void</name></type> <name>execute</name><parameter_list>(<parameter><decl><type><name>Project</name></type> <name>project</name></decl></parameter>)</parameter_list>
		<block>{
			<expr_stmt><expr><call><name><name>Project</name><operator>.</operator><name>Clear</name></name><argument_list>(<argument><expr><name>projectID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></function>
	}</block></class>
	<comment type="line">//reset the project</comment>
	<class><specifier>protected</specifier> <specifier>static</specifier> class <name>Construct</name> <super><extends>extends <name>ProjectCommand</name></extends></super>
	<block>{
		<decl_stmt><decl><specifier>private</specifier> <type><name>String</name></type> <name>projectID</name></decl>;</decl_stmt>
		<constructor><specifier>public</specifier> <name>Construct</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>projectID</name></decl></parameter>)</parameter_list>
		<block>{
			<expr_stmt><expr><call><name>super</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>this</name><operator>.</operator><name>projectID</name></name> <operator>=</operator> <name>projectID</name></expr>;</expr_stmt>
		}</block></constructor>

		<function><specifier>public</specifier> <type><name>void</name></type> <name>execute</name><parameter_list>(<parameter><decl><type><name>Project</name></type> <name>project</name></decl></parameter>)</parameter_list>
		<block>{
			<expr_stmt><expr><call><name><name>Project</name><operator>.</operator><name>Construct</name></name><argument_list>(<argument><expr><name>projectID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></function>
	}</block></class>

	<comment type="line">// enable the reviews</comment>
	<class><specifier>protected</specifier> <specifier>static</specifier> class <name>EnableReviews</name> <super><extends>extends <name>ProjectCommand</name></extends></super>
	<block>{
		<decl_stmt><decl><specifier>private</specifier> <type><name>boolean</name></type> <name>reviewsEnabled</name></decl>;</decl_stmt>

		<constructor><specifier>public</specifier> <name>EnableReviews</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>reviewsEnabled</name></decl></parameter>)</parameter_list>
		<block>{
			<expr_stmt><expr><call><name>super</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>this</name><operator>.</operator><name>reviewsEnabled</name></name> <operator>=</operator> <name>reviewsEnabled</name></expr>;</expr_stmt>
		}</block></constructor>

		<function><specifier>public</specifier> <type><name>void</name></type> <name>execute</name><parameter_list>(<parameter><decl><type><name>Project</name></type> <name>project</name></decl></parameter>)</parameter_list>
		<block>{
			<expr_stmt><expr><call><name><name>project</name><operator>.</operator><name>enableReviews</name></name><argument_list>(<argument><expr><name>reviewsEnabled</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></function>
	}</block></class>

	<comment type="line">// enable the reviews</comment>
	<class><specifier>protected</specifier> <specifier>static</specifier> class <name>EnableTutorials</name> <super><extends>extends <name>ProjectCommand</name></extends></super>
	<block>{
		<decl_stmt><decl><specifier>private</specifier> <type><name>boolean</name></type> <name>tutorialsEnabled</name></decl>;</decl_stmt>

		<constructor><specifier>public</specifier> <name>EnableTutorials</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>tutorialsEnabled</name></decl></parameter>)</parameter_list>
		<block>{
			<expr_stmt><expr><call><name>super</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>this</name><operator>.</operator><name>tutorialsEnabled</name></name> <operator>=</operator> <name>tutorialsEnabled</name></expr>;</expr_stmt>
		}</block></constructor>

		<function><specifier>public</specifier> <type><name>void</name></type> <name>execute</name><parameter_list>(<parameter><decl><type><name>Project</name></type> <name>project</name></decl></parameter>)</parameter_list>
		<block>{
			<expr_stmt><expr><call><name><name>project</name><operator>.</operator><name>enableTutorials</name></name><argument_list>(<argument><expr><name>tutorialsEnabled</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></function>
	}</block></class>

	<comment type="line">// queue a microtask in the project</comment>
	<class><specifier>protected</specifier> <specifier>static</specifier> class <name>QueueMicrotask</name> <super><extends>extends <name>ProjectCommand</name></extends></super>
	<block>{
		<decl_stmt><decl><specifier>private</specifier> <type><name><name>Key</name><argument_list type="generic">&lt;<argument><name>Microtask</name></argument>&gt;</argument_list></name></type> <name>microtaskKey</name></decl>;</decl_stmt>
		<decl_stmt><decl><specifier>private</specifier> <type><name>String</name></type> <name>excludedWorkerID</name></decl>;</decl_stmt>

		<constructor><specifier>public</specifier> <name>QueueMicrotask</name><parameter_list>(<parameter><decl><type><name><name>Key</name><argument_list type="generic">&lt;<argument><name>Microtask</name></argument>&gt;</argument_list></name></type> <name>microtaskKey</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>excludedWorkerID</name></decl></parameter>)</parameter_list>
		<block>{
			<expr_stmt><expr><call><name>super</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>this</name><operator>.</operator><name>microtaskKey</name></name> <operator>=</operator> <name>microtaskKey</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>this</name><operator>.</operator><name>excludedWorkerID</name></name> <operator>=</operator> <name>excludedWorkerID</name></expr>;</expr_stmt>
		}</block></constructor>

		<function><specifier>public</specifier> <type><name>void</name></type> <name>execute</name><parameter_list>(<parameter><decl><type><name>Project</name></type> <name>project</name></decl></parameter>)</parameter_list>
		<block>{
			<expr_stmt><expr><call><name><name>project</name><operator>.</operator><name>queueMicrotask</name></name><argument_list>(<argument><expr><name>microtaskKey</name></expr></argument>, <argument><expr><name>excludedWorkerID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></function>
	}</block></class>
	<comment type="line">// queue a review microtask in the project</comment>
	<class><specifier>protected</specifier> <specifier>static</specifier> class <name>QueueReviewMicrotask</name> <super><extends>extends <name>ProjectCommand</name></extends></super>
	<block>{
		<decl_stmt><decl><specifier>private</specifier> <type><name><name>Key</name><argument_list type="generic">&lt;<argument><name>Microtask</name></argument>&gt;</argument_list></name></type> <name>microtaskKey</name></decl>;</decl_stmt>
		<decl_stmt><decl><specifier>private</specifier> <type><name>String</name></type> <name>excludedWorkerID</name></decl>;</decl_stmt>

		<constructor><specifier>public</specifier> <name>QueueReviewMicrotask</name><parameter_list>( <parameter><decl><type><name><name>Key</name><argument_list type="generic">&lt;<argument><name>Microtask</name></argument>&gt;</argument_list></name></type> <name>microtaskKey</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>excludedWorkerID</name></decl></parameter>)</parameter_list>
		<block>{
			<expr_stmt><expr><call><name>super</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>this</name><operator>.</operator><name>microtaskKey</name></name> <operator>=</operator> <name>microtaskKey</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>this</name><operator>.</operator><name>excludedWorkerID</name></name> <operator>=</operator> <name>excludedWorkerID</name></expr>;</expr_stmt>
		}</block></constructor>

		<function><specifier>public</specifier> <type><name>void</name></type> <name>execute</name><parameter_list>(<parameter><decl><type><name>Project</name></type> <name>project</name></decl></parameter>)</parameter_list>
		<block>{
			<expr_stmt><expr><call><name><name>project</name><operator>.</operator><name>queueReviewMicrotask</name></name><argument_list>(<argument><expr><name>microtaskKey</name></expr></argument>, <argument><expr><name>excludedWorkerID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></function>
	}</block></class>

	<comment type="line">// queue a challenge review microtask in the project</comment>
	<class><specifier>protected</specifier> <specifier>static</specifier> class <name>QueueChallengeReviewMicrotask</name> <super><extends>extends <name>ProjectCommand</name></extends></super>
	<block>{
		<decl_stmt><decl><specifier>private</specifier> <type><name><name>Key</name><argument_list type="generic">&lt;<argument><name>Microtask</name></argument>&gt;</argument_list></name></type> <name>microtaskKey</name></decl>;</decl_stmt>
		<decl_stmt><decl><specifier>private</specifier> <type><name>String</name></type> <name>firstExcludedWorkerID</name></decl>;</decl_stmt>
		<decl_stmt><decl><specifier>private</specifier> <type><name>String</name></type> <name>secondExcludedWorkerID</name></decl>;</decl_stmt>


		<constructor><specifier>public</specifier> <name>QueueChallengeReviewMicrotask</name><parameter_list>( <parameter><decl><type><name><name>Key</name><argument_list type="generic">&lt;<argument><name>Microtask</name></argument>&gt;</argument_list></name></type> <name>microtaskKey</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>firstExcludedWorkerID</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>secondExcludedWorkerID</name></decl></parameter>)</parameter_list>
		<block>{
			<expr_stmt><expr><call><name>super</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>this</name><operator>.</operator><name>microtaskKey</name></name> <operator>=</operator> <name>microtaskKey</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>this</name><operator>.</operator><name>firstExcludedWorkerID</name></name> <operator>=</operator> <name>firstExcludedWorkerID</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>this</name><operator>.</operator><name>secondExcludedWorkerID</name></name> <operator>=</operator> <name>secondExcludedWorkerID</name></expr>;</expr_stmt>

		}</block></constructor>

		<function><specifier>public</specifier> <type><name>void</name></type> <name>execute</name><parameter_list>(<parameter><decl><type><name>Project</name></type> <name>project</name></decl></parameter>)</parameter_list>
		<block>{
			<expr_stmt><expr><call><name><name>project</name><operator>.</operator><name>queueChellengeReviewMicrotask</name></name><argument_list>(<argument><expr><name>microtaskKey</name></expr></argument>, <argument><expr><name>firstExcludedWorkerID</name></expr></argument>, <argument><expr><name>secondExcludedWorkerID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></function>
	}</block></class>

	<comment type="line">// skip a microtask</comment>
	<class><specifier>protected</specifier> <specifier>static</specifier> class <name>SkipMicrotask</name> <super><extends>extends <name>ProjectCommand</name></extends></super>
	<block>{
		<decl_stmt><decl><specifier>private</specifier> <type><name><name>Key</name><argument_list type="generic">&lt;<argument><name>Microtask</name></argument>&gt;</argument_list></name></type> <name>microtaskKey</name></decl>;</decl_stmt>
		<decl_stmt><decl><specifier>private</specifier> <type><name>String</name></type> <name>workerID</name></decl>;</decl_stmt>
		<decl_stmt><decl><specifier>private</specifier> <type><name>Boolean</name></type> <name>disablePoint</name></decl>;</decl_stmt>

		<constructor><specifier>public</specifier> <name>SkipMicrotask</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>microtaskKey</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>workerID</name></decl></parameter>, <parameter><decl><type><name>Boolean</name></type> <name>disablePoint</name></decl></parameter>)</parameter_list>
		<block>{
			<expr_stmt><expr><call><name>super</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>this</name><operator>.</operator><name>microtaskKey</name></name> <operator>=</operator> <call><name><name>Microtask</name><operator>.</operator><name>stringToKey</name></name><argument_list>(<argument><expr><name>microtaskKey</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
			<expr_stmt><expr><name><name>this</name><operator>.</operator><name>workerID</name></name> <operator>=</operator> <name>workerID</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>this</name><operator>.</operator><name>disablePoint</name></name> <operator>=</operator> <name>disablePoint</name></expr>;</expr_stmt>
		}</block></constructor>

		<function><specifier>public</specifier> <type><name>void</name></type> <name>execute</name><parameter_list>(<parameter><decl><type><name>Project</name></type> <name>project</name></decl></parameter>)</parameter_list>
		<block>{
			<expr_stmt><expr><call><name><name>project</name><operator>.</operator><name>skipMicrotask</name></name><argument_list>(<argument><expr><name>microtaskKey</name></expr></argument>, <argument><expr><name>workerID</name></expr></argument>, <argument><expr><name>disablePoint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></function>
	}</block></class>

	<comment type="line">// submit a microtask</comment>
	<class><specifier>protected</specifier> <specifier>static</specifier> class <name>SubmitMicrotask</name> <super><extends>extends <name>ProjectCommand</name></extends></super>
	<block>{
		<decl_stmt><decl><specifier>private</specifier> <type><name><name>Key</name><argument_list type="generic">&lt;<argument><name>Microtask</name></argument>&gt;</argument_list></name></type> <name>microtaskKey</name></decl>;</decl_stmt>
		<decl_stmt><decl><specifier>private</specifier> <type><name>String</name></type> <name>jsonDTOData</name></decl>;</decl_stmt>
		<decl_stmt><decl><specifier>private</specifier> <type><name>String</name></type> <name>workerID</name></decl>;</decl_stmt>

		<constructor><specifier>public</specifier> <name>SubmitMicrotask</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>microtaskKey</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>jsonDTOData</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>workerID</name></decl></parameter>)</parameter_list>
		<block>{
			<expr_stmt><expr><call><name>super</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>this</name><operator>.</operator><name>microtaskKey</name></name> <operator>=</operator> <call><name><name>Microtask</name><operator>.</operator><name>stringToKey</name></name><argument_list>( <argument><expr><name>microtaskKey</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>this</name><operator>.</operator><name>jsonDTOData</name></name> <operator>=</operator> <name>jsonDTOData</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>this</name><operator>.</operator><name>workerID</name></name> <operator>=</operator> <name>workerID</name></expr>;</expr_stmt>
		}</block></constructor>

		<function><specifier>public</specifier> <type><name>void</name></type> <name>execute</name><parameter_list>(<parameter><decl><type><name>Project</name></type> <name>project</name></decl></parameter>)</parameter_list>
		<block>{
			<expr_stmt><expr><call><name><name>project</name><operator>.</operator><name>submitMicrotask</name></name><argument_list>(<argument><expr><name>microtaskKey</name></expr></argument>, <argument><expr><name>jsonDTOData</name></expr></argument>, <argument><expr><name>workerID</name></expr></argument>, <argument><expr><name>project</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></function>
	}</block></class>

	<comment type="line">// logout a worker</comment>
	<class><specifier>protected</specifier> <specifier>static</specifier> class <name>LogoutWorker</name> <super><extends>extends <name>ProjectCommand</name></extends></super>
	<block>{
		<decl_stmt><decl><specifier>private</specifier> <type><name>String</name></type> <name>workerID</name></decl>;</decl_stmt>

		<constructor><specifier>public</specifier> <name>LogoutWorker</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>workerID</name></decl></parameter>)</parameter_list>
		<block>{
			<expr_stmt><expr><call><name>super</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>this</name><operator>.</operator><name>workerID</name></name> <operator>=</operator> <name>workerID</name></expr>;</expr_stmt>
		}</block></constructor>

		<function><specifier>public</specifier> <type><name>void</name></type> <name>execute</name><parameter_list>(<parameter><decl><type><name>Project</name></type> <name>project</name></decl></parameter>)</parameter_list>
		<block>{
			<expr_stmt><expr><call><name><name>project</name><operator>.</operator><name>logoutWorker</name></name><argument_list>(<argument><expr><name>workerID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></function>
	}</block></class>

	<comment type="line">// logout all inactive workers</comment>
	<class><specifier>protected</specifier> <specifier>static</specifier> class <name>LogoutInactiveWorkers</name> <super><extends>extends <name>ProjectCommand</name></extends></super>
	<block>{
		<constructor><specifier>public</specifier> <name>LogoutInactiveWorkers</name><parameter_list>()</parameter_list>
		<block>{
			<expr_stmt><expr><call><name>super</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		}</block></constructor>

		<function><specifier>public</specifier> <type><name>void</name></type> <name>execute</name><parameter_list>(<parameter><decl><type><name>Project</name></type> <name>project</name></decl></parameter>)</parameter_list>
		<block>{
			<expr_stmt><expr><call><name><name>project</name><operator>.</operator><name>logoutInactiveWorkers</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		}</block></function>
	}</block></class>

	<comment type="line">// logout all inactive workers</comment>
	<class><specifier>protected</specifier> <specifier>static</specifier> class <name>NotifyLoggedInWorkers</name> <super><extends>extends <name>ProjectCommand</name></extends></super>
	<block>{
		<decl_stmt><decl><type><name>NotificationInFirebase</name></type> <name>notification</name></decl>;</decl_stmt>
		<constructor><specifier>public</specifier> <name>NotifyLoggedInWorkers</name><parameter_list>(<parameter><decl><type><name>NotificationInFirebase</name></type> <name>notification</name></decl></parameter>)</parameter_list>
		<block>{
			<expr_stmt><expr><call><name>super</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>this</name><operator>.</operator><name>notification</name></name> <operator>=</operator> <name>notification</name></expr>;</expr_stmt>
		}</block></constructor>

		<function><specifier>public</specifier> <type><name>void</name></type> <name>execute</name><parameter_list>(<parameter><decl><type><name>Project</name></type> <name>project</name></decl></parameter>)</parameter_list>
		<block>{
			<decl_stmt><decl><type><name><name>HashSet</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>workersId</name> <init>= <expr><call><name><name>project</name><operator>.</operator><name>getLoggedInWorkers</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
			<for>for<control>( <init><decl><type><name>String</name></type> <name>workerId</name><range>:<expr><name>workersId</name></expr></range></decl></init> )</control><block>{
				<expr_stmt><expr><call><name><name>FirebaseService</name><operator>.</operator><name>writeWorkerNotification</name></name><argument_list>(<argument><expr><name>notification</name></expr></argument>, <argument><expr><name>workerId</name></expr></argument>, <argument><expr><call><name><name>project</name><operator>.</operator><name>getID</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></for>
		}</block></function>
	}</block></class>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="CrowdCode-com/crowdcoding/commands/FunctionCommand.java" hash="df0f1eb462e67ff490bb8c30d10505b0f174511e"><package>package <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>commands</name></name>;</package>


<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>dto</name><operator>.</operator><name>ajax</name><operator>.</operator><name>microtask</name><operator>.</operator><name>submission</name><operator>.</operator><name>FunctionDTO</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>dto</name><operator>.</operator><name>ajax</name><operator>.</operator><name>microtask</name><operator>.</operator><name>submission</name><operator>.</operator><name>FunctionParameterDTO</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>dto</name><operator>.</operator><name>ajax</name><operator>.</operator><name>microtask</name><operator>.</operator><name>submission</name><operator>.</operator><name>TestDTO</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>entities</name><operator>.</operator><name>artifacts</name><operator>.</operator><name>Function</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>servlets</name><operator>.</operator><name>ThreadContext</name></name>;</import>

<class><specifier>public</specifier> <specifier>abstract</specifier> class <name>FunctionCommand</name> <super><extends>extends <name>Command</name></extends></super> <block>{
	<decl_stmt><decl><specifier>protected</specifier> <type><name>long</name></type> <name>functionId</name></decl>;</decl_stmt>

	<function><specifier>public</specifier> <specifier>static</specifier> <type><name>FunctionCommand</name></type> <name>addClientRequestsArtifacts</name><parameter_list>(<parameter><decl><type><name>FunctionDTO</name></type> <name>functionDTO</name></decl></parameter>)</parameter_list> <block>{
		<return>return <expr><operator>new</operator> <call><name>AddClientRequestsArtifacts</name><argument_list>(<argument><expr><name>functionDTO</name></expr></argument>)</argument_list></call></expr>;</return>
	}</block></function>

	<function><specifier>public</specifier> <specifier>static</specifier> <type><name>FunctionCommand</name></type> <name>create</name><parameter_list>(<parameter><decl><type><name>FunctionDTO</name></type> <name>functionDTO</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>isApiArtifact</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>isReadOnly</name></decl></parameter>)</parameter_list> <block>{
		<return>return <expr><operator>new</operator> <call><name>Create</name><argument_list>(<argument><expr><name>functionDTO</name></expr></argument>, <argument><expr><name>isApiArtifact</name></expr></argument>, <argument><expr><name>isReadOnly</name></expr></argument>)</argument_list></call></expr>;</return>
	}</block></function>

	<function><specifier>public</specifier> <specifier>static</specifier> <type><name>FunctionCommand</name></type> <name>createRequestedFunction</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>requestingFunctionId</name></decl></parameter>, <parameter><decl><type><name>FunctionDTO</name></type> <name>requestedFunction</name></decl></parameter>)</parameter_list> <block>{
		<return>return <expr><operator>new</operator> <call><name>CreateRequestedFunction</name><argument_list>( <argument><expr><name>requestingFunctionId</name></expr></argument>, <argument><expr><name>requestedFunction</name></expr></argument>)</argument_list></call></expr>;</return>
	}</block></function>

	<function><specifier>public</specifier> <specifier>static</specifier> <type><name>FunctionCommand</name></type> <name>removeCaller</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>functionId</name></decl></parameter>,	<parameter><decl><type><name>long</name></type> <name>callerFunctionID</name></decl></parameter>)</parameter_list> <block>{
		<return>return <expr><operator>new</operator> <call><name>RemoveCaller</name><argument_list>(<argument><expr><name>functionId</name></expr></argument>, <argument><expr><name>callerFunctionID</name></expr></argument>)</argument_list></call></expr>;</return>
	}</block></function>

	<function><specifier>public</specifier> <specifier>static</specifier> <type><name>FunctionCommand</name></type> <name>addCaller</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>functionId</name></decl></parameter>,
			<parameter><decl><type><name>long</name></type> <name>callerFunctionID</name></decl></parameter>)</parameter_list> <block>{
		<return>return <expr><operator>new</operator> <call><name>AddCaller</name><argument_list>(<argument><expr><name>functionId</name></expr></argument>, <argument><expr><name>callerFunctionID</name></expr></argument>)</argument_list></call></expr>;</return>
	}</block></function>

	<function><specifier>public</specifier> <specifier>static</specifier> <type><name>FunctionCommand</name></type> <name>addCallee</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>functionId</name></decl></parameter>,
			<parameter><decl><type><name>long</name></type> <name>calleeFunctionId</name></decl></parameter>)</parameter_list> <block>{
		<return>return <expr><operator>new</operator> <call><name>AddCaller</name><argument_list>(<argument><expr><name>functionId</name></expr></argument>, <argument><expr><name>calleeFunctionId</name></expr></argument>)</argument_list></call></expr>;</return>
	}</block></function>

	<function><specifier>public</specifier> <specifier>static</specifier> <type><name>FunctionCommand</name></type> <name>runTests</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>functionId</name></decl></parameter>)</parameter_list> <block>{
		<return>return <expr><operator>new</operator> <call><name>RunTests</name><argument_list>(<argument><expr><name>functionId</name></expr></argument>)</argument_list></call></expr>;</return>
	}</block></function>

	<function><specifier>public</specifier> <specifier>static</specifier> <type><name>FunctionCommand</name></type> <name>submittedTestResult</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>functionId</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>jsonDTO</name></decl></parameter>)</parameter_list><block>{
		<return>return <expr><operator>new</operator> <call><name>SubmittedTestResult</name><argument_list>(<argument><expr><name>functionId</name></expr></argument>, <argument><expr><name>jsonDTO</name></expr></argument>)</argument_list></call></expr>;</return>
	}</block></function>


	<function><specifier>public</specifier> <specifier>static</specifier> <type><name>FunctionCommand</name></type> <name>calleeChangedInterface</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>functionId</name></decl></parameter>,
			<parameter><decl><type><name>long</name></type> <name>calleeId</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>oldCalleeVersion</name></decl></parameter>)</parameter_list> <block>{
		<return>return <expr><operator>new</operator> <call><name>CalleeChangedInterface</name><argument_list>(<argument><expr><name>functionId</name></expr></argument>, <argument><expr><name>calleeId</name></expr></argument>,
				<argument><expr><name>oldCalleeVersion</name></expr></argument>)</argument_list></call></expr>;</return>
	}</block></function>

	<function><specifier>public</specifier> <specifier>static</specifier> <type><name>FunctionCommand</name></type> <name>calleeBecomeDeactivated</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>functionId</name></decl></parameter>,
			<parameter><decl><type><name>long</name></type> <name>calleeId</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>disputeText</name></decl></parameter>)</parameter_list> <block>{
		<return>return <expr><operator>new</operator> <call><name>CalleeBecomeDeactivated</name><argument_list>(<argument><expr><name>functionId</name></expr></argument>, <argument><expr><name>calleeId</name></expr></argument>, <argument><expr><name>disputeText</name></expr></argument>)</argument_list></call></expr>;</return>
	}</block></function>

	<function><specifier>public</specifier> <specifier>static</specifier> <type><name>FunctionCommand</name></type> <name>addTest</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>functionId</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>testId</name></decl></parameter>)</parameter_list> <block>{
		<return>return <expr><operator>new</operator> <call><name>AddTest</name><argument_list>(<argument><expr><name>functionId</name></expr></argument>, <argument><expr><name>testId</name></expr></argument>)</argument_list></call></expr>;</return>
	}</block></function>

	<function><specifier>public</specifier> <specifier>static</specifier> <type><name>FunctionCommand</name></type> <name>incrementTestSuite</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>functionId</name></decl></parameter>)</parameter_list> <block>{
		<return>return <expr><operator>new</operator> <call><name>IncrementTestSuite</name><argument_list>(<argument><expr><name>functionId</name></expr></argument>)</argument_list></call></expr>;</return>
	}</block></function>


	<function><specifier>public</specifier> <specifier>static</specifier> <type><name>FunctionCommand</name></type> <name>lookForWork</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>functionId</name></decl></parameter>)</parameter_list> <block>{
		<return>return <expr><operator>new</operator> <call><name>LookForWork</name><argument_list>(<argument><expr><name>functionId</name></expr></argument>)</argument_list></call></expr>;</return>
	}</block></function>

	<constructor><specifier>private</specifier> <name>FunctionCommand</name><parameter_list>(<parameter><decl><type><name>Long</name></type> <name>functionId</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>functionId</name></name> <operator>=</operator> <name>functionId</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>queueCommand</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></constructor>

	<comment type="line">// All constructors for FunctionCommand MUST call queueCommand by calling</comment>
	<comment type="line">// the super constructor</comment>
	<function><specifier>private</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>queueCommand</name><parameter_list>(<parameter><decl><type><name>Command</name></type> <name>command</name></decl></parameter>)</parameter_list> <block>{
		<decl_stmt><decl><type><name>ThreadContext</name></type> <name>threadContext</name> <init>= <expr><call><name><name>ThreadContext</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>threadContext</name><operator>.</operator><name>addCommand</name></name><argument_list>(<argument><expr><name>command</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>


	<function><specifier>public</specifier> <type><name>void</name></type> <name>execute</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>String</name></type> <name>projectId</name></decl></parameter>)</parameter_list> <block>{
    	<if>if <condition>(<expr><name>functionId</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
			<decl_stmt><decl><type><name>Function</name></type> <name>function</name> <init>= <expr><call><name><name>Function</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><name>functionId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<if>if <condition>(<expr><name>function</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then>
				<block type="pseudo"><expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name>
						<operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"Error Cannot execute FunctionCommand. Could not find the function for FunctionID "</literal>
								<operator>+</operator> <name>functionId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
			<else>else <block>{
				<expr_stmt><expr><call><name>execute</name><argument_list>(<argument><expr><name>function</name></expr></argument>, <argument><expr><name>projectId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></else></if>
		}</block></then> <else>else
			<block type="pseudo"><expr_stmt><expr><call><name>execute</name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>projectId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>
	}</block></function>

	<function_decl><specifier>public</specifier> <specifier>abstract</specifier> <type><name>void</name></type> <name>execute</name><parameter_list>(<parameter><decl><type><name>Function</name></type> <name>function</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>projectId</name></decl></parameter>)</parameter_list>;</function_decl>

	<class><specifier>protected</specifier> <specifier>static</specifier> class <name>AddClientRequestsArtifacts</name> <super><extends>extends <name>FunctionCommand</name></extends></super> <block>{
		<decl_stmt><decl><specifier>private</specifier> <type><name>FunctionDTO</name></type> <name>functionDTO</name></decl>;</decl_stmt>

		<constructor><specifier>public</specifier> <name>AddClientRequestsArtifacts</name><parameter_list>(<parameter><decl><type><name>FunctionDTO</name></type> <name>functionDTO</name></decl></parameter>)</parameter_list> <block>{
			<expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><literal type="number">0L</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>this</name><operator>.</operator><name>functionDTO</name></name> <operator>=</operator> <name>functionDTO</name></expr>;</expr_stmt>
		}</block></constructor>

		<function><specifier>public</specifier> <type><name>void</name></type> <name>execute</name><parameter_list>(<parameter><decl><type><name>Function</name></type> <name>function</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>projectId</name></decl></parameter>)</parameter_list> <block>{

			<decl_stmt><decl><type><name>Function</name></type> <name>funct</name> <init>= <expr><operator>new</operator> <call><name>Function</name><argument_list>(
										<argument><expr><name>functionDTO</name></expr></argument>,
										<argument><expr><literal type="boolean">true</literal></expr></argument>,
										<argument><expr><literal type="boolean">true</literal></expr></argument>,
										<argument><expr><name>projectId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

			<for>for<control>( <init><decl><type><name>TestDTO</name></type> <name>test</name> <range>: <expr><name><name>functionDTO</name><operator>.</operator><name>tests</name></name></expr></range></decl></init> )</control><block>{
				<expr_stmt><expr><call><name><name>TestCommand</name><operator>.</operator><name>create</name></name><argument_list>(<argument><expr><name>test</name></expr></argument>, <argument><expr><call><name><name>funct</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></for>
		}</block></function>
	}</block></class>

	<class><specifier>protected</specifier> <specifier>static</specifier> class <name>Create</name> <super><extends>extends <name>FunctionCommand</name></extends></super> <block>{
		<decl_stmt><decl><specifier>private</specifier> <type><name>FunctionDTO</name></type> <name>functionDTO</name></decl>;</decl_stmt>
		<decl_stmt><decl><specifier>private</specifier> <type><name>boolean</name></type> <name>isReadOnly</name></decl>;</decl_stmt>
		<decl_stmt><decl><specifier>private</specifier> <type><name>boolean</name></type> <name>isApiArtifact</name></decl>;</decl_stmt>

		<constructor><specifier>public</specifier> <name>Create</name><parameter_list>(<parameter><decl><type><name>FunctionDTO</name></type> <name>functionDTO</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>isApiArtifact</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>isReadOnly</name></decl></parameter>)</parameter_list> <block>{
			<expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><literal type="number">0L</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			
			<expr_stmt><expr><name><name>this</name><operator>.</operator><name>functionDTO</name></name>   <operator>=</operator> <name>functionDTO</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>this</name><operator>.</operator><name>isApiArtifact</name></name> <operator>=</operator> <name>isApiArtifact</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>this</name><operator>.</operator><name>isReadOnly</name></name>	   <operator>=</operator> <name>isReadOnly</name></expr>;</expr_stmt>
		}</block></constructor>

		<function><specifier>public</specifier> <type><name>void</name></type> <name>execute</name><parameter_list>(<parameter><decl><type><name>Function</name></type> <name>function</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>projectId</name></decl></parameter>)</parameter_list> <block>{
			<expr_stmt><expr><operator>new</operator> <call><name>Function</name><argument_list>(<argument><expr><name>functionDTO</name></expr></argument>, <argument><expr><name>isApiArtifact</name></expr></argument>, <argument><expr><name>isReadOnly</name></expr></argument>, <argument><expr><name>projectId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></function>
	}</block></class>

	<class><specifier>protected</specifier> <specifier>static</specifier> class <name>CreateRequestedFunction</name> <super><extends>extends <name>FunctionCommand</name></extends></super> <block>{

		<decl_stmt><decl><specifier>private</specifier> <type><name>FunctionDTO</name></type> <name>requestedFunctionDTO</name></decl>;</decl_stmt>
		<decl_stmt><decl><specifier>private</specifier> <type><name>long</name></type> <name>requestingFunctionId</name></decl>;</decl_stmt>

		<constructor><specifier>public</specifier> <name>CreateRequestedFunction</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>requestingFunctionId</name></decl></parameter>, <parameter><decl><type><name>FunctionDTO</name></type> <name>requestedFunctionDTO</name></decl></parameter>)</parameter_list> <block>{
			<expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><literal type="number">0L</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><name><name>this</name><operator>.</operator><name>requestedFunctionDTO</name></name> <operator>=</operator> <name>requestedFunctionDTO</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>this</name><operator>.</operator><name>requestingFunctionId</name></name> <operator>=</operator> <name>requestingFunctionId</name></expr>;</expr_stmt>
		}</block></constructor>

		<function><specifier>public</specifier> <type><name>void</name></type> <name>execute</name><parameter_list>(<parameter><decl><type><name>Function</name></type> <name>funct</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>projectId</name></decl></parameter>)</parameter_list> <block>{

			<expr_stmt><expr><name><name>requestedFunctionDTO</name><operator>.</operator><name>code</name></name> <operator>=</operator> <literal type="string">"{\n //#Mark this function as implemented by removing this line. \n return {};\n}"</literal></expr>;</expr_stmt>
			<decl_stmt><decl><type><name>Function</name></type> <name>function</name> <init>= <expr><operator>new</operator> <call><name>Function</name><argument_list>(<argument><expr><name>requestedFunctionDTO</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><name>projectId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

			<expr_stmt><expr><call><name><name>function</name><operator>.</operator><name>addCaller</name></name><argument_list>(<argument><expr><name>requestingFunctionId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><call><name><name>FunctionCommand</name><operator>.</operator><name>addCallee</name></name><argument_list>(<argument><expr><name>requestingFunctionId</name></expr></argument>, <argument><expr><call><name><name>function</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			
			<for>for<control>( <init><decl><type><name>TestDTO</name></type> <name>test</name> <range>: <expr><name><name>requestedFunctionDTO</name><operator>.</operator><name>tests</name></name></expr></range></decl></init>)</control><block>{
				<expr_stmt><expr><call><name><name>TestCommand</name><operator>.</operator><name>create</name></name><argument_list>(<argument><expr><name>test</name></expr></argument>, <argument><expr><call><name><name>function</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></for>
		}</block></function>
	}</block></class>


	<class><specifier>protected</specifier> <specifier>static</specifier> class <name>RemoveCaller</name> <super><extends>extends <name>FunctionCommand</name></extends></super> <block>{
		<decl_stmt><decl><specifier>private</specifier> <type><name>long</name></type> <name>callerFunctionID</name></decl>;</decl_stmt>

		<constructor><specifier>public</specifier> <name>RemoveCaller</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>functionId</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>callerFunctionID</name></decl></parameter>)</parameter_list> <block>{
			<expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>functionId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>this</name><operator>.</operator><name>callerFunctionID</name></name> <operator>=</operator> <name>callerFunctionID</name></expr>;</expr_stmt>
		}</block></constructor>

		<function><specifier>public</specifier> <type><name>void</name></type> <name>execute</name><parameter_list>(<parameter><decl><type><name>Function</name></type> <name>function</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>projectId</name></decl></parameter>)</parameter_list> <block>{
				<expr_stmt><expr><call><name><name>function</name><operator>.</operator><name>removeCaller</name></name><argument_list>(<argument><expr><name>callerFunctionID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></function>
	}</block></class>

	<class><specifier>protected</specifier> <specifier>static</specifier> class <name>AddCaller</name> <super><extends>extends <name>FunctionCommand</name></extends></super> <block>{
		<decl_stmt><decl><specifier>private</specifier> <type><name>long</name></type> <name>callerFunctionID</name></decl>;</decl_stmt>

		<constructor><specifier>public</specifier> <name>AddCaller</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>functionId</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>callerFunctionID</name></decl></parameter>)</parameter_list> <block>{
			<expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>functionId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>this</name><operator>.</operator><name>callerFunctionID</name></name> <operator>=</operator> <name>callerFunctionID</name></expr>;</expr_stmt>
		}</block></constructor>

		<function><specifier>public</specifier> <type><name>void</name></type> <name>execute</name><parameter_list>(<parameter><decl><type><name>Function</name></type> <name>function</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>projectId</name></decl></parameter>)</parameter_list>
		<block>{
				<expr_stmt><expr><call><name><name>function</name><operator>.</operator><name>addCaller</name></name><argument_list>(<argument><expr><name>callerFunctionID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></function>
	}</block></class>

	<class><specifier>protected</specifier> <specifier>static</specifier> class <name>AddCallee</name> <super><extends>extends <name>FunctionCommand</name></extends></super> <block>{
		<decl_stmt><decl><specifier>private</specifier> <type><name>long</name></type> <name>calleeFunctionId</name></decl>;</decl_stmt>

		<constructor><specifier>public</specifier> <name>AddCallee</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>functionId</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>calleeFunctionId</name></decl></parameter>)</parameter_list> <block>{
			<expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>functionId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>this</name><operator>.</operator><name>calleeFunctionId</name></name> <operator>=</operator> <name>calleeFunctionId</name></expr>;</expr_stmt>
		}</block></constructor>

		<function><specifier>public</specifier> <type><name>void</name></type> <name>execute</name><parameter_list>(<parameter><decl><type><name>Function</name></type> <name>function</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>projectId</name></decl></parameter>)</parameter_list>
		<block>{
				<expr_stmt><expr><call><name><name>function</name><operator>.</operator><name>addCallee</name></name><argument_list>(<argument><expr><name>calleeFunctionId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></function>
	}</block></class>

	<class><specifier>protected</specifier> <specifier>static</specifier> class <name>CalleeChangedInterface</name> <super><extends>extends <name>FunctionCommand</name></extends></super> <block>{
		<decl_stmt><decl><specifier>private</specifier> <type><name>long</name></type> <name>calleeId</name></decl>;</decl_stmt>
		<decl_stmt><decl><specifier>private</specifier> <type><name>int</name></type> <name>oldCalleeVersion</name></decl>;</decl_stmt>

		<constructor><specifier>public</specifier> <name>CalleeChangedInterface</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>functionId</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>calleeId</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>oldCalleeVersion</name></decl></parameter>)</parameter_list> <block>{
			<expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>functionId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>this</name><operator>.</operator><name>calleeId</name></name> <operator>=</operator> <name>calleeId</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>this</name><operator>.</operator><name>oldCalleeVersion</name></name> <operator>=</operator> <name>oldCalleeVersion</name></expr>;</expr_stmt>
		}</block></constructor>

		<function><specifier>public</specifier> <type><name>void</name></type> <name>execute</name><parameter_list>(<parameter><decl><type><name>Function</name></type> <name>function</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>projectId</name></decl></parameter>)</parameter_list> <block>{
			<expr_stmt><expr><call><name><name>function</name><operator>.</operator><name>calleeChangedInterface</name></name><argument_list>(<argument><expr><name>calleeId</name></expr></argument>, <argument><expr><name>oldCalleeVersion</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></function>
	}</block></class>

	<class><specifier>protected</specifier> <specifier>static</specifier> class <name>RunTests</name> <super><extends>extends <name>FunctionCommand</name></extends></super> <block>{

		<constructor><specifier>public</specifier> <name>RunTests</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>functionId</name></decl></parameter>)</parameter_list> <block>{
			<expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>functionId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></constructor>

		<function><specifier>public</specifier> <type><name>void</name></type> <name>execute</name><parameter_list>(<parameter><decl><type><name>Function</name></type> <name>function</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>projectId</name></decl></parameter>)</parameter_list> <block>{
			<expr_stmt><expr><call><name><name>function</name><operator>.</operator><name>runTests</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		}</block></function>
	}</block></class>

	<class><specifier>protected</specifier> <specifier>static</specifier> class <name>CalleeBecomeDeactivated</name> <super><extends>extends <name>FunctionCommand</name></extends></super> <block>{
		<decl_stmt><decl><specifier>private</specifier> <type><name>long</name></type> <name>calleeId</name></decl>;</decl_stmt>
		<decl_stmt><decl><specifier>private</specifier> <type><name>String</name></type> <name>disputeText</name></decl>;</decl_stmt>

		<constructor><specifier>public</specifier> <name>CalleeBecomeDeactivated</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>functionId</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>calleeId</name></decl></parameter>,
				<parameter><decl><type><name>String</name></type> <name>disputeText</name></decl></parameter>)</parameter_list> <block>{
			<expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>functionId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>this</name><operator>.</operator><name>calleeId</name></name> <operator>=</operator> <name>calleeId</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>this</name><operator>.</operator><name>disputeText</name></name> <operator>=</operator> <name>disputeText</name></expr>;</expr_stmt>
		}</block></constructor>

		<function><specifier>public</specifier> <type><name>void</name></type> <name>execute</name><parameter_list>(<parameter><decl><type><name>Function</name></type> <name>function</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>projectId</name></decl></parameter>)</parameter_list> <block>{
			<expr_stmt><expr><call><name><name>function</name><operator>.</operator><name>calleeBecomeDeactivated</name></name><argument_list>(<argument><expr><name>calleeId</name></expr></argument>, <argument><expr><name>disputeText</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
		}</block></function>
	}</block></class>

	<class><specifier>protected</specifier> <specifier>static</specifier> class <name>SubmittedTestResult</name> <super><extends>extends <name>FunctionCommand</name></extends></super> <block>{
		<decl_stmt><decl><specifier>private</specifier> <type><name>String</name></type> <name>jsonDto</name></decl>;</decl_stmt>

		<constructor><specifier>public</specifier> <name>SubmittedTestResult</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>functionId</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>jsonDto</name></decl></parameter>)</parameter_list> <block>{
			<expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>functionId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><name><name>this</name><operator>.</operator><name>jsonDto</name></name> <operator>=</operator> <name>jsonDto</name></expr>;</expr_stmt>
		}</block></constructor>

		<function><specifier>public</specifier> <type><name>void</name></type> <name>execute</name><parameter_list>(<parameter><decl><type><name>Function</name></type> <name>function</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>projectId</name></decl></parameter>)</parameter_list> <block>{
			<expr_stmt><expr><call><name><name>function</name><operator>.</operator><name>submittedTestResult</name></name><argument_list>(<argument><expr><name>jsonDto</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></function>
	}</block></class>

	<class><specifier>protected</specifier> <specifier>static</specifier> class <name>AddTest</name> <super><extends>extends <name>FunctionCommand</name></extends></super> <block>{
		<decl_stmt><decl><specifier>private</specifier> <type><name>long</name></type> <name>testId</name></decl>;</decl_stmt>

		<constructor><specifier>public</specifier> <name>AddTest</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>functionId</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>testId</name></decl></parameter>)</parameter_list> <block>{
			<expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>functionId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>this</name><operator>.</operator><name>testId</name></name>	<operator>=</operator> <name>testId</name></expr>;</expr_stmt>

		}</block></constructor>

		<function><specifier>public</specifier> <type><name>void</name></type> <name>execute</name><parameter_list>(<parameter><decl><type><name>Function</name></type> <name>function</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>projectId</name></decl></parameter>)</parameter_list> <block>{
			<expr_stmt><expr><call><name><name>function</name><operator>.</operator><name>addTest</name></name><argument_list>(<argument><expr><name>testId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></function>
	}</block></class>

	<class><specifier>protected</specifier> <specifier>static</specifier> class <name>IncrementTestSuite</name> <super><extends>extends <name>FunctionCommand</name></extends></super> <block>{

		<constructor><specifier>public</specifier> <name>IncrementTestSuite</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>functionId</name></decl></parameter>)</parameter_list> <block>{
			<expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>functionId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		}</block></constructor>

		<function><specifier>public</specifier> <type><name>void</name></type> <name>execute</name><parameter_list>(<parameter><decl><type><name>Function</name></type> <name>function</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>projectId</name></decl></parameter>)</parameter_list> <block>{
			<expr_stmt><expr><call><name><name>function</name><operator>.</operator><name>incrementTestSuiteVersion</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		}</block></function>
	}</block></class>


	<class><specifier>protected</specifier> <specifier>static</specifier> class <name>LookForWork</name> <super><extends>extends <name>FunctionCommand</name></extends></super> <block>{

		<constructor><specifier>public</specifier> <name>LookForWork</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>functionId</name></decl></parameter>)</parameter_list> <block>{
			<expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>functionId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		}</block></constructor>

		<function><specifier>public</specifier> <type><name>void</name></type> <name>execute</name><parameter_list>(<parameter><decl><type><name>Function</name></type> <name>function</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>projectId</name></decl></parameter>)</parameter_list> <block>{
			<expr_stmt><expr><call><name><name>function</name><operator>.</operator><name>lookForWork</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		}</block></function>
	}</block></class>

}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="CrowdCode-com/crowdcoding/commands/TestCommand.java" hash="2b1c339f5fe074b0e713c3bfa2ddf47f1f4e03b1"><package>package <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>commands</name></name>;</package>

<import>import static <name><name>com</name><operator>.</operator><name>googlecode</name><operator>.</operator><name>objectify</name><operator>.</operator><name>ObjectifyService</name><operator>.</operator><name>ofy</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>dto</name><operator>.</operator><name>ajax</name><operator>.</operator><name>microtask</name><operator>.</operator><name>submission</name><operator>.</operator><name>TestDTO</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>entities</name><operator>.</operator><name>artifacts</name><operator>.</operator><name>Test</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>servlets</name><operator>.</operator><name>ThreadContext</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>googlecode</name><operator>.</operator><name>objectify</name><operator>.</operator><name>LoadResult</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>googlecode</name><operator>.</operator><name>objectify</name><operator>.</operator><name>VoidWork</name></name>;</import>

<class><specifier>public</specifier> <specifier>abstract</specifier> class <name>TestCommand</name> <super><extends>extends <name>Command</name></extends></super> <block>{
	<decl_stmt><decl><specifier>protected</specifier> <type><name>long</name></type> <name>testId</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>protected</specifier> <type><name>boolean</name></type> <name>isSimple</name></decl>;</decl_stmt>

	<function><specifier>public</specifier> <specifier>static</specifier> <type><name>TestCommand</name></type> <name>create</name><parameter_list>(<parameter><decl><type><name>TestDTO</name></type> <name>test</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>functionId</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>isApiArtifact</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>isReadOnly</name></decl></parameter> )</parameter_list> <block>{
		<return>return <expr><operator>new</operator> <call><name>Create</name><argument_list>(<argument><expr><name>test</name></expr></argument>, <argument><expr><name>functionId</name></expr></argument>, <argument><expr><name>isApiArtifact</name></expr></argument>, <argument><expr><name>isReadOnly</name></expr></argument>)</argument_list></call></expr>;</return>
	}</block></function>

	<function><specifier>public</specifier> <specifier>static</specifier> <type><name>TestCommand</name></type> <name>update</name><parameter_list>(<parameter><decl><type><name>TestDTO</name></type> <name>test</name></decl></parameter>)</parameter_list> <block>{
		<return>return <expr><operator>new</operator> <call><name>Update</name><argument_list>(<argument><expr><name>test</name></expr></argument>)</argument_list></call></expr>;</return>
	}</block></function>

	<function><specifier>public</specifier> <specifier>static</specifier> <type><name>TestCommand</name></type> <name>delete</name><parameter_list>(<parameter><decl><type><name>TestDTO</name></type> <name>test</name></decl></parameter>)</parameter_list> <block>{
		<return>return <expr><operator>new</operator> <call><name>Delete</name><argument_list>(<argument><expr><name>test</name></expr></argument>)</argument_list></call></expr>;</return>
	}</block></function>

	<constructor><specifier>private</specifier> <name>TestCommand</name><parameter_list>(<parameter><decl><type><name>Long</name></type> <name>testId</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>isSimple</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>testId</name></name> <operator>=</operator> <name>testId</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>isSimple</name></name> <operator>=</operator> <name>isSimple</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>queueCommand</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></constructor>

	<comment type="line">// All constructors for simpleTestCommand MUST call queueCommand and the end of</comment>
	<comment type="line">// the constructor to add the</comment>
	<comment type="line">// command to the queue.</comment>
	<function><specifier>private</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>queueCommand</name><parameter_list>(<parameter><decl><type><name>Command</name></type> <name>command</name></decl></parameter>)</parameter_list> <block>{
		<decl_stmt><decl><type><name>ThreadContext</name></type> <name>threadContext</name> <init>= <expr><call><name><name>ThreadContext</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>threadContext</name><operator>.</operator><name>addCommand</name></name><argument_list>(<argument><expr><name>command</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<function><specifier>public</specifier> <type><name>void</name></type> <name>execute</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>String</name></type> <name>projectId</name></decl></parameter>)</parameter_list> <block>{
    	<if>if <condition>(<expr><name>testId</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
    		
    		<decl_stmt><decl><type><name>Test</name></type> <name>test</name> <init>= <expr><call><name><name>Test</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><name>testId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    		
			<if>if <condition>(<expr><name>test</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then>
				<block type="pseudo"><expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name>
						<operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"errore Cannot execute test command. Could not find test for id "</literal><operator>+</operator><name>testId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
			<else>else <block>{
				<expr_stmt><expr><call><name>execute</name><argument_list>(<argument><expr><name>test</name></expr></argument>, <argument><expr><name>projectId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></else></if>
		}</block></then> <else>else
			<block type="pseudo"><expr_stmt><expr><call><name>execute</name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>projectId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>

	}</block></function>

	<function_decl><specifier>public</specifier> <specifier>abstract</specifier> <type><name>void</name></type> <name>execute</name><parameter_list>(<parameter><decl><type><name>Test</name></type> <name>simpleTest</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>projectId</name></decl></parameter>)</parameter_list>;</function_decl>

	<class><specifier>protected</specifier> <specifier>static</specifier> class <name>Create</name> <super><extends>extends <name>TestCommand</name></extends></super> <block>{
		<decl_stmt><decl><specifier>private</specifier> <type><name>TestDTO</name></type> <name>testDto</name></decl>;</decl_stmt>
		<decl_stmt><decl><specifier>private</specifier> <type><name>long</name></type> <name>functionId</name></decl>;</decl_stmt>
		<decl_stmt><decl><specifier>private</specifier> <type><name>boolean</name></type> <name>isApiArtifact</name></decl>;</decl_stmt>
		<decl_stmt><decl><specifier>private</specifier> <type><name>boolean</name></type> <name>isReadOnly</name></decl>;</decl_stmt>

		<constructor><specifier>public</specifier> <name>Create</name><parameter_list>( <parameter><decl><type><name>TestDTO</name></type> <name>testDto</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>functionId</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>isApiArtifact</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>isReadOnly</name></decl></parameter>)</parameter_list> <block>{
			<expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><literal type="number">0L</literal></expr></argument>,<argument><expr><name><name>testDto</name><operator>.</operator><name>isSimple</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>this</name><operator>.</operator><name>testDto</name></name>	   <operator>=</operator> <name>testDto</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>this</name><operator>.</operator><name>functionId</name></name>	   <operator>=</operator> <name>functionId</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>this</name><operator>.</operator><name>isApiArtifact</name></name> <operator>=</operator> <name>isApiArtifact</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>this</name><operator>.</operator><name>isReadOnly</name></name>    <operator>=</operator> <name>isReadOnly</name></expr>;</expr_stmt>
		}</block></constructor>

		<function><specifier>public</specifier> <type><name>void</name></type> <name>execute</name><parameter_list>(<parameter><decl><type><name>Test</name></type> <name>test</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>projectId</name></decl></parameter>)</parameter_list> <block>{
			<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"CREATING "</literal><operator>+</operator><name><name>testDto</name><operator>.</operator><name>description</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><operator>new</operator> <call><name>Test</name><argument_list>(<argument><expr><name>testDto</name></expr></argument>, <argument><expr><name>functionId</name></expr></argument>, <argument><expr><name>isApiArtifact</name></expr></argument>, <argument><expr><name>isReadOnly</name></expr></argument>, <argument><expr><name>projectId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></function>
	}</block></class>

	<class><specifier>protected</specifier> <specifier>static</specifier> class <name>Update</name> <super><extends>extends <name>TestCommand</name></extends></super> <block>{

		<decl_stmt><decl><specifier>private</specifier> <type><name>TestDTO</name></type> <name>testDto</name></decl>;</decl_stmt>

		<constructor><specifier>public</specifier> <name>Update</name><parameter_list>( <parameter><decl><type><name>TestDTO</name></type> <name>testDto</name></decl></parameter> )</parameter_list> <block>{
			<expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name><name>testDto</name><operator>.</operator><name>id</name></name></expr></argument>,<argument><expr><name><name>testDto</name><operator>.</operator><name>isSimple</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>this</name><operator>.</operator><name>testDto</name></name> <operator>=</operator> <name>testDto</name></expr>;</expr_stmt>
		}</block></constructor>

		<function><specifier>public</specifier> <type><name>void</name></type> <name>execute</name><parameter_list>(<parameter><decl><type><name>Test</name></type> <name>test</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>projectId</name></decl></parameter>)</parameter_list> <block>{
			<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"UPDATING "</literal><operator>+</operator><call><name><name>test</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>test</name><operator>.</operator><name>update</name></name><argument_list>( <argument><expr><name>testDto</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
		}</block></function>
	}</block></class>

	<class><specifier>protected</specifier> <specifier>static</specifier> class <name>Delete</name> <super><extends>extends <name>TestCommand</name></extends></super> <block>{

		<constructor><specifier>public</specifier> <name>Delete</name><parameter_list>(<parameter><decl><type><name>TestDTO</name></type> <name>testDto</name></decl></parameter>)</parameter_list> <block>{
			<expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name><name>testDto</name><operator>.</operator><name>id</name></name></expr></argument>,<argument><expr><name><name>testDto</name><operator>.</operator><name>isSimple</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		}</block></constructor>

		<function><annotation>@<name>Override</name></annotation>
		<specifier>public</specifier> <type><name>void</name></type> <name>execute</name><parameter_list>(<parameter><decl><type><name>Test</name></type> <name>test</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>projectId</name></decl></parameter>)</parameter_list> <block>{
			<expr_stmt><expr><call><name><name>test</name><operator>.</operator><name>delete</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		}</block></function>
	}</block></class>

}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="CrowdCode-com/crowdcoding/commands/WorkerCommand.java" hash="6931a5ca787c7169b4d384ff2b6c81423ebbba14"><package>package <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>commands</name></name>;</package>

<import>import static <name><name>com</name><operator>.</operator><name>googlecode</name><operator>.</operator><name>objectify</name><operator>.</operator><name>ObjectifyService</name><operator>.</operator><name>ofy</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>entities</name><operator>.</operator><name>Achievement</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>entities</name><operator>.</operator><name>Project</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>entities</name><operator>.</operator><name>Worker</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>servlets</name><operator>.</operator><name>ThreadContext</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>googlecode</name><operator>.</operator><name>objectify</name><operator>.</operator><name>VoidWork</name></name>;</import>

<class><specifier>public</specifier> <specifier>abstract</specifier> class <name>WorkerCommand</name> <super><extends>extends <name>Command</name></extends></super>
<block>{
	<decl_stmt><decl><specifier>protected</specifier> <type><name>String</name></type> <name>workerID</name></decl>;</decl_stmt>

	
	<function><specifier>public</specifier> <specifier>static</specifier> <type><name>WorkerCommand</name></type> <name>awardPoints</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>workerID</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>points</name></decl></parameter>)</parameter_list>
	<block>{ <return>return <expr><operator>new</operator> <call><name>AwardPoints</name><argument_list>(<argument><expr><name>workerID</name></expr></argument>, <argument><expr><name>points</name></expr></argument>)</argument_list></call></expr>;</return> }</block></function>
	
	<function><specifier>public</specifier> <specifier>static</specifier> <type><name>WorkerCommand</name></type> <name>addAchievement</name><parameter_list>(<parameter><decl><type><name>Achievement</name></type> <name>achievement</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>workerID</name></decl></parameter>)</parameter_list>
	<block>{ <return>return <expr><operator>new</operator> <call><name>AddAchievement</name><argument_list>(<argument><expr><name>achievement</name></expr></argument>, <argument><expr><name>workerID</name></expr></argument>)</argument_list></call></expr>;</return> }</block></function>
	

	<function><specifier>public</specifier> <specifier>static</specifier> <type><name>WorkerCommand</name></type> <name>increaseStat</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>workerID</name></decl></parameter>,<parameter><decl><type><name>String</name></type> <name>label</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>increaseAmount</name></decl></parameter>)</parameter_list>
	<block>{ <return>return <expr><operator>new</operator> <call><name>IncreaseStat</name><argument_list>(<argument><expr><name>workerID</name></expr></argument>, <argument><expr><name>label</name></expr></argument>, <argument><expr><name>increaseAmount</name></expr></argument>)</argument_list></call></expr>;</return> }</block></function>


	<constructor><specifier>private</specifier> <name>WorkerCommand</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>workerID</name></decl></parameter>)</parameter_list>
	<block>{
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>workerID</name></name> <operator>=</operator> <name>workerID</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>queueCommand</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></constructor>

	<comment type="line">// All constructors for WorkerCommand MUST call queueCommand by calling the super constructor</comment>
	<function><specifier>private</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>queueCommand</name><parameter_list>(<parameter><decl><type><name>Command</name></type> <name>command</name></decl></parameter>)</parameter_list>
	<block>{
		<decl_stmt><decl><type><name>ThreadContext</name></type> <name>threadContext</name> <init>= <expr><call><name><name>ThreadContext</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>threadContext</name><operator>.</operator><name>addCommand</name></name><argument_list>(<argument><expr><name>command</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="line">// CommandContext.ctx.addCommand(command);</comment>
	}</block></function>
	<function><specifier>public</specifier> <type><name>void</name></type> <name>execute</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>projectId</name></decl></parameter>)</parameter_list>
	<block>{
		<decl_stmt><decl><type><specifier>final</specifier> <name>Project</name></type> <name>project</name> <init>= <expr><call><name><name>Project</name><operator>.</operator><name>Create</name></name><argument_list>(<argument><expr><name>projectId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier>final</specifier> <name>Worker</name></type> <name>worker</name> <init>= <expr><call><name>find</name><argument_list>(<argument><expr><name>workerID</name></expr></argument>, <argument><expr><name>project</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	       	<if>if <condition>(<expr><name>worker</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then>
	    			<block type="pseudo"><expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"errore Cannot execute WorkerCommand. Could not find the worker for WorkerID "</literal>
	    						<operator>+</operator> <name>workerID</name><operator>+</operator><literal type="string">" ("</literal><operator>+</operator><call><name><name>this</name><operator>.</operator><name>getClass</name></name><argument_list>()</argument_list></call><operator>+</operator><literal type="string">")"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
	    		<else>else
	    		<block>{
	    			<expr_stmt><expr><call><name>execute</name><argument_list>(<argument><expr><name>worker</name></expr></argument>, <argument><expr><name>project</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    		}</block></else></if>
	}</block></function>

	<function_decl><specifier>public</specifier> <specifier>abstract</specifier> <type><name>void</name></type> <name>execute</name><parameter_list>(<parameter><decl><type><name>Worker</name></type> <name>worker</name></decl></parameter>, <parameter><decl><type><name>Project</name></type> <name>project</name></decl></parameter>)</parameter_list>;</function_decl>

	<comment type="line">// Finds the specified worker. Returns null if no such worker exists.</comment>
	<comment type="line">// Preconditions:</comment>
	<comment type="line">//                userid != null</comment>
	<function><specifier>protected</specifier> <type><name>Worker</name></type> <name>find</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>userid</name></decl></parameter>, <parameter><decl><type><name>Project</name></type> <name>project</name></decl></parameter>)</parameter_list>
	<block>{
		<return>return <expr><call><name>ofy</name><argument_list>()</argument_list></call><operator>.</operator><call><name>load</name><argument_list>()</argument_list></call><operator>.</operator><call><name>key</name><argument_list>(<argument><expr><call><name><name>Worker</name><operator>.</operator><name>getKey</name></name><argument_list>(<argument><expr><call><name><name>project</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>userid</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>now</name><argument_list>()</argument_list></call></expr>;</return>
	}</block></function>

	<class><specifier>protected</specifier> <specifier>static</specifier> class <name>AwardPoints</name> <super><extends>extends <name>WorkerCommand</name></extends></super>
	<block>{
		<decl_stmt><decl><specifier>private</specifier> <type><name>int</name></type> <name>points</name></decl>;</decl_stmt>

		<constructor><specifier>public</specifier> <name>AwardPoints</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>workerID</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>points</name></decl></parameter>)</parameter_list>
		<block>{
			<expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>workerID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>this</name><operator>.</operator><name>points</name></name> <operator>=</operator> <name>points</name></expr>;</expr_stmt>
		}</block></constructor>

		<function><specifier>public</specifier> <type><name>void</name></type> <name>execute</name><parameter_list>(<parameter><decl><type><name>Worker</name></type> <name>worker</name></decl></parameter>, <parameter><decl><type><name>Project</name></type> <name>project</name></decl></parameter>)</parameter_list>
		<block>{

			<expr_stmt><expr><call><name><name>worker</name><operator>.</operator><name>awardPoints</name></name><argument_list>(<argument><expr><name>points</name></expr></argument>, <argument><expr><call><name><name>project</name><operator>.</operator><name>getID</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></function>

	}</block></class>

	<class><specifier>protected</specifier> <specifier>static</specifier> class <name>IncreaseStat</name> <super><extends>extends <name>WorkerCommand</name></extends></super>
	<block>{
		<decl_stmt><decl><specifier>private</specifier> <type><name>String</name></type> <name>label</name></decl>;</decl_stmt>
		<decl_stmt><decl><specifier>private</specifier> <type><name>int</name></type> <name>increaseAmount</name></decl>;</decl_stmt>

		<constructor><specifier>public</specifier> <name>IncreaseStat</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>workerID</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>label</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>increaseAmount</name></decl></parameter>)</parameter_list>
		<block>{
			<expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>workerID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>this</name><operator>.</operator><name>label</name></name> <operator>=</operator> <name>label</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>this</name><operator>.</operator><name>increaseAmount</name></name> <operator>=</operator> <name>increaseAmount</name></expr>;</expr_stmt>
		}</block></constructor>

		<function><specifier>public</specifier> <type><name>void</name></type> <name>execute</name><parameter_list>(<parameter><decl><type><name>Worker</name></type> <name>worker</name></decl></parameter>, <parameter><decl><type><name>Project</name></type> <name>project</name></decl></parameter>)</parameter_list>
		<block>{

			<expr_stmt><expr><call><name><name>worker</name><operator>.</operator><name>increaseStat</name></name><argument_list>(<argument><expr><name>label</name></expr></argument>,<argument><expr><name>increaseAmount</name></expr></argument>, <argument><expr><call><name><name>project</name><operator>.</operator><name>getID</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<comment type="line">//AchievementManager.getInstance().checkNewAchievement(worker.getUserid(), project.getID(), worker.getHistory());</comment>
		}</block></function>

	}</block></class>
	
	<class><specifier>protected</specifier> <specifier>static</specifier> class <name>AddAchievement</name> <super><extends>extends <name>WorkerCommand</name></extends></super>
	<block>{
		<decl_stmt><decl><specifier>private</specifier> <type><name>Achievement</name></type> <name>_achievement</name></decl>;</decl_stmt>

		<constructor><specifier>public</specifier> <name>AddAchievement</name><parameter_list>(<parameter><decl><type><name>Achievement</name></type> <name>achievement</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>workerID</name></decl></parameter>)</parameter_list>
		<block>{
			<expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>workerID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>this</name><operator>.</operator><name>_achievement</name></name> <operator>=</operator> <name>achievement</name></expr>;</expr_stmt>
		}</block></constructor>

		<function><specifier>public</specifier> <type><name>void</name></type> <name>execute</name><parameter_list>(<parameter><decl><type><name>Worker</name></type> <name>worker</name></decl></parameter>, <parameter><decl><type><name>Project</name></type> <name>project</name></decl></parameter>)</parameter_list>
		<block>{

			<expr_stmt><expr><call><name><name>worker</name><operator>.</operator><name>addAchievement</name></name><argument_list>(<argument><expr><name>_achievement</name></expr></argument>, <argument><expr><call><name><name>project</name><operator>.</operator><name>getID</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></function>

	}</block></class>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="CrowdCode-com/crowdcoding/commands/QuestioningCommand.java" hash="4c6bd961fa306502cb016b49124d8ac83a7233ed"><package>package <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>commands</name></name>;</package>

<import>import static <name><name>com</name><operator>.</operator><name>googlecode</name><operator>.</operator><name>objectify</name><operator>.</operator><name>ObjectifyService</name><operator>.</operator><name>ofy</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>dto</name><operator>.</operator><name>DTO</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>entities</name><operator>.</operator><name>Project</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>entities</name><operator>.</operator><name>Worker</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>dto</name><operator>.</operator><name>ajax</name><operator>.</operator><name>questions</name><operator>.</operator><name>AnswerDTO</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>dto</name><operator>.</operator><name>ajax</name><operator>.</operator><name>questions</name><operator>.</operator><name>CommentDTO</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>dto</name><operator>.</operator><name>ajax</name><operator>.</operator><name>questions</name><operator>.</operator><name>QuestionDTO</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>dto</name><operator>.</operator><name>firebase</name><operator>.</operator><name>notification</name><operator>.</operator><name>NotificationInFirebase</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>entities</name><operator>.</operator><name>artifacts</name><operator>.</operator><name>Artifact</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>entities</name><operator>.</operator><name>artifacts</name><operator>.</operator><name>Function</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>entities</name><operator>.</operator><name>artifacts</name><operator>.</operator><name>Test</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>entities</name><operator>.</operator><name>microtasks</name><operator>.</operator><name>Microtask</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>entities</name><operator>.</operator><name>questions</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>history</name><operator>.</operator><name>HistoryLog</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>history</name><operator>.</operator><name>PropertyChange</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>history</name><operator>.</operator><name>QuestionViewed</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>servlets</name><operator>.</operator><name>ThreadContext</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>crowdcoding</name><operator>.</operator><name>util</name><operator>.</operator><name>FirebaseService</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>appengine</name><operator>.</operator><name>api</name><operator>.</operator><name>datastore</name><operator>.</operator><name>QueryResultIterator</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>googlecode</name><operator>.</operator><name>objectify</name><operator>.</operator><name>Key</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>googlecode</name><operator>.</operator><name>objectify</name><operator>.</operator><name>LoadResult</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>googlecode</name><operator>.</operator><name>objectify</name><operator>.</operator><name>VoidWork</name></name>;</import>

<class><specifier>public</specifier> <specifier>abstract</specifier> class <name>QuestioningCommand</name> <super><extends>extends <name>Command</name></extends></super>
<block>{
	<decl_stmt><decl><specifier>protected</specifier> <type><name>long</name></type> <name>questioningId</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>protected</specifier> <type><name>String</name></type> <name>workerId</name></decl>;</decl_stmt>

	<comment type="block">/* PUBLIC METHODS */</comment>
	<function><specifier>public</specifier> <specifier>static</specifier> <type><name>QuestioningCommand</name></type> <name>createQuestion</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>jsonDTOData</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>workerId</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>workerHandle</name></decl></parameter>)</parameter_list><block>{
		<return>return <expr><operator>new</operator> <call><name>CreateQuestion</name><argument_list>(<argument><expr><name>jsonDTOData</name></expr></argument>, <argument><expr><name>workerId</name></expr></argument>, <argument><expr><name>workerHandle</name></expr></argument>)</argument_list></call></expr>;</return>
	}</block></function>

	<function><specifier>public</specifier> <specifier>static</specifier> <type><name>QuestioningCommand</name></type> <name>createAnswer</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>jsonDTOData</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>workerId</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>workerHandle</name></decl></parameter>)</parameter_list><block>{
		<return>return <expr><operator>new</operator> <call><name>CreateAnswer</name><argument_list>(<argument><expr><name>jsonDTOData</name></expr></argument>, <argument><expr><name>workerId</name></expr></argument>, <argument><expr><name>workerHandle</name></expr></argument>)</argument_list></call></expr>;</return>
	}</block></function>

	<function><specifier>public</specifier> <specifier>static</specifier> <type><name>QuestioningCommand</name></type> <name>createComment</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>jsonDTOData</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>workerId</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>workerHandle</name></decl></parameter>)</parameter_list><block>{
		<return>return <expr><operator>new</operator> <call><name>CreateComment</name><argument_list>(<argument><expr><name>jsonDTOData</name></expr></argument>, <argument><expr><name>workerId</name></expr></argument>, <argument><expr><name>workerHandle</name></expr></argument>)</argument_list></call></expr>;</return>
	}</block></function>

	<function><specifier>public</specifier> <specifier>static</specifier> <type><name>QuestioningCommand</name></type> <name>incrementQuestionAnswers</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>questionId</name></decl></parameter>)</parameter_list><block>{
		<return>return <expr><operator>new</operator> <call><name>IncrementQuestionAnswers</name><argument_list>(<argument><expr><name>questionId</name></expr></argument>)</argument_list></call></expr>;</return>
	}</block></function>

	<function><specifier>public</specifier> <specifier>static</specifier> <type><name>QuestioningCommand</name></type> <name>incrementQuestionComments</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>questionId</name></decl></parameter>)</parameter_list><block>{
		<return>return <expr><operator>new</operator> <call><name>IncrementQuestionComments</name><argument_list>(<argument><expr><name>questionId</name></expr></argument>)</argument_list></call></expr>;</return>
	}</block></function>

	<function><specifier>public</specifier> <specifier>static</specifier> <type><name>QuestioningCommand</name></type> <name>addQuestionView</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>questionId</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>workerId</name></decl></parameter>)</parameter_list> <block>{
		<return>return <expr><operator>new</operator> <call><name>AddQuestionView</name><argument_list>(<argument><expr><name>questionId</name></expr></argument>,<argument><expr><name>workerId</name></expr></argument>)</argument_list></call></expr>;</return>
	}</block></function>

	<function><specifier>public</specifier> <specifier>static</specifier> <type><name>QuestioningCommand</name></type> <name>updateQuestion</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>questionId</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>jsonDTO</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>workerId</name></decl></parameter>)</parameter_list> <block>{
		<return>return <expr><operator>new</operator> <call><name>UpdateQuestion</name><argument_list>(<argument><expr><name>questionId</name></expr></argument>,<argument><expr><name>jsonDTO</name></expr></argument>,<argument><expr><name>workerId</name></expr></argument>)</argument_list></call></expr>;</return>
	}</block></function>

	<function><specifier>public</specifier> <specifier>static</specifier> <type><name>QuestioningCommand</name></type> <name>vote</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>questioningId</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>workerId</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>remove</name></decl></parameter>)</parameter_list><block>{
		<return>return <expr><operator>new</operator> <call><name>Vote</name><argument_list>(<argument><expr><name>questioningId</name></expr></argument>, <argument><expr><name>workerId</name></expr></argument>, <argument><expr><name>remove</name></expr></argument>)</argument_list></call></expr>;</return>
	}</block></function>

	<function><specifier>public</specifier> <specifier>static</specifier> <type><name>QuestioningCommand</name></type> <name>report</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>questioningId</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>workerId</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>remove</name></decl></parameter>)</parameter_list><block>{
		<return>return <expr><operator>new</operator> <call><name>Report</name><argument_list>(<argument><expr><name>questioningId</name></expr></argument>, <argument><expr><name>workerId</name></expr></argument>, <argument><expr><name>remove</name></expr></argument>)</argument_list></call></expr>;</return>
	}</block></function>

	<function><specifier>public</specifier> <specifier>static</specifier> <type><name>QuestioningCommand</name></type> <name>linkArtifact</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>questioningId</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>artifactId</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>remove</name></decl></parameter> )</parameter_list><block>{
		<return>return <expr><operator>new</operator> <call><name>LinkArtifact</name><argument_list>(<argument><expr><name>questioningId</name></expr></argument>, <argument><expr><name>artifactId</name></expr></argument>, <argument><expr><name>remove</name></expr></argument>)</argument_list></call></expr>;</return>
	}</block></function>

	<function><specifier>public</specifier> <specifier>static</specifier> <type><name>QuestioningCommand</name></type> <name>subscribeWorker</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>questioningId</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>workerId</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>remove</name></decl></parameter>)</parameter_list><block>{
		<return>return <expr><operator>new</operator> <call><name>SubscribeWorker</name><argument_list>(<argument><expr><name>questioningId</name></expr></argument>, <argument><expr><name>workerId</name></expr></argument>, <argument><expr><name>remove</name></expr></argument>)</argument_list></call></expr>;</return>
	}</block></function>

	<function><specifier>public</specifier> <specifier>static</specifier> <type><name>QuestioningCommand</name></type> <name>notifySubscribers</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>questioningId</name></decl></parameter>, <parameter><decl><type><name>NotificationInFirebase</name></type> <name>notification</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>excludedWorkerId</name></decl></parameter>)</parameter_list><block>{
		<return>return <expr><operator>new</operator> <call><name>NotifySubscribers</name><argument_list>(<argument><expr><name>questioningId</name></expr></argument>,<argument><expr><name>notification</name></expr></argument>,<argument><expr><name>excludedWorkerId</name></expr></argument>)</argument_list></call></expr>;</return>
	}</block></function>

	<function><specifier>public</specifier> <specifier>static</specifier> <type><name>QuestioningCommand</name></type> <name>setClosed</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>questioningId</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>closed</name></decl></parameter>)</parameter_list><block>{
		<return>return <expr><operator>new</operator> <call><name>SetClosed</name><argument_list>(<argument><expr><name>questioningId</name></expr></argument>,<argument><expr><name>closed</name></expr></argument>)</argument_list></call></expr>;</return>
	}</block></function>



	<constructor><specifier>private</specifier> <name>QuestioningCommand</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>questioningId</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>workerId</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>questioningId</name></name> <operator>=</operator> <name>questioningId</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>workerId</name></name> <operator>=</operator> <name>workerId</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>queueCommand</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></constructor>
	<comment type="line">// All constructors for TestCommand MUST call queueCommand and the end of</comment>
	<comment type="line">// the constructor to add the</comment>
	<comment type="line">// command to the queue.</comment>
	<function><specifier>private</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>queueCommand</name><parameter_list>(<parameter><decl><type><name>Command</name></type> <name>command</name></decl></parameter>)</parameter_list> <block>{
		<decl_stmt><decl><type><name>ThreadContext</name></type> <name>threadContext</name> <init>= <expr><call><name><name>ThreadContext</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>threadContext</name><operator>.</operator><name>addCommand</name></name><argument_list>(<argument><expr><name>command</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="line">//	CommandContext.ctx.addCommand(command);</comment>
	}</block></function>

	<function><specifier>public</specifier> <type><name>void</name></type> <name>execute</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>String</name></type> <name>projectId</name></decl></parameter>)</parameter_list> <block>{
	        	<if>if <condition>(<expr><name>questioningId</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
	    			<decl_stmt><decl><type><name><name>LoadResult</name><argument_list type="generic">&lt;<argument><name>Questioning</name></argument>&gt;</argument_list></name></type> <name>questioningRef</name> <init>= <expr><call><name>find</name><argument_list>(<argument><expr><name>questioningId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	    			<if>if <condition>(<expr><name>questioningRef</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then>
	    				<block type="pseudo"><expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name>
	    						<operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"errore Cannot execute QuestiongCommand. Could not Questioning test for questioningId "</literal>
	    								<operator>+</operator> <name>questioningId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
	    			<else>else <block>{
	    				<decl_stmt><decl><type><name>Questioning</name></type> <name>questioning</name> <init>= <expr><call><name><name>questioningRef</name><operator>.</operator><name>now</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	    				<expr_stmt><expr><call><name>execute</name><argument_list>(<argument><expr><name>questioning</name></expr></argument>, <argument><expr><name>projectId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    			}</block></else></if>
	    		}</block></then> <else>else
	    			<block type="pseudo"><expr_stmt><expr><call><name>execute</name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>projectId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>
	}</block></function>

	<function_decl><specifier>public</specifier> <specifier>abstract</specifier> <type><name>void</name></type> <name>execute</name><parameter_list>(<parameter><decl><type><name>Questioning</name></type> <name>questioning</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>projectId</name></decl></parameter>)</parameter_list>;</function_decl>

	<comment type="line">// Finds the specified microtask. Returns null if no such microtask exists.</comment>
	<function><specifier>protected</specifier> <type><name><name>LoadResult</name><argument_list type="generic">&lt;<argument><name>Questioning</name></argument>&gt;</argument_list></name></type> <name>find</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>questioningId</name></decl></parameter>)</parameter_list>
	<block>{

		<return>return <expr><operator>(</operator><name><name>LoadResult</name><argument_list type="generic">&lt;<argument><name>Questioning</name></argument>&gt;</argument_list></name><operator>)</operator> <call><name>ofy</name><argument_list>()</argument_list></call><operator>.</operator><call><name>load</name><argument_list>()</argument_list></call><operator>.</operator><call><name>key</name><argument_list>(<argument><expr><call><name><name>Questioning</name><operator>.</operator><name>getKey</name></name><argument_list>(<argument><expr><name>questioningId</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

	}</block></function>


	<class><specifier>protected</specifier> <specifier>static</specifier> class <name>CreateQuestion</name> <super><extends>extends <name>QuestioningCommand</name></extends></super> <block>{
		<decl_stmt><decl><specifier>private</specifier> <type><name>String</name></type> <name>jsonDTOData</name></decl>;</decl_stmt>
		<decl_stmt><decl><specifier>private</specifier> <type><name>String</name></type> <name>workerHandle</name></decl>;</decl_stmt>

		<constructor><specifier>public</specifier> <name>CreateQuestion</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>jsonDTOData</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>ownerId</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>ownerHandle</name></decl></parameter>)</parameter_list> <block>{
			<expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><literal type="number">0L</literal></expr></argument>, <argument><expr><name>ownerId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>this</name><operator>.</operator><name>jsonDTOData</name></name><operator>=</operator> <name>jsonDTOData</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>this</name><operator>.</operator><name>workerHandle</name></name> <operator>=</operator> <name>ownerHandle</name></expr>;</expr_stmt>
		}</block></constructor>

		<function><specifier>public</specifier> <type><name>void</name></type> <name>execute</name><parameter_list>(<parameter><decl><type><name>Questioning</name></type> <name>questioning</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>projectId</name></decl></parameter>)</parameter_list> <block>{

			<decl_stmt><decl><type><name>QuestionDTO</name></type> <name>dto</name><init>=<expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
			<try>try <block>{
				<expr_stmt><expr><name>dto</name> <operator>=</operator> <operator>(</operator><name>QuestionDTO</name><operator>)</operator> <call><name><name>DTO</name><operator>.</operator><name>read</name></name><argument_list>(<argument><expr><name>jsonDTOData</name></expr></argument>, <argument><expr><name><name>QuestionDTO</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
				<comment type="line">// TODO Auto-generated catch block</comment>
				<expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			}</block></catch></try>
			<expr_stmt><expr><operator>new</operator> <call><name>Question</name><argument_list>(<argument><expr><name><name>dto</name><operator>.</operator><name>title</name></name></expr></argument>, <argument><expr><name><name>dto</name><operator>.</operator><name>text</name></name></expr></argument>, <argument><expr><name><name>dto</name><operator>.</operator><name>tags</name></name></expr></argument>, <argument><expr><name><name>dto</name><operator>.</operator><name>artifactId</name></name></expr></argument>, <argument><expr><name>workerId</name></expr></argument>, <argument><expr><name>workerHandle</name></expr></argument>, <argument><expr><name>projectId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></function>
	}</block></class>

	<class><specifier>protected</specifier> <specifier>static</specifier> class <name>CreateAnswer</name> <super><extends>extends <name>QuestioningCommand</name></extends></super> <block>{
		<decl_stmt><decl><specifier>private</specifier> <type><name>String</name></type> <name>jsonDTOData</name></decl>;</decl_stmt>
		<decl_stmt><decl><specifier>private</specifier> <type><name>String</name></type> <name>workerHandle</name></decl>;</decl_stmt>

		<constructor><specifier>public</specifier> <name>CreateAnswer</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>jsonDTOData</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>ownerId</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>ownerHandle</name></decl></parameter>)</parameter_list> <block>{
			<expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><literal type="number">0L</literal></expr></argument>, <argument><expr><name>ownerId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>this</name><operator>.</operator><name>jsonDTOData</name></name><operator>=</operator><name>jsonDTOData</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>this</name><operator>.</operator><name>workerHandle</name></name> <operator>=</operator> <name>ownerHandle</name></expr>;</expr_stmt>
		}</block></constructor>

		<function><specifier>public</specifier> <type><name>void</name></type> <name>execute</name><parameter_list>(<parameter><decl><type><name>Questioning</name></type> <name>questioning</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>projectId</name></decl></parameter>)</parameter_list> <block>{

			<decl_stmt><decl><type><name>AnswerDTO</name></type> <name>dto</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
			<try>try <block>{
				<expr_stmt><expr><name>dto</name> <operator>=</operator> <operator>(</operator><name>AnswerDTO</name><operator>)</operator><call><name><name>DTO</name><operator>.</operator><name>read</name></name><argument_list>(<argument><expr><name>jsonDTOData</name></expr></argument>, <argument><expr><name><name>AnswerDTO</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><operator>new</operator> <call><name>Answer</name><argument_list>(<argument><expr><name><name>dto</name><operator>.</operator><name>text</name></name></expr></argument>, <argument><expr><name><name>dto</name><operator>.</operator><name>questionId</name></name></expr></argument>, <argument><expr><name>workerId</name></expr></argument>, <argument><expr><name>workerHandle</name></expr></argument>, <argument><expr><name>projectId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
				<comment type="line">// TODO Auto-generated catch block</comment>
				<expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			}</block></catch></try>
		}</block></function>
	}</block></class>

	<class><specifier>protected</specifier> <specifier>static</specifier> class <name>CreateComment</name> <super><extends>extends <name>QuestioningCommand</name></extends></super> <block>{
		<decl_stmt><decl><specifier>private</specifier> <type><name>String</name></type> <name>jsonDTOData</name></decl>;</decl_stmt>
		<decl_stmt><decl><specifier>private</specifier> <type><name>String</name></type> <name>workerHandle</name></decl>;</decl_stmt>

		<constructor><specifier>public</specifier> <name>CreateComment</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>jsonDTOData</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>ownerId</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>ownerHandle</name></decl></parameter>)</parameter_list> <block>{
			<expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><literal type="number">0L</literal></expr></argument>, <argument><expr><name>ownerId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>this</name><operator>.</operator><name>jsonDTOData</name></name><operator>=</operator><name>jsonDTOData</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>this</name><operator>.</operator><name>workerHandle</name></name> <operator>=</operator> <name>ownerHandle</name></expr>;</expr_stmt>

		}</block></constructor>

		<function><specifier>public</specifier> <type><name>void</name></type> <name>execute</name><parameter_list>(<parameter><decl><type><name>Questioning</name></type> <name>questioning</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>projectId</name></decl></parameter>)</parameter_list> <block>{

			<decl_stmt><decl><type><name>CommentDTO</name></type> <name>dto</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
			<try>try <block>{
				<expr_stmt><expr><name>dto</name> <operator>=</operator> <operator>(</operator><name>CommentDTO</name><operator>)</operator><call><name><name>DTO</name><operator>.</operator><name>read</name></name><argument_list>(<argument><expr><name>jsonDTOData</name></expr></argument>, <argument><expr><name><name>CommentDTO</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><operator>new</operator> <call><name>Comment</name><argument_list>(<argument><expr><name><name>dto</name><operator>.</operator><name>text</name></name></expr></argument>, <argument><expr><name><name>dto</name><operator>.</operator><name>questionId</name></name></expr></argument>, <argument><expr><name><name>dto</name><operator>.</operator><name>answerId</name></name></expr></argument>, <argument><expr><name>workerId</name></expr></argument>, <argument><expr><name>workerHandle</name></expr></argument>, <argument><expr><name>projectId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
				<comment type="line">// TODO Auto-generated catch block</comment>
				<expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			}</block></catch></try>
		}</block></function>
	}</block></class>

	<class><specifier>protected</specifier> <specifier>static</specifier> class <name>UpdateQuestion</name> <super><extends>extends <name>QuestioningCommand</name></extends></super> <block>{
		<decl_stmt><decl><specifier>private</specifier> <type><name>String</name></type> <name>jsonDTO</name></decl>;</decl_stmt>

		<constructor><specifier>public</specifier> <name>UpdateQuestion</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>questionId</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>dto</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>workerId</name></decl></parameter>)</parameter_list> <block>{
			<expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>questionId</name></expr></argument>, <argument><expr><name>workerId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>this</name><operator>.</operator><name>jsonDTO</name></name> <operator>=</operator> <name>dto</name></expr>;</expr_stmt>
		}</block></constructor>

		<function><specifier>public</specifier> <type><name>void</name></type> <name>execute</name><parameter_list>(<parameter><decl><type><name>Questioning</name></type> <name>questioning</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>projectId</name></decl></parameter>)</parameter_list> <block>{

			<decl_stmt><decl><type><name>Question</name></type> <name>question</name> <init>= <expr><operator>(</operator><name>Question</name><operator>)</operator> <name>questioning</name></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>QuestionDTO</name></type> <name>dto</name><init>=<expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
			<try>try <block>{
				<expr_stmt><expr><name>dto</name> <operator>=</operator> <operator>(</operator><name>QuestionDTO</name><operator>)</operator> <call><name><name>DTO</name><operator>.</operator><name>read</name></name><argument_list>(<argument><expr><name>jsonDTO</name></expr></argument>, <argument><expr><name><name>QuestionDTO</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>question</name><operator>.</operator><name>setTitle</name></name><argument_list>(<argument><expr><name><name>dto</name><operator>.</operator><name>title</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>question</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><name><name>dto</name><operator>.</operator><name>text</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>question</name><operator>.</operator><name>setTags</name></name><argument_list>(<argument><expr><name><name>dto</name><operator>.</operator><name>tags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>question</name><operator>.</operator><name>save</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>question</name><operator>.</operator><name>storeVersionToFirebase</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
				<comment type="line">// TODO Auto-generated catch block</comment>
				<expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			}</block></catch></try>

		}</block></function>
	}</block></class>


	<class><specifier>protected</specifier> <specifier>static</specifier> class <name>AddQuestionView</name> <super><extends>extends <name>QuestioningCommand</name></extends></super> <block>{

		<decl_stmt><decl><specifier>private</specifier> <type><name>long</name></type> <name>questionId</name></decl>;</decl_stmt>		
		<constructor><specifier>public</specifier> <name>AddQuestionView</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>questionId</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>workerId</name></decl></parameter>)</parameter_list> <block>{
			<expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><literal type="number">0L</literal></expr></argument>,<argument><expr><name>workerId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>this</name><operator>.</operator><name>questionId</name></name> <operator>=</operator> <name>questionId</name></expr>;</expr_stmt>
		}</block></constructor>

		<function><specifier>public</specifier> <type><name>void</name></type> <name>execute</name><parameter_list>(<parameter><decl><type><name>Questioning</name></type> <name>questioning</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>projectId</name></decl></parameter>)</parameter_list> <block>{
			<expr_stmt><expr><call><name><name>HistoryLog</name><operator>.</operator><name>Init</name></name><argument_list>(<argument><expr><name>projectId</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>addEvent</name><argument_list>(<argument><expr><operator>new</operator> <call><name>QuestionViewed</name><argument_list>(<argument><expr><name>questionId</name></expr></argument>,<argument><expr><name>workerId</name></expr></argument>,<argument><expr><name>projectId</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></function>
	}</block></class>

	<class><specifier>protected</specifier> <specifier>static</specifier> class <name>IncrementQuestionAnswers</name> <super><extends>extends <name>QuestioningCommand</name></extends></super> <block>{

		<constructor><specifier>public</specifier> <name>IncrementQuestionAnswers</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>questionId</name></decl></parameter>)</parameter_list> <block>{
			<expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>questionId</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></constructor>

		<function><specifier>public</specifier> <type><name>void</name></type> <name>execute</name><parameter_list>(<parameter><decl><type><name>Questioning</name></type> <name>questioning</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>projectId</name></decl></parameter>)</parameter_list> <block>{
			
			<decl_stmt><decl><type><name>Question</name></type> <name>question</name> <init>= <expr><operator>(</operator><name>Question</name><operator>)</operator> <name>questioning</name></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name><name>question</name><operator>.</operator><name>incrementAnswers</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>question</name><operator>.</operator><name>save</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		}</block></function>
	}</block></class>

	<class><specifier>protected</specifier> <specifier>static</specifier> class <name>IncrementQuestionComments</name> <super><extends>extends <name>QuestioningCommand</name></extends></super> <block>{

		<constructor><specifier>public</specifier> <name>IncrementQuestionComments</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>questionId</name></decl></parameter>)</parameter_list> <block>{
			<expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>questionId</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></constructor>

		<function><specifier>public</specifier> <type><name>void</name></type> <name>execute</name><parameter_list>(<parameter><decl><type><name>Questioning</name></type> <name>questioning</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>projectId</name></decl></parameter>)</parameter_list> <block>{

			<decl_stmt><decl><type><name>Question</name></type> <name>question</name> <init>= <expr><operator>(</operator><name>Question</name><operator>)</operator> <name>questioning</name></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name><name>question</name><operator>.</operator><name>incrementComments</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>question</name><operator>.</operator><name>save</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		}</block></function>
	}</block></class>


	<class><specifier>protected</specifier> <specifier>static</specifier> class <name>Vote</name> <super><extends>extends <name>QuestioningCommand</name></extends></super> <block>{

		<decl_stmt><decl><specifier>private</specifier> <type><name>boolean</name></type> <name>remove</name></decl>;</decl_stmt>

		<constructor><specifier>public</specifier> <name>Vote</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>questioningId</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>workerId</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>remove</name></decl></parameter>)</parameter_list> <block>{
			<expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>questioningId</name></expr></argument>, <argument><expr><name>workerId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>this</name><operator>.</operator><name>remove</name></name><operator>=</operator><name>remove</name></expr>;</expr_stmt>

		}</block></constructor>

		<function><specifier>public</specifier> <type><name>void</name></type> <name>execute</name><parameter_list>(<parameter><decl><type><name>Questioning</name></type> <name>questioning</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>projectId</name></decl></parameter>)</parameter_list> <block>{

			<if>if<condition>(<expr><name><name>this</name><operator>.</operator><name>remove</name></name></expr>)</condition><then>
				<block type="pseudo"><expr_stmt><expr><call><name><name>questioning</name><operator>.</operator><name>removeVote</name></name><argument_list>(<argument><expr><name>workerId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
			<else>else
				<block type="pseudo"><expr_stmt><expr><call><name><name>questioning</name><operator>.</operator><name>addVote</name></name><argument_list>(<argument><expr><name>workerId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>

		}</block></function>
	}</block></class>

	<class><specifier>protected</specifier> <specifier>static</specifier> class <name>Report</name> <super><extends>extends <name>QuestioningCommand</name></extends></super> <block>{

		<decl_stmt><decl><specifier>private</specifier> <type><name>boolean</name></type> <name>remove</name></decl>;</decl_stmt>

		<constructor><specifier>public</specifier> <name>Report</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>questioningId</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>workerId</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>remove</name></decl></parameter>)</parameter_list> <block>{
			<expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>questioningId</name></expr></argument>, <argument><expr><name>workerId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>this</name><operator>.</operator><name>remove</name></name><operator>=</operator><name>remove</name></expr>;</expr_stmt>

		}</block></constructor>

		<function><specifier>public</specifier> <type><name>void</name></type> <name>execute</name><parameter_list>(<parameter><decl><type><name>Questioning</name></type> <name>questioning</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>projectId</name></decl></parameter>)</parameter_list> <block>{

			<if>if<condition>(<expr><name><name>this</name><operator>.</operator><name>remove</name></name></expr>)</condition><then>
				<block type="pseudo"><expr_stmt><expr><call><name><name>questioning</name><operator>.</operator><name>removeReport</name></name><argument_list>(<argument><expr><name>workerId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
			<else>else
				<block type="pseudo"><expr_stmt><expr><call><name><name>questioning</name><operator>.</operator><name>addReport</name></name><argument_list>(<argument><expr><name>workerId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>

		}</block></function>
	}</block></class>


	<class><specifier>protected</specifier> <specifier>static</specifier> class <name>LinkArtifact</name> <super><extends>extends <name>QuestioningCommand</name></extends></super> <block>{

		<decl_stmt><decl><specifier>private</specifier> <type><name>boolean</name></type> <name>remove</name></decl>;</decl_stmt>
		<decl_stmt><decl><specifier>private</specifier> <type><name>String</name></type> <name>artifactId</name></decl>;</decl_stmt>

		<constructor><specifier>public</specifier> <name>LinkArtifact</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>questioningId</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>artifactId</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>remove</name></decl></parameter>)</parameter_list> <block>{
			<expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>questioningId</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>this</name><operator>.</operator><name>artifactId</name></name> <operator>=</operator> <name>artifactId</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>this</name><operator>.</operator><name>remove</name></name>     <operator>=</operator> <name>remove</name></expr>;</expr_stmt>
		}</block></constructor>

		<function><specifier>public</specifier> <type><name>void</name></type> <name>execute</name><parameter_list>(<parameter><decl><type><name>Questioning</name></type> <name>questioning</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>projectId</name></decl></parameter>)</parameter_list> <block>{
			<if>if<condition>(<expr><name><name>this</name><operator>.</operator><name>remove</name></name></expr>)</condition><then>
				<block type="pseudo"><expr_stmt><expr><operator>(</operator><operator>(</operator><name>Question</name><operator>)</operator><name>questioning</name><operator>)</operator><operator>.</operator><call><name>removeArtifactLink</name><argument_list>(<argument><expr><name>artifactId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
			<else>else
				<block type="pseudo"><expr_stmt><expr><operator>(</operator><operator>(</operator><name>Question</name><operator>)</operator><name>questioning</name><operator>)</operator><operator>.</operator><call><name>addArtifactLink</name><argument_list>(<argument><expr><name>artifactId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>

		}</block></function>
	}</block></class>

	<class><specifier>protected</specifier> <specifier>static</specifier> class <name>SubscribeWorker</name> <super><extends>extends <name>QuestioningCommand</name></extends></super> <block>{

		<decl_stmt><decl><specifier>private</specifier> <type><name>boolean</name></type> <name>remove</name></decl>;</decl_stmt>

		<constructor><specifier>public</specifier> <name>SubscribeWorker</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>questioningId</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>workerId</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>remove</name></decl></parameter>)</parameter_list> <block>{
			<expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>questioningId</name></expr></argument>, <argument><expr><name>workerId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>this</name><operator>.</operator><name>remove</name></name><operator>=</operator><name>remove</name></expr>;</expr_stmt>
		}</block></constructor>

		<function><specifier>public</specifier> <type><name>void</name></type> <name>execute</name><parameter_list>(<parameter><decl><type><name>Questioning</name></type> <name>questioning</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>projectId</name></decl></parameter>)</parameter_list> <block>{
			<if>if<condition>(<expr><name><name>this</name><operator>.</operator><name>remove</name></name></expr>)</condition><then>
				<block type="pseudo"><expr_stmt><expr><operator>(</operator><operator>(</operator><name>Question</name><operator>)</operator><name>questioning</name><operator>)</operator><operator>.</operator><call><name>unsubscribeWorker</name><argument_list>(<argument><expr><name>workerId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
			<else>else
				<block type="pseudo"><expr_stmt><expr><operator>(</operator><operator>(</operator><name>Question</name><operator>)</operator><name>questioning</name><operator>)</operator><operator>.</operator><call><name>subscribeWorker</name><argument_list>(<argument><expr><name>workerId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>

		}</block></function>
	}</block></class>



	<class><specifier>protected</specifier> <specifier>static</specifier> class <name>NotifySubscribers</name> <super><extends>extends <name>QuestioningCommand</name></extends></super> <block>{


		<decl_stmt><decl><specifier>private</specifier> <type><name>NotificationInFirebase</name></type> <name>notification</name></decl>;</decl_stmt>

		<constructor><specifier>public</specifier> <name>NotifySubscribers</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>questioningId</name></decl></parameter>, <parameter><decl><type><name>NotificationInFirebase</name></type> <name>notification</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>workerId</name></decl></parameter>)</parameter_list> <block>{
			<expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>questioningId</name></expr></argument>, <argument><expr><name>workerId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>this</name><operator>.</operator><name>notification</name></name> <operator>=</operator> <name>notification</name></expr>;</expr_stmt>
		}</block></constructor>

		<function><specifier>public</specifier> <type><name>void</name></type> <name>execute</name><parameter_list>(<parameter><decl><type><name>Questioning</name></type> <name>questioning</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>projectId</name></decl></parameter>)</parameter_list> <block>{
			<expr_stmt><expr><call><name><name>questioning</name><operator>.</operator><name>notifySubscribers</name></name><argument_list>(<argument><expr><name>notification</name></expr></argument>, <argument><expr><name>workerId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></function>
	}</block></class>

	<class><specifier>protected</specifier> <specifier>static</specifier> class <name>SetClosed</name> <super><extends>extends <name>QuestioningCommand</name></extends></super> <block>{

		<decl_stmt><decl><specifier>private</specifier> <type><name>boolean</name></type> <name>closed</name></decl>;</decl_stmt>

		<constructor><specifier>public</specifier> <name>SetClosed</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>questioningId</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>closed</name></decl></parameter>)</parameter_list> <block>{
			<expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>questioningId</name></expr></argument>,<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>this</name><operator>.</operator><name>closed</name></name> <operator>=</operator> <name>closed</name></expr>;</expr_stmt>
		}</block></constructor>

		<function><specifier>public</specifier> <type><name>void</name></type> <name>execute</name><parameter_list>(<parameter><decl><type><name>Questioning</name></type> <name>questioning</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>projectId</name></decl></parameter>)</parameter_list> <block>{
			<decl_stmt><decl><type><name>Question</name></type> <name>question</name> <init>= <expr><operator>(</operator><name>Question</name><operator>)</operator> <name>questioning</name></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name><name>question</name><operator>.</operator><name>setClosed</name></name><argument_list>(<argument><expr><name>closed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></function>

	}</block></class>

}</block></class>
</unit>

</unit>
